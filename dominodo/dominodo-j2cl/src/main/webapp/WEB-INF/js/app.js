this.CLOSURE_UNCOMPILED_DEFINES = {"goog.ENABLE_DEBUG_LOADER":false}///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/java/lang/jre.js
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * This file provides the @defines for JRE configuration options.
 * See InternalPreconditions.java for details.
 */

goog.provide('jre');

/** @define {string} */
goog.define('jre.classMetadata', 'SIMPLE');
/** @define {string} */
goog.define('jre.checkedMode', goog.DEBUG ? 'ENABLED' : 'DISABLED');


goog.provide('jre.checks');

/** @define {string} */
goog.define('jre.checks.checkLevel', 'NORMAL');
/** @define {string} */
goog.define('jre.checks.bounds', 'AUTO');
/** @define {string} */
goog.define('jre.checks.api', 'AUTO');
/** @define {string} */
goog.define('jre.checks.numeric', 'AUTO');
/** @define {string} */
goog.define('jre.checks.type', 'AUTO');
/** @define {string} */
goog.define('jre.checks.critical', 'AUTO');


goog.provide('jre.logging');

/** @define {string} */
goog.define('jre.logging.logLevel', goog.DEBUG ? 'ALL' : 'SEVERE');
/** @define {string} */
goog.define('jre.logging.simpleConsoleHandler', "ENABLED");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/Constructor.js
goog.loadModule("'use strict'"+'// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.module("javaemul.internal.Constructor");\n\n/**\n * @typedef {function(new:?,...):undefined}\n */\nvar ctor;\n\nexports\x3dctor;\n');

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Util.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('nativebootstrap.Util$impl');\n\n\nconst Reflect \x3d goog.require('goog.reflect');\nconst jre \x3d goog.require('jre');\nconst Constructor \x3d goog.require('javaemul.internal.Constructor');\n\n\n/**\n * Miscellaneous utility functions.\n */\nclass Util {\n  /**\n   * Return the value defined by a goog.define or the default value\n   * if it is not defined.\n   *\n   * @param {string} name\n   * @param {?string\x3d} opt_defaultValue\n   * @return {?string}\n   * @public\n   */\n  static $getDefine(name, opt_defaultValue) {\n    // Default the optional param. Note that we are not using the common\n    // 'opt_value || default_value' pattern otherwise that would replace\n    // empty string with null value.\n    var defaultValue \x3d opt_defaultValue \x3d\x3d null ? null : opt_defaultValue;\n    var rv \x3d goog.getObjectByName(name);\n    return rv \x3d\x3d null ? defaultValue : String(rv);\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @param {string} name\n   * @public\n   */\n  static $setClassMetadata(ctor, name) {\n    ctor.prototype.$$classMetadata \x3d [name, Util.TYPE_CLASS];\n  }\n\n  /**\n   * // TODO(b/79389970): change ctor to Function\n   * @param {Object} ctor\n   * @param {string} name\n   * @public\n   */\n  static $setClassMetadataForInterface(ctor, name) {\n    ctor.prototype.$$classMetadata \x3d [name, Util.TYPE_INTERFACE];\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @param {string} name\n   * @public\n   */\n  static $setClassMetadataForEnum(ctor, name) {\n    ctor.prototype.$$classMetadata \x3d [name, Util.TYPE_ENUM];\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @param {string} name\n   * @param {string} shortName\n   * @public\n   */\n  static $setClassMetadataForPrimitive(ctor, name, shortName) {\n    ctor.prototype.$$classMetadata \x3d [name, Util.TYPE_PRIMITIVE, shortName];\n    // Primitives also marked separately as $isPrimitiveType works even without\n    // class metadata.\n    ctor.prototype.$$isPrimitive \x3d true;\n  }\n\n  /**\n   * Returns whether the provided ctor represents primitive type.\n   * @param {Constructor} ctor\n   * @return {boolean}\n   * @public\n   */\n  static $isPrimitiveType(ctor) {\n    return !!ctor \x26\x26 ctor.prototype.$$isPrimitive;\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @return {string}\n   * @public\n   */\n  static $extractClassName(ctor) {\n    if (jre.classMetadata \x3d\x3d 'SIMPLE') {\n      return ctor.prototype.$$classMetadata[0];\n    } else if (jre.classMetadata \x3d\x3d 'STRIPPED') {\n      return Util.$getGeneratedClassName_(ctor);\n    } else {\n      throw new Error('Incorrect value: ' + jre.classMetadata);\n    }\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @return {string}\n   * @public\n   */\n  static $extractPrimitiveShortName(ctor) {\n    if (jre.classMetadata \x3d\x3d 'SIMPLE') {\n      return ctor.prototype.$$classMetadata[2];\n    } else if (jre.classMetadata \x3d\x3d 'STRIPPED') {\n      return Util.$getGeneratedClassName_(ctor);\n    } else {\n      throw new Error('Incorrect value: ' + jre.classMetadata);\n    }\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @return {string}\n   * @private\n   */\n  static $getGeneratedClassName_(ctor) {\n    return Reflect.cache(ctor.prototype, '$$generatedClassName', function() {\n      // valueOf hack makes JsCompiler think that this is side effect free.\n      return 'Class$obf_' + {\n        valueOf() {\n          return ++Util.$nextUniqId_;\n        }\n      };\n    });\n  }\n\n  /**\n   * @param {Constructor} ctor\n   * @return {number}\n   * @public\n   */\n  static $extractClassType(ctor) {\n    if (jre.classMetadata \x3d\x3d 'SIMPLE') {\n      return ctor.prototype.$$classMetadata[1];\n    } else if (jre.classMetadata \x3d\x3d 'STRIPPED') {\n      return Util.TYPE_CLASS;\n    } else {\n      throw new Error('Incorrect value: ' + jre.classMetadata);\n    }\n  }\n\n  /**\n   * Returns whether the \"from\" class can be cast to the \"to\" class.\n   *\n   * Unlike instanceof, this function operates on classes instead of\n   * instances.\n   * @param {Function} fromClass\n   * @param {Function} toClass\n   * @return {boolean}\n   * @public\n   */\n  static $canCastClass(fromClass, toClass) {\n    return (\n        fromClass !\x3d null \x26\x26\n        (fromClass \x3d\x3d toClass || fromClass.prototype instanceof toClass));\n  }\n\n  /**\n   * Create a function that applies the specified jsFunctionMethod on itself,\n   * and copies `instance`' properties to itself.\n   *\n   * @param {T} jsFunctionMethod\n   * @param {U} instance\n   * @param {function(U,T):void} copyMethod\n   * @return {!T}\n   * @template T,U\n   * @public\n   */\n  static $makeLambdaFunction(jsFunctionMethod, instance, copyMethod) {\n    var lambda \x3d function() {\n      return jsFunctionMethod.apply(lambda, arguments);\n    };\n    copyMethod(instance, lambda);\n    return lambda;\n  }\n\n  /**\n   * Helper to accept a reference to something that should be synchronized on.\n   * No synchronization is actually necessary since JS is singlethreaded but\n   * it's important that the parameter be passed since the accessing of it\n   * may have side effects that should be preserved.\n   *\n   * @param {*} value The value to synchronize on.\n   * @public\n   */\n  static $synchronized(value) {}\n\n  /**\n   * Runs inline static field initializers.\n   * @public\n   */\n  static $clinit() {}\n\n  /**\n   * Helper function used for metadata obfuscation, string replacement passes\n   * can be targeted at this bottleneck.\n   *\n   * TODO(b/31782198): Because J2ClPass runs before ReplaceStrings and inlines\n   * functions, the ReplaceStrings pass never sees calls to $setClassMetadata,\n   * which makes this function neccessary.\n   *\n   * @param {string} className\n   * @return {string}\n   */\n  static $makeClassName(className) {\n    return className;\n  }\n\n  /**\n   * Helper function used for enum obfuscation, string replacement passes\n   * can be targeted at this bottleneck.\n   *\n   * @param {string} enumName\n   * @return {string}\n   */\n  static $makeEnumName(enumName) {\n    return enumName;\n  }\n}\n\n\n/**\n * @private {number}\n */\nUtil.$nextUniqId_ \x3d 1000;\n\n/**\n * @type {number}\n */\nUtil.TYPE_CLASS \x3d 0;\n\n/**\n * @type {number}\n */\nUtil.TYPE_INTERFACE \x3d 1;\n\n/**\n * @type {number}\n */\nUtil.TYPE_ENUM \x3d 2;\n\n/**\n * @type {number}\n */\nUtil.TYPE_PRIMITIVE \x3d 3;\n\n\n\n/**\n * Exported class.\n */\nexports \x3d Util;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Util.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst Util \x3d goog.require('nativebootstrap.Util$impl');\nexports \x3d Util;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/HasSerializableTypeMarker$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.HasSerializableTypeMarker$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.HasSerializableTypeMarker.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('*'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHasSerializableTypeMarker$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/HasSerializableTypeMarker$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.HasSerializableTypeMarker$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.HasSerializableTypeMarker.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.io.HasSerializableTypeMarker.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AutoCloseable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AutoCloseable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.AutoCloseable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.lang.AutoCloseable.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass AutoCloseable {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {AutoCloseable}\n   * @public\n   */\n  static $adapt(fn) {\n    AutoCloseable.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_AutoCloseable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_lang_AutoCloseable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_AutoCloseable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AutoCloseable.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.lang.AutoCloseable.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AutoCloseable, $Util.$makeClassName('java.lang.AutoCloseable'));\n\n\nAutoCloseable.$markImplementor(/** @type {Function} */ (AutoCloseable));\n\n\nexports \x3d AutoCloseable; \n//# sourceMappingURL\x3dAutoCloseable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Object.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Object.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Object$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Constructor \x3d goog.forwardDeclare('javaemul.internal.Constructor');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.Constructor.$Overlay$impl');\nlet HashCodes \x3d goog.forwardDeclare('javaemul.internal.HashCodes$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\nclass j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Object()'.\n   * @return {!*}\n   * @public\n   */\n  static $create__() {\n    j_l_Object.$clinit();\n    let $instance \x3d new j_l_Object();\n    $instance.$ctor__java_lang_Object__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Object()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Object__() {\n  }\n  \n  /**\n   * @param {*} that\n   * @return {boolean}\n   * @public\n   */\n  equals(that) {\n    return $Equality.$same(this, that);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return HashCodes.m_getObjectIdentityHashCode__java_lang_Object(this);\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return j_l_String.m_valueOf__java_lang_Object(this.m_getClass__().m_getName__()) + \"@\" + j_l_String.m_valueOf__java_lang_Object(Integer.m_toHexString__int(this.hashCode()));\n  }\n  \n  /**\n   * @return {Class\x3c?\x3e}\n   * @public\n   */\n  m_getClass__() {\n    return Class.$get($Overlay.m_of__java_lang_Object(this));\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    j_l_Object.$clinit();\n    return !$Equality.$same(instance, null);\n  }\n  \n  /**\n   * @param {Constructor} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    j_l_Object.$clinit();\n    return !$Util.$isPrimitiveType(classConstructor);\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @public\n   */\n  static $clinit() {\n    j_l_Object.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Overlay \x3d goog.module.get('javaemul.internal.Constructor.$Overlay$impl');\n    HashCodes \x3d goog.module.get('javaemul.internal.HashCodes$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(j_l_Object, $Util.$makeClassName('java.lang.Object'));\n\n\n\n\nexports \x3d j_l_Object; \n//# sourceMappingURL\x3dObject.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AutoCloseable$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AutoCloseable$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.AutoCloseable.$LambdaAdaptor$impl');\n\n\nconst AutoCloseable \x3d goog.require('java.lang.AutoCloseable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {AutoCloseable}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__java_lang_AutoCloseable_$LambdaAdaptor;\n    this.$ctor__java_lang_AutoCloseable_$LambdaAdaptor__java_lang_AutoCloseable_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AutoCloseable_$LambdaAdaptor__java_lang_AutoCloseable_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_lang_AutoCloseable_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n    {\n      let $function \x3d this.f_$$fn__java_lang_AutoCloseable_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.lang.AutoCloseable$$LambdaAdaptor'));\n\n\nAutoCloseable.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dAutoCloseable$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AutoCloseable$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AutoCloseable$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.AutoCloseable.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AutoCloseable \x3d goog.require('java.lang.AutoCloseable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.lang.AutoCloseable.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AutoCloseable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AutoCloseable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.AutoCloseable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.lang.AutoCloseable.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar AutoCloseable \x3d goog.require('java.lang.AutoCloseable$impl');\nexports \x3d AutoCloseable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Closeable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Closeable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.Closeable$impl');\n\n\nconst AutoCloseable \x3d goog.require('java.lang.AutoCloseable$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.io.Closeable.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @extends {AutoCloseable}\n */\nclass Closeable {\n  /**\n   * @abstract\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {Closeable}\n   * @public\n   */\n  static $adapt(fn) {\n    Closeable.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    AutoCloseable.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_io_Closeable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_io_Closeable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_io_Closeable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Closeable.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.io.Closeable.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Closeable, $Util.$makeClassName('java.io.Closeable'));\n\n\nCloseable.$markImplementor(/** @type {Function} */ (Closeable));\n\n\nexports \x3d Closeable; \n//# sourceMappingURL\x3dCloseable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Closeable$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Closeable$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.Closeable.$LambdaAdaptor$impl');\n\n\nconst Closeable \x3d goog.require('java.io.Closeable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {Closeable}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__java_io_Closeable_$LambdaAdaptor;\n    this.$ctor__java_io_Closeable_$LambdaAdaptor__java_io_Closeable_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_Closeable_$LambdaAdaptor__java_io_Closeable_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_io_Closeable_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n    {\n      let $function \x3d this.f_$$fn__java_io_Closeable_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.io.Closeable$$LambdaAdaptor'));\n\n\nCloseable.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dCloseable$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Closeable$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Closeable$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.Closeable.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Closeable \x3d goog.require('java.io.Closeable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.io.Closeable.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Closeable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Closeable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.Closeable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AutoCloseable \x3d goog.require('java.lang.AutoCloseable');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.io.Closeable.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar Closeable \x3d goog.require('java.io.Closeable$impl');\nexports \x3d Closeable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Flushable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Flushable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.Flushable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.io.Flushable.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass Flushable {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_flush__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {Flushable}\n   * @public\n   */\n  static $adapt(fn) {\n    Flushable.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_io_Flushable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_io_Flushable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_io_Flushable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Flushable.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.io.Flushable.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Flushable, $Util.$makeClassName('java.io.Flushable'));\n\n\nFlushable.$markImplementor(/** @type {Function} */ (Flushable));\n\n\nexports \x3d Flushable; \n//# sourceMappingURL\x3dFlushable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Flushable$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Flushable$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.Flushable.$LambdaAdaptor$impl');\n\n\nconst Flushable \x3d goog.require('java.io.Flushable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {Flushable}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__java_io_Flushable_$LambdaAdaptor;\n    this.$ctor__java_io_Flushable_$LambdaAdaptor__java_io_Flushable_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_Flushable_$LambdaAdaptor__java_io_Flushable_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_io_Flushable_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_flush__() {\n    {\n      let $function \x3d this.f_$$fn__java_io_Flushable_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.io.Flushable$$LambdaAdaptor'));\n\n\nFlushable.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dFlushable$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Flushable$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Flushable$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.Flushable.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Flushable \x3d goog.require('java.io.Flushable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.io.Flushable.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Flushable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Flushable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.Flushable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.io.Flushable.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar Flushable \x3d goog.require('java.io.Flushable$impl');\nexports \x3d Flushable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Serializable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Serializable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.Serializable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('java.io.HasSerializableTypeMarker.$Overlay$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @interface\n */\nclass Serializable {\n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    Serializable.$clinit();\n    if ($Equality.$same(instance, null)) {\n      return false;\n    }\n    let type \x3d typeof(instance);\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(type, \"boolean\") || j_l_String.m_equals__java_lang_String__java_lang_Object(type, \"number\") || j_l_String.m_equals__java_lang_String__java_lang_Object(type, \"string\") || instance.$implements__java_io_Serializable || $Objects.m_getClass__java_lang_Object(instance).m_isArray__();\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_io_Serializable \x3d true;\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_io_Serializable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Serializable.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Serializable, $Util.$makeClassName('java.io.Serializable'));\n\n\nSerializable.$markImplementor(/** @type {Function} */ (Serializable));\n\n\nexports \x3d Serializable; \n//# sourceMappingURL\x3dSerializable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Throwable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Throwable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Throwable$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet PrintStream \x3d goog.forwardDeclare('java.io.PrintStream$impl');\nlet JsException \x3d goog.forwardDeclare('java.lang.JsException$impl');\nlet NullPointerException \x3d goog.forwardDeclare('java.lang.NullPointerException$impl');\nlet StackTraceElement \x3d goog.forwardDeclare('java.lang.StackTraceElement$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet System \x3d goog.forwardDeclare('java.lang.System$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.lang.Throwable.HasJavaThrowable.$Overlay$impl');\nlet NativeTypeError_$Overlay \x3d goog.forwardDeclare('java.lang.Throwable.NativeTypeError.$Overlay$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @implements {Serializable}\n  */\nclass Throwable extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_detailMessage__java_lang_Throwable_;\n    /** @public {Throwable} */\n    this.f_cause__java_lang_Throwable_;\n    /** @public {Array\x3cThrowable\x3e} */\n    this.f_suppressedExceptions__java_lang_Throwable_;\n    /** @public {Array\x3cStackTraceElement\x3e} */\n    this.f_stackTrace__java_lang_Throwable_;\n    /** @public {boolean} */\n    this.f_disableSuppression__java_lang_Throwable_ \x3d false;\n    /** @public {boolean} */\n    this.f_writetableStackTrace__java_lang_Throwable_ \x3d false;\n    /** @public {*} */\n    this.backingJsObject;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Throwable()'.\n   * @return {!Throwable}\n   * @public\n   */\n  static $create__() {\n    Throwable.$clinit();\n    let $instance \x3d new Throwable();\n    $instance.$ctor__java_lang_Throwable__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Throwable()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Throwable__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_lang_Throwable();\n    this.m_fillInStackTrace__();\n    this.m_initializeBackingError___$p_java_lang_Throwable();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Throwable(String)'.\n   * @param {?string} message\n   * @return {!Throwable}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    Throwable.$clinit();\n    let $instance \x3d new Throwable();\n    $instance.$ctor__java_lang_Throwable__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Throwable(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Throwable__java_lang_String(message) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_lang_Throwable();\n    this.f_detailMessage__java_lang_Throwable_ \x3d message;\n    this.m_fillInStackTrace__();\n    this.m_initializeBackingError___$p_java_lang_Throwable();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Throwable(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!Throwable}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    Throwable.$clinit();\n    let $instance \x3d new Throwable();\n    $instance.$ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Throwable(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_lang_Throwable();\n    this.f_cause__java_lang_Throwable_ \x3d cause;\n    this.f_detailMessage__java_lang_Throwable_ \x3d message;\n    this.m_fillInStackTrace__();\n    this.m_initializeBackingError___$p_java_lang_Throwable();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Throwable(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!Throwable}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    Throwable.$clinit();\n    let $instance \x3d new Throwable();\n    $instance.$ctor__java_lang_Throwable__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Throwable(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Throwable__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_lang_Throwable();\n    this.f_detailMessage__java_lang_Throwable_ \x3d $Equality.$same(cause, null) ? null : cause.toString();\n    this.f_cause__java_lang_Throwable_ \x3d cause;\n    this.m_fillInStackTrace__();\n    this.m_initializeBackingError___$p_java_lang_Throwable();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Throwable(String, Throwable, boolean, boolean)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @param {boolean} enableSuppression\n   * @param {boolean} writetableStackTrace\n   * @return {!Throwable}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writetableStackTrace) {\n    Throwable.$clinit();\n    let $instance \x3d new Throwable();\n    $instance.$ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writetableStackTrace);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Throwable(String, Throwable, boolean, boolean)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @param {boolean} enableSuppression\n   * @param {boolean} writetableStackTrace\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writetableStackTrace) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_lang_Throwable();\n    this.f_cause__java_lang_Throwable_ \x3d cause;\n    this.f_detailMessage__java_lang_Throwable_ \x3d message;\n    this.f_writetableStackTrace__java_lang_Throwable_ \x3d writetableStackTrace;\n    this.f_disableSuppression__java_lang_Throwable_ \x3d !enableSuppression;\n    if (writetableStackTrace) {\n      this.m_fillInStackTrace__();\n    }\n    this.m_initializeBackingError___$p_java_lang_Throwable();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Throwable(Object)'.\n   * @param {*} backingJsObject\n   * @return {!Throwable}\n   * @public\n   */\n  static $create__java_lang_Object(backingJsObject) {\n    Throwable.$clinit();\n    let $instance \x3d new Throwable();\n    $instance.$ctor__java_lang_Throwable__java_lang_Object(backingJsObject);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Throwable(Object)'.\n   * @param {*} backingJsObject\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Throwable__java_lang_Object(backingJsObject) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_lang_Throwable();\n    this.m_fillInStackTrace__();\n    this.m_setBackingJsObject__java_lang_Object_$p_java_lang_Throwable(backingJsObject);\n    this.f_detailMessage__java_lang_Throwable_ \x3d j_l_String.m_valueOf__java_lang_Object(backingJsObject);\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_initializeBackingError___$p_java_lang_Throwable() {\n    let message \x3d $Equality.$same(this.f_detailMessage__java_lang_Throwable_, null) ? null : j_l_String.m_nativeReplaceAll__java_lang_String__java_lang_String__java_lang_String_$pp_java_lang(this.f_detailMessage__java_lang_Throwable_, \"\\n\", \"\\u200B\\n\");\n    let errorMessage \x3d this.m_toString__java_lang_String_$p_java_lang_Throwable(message);\n    this.m_setBackingJsObject__java_lang_Object_$p_java_lang_Throwable(Throwable.m_fixIE__java_lang_Object_$p_java_lang_Throwable(this.m_createError__java_lang_String_$pp_java_lang(errorMessage)));\n    this.m_captureStackTrace___$p_java_lang_Throwable();\n  }\n  \n  /**\n   * @param {?string} msg\n   * @return {*}\n   * @public\n   */\n  m_createError__java_lang_String_$pp_java_lang(msg) {\n    return new Error(msg);\n  }\n  \n  /**\n   * @param {*} e\n   * @return {*}\n   * @public\n   */\n  // native static m_fixIE__java_lang_Object_$p_java_lang_Throwable(e) \n  \n  /**\n   * @return {void}\n   * @public\n   */\n  // native m_captureStackTrace___$p_java_lang_Throwable() \n  \n  /**\n   * @return {*}\n   * @public\n   */\n  m_getBackingJsObject__() {\n    return this.backingJsObject;\n  }\n  \n  /**\n   * @param {*} backingJsObject\n   * @return {void}\n   * @public\n   */\n  m_setBackingJsObject__java_lang_Object_$p_java_lang_Throwable(backingJsObject) {\n    this.backingJsObject \x3d backingJsObject;\n    this.m_linkBack__java_lang_Object_$p_java_lang_Throwable(backingJsObject);\n  }\n  \n  /**\n   * @param {*} error\n   * @return {void}\n   * @public\n   */\n  m_linkBack__java_lang_Object_$p_java_lang_Throwable(error) {\n    if (!$Equality.$same(error, null)) {\n      try {\n        (/**@type {?} */ ($Casts.$to(error, $Overlay))).__java$exception \x3d this;\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Throwable.$isInstance(__$exc)) {\n          let ignored \x3d /**@type {Throwable} */ (__$exc);\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {Throwable} exception\n   * @return {void}\n   * @public\n   */\n  m_addSuppressed__java_lang_Throwable(exception) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(exception, \"Cannot suppress a null exception.\");\n    $InternalPreconditions.m_checkCriticalArgument__boolean__java_lang_Object(!$Equality.$same(exception, this), \"Exception can not suppress itself.\");\n    if (this.f_disableSuppression__java_lang_Throwable_) {\n      return;\n    }\n    if ($Equality.$same(this.f_suppressedExceptions__java_lang_Throwable_, null)) {\n      this.f_suppressedExceptions__java_lang_Throwable_ \x3d /**@type {!Array\x3cThrowable\x3e} */ ($Arrays.$init([exception], Throwable));\n    } else {\n      $Arrays.$set(this.f_suppressedExceptions__java_lang_Throwable_, this.f_suppressedExceptions__java_lang_Throwable_.length, exception);\n    }\n  }\n  \n  /**\n   * @return {Throwable}\n   * @public\n   */\n  m_fillInStackTrace__() {\n    if (this.f_writetableStackTrace__java_lang_Throwable_) {\n      if (!$Equality.$same(this.backingJsObject, Throwable.$f_UNINITIALIZED__java_lang_Throwable_)) {\n        this.m_initializeBackingError___$p_java_lang_Throwable();\n      }\n      this.f_stackTrace__java_lang_Throwable_ \x3d null;\n    }\n    return this;\n  }\n  \n  /**\n   * @return {Throwable}\n   * @public\n   */\n  m_getCause__() {\n    return this.f_cause__java_lang_Throwable_;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getLocalizedMessage__() {\n    return this.m_getMessage__();\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getMessage__() {\n    return this.f_detailMessage__java_lang_Throwable_;\n  }\n  \n  /**\n   * @return {Array\x3cStackTraceElement\x3e}\n   * @public\n   */\n  m_getStackTrace__() {\n    if ($Equality.$same(this.f_stackTrace__java_lang_Throwable_, null)) {\n      this.f_stackTrace__java_lang_Throwable_ \x3d this.m_constructJavaStackTrace___$p_java_lang_Throwable();\n    }\n    return this.f_stackTrace__java_lang_Throwable_;\n  }\n  \n  /**\n   * @return {Array\x3cStackTraceElement\x3e}\n   * @public\n   */\n  // native m_constructJavaStackTrace___$p_java_lang_Throwable() \n  \n  /**\n   * @return {Array\x3cThrowable\x3e}\n   * @public\n   */\n  m_getSuppressed__() {\n    if ($Equality.$same(this.f_suppressedExceptions__java_lang_Throwable_, null)) {\n      this.f_suppressedExceptions__java_lang_Throwable_ \x3d /**@type {!Array\x3cThrowable\x3e} */ ($Arrays.$create([0], Throwable));\n    }\n    return this.f_suppressedExceptions__java_lang_Throwable_;\n  }\n  \n  /**\n   * @param {Throwable} cause\n   * @return {Throwable}\n   * @public\n   */\n  m_initCause__java_lang_Throwable(cause) {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($Equality.$same(this.f_cause__java_lang_Throwable_, null), \"Can't overwrite cause\");\n    $InternalPreconditions.m_checkCriticalArgument__boolean__java_lang_Object(!$Equality.$same(cause, this), \"Self-causation not permitted\");\n    this.f_cause__java_lang_Throwable_ \x3d cause;\n    return this;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_printStackTrace__() {\n    this.m_printStackTrace__java_io_PrintStream(System.f_err__java_lang_System);\n  }\n  \n  /**\n   * @param {PrintStream} out\n   * @return {void}\n   * @public\n   */\n  m_printStackTrace__java_io_PrintStream(out) {\n    this.m_printStackTraceImpl__java_io_PrintStream__java_lang_String__java_lang_String_$p_java_lang_Throwable(out, \"\", \"\");\n  }\n  \n  /**\n   * @param {PrintStream} out\n   * @param {?string} prefix\n   * @param {?string} ident\n   * @return {void}\n   * @public\n   */\n  m_printStackTraceImpl__java_io_PrintStream__java_lang_String__java_lang_String_$p_java_lang_Throwable(out, prefix, ident) {\n    out.m_println__java_lang_String(j_l_String.m_valueOf__java_lang_Object(ident) + j_l_String.m_valueOf__java_lang_Object(prefix) + j_l_String.m_valueOf__java_lang_Object(this));\n    this.m_printStackTraceItems__java_io_PrintStream__java_lang_String_$p_java_lang_Throwable(out, ident);\n    for (let $array \x3d this.m_getSuppressed__(), $index \x3d 0; $index \x3c $array.length; $index++) {\n      let t \x3d $array[$index];\n      t.m_printStackTraceImpl__java_io_PrintStream__java_lang_String__java_lang_String_$p_java_lang_Throwable(out, \"Suppressed: \", \"\\t\" + j_l_String.m_valueOf__java_lang_Object(ident));\n    }\n    let theCause \x3d this.m_getCause__();\n    if (!$Equality.$same(theCause, null)) {\n      theCause.m_printStackTraceImpl__java_io_PrintStream__java_lang_String__java_lang_String_$p_java_lang_Throwable(out, \"Caused by: \", ident);\n    }\n  }\n  \n  /**\n   * @param {PrintStream} out\n   * @param {?string} ident\n   * @return {void}\n   * @public\n   */\n  m_printStackTraceItems__java_io_PrintStream__java_lang_String_$p_java_lang_Throwable(out, ident) {\n    for (let $array \x3d this.m_getStackTrace__(), $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      out.m_println__java_lang_String(j_l_String.m_valueOf__java_lang_Object(ident) + \"\\tat \" + j_l_String.m_valueOf__java_lang_Object(element));\n    }\n  }\n  \n  /**\n   * @param {Array\x3cStackTraceElement\x3e} stackTrace\n   * @return {void}\n   * @public\n   */\n  m_setStackTrace__arrayOf_java_lang_StackTraceElement(stackTrace) {\n    let length \x3d stackTrace.length;\n    let copy \x3d /**@type {!Array\x3cStackTraceElement\x3e} */ ($Arrays.$create([length], StackTraceElement));\n    for (let i \x3d 0; i \x3c length; ++i) {\n      $Arrays.$set(copy, i, /**@type {StackTraceElement} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(stackTrace[i]), StackTraceElement)));\n    }\n    this.f_stackTrace__java_lang_Throwable_ \x3d copy;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.m_toString__java_lang_String_$p_java_lang_Throwable(this.m_getLocalizedMessage__());\n  }\n  \n  /**\n   * @param {?string} message\n   * @return {?string}\n   * @public\n   */\n  m_toString__java_lang_String_$p_java_lang_Throwable(message) {\n    let className \x3d this.m_getClass__().m_getName__();\n    return $Equality.$same(message, null) ? className : j_l_String.m_valueOf__java_lang_Object(className) + \": \" + j_l_String.m_valueOf__java_lang_Object(message);\n  }\n  \n  /**\n   * @param {*} e\n   * @return {!Throwable}\n   * @public\n   */\n  static of(e) {\n    Throwable.$clinit();\n    if (!$Equality.$same(e, null)) {\n      let throwable \x3d (/**@type {?} */ ($Casts.$to(e, $Overlay))).__java$exception;\n      if (!$Equality.$same(throwable, null)) {\n        return throwable;\n      }\n    }\n    return NativeTypeError_$Overlay.$isInstance(e) ? NullPointerException.$create__java_lang_Object(e) : JsException.$create__java_lang_Object(e);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_lang_Throwable() {\n    this.f_stackTrace__java_lang_Throwable_ \x3d /**@type {!Array\x3cStackTraceElement\x3e} */ ($Arrays.$create([0], StackTraceElement));\n    this.f_writetableStackTrace__java_lang_Throwable_ \x3d true;\n    this.backingJsObject \x3d Throwable.$f_UNINITIALIZED__java_lang_Throwable_;\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  static get f_UNINITIALIZED__java_lang_Throwable_() {\n    return (Throwable.$clinit(), Throwable.$f_UNINITIALIZED__java_lang_Throwable_);\n  }\n  \n  /**\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  static set f_UNINITIALIZED__java_lang_Throwable_(value) {\n    (Throwable.$clinit(), Throwable.$f_UNINITIALIZED__java_lang_Throwable_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Throwable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Throwable);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Throwable.$clinit \x3d function() {};\n    JsException \x3d goog.module.get('java.lang.JsException$impl');\n    NullPointerException \x3d goog.module.get('java.lang.NullPointerException$impl');\n    StackTraceElement \x3d goog.module.get('java.lang.StackTraceElement$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    System \x3d goog.module.get('java.lang.System$impl');\n    $Overlay \x3d goog.module.get('java.lang.Throwable.HasJavaThrowable.$Overlay$impl');\n    NativeTypeError_$Overlay \x3d goog.module.get('java.lang.Throwable.NativeTypeError.$Overlay$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Throwable.$f_UNINITIALIZED__java_lang_Throwable_ \x3d \"__noinit__\";\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Throwable, $Util.$makeClassName('java.lang.Throwable'));\n\n\n/** @private {*} */\nThrowable.$f_UNINITIALIZED__java_lang_Throwable_;\n\n\nSerializable.$markImplementor(Throwable);\n\n\n/* NATIVE.JS EPILOG */\n\nconst java_lang_Throwable \x3d Throwable;\n\n// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @public\n */\nThrowable.prototype.m_captureStackTrace___$p_java_lang_Throwable \x3d function() {\n  // Only supporting modern browsers so generating stack by traversing callees\n  // is not necessary.\n};\n\n/**\n * @return {Array\x3cStackTraceElement\x3e}\n * @public\n */\nThrowable.prototype.m_constructJavaStackTrace___$p_java_lang_Throwable \x3d\n    function() {\n  var stackTraceElements \x3d $Arrays.$create([0], StackTraceElement);\n  var e \x3d this.backingJsObject;\n  var splitStack \x3d (e \x26\x26 e.stack) ? e.stack.split(/\\n/) : [];\n  for (var i \x3d 0; i \x3c splitStack.length; i++) {\n    var createSte \x3d StackTraceElement.\n        $create__java_lang_String__java_lang_String__java_lang_String__int;\n    stackTraceElements[i] \x3d createSte('', splitStack[i], null, -1);\n  }\n  return stackTraceElements;\n};\n\n/**\n * @param {*} e\n * @return {*}\n * @public\n */\nThrowable.m_fixIE__java_lang_Object_$p_java_lang_Throwable \x3d function(e) {\n  if (!('stack' in e)) {\n    try { throw e; } catch (ignored) {}\n  }\n  return e;\n};\n\n\nexports \x3d Throwable; \n//# sourceMappingURL\x3dThrowable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Exception.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Exception.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Exception$impl');\n\n\nconst Throwable \x3d goog.require('java.lang.Throwable$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass Exception extends Throwable {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exception()'.\n   * @return {!Exception}\n   * @public\n   */\n  static $create__() {\n    Exception.$clinit();\n    let $instance \x3d new Exception();\n    $instance.$ctor__java_lang_Exception__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exception()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Exception__() {\n    this.$ctor__java_lang_Throwable__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exception(String)'.\n   * @param {?string} message\n   * @return {!Exception}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    Exception.$clinit();\n    let $instance \x3d new Exception();\n    $instance.$ctor__java_lang_Exception__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exception(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Exception__java_lang_String(message) {\n    this.$ctor__java_lang_Throwable__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exception(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!Exception}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    Exception.$clinit();\n    let $instance \x3d new Exception();\n    $instance.$ctor__java_lang_Exception__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exception(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Exception__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exception(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!Exception}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    Exception.$clinit();\n    let $instance \x3d new Exception();\n    $instance.$ctor__java_lang_Exception__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exception(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Exception__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_Throwable__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exception(String, Throwable, boolean, boolean)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @param {boolean} enableSuppression\n   * @param {boolean} writableStackTrace\n   * @return {!Exception}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace) {\n    Exception.$clinit();\n    let $instance \x3d new Exception();\n    $instance.$ctor__java_lang_Exception__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exception(String, Throwable, boolean, boolean)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @param {boolean} enableSuppression\n   * @param {boolean} writableStackTrace\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Exception__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace) {\n    this.$ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exception(Object)'.\n   * @param {*} backingJsObject\n   * @return {!Exception}\n   * @public\n   */\n  static $create__java_lang_Object(backingJsObject) {\n    Exception.$clinit();\n    let $instance \x3d new Exception();\n    $instance.$ctor__java_lang_Exception__java_lang_Object(backingJsObject);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exception(Object)'.\n   * @param {*} backingJsObject\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Exception__java_lang_Object(backingJsObject) {\n    this.$ctor__java_lang_Throwable__java_lang_Object(backingJsObject);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Exception;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Exception);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Exception.$clinit \x3d function() {};\n    Throwable.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Exception, $Util.$makeClassName('java.lang.Exception'));\n\n\n\n\nexports \x3d Exception; \n//# sourceMappingURL\x3dException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/RuntimeException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.RuntimeException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.RuntimeException$impl');\n\n\nconst Exception \x3d goog.require('java.lang.Exception$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\n\n\nclass RuntimeException extends Exception {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RuntimeException()'.\n   * @return {!RuntimeException}\n   * @public\n   */\n  static $create__() {\n    RuntimeException.$clinit();\n    let $instance \x3d new RuntimeException();\n    $instance.$ctor__java_lang_RuntimeException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RuntimeException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_RuntimeException__() {\n    this.$ctor__java_lang_Exception__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RuntimeException(String)'.\n   * @param {?string} message\n   * @return {!RuntimeException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    RuntimeException.$clinit();\n    let $instance \x3d new RuntimeException();\n    $instance.$ctor__java_lang_RuntimeException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RuntimeException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_RuntimeException__java_lang_String(message) {\n    this.$ctor__java_lang_Exception__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RuntimeException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!RuntimeException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    RuntimeException.$clinit();\n    let $instance \x3d new RuntimeException();\n    $instance.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RuntimeException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_Exception__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RuntimeException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!RuntimeException}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    RuntimeException.$clinit();\n    let $instance \x3d new RuntimeException();\n    $instance.$ctor__java_lang_RuntimeException__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RuntimeException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_RuntimeException__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_Exception__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RuntimeException(String, Throwable, boolean, boolean)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @param {boolean} enableSuppression\n   * @param {boolean} writableStackTrace\n   * @return {!RuntimeException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace) {\n    RuntimeException.$clinit();\n    let $instance \x3d new RuntimeException();\n    $instance.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RuntimeException(String, Throwable, boolean, boolean)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @param {boolean} enableSuppression\n   * @param {boolean} writableStackTrace\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace) {\n    this.$ctor__java_lang_Exception__java_lang_String__java_lang_Throwable__boolean__boolean(message, cause, enableSuppression, writableStackTrace);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RuntimeException(Object)'.\n   * @param {*} backingJsObject\n   * @return {!RuntimeException}\n   * @public\n   */\n  static $create__java_lang_Object(backingJsObject) {\n    RuntimeException.$clinit();\n    let $instance \x3d new RuntimeException();\n    $instance.$ctor__java_lang_RuntimeException__java_lang_Object(backingJsObject);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RuntimeException(Object)'.\n   * @param {*} backingJsObject\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_RuntimeException__java_lang_Object(backingJsObject) {\n    this.$ctor__java_lang_Exception__java_lang_Object(backingJsObject);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof RuntimeException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, RuntimeException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    RuntimeException.$clinit \x3d function() {};\n    Exception.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(RuntimeException, $Util.$makeClassName('java.lang.RuntimeException'));\n\n\n\n\nexports \x3d RuntimeException; \n//# sourceMappingURL\x3dRuntimeException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/IndexOutOfBoundsException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.IndexOutOfBoundsException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.IndexOutOfBoundsException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass IndexOutOfBoundsException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IndexOutOfBoundsException()'.\n   * @return {!IndexOutOfBoundsException}\n   * @public\n   */\n  static $create__() {\n    IndexOutOfBoundsException.$clinit();\n    let $instance \x3d new IndexOutOfBoundsException();\n    $instance.$ctor__java_lang_IndexOutOfBoundsException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IndexOutOfBoundsException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IndexOutOfBoundsException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IndexOutOfBoundsException(String)'.\n   * @param {?string} message\n   * @return {!IndexOutOfBoundsException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    IndexOutOfBoundsException.$clinit();\n    let $instance \x3d new IndexOutOfBoundsException();\n    $instance.$ctor__java_lang_IndexOutOfBoundsException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IndexOutOfBoundsException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IndexOutOfBoundsException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IndexOutOfBoundsException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IndexOutOfBoundsException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IndexOutOfBoundsException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IndexOutOfBoundsException, $Util.$makeClassName('java.lang.IndexOutOfBoundsException'));\n\n\n\n\nexports \x3d IndexOutOfBoundsException; \n//# sourceMappingURL\x3dIndexOutOfBoundsException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/IndexOutOfBoundsException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.IndexOutOfBoundsException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.IndexOutOfBoundsException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException$impl');\nexports \x3d IndexOutOfBoundsException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ArithmeticException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ArithmeticException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.ArithmeticException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass ArithmeticException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArithmeticException(String)'.\n   * @param {?string} explanation\n   * @return {!ArithmeticException}\n   * @public\n   */\n  static $create__java_lang_String(explanation) {\n    ArithmeticException.$clinit();\n    let $instance \x3d new ArithmeticException();\n    $instance.$ctor__java_lang_ArithmeticException__java_lang_String(explanation);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArithmeticException(String)'.\n   * @param {?string} explanation\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArithmeticException__java_lang_String(explanation) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(explanation);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArithmeticException()'.\n   * @return {!ArithmeticException}\n   * @public\n   */\n  static $create__() {\n    ArithmeticException.$clinit();\n    let $instance \x3d new ArithmeticException();\n    $instance.$ctor__java_lang_ArithmeticException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArithmeticException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArithmeticException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArithmeticException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArithmeticException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArithmeticException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArithmeticException, $Util.$makeClassName('java.lang.ArithmeticException'));\n\n\n\n\nexports \x3d ArithmeticException; \n//# sourceMappingURL\x3dArithmeticException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ArithmeticException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ArithmeticException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.ArithmeticException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ArithmeticException \x3d goog.require('java.lang.ArithmeticException$impl');\nexports \x3d ArithmeticException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ArrayIndexOutOfBoundsException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ArrayIndexOutOfBoundsException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.ArrayIndexOutOfBoundsException$impl');\n\n\nconst IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayIndexOutOfBoundsException()'.\n   * @return {!ArrayIndexOutOfBoundsException}\n   * @public\n   */\n  static $create__() {\n    ArrayIndexOutOfBoundsException.$clinit();\n    let $instance \x3d new ArrayIndexOutOfBoundsException();\n    $instance.$ctor__java_lang_ArrayIndexOutOfBoundsException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayIndexOutOfBoundsException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArrayIndexOutOfBoundsException__() {\n    this.$ctor__java_lang_IndexOutOfBoundsException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayIndexOutOfBoundsException(int)'.\n   * @param {number} index\n   * @return {!ArrayIndexOutOfBoundsException}\n   * @public\n   */\n  static $create__int(index) {\n    ArrayIndexOutOfBoundsException.$clinit();\n    let $instance \x3d new ArrayIndexOutOfBoundsException();\n    $instance.$ctor__java_lang_ArrayIndexOutOfBoundsException__int(index);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayIndexOutOfBoundsException(int)'.\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArrayIndexOutOfBoundsException__int(index) {\n    this.$ctor__java_lang_IndexOutOfBoundsException__java_lang_String(\"Array index \" + index + \" out of range\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayIndexOutOfBoundsException(String)'.\n   * @param {?string} msg\n   * @return {!ArrayIndexOutOfBoundsException}\n   * @public\n   */\n  static $create__java_lang_String(msg) {\n    ArrayIndexOutOfBoundsException.$clinit();\n    let $instance \x3d new ArrayIndexOutOfBoundsException();\n    $instance.$ctor__java_lang_ArrayIndexOutOfBoundsException__java_lang_String(msg);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayIndexOutOfBoundsException(String)'.\n   * @param {?string} msg\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArrayIndexOutOfBoundsException__java_lang_String(msg) {\n    this.$ctor__java_lang_IndexOutOfBoundsException__java_lang_String(msg);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayIndexOutOfBoundsException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArrayIndexOutOfBoundsException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArrayIndexOutOfBoundsException.$clinit \x3d function() {};\n    IndexOutOfBoundsException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArrayIndexOutOfBoundsException, $Util.$makeClassName('java.lang.ArrayIndexOutOfBoundsException'));\n\n\n\n\nexports \x3d ArrayIndexOutOfBoundsException; \n//# sourceMappingURL\x3dArrayIndexOutOfBoundsException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ArrayIndexOutOfBoundsException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ArrayIndexOutOfBoundsException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.ArrayIndexOutOfBoundsException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ArrayIndexOutOfBoundsException \x3d goog.require('java.lang.ArrayIndexOutOfBoundsException$impl');\nexports \x3d ArrayIndexOutOfBoundsException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ArrayStoreException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ArrayStoreException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.ArrayStoreException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass ArrayStoreException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayStoreException()'.\n   * @return {!ArrayStoreException}\n   * @public\n   */\n  static $create__() {\n    ArrayStoreException.$clinit();\n    let $instance \x3d new ArrayStoreException();\n    $instance.$ctor__java_lang_ArrayStoreException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayStoreException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArrayStoreException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayStoreException(String)'.\n   * @param {?string} message\n   * @return {!ArrayStoreException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    ArrayStoreException.$clinit();\n    let $instance \x3d new ArrayStoreException();\n    $instance.$ctor__java_lang_ArrayStoreException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayStoreException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ArrayStoreException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayStoreException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArrayStoreException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArrayStoreException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArrayStoreException, $Util.$makeClassName('java.lang.ArrayStoreException'));\n\n\n\n\nexports \x3d ArrayStoreException; \n//# sourceMappingURL\x3dArrayStoreException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ArrayStoreException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ArrayStoreException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.ArrayStoreException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ArrayStoreException \x3d goog.require('java.lang.ArrayStoreException$impl');\nexports \x3d ArrayStoreException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Error.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Error.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Error$impl');\n\n\nconst Throwable \x3d goog.require('java.lang.Throwable$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass Error extends Throwable {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Error()'.\n   * @return {!Error}\n   * @public\n   */\n  static $create__() {\n    Error.$clinit();\n    let $instance \x3d new Error();\n    $instance.$ctor__java_lang_Error__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Error()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Error__() {\n    this.$ctor__java_lang_Throwable__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Error(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!Error}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    Error.$clinit();\n    let $instance \x3d new Error();\n    $instance.$ctor__java_lang_Error__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Error(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Error__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_Throwable__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Error(String)'.\n   * @param {?string} message\n   * @return {!Error}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    Error.$clinit();\n    let $instance \x3d new Error();\n    $instance.$ctor__java_lang_Error__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Error(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Error__java_lang_String(message) {\n    this.$ctor__java_lang_Throwable__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Error(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!Error}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    Error.$clinit();\n    let $instance \x3d new Error();\n    $instance.$ctor__java_lang_Error__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Error(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Error__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_Throwable__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Error;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Error);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Error.$clinit \x3d function() {};\n    Throwable.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Error, $Util.$makeClassName('java.lang.Error'));\n\n\n\n\nexports \x3d Error; \n//# sourceMappingURL\x3dError.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Error.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Error.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Error');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Error \x3d goog.require('java.lang.Error$impl');\nexports \x3d Error;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Long.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('nativebootstrap.Long$impl');\n\n\nconst Long \x3d goog.require('goog.math.Long');\n\n\n/**\n * Exported class.\n */\nexports \x3d Long;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Long.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('nativebootstrap.Long');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Long \x3d goog.require('goog.math.Long');\n\n\n// Re-exports the implementation.\nconst Long \x3d goog.require('nativebootstrap.Long$impl');\nexports \x3d Long;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/JsUtils.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.JsUtils.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.JsUtils$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass JsUtils extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'JsUtils()'.\n   * @return {!JsUtils}\n   * @public\n   */\n  static $create__() {\n    JsUtils.$clinit();\n    let $instance \x3d new JsUtils();\n    $instance.$ctor__javaemul_internal_JsUtils__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'JsUtils()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_JsUtils__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  // native static m_isUndefined__java_lang_Object(value) \n  \n  /**\n   * @param {*} number$1$\n   * @return {number}\n   * @public\n   */\n  // native static m_unsafeCastToDouble__java_lang_Object(number$1$) \n  \n  /**\n   * @param {*} bool\n   * @return {boolean}\n   * @public\n   */\n  // native static m_unsafeCastToBoolean__java_lang_Object(bool) \n  \n  /**\n   * @template M_T\n   * @param {*} o\n   * @return {M_T}\n   * @public\n   */\n  // native static m_uncheckedCast__java_lang_Object(o) \n  \n  /**\n   * @template M_T\n   * @param {*} map\n   * @param {?string} key\n   * @return {M_T}\n   * @public\n   */\n  // native static m_getProperty__java_lang_Object__java_lang_String(map, key) \n  \n  /**\n   * @param {*} map\n   * @param {?string} key\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  // native static m_setProperty__java_lang_Object__java_lang_String__java_lang_Object(map, key, value) \n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof JsUtils;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, JsUtils);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    JsUtils.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(JsUtils, $Util.$makeClassName('javaemul.internal.JsUtils'));\n\n\n\n\n/* NATIVE.JS EPILOG */\n\nconst javaemul_internal_JsUtils \x3d JsUtils;\n\n/**\n * @param {*} value\n * @return {boolean}\n */\njavaemul_internal_JsUtils.m_isUndefined__java_lang_Object \x3d function(value) {\n  javaemul_internal_JsUtils.$clinit();\n  return value \x3d\x3d\x3d undefined;\n};\n\n/**\n * @param {*} value\n * @return {number}\n */\njavaemul_internal_JsUtils.m_unsafeCastToDouble__java_lang_Object \x3d function(\n    value) {\n  javaemul_internal_JsUtils.$clinit();\n  return /** @type {number} */ (value);\n};\n\n/**\n * @param {*} value\n * @return {boolean}\n */\njavaemul_internal_JsUtils.m_unsafeCastToBoolean__java_lang_Object \x3d function(\n    value) {\n  javaemul_internal_JsUtils.$clinit();\n  return /** @type {boolean} */ (value);\n};\n\n/**\n * @param {*} value\n * @return {*}\n */\njavaemul_internal_JsUtils.m_uncheckedCast__java_lang_Object \x3d function(value) {\n  javaemul_internal_JsUtils.$clinit();\n  return value;\n};\n\n/**\n * @param {*} map\n * @param {string} key\n * @return {*}\n */\njavaemul_internal_JsUtils.m_getProperty__java_lang_Object__java_lang_String \x3d\n    function(map, key) {\n  javaemul_internal_JsUtils.$clinit();\n  return map[key];\n};\n\n/**\n * @param {*} map\n * @param {string} key\n * @param {*} value\n * @return {*}\n */\njavaemul_internal_JsUtils\n    .m_setProperty__java_lang_Object__java_lang_String__java_lang_Object \x3d\n    function(map, key, value) {\n  javaemul_internal_JsUtils.$clinit();\n  map[key] \x3d value;\n};\n\n/**\n * @param {*} map\n * @param {string} key\n * @param {*} value\n * @return {*}\n */\njavaemul_internal_JsUtils\n    .m_setPropertySafe__java_lang_Object__java_lang_String__java_lang_Object \x3d\n    function(map, key, value) {\n  javaemul_internal_JsUtils.$clinit();\n  try {\n    // This may throw exception in strict mode.\n    map[key] \x3d value;\n  } catch (ignored) {\n  }\n};\n\n\nexports \x3d JsUtils; \n//# sourceMappingURL\x3dJsUtils.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/JsUtils.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.JsUtils.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.JsUtils');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar JsUtils \x3d goog.require('javaemul.internal.JsUtils$impl');\nexports \x3d JsUtils;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Equality.impl.java.js
goog.loadModule("'use strict'"+'// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module(\'nativebootstrap.Equality$impl\');\n\n\n/**\n * Miscellaneous equality functions.\n */\nclass Equality {\n  /**\n   * Strict equality that combines undefined and null.\n   *\n   * @param {*} left\n   * @param {*} right\n   * @return {boolean}\n   */\n  static $same(left, right) {\n    return left \x3d\x3d\x3d right || (left \x3d\x3d null \x26\x26 right \x3d\x3d null);\n  }\n};\n\n\n/**\n * Exported class.\n */\nexports \x3d Equality;\n');

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Equality.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nconst Equality \x3d goog.require('nativebootstrap.Equality$impl');\nexports \x3d Equality;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Constructor$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Constructor$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.Constructor.$Overlay$impl');\n\n\nconst Constructor \x3d goog.require('javaemul.internal.Constructor');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} obj\n   * @return {Constructor}\n   * @public\n   */\n  static m_of__java_lang_Object(obj) {\n    $Overlay.$clinit();\n    return /**@type {Constructor} */ (JsUtils.m_getProperty__java_lang_Object__java_lang_String(obj, \"constructor\"));\n  }\n  \n  /**\n   * @param {Constructor} $thisArg\n   * @return {Constructor}\n   * @public\n   */\n  static m_getSuperConstructor__javaemul_internal_Constructor($thisArg) {\n    $Overlay.$clinit();\n    let parentCtor \x3d $Overlay.m_of__java_lang_Object(Object.getPrototypeOf($thisArg.prototype));\n    return $Equality.$same(parentCtor, Object) ? null : parentCtor;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Constructor;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('javaemul.internal.Constructor'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dConstructor$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Constructor$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Constructor$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.Constructor.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Constructor \x3d goog.require('javaemul.internal.Constructor');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.Constructor.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Comparable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Comparable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Comparable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.lang.Comparable.$LambdaAdaptor$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.lang.HasComparableTypeMarker.$Overlay$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Comparable {\n  /**\n   * @abstract\n   * @param {C_T} other\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(other) {\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    Comparable.$clinit();\n    let type \x3d typeof(instance);\n    if (j_l_String.m_equals__java_lang_String__java_lang_Object(type, \"boolean\") || j_l_String.m_equals__java_lang_String__java_lang_Object(type, \"number\") || j_l_String.m_equals__java_lang_String__java_lang_Object(type, \"string\")) {\n      return true;\n    }\n    return !$Equality.$same(instance, null) \x26\x26 instance.$implements__java_lang_Comparable \x3d\x3d true;\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):number} fn\n   * @return {(Comparable\x3cC_T\x3e|boolean|number|string)}\n   * @public\n   */\n  static $adapt(fn) {\n    Comparable.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_Comparable \x3d true;\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_Comparable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Comparable.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.lang.Comparable.$LambdaAdaptor$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Comparable, $Util.$makeClassName('java.lang.Comparable'));\n\n\nComparable.$markImplementor(/** @type {Function} */ (Comparable));\n\n\nexports \x3d Comparable; \n//# sourceMappingURL\x3dComparable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Comparable$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Comparable$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Comparable.$LambdaAdaptor$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparable\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):number} */\n    this.f_$$fn__java_lang_Comparable_$LambdaAdaptor;\n    this.$ctor__java_lang_Comparable_$LambdaAdaptor__java_lang_Comparable_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Comparable_$LambdaAdaptor__java_lang_Comparable_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_lang_Comparable_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    let /** ?function(C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_lang_Comparable_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.lang.Comparable$$LambdaAdaptor'));\n\n\nComparable.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dComparable$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Comparable$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Comparable$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Comparable.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.lang.Comparable.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/HasComparableTypeMarker$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.HasComparableTypeMarker$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.HasComparableTypeMarker.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('*'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHasComparableTypeMarker$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/HasComparableTypeMarker$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.HasComparableTypeMarker$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.HasComparableTypeMarker.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.HasComparableTypeMarker.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Comparable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Comparable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Comparable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.lang.Comparable.$LambdaAdaptor');\nconst _$Overlay \x3d goog.require('java.lang.HasComparableTypeMarker.$Overlay');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar Comparable \x3d goog.require('java.lang.Comparable$impl');\nexports \x3d Comparable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/boolean.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$boolean$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class boolean.\n *\n * Non-instantiable.\n */\nclass $boolean {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $boolean;\n  }\n};\n\n\n/**\n * @public {boolean}\n */\n$boolean.$initialArrayValue \x3d false;\n\n\n$Util.$setClassMetadataForPrimitive($boolean, 'boolean', 'Z');\n\n\n/**\n * Exported class.\n */\nexports \x3d $boolean;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/boolean.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$boolean');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $boolean \x3d goog.require('vmbootstrap.primitives.$boolean$impl');\nexports \x3d $boolean;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Boolean.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Boolean.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Boolean$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $boolean \x3d goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');\n\n\n/**\n * @abstract\n * @implements {Comparable\x3c?boolean\x3e}\n * @implements {Serializable}\n  */\nclass Boolean extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {boolean} x\n   * @param {boolean} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__boolean__boolean(x, y) {\n    Boolean.$clinit();\n    return (x \x3d\x3d y) ? 0 : (x ? 1 : -1);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__boolean(value) {\n    Boolean.$clinit();\n    return value ? 1231 : 1237;\n  }\n  \n  /**\n   * @param {boolean} a\n   * @param {boolean} b\n   * @return {boolean}\n   * @public\n   */\n  static m_logicalAnd__boolean__boolean(a, b) {\n    Boolean.$clinit();\n    return a \x26\x26 b;\n  }\n  \n  /**\n   * @param {boolean} a\n   * @param {boolean} b\n   * @return {boolean}\n   * @public\n   */\n  static m_logicalOr__boolean__boolean(a, b) {\n    Boolean.$clinit();\n    return a || b;\n  }\n  \n  /**\n   * @param {boolean} a\n   * @param {boolean} b\n   * @return {boolean}\n   * @public\n   */\n  static m_logicalXor__boolean__boolean(a, b) {\n    Boolean.$clinit();\n    return !!(+a ^ +b);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {boolean}\n   * @public\n   */\n  static m_parseBoolean__java_lang_String(s) {\n    Boolean.$clinit();\n    return j_l_String.m_equalsIgnoreCase__java_lang_String__java_lang_String(\"true\", s);\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {?string}\n   * @public\n   */\n  static m_toString__boolean(x) {\n    Boolean.$clinit();\n    return j_l_String.m_valueOf__boolean(x);\n  }\n  \n  /**\n   * @param {boolean} b\n   * @return {?boolean}\n   * @public\n   */\n  static m_valueOf__boolean(b) {\n    Boolean.$clinit();\n    return b ? Boolean.$create__boolean(true) : Boolean.$create__boolean(false);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {?boolean}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Boolean.$clinit();\n    return Boolean.m_valueOf__boolean(Boolean.m_parseBoolean__java_lang_String(s));\n  }\n  \n  /**\n   * Initialization from constructor 'Boolean(boolean)'.\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Boolean__boolean(value) {\n    this.$ctor__java_lang_Object__();\n    Boolean.$create__boolean(value);\n  }\n  \n  /**\n   * Initialization from constructor 'Boolean(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Boolean__java_lang_String(s) {\n    this.$ctor__java_lang_Object__();\n    Boolean.$create__java_lang_String(s);\n  }\n  \n  /**\n   * @param {?boolean} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_booleanValue__java_lang_Boolean($thisArg) {\n    Boolean.$clinit();\n    return JsUtils.m_unsafeCastToBoolean__java_lang_Object($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg));\n  }\n  \n  /**\n   * @param {?boolean} $thisArg\n   * @param {?boolean} b\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_Boolean__java_lang_Boolean($thisArg, b) {\n    Boolean.$clinit();\n    return Boolean.m_compare__boolean__boolean(Boolean.m_booleanValue__java_lang_Boolean($thisArg), Boolean.m_booleanValue__java_lang_Boolean(b));\n  }\n  \n  /**\n   * @param {?boolean} $thisArg\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__java_lang_Boolean__java_lang_Object($thisArg, o) {\n    Boolean.$clinit();\n    return $Equality.$same($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg), o);\n  }\n  \n  /**\n   * @param {?boolean} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_lang_Boolean($thisArg) {\n    Boolean.$clinit();\n    return Boolean.m_hashCode__boolean(Boolean.m_booleanValue__java_lang_Boolean($thisArg));\n  }\n  \n  /**\n   * @param {?boolean} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_toString__java_lang_Boolean($thisArg) {\n    Boolean.$clinit();\n    return Boolean.m_toString__boolean(Boolean.m_booleanValue__java_lang_Boolean($thisArg));\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {?boolean}\n   * @public\n   */\n  static $create__boolean(x) {\n    Boolean.$clinit();\n    return /**@type {?boolean} */ (JsUtils.m_uncheckedCast__java_lang_Object(x));\n  }\n  \n  /**\n   * @param {?string} x\n   * @return {?boolean}\n   * @public\n   */\n  static $create__java_lang_String(x) {\n    Boolean.$clinit();\n    return /**@type {?boolean} */ (JsUtils.m_uncheckedCast__java_lang_Object(Boolean.m_parseBoolean__java_lang_String(x)));\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    Boolean.$clinit();\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(\"boolean\", typeof(instance));\n  }\n  \n  /**\n   * @param {?boolean} $thisArg\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_Boolean__java_lang_Object($thisArg, arg0) {\n    Boolean.$clinit();\n    return Boolean.m_compareTo__java_lang_Boolean__java_lang_Boolean($thisArg, /**@type {?boolean} */ ($Casts.$to(arg0, Boolean)));\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {?boolean} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @return {?boolean}\n   * @public\n   */\n  static get f_FALSE__java_lang_Boolean() {\n    return (Boolean.$clinit(), Boolean.$f_FALSE__java_lang_Boolean);\n  }\n  \n  /**\n   * @param {?boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_FALSE__java_lang_Boolean(value) {\n    (Boolean.$clinit(), Boolean.$f_FALSE__java_lang_Boolean \x3d value);\n  }\n  \n  /**\n   * @return {?boolean}\n   * @public\n   */\n  static get f_TRUE__java_lang_Boolean() {\n    return (Boolean.$clinit(), Boolean.$f_TRUE__java_lang_Boolean);\n  }\n  \n  /**\n   * @param {?boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_TRUE__java_lang_Boolean(value) {\n    (Boolean.$clinit(), Boolean.$f_TRUE__java_lang_Boolean \x3d value);\n  }\n  \n  /**\n   * @return {Class\x3c?boolean\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Boolean() {\n    return (Boolean.$clinit(), Boolean.$f_TYPE__java_lang_Boolean);\n  }\n  \n  /**\n   * @param {Class\x3c?boolean\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Boolean(value) {\n    (Boolean.$clinit(), Boolean.$f_TYPE__java_lang_Boolean \x3d value);\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Boolean);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Boolean.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $boolean \x3d goog.module.get('vmbootstrap.primitives.$boolean$impl');\n    j_l_Object.$clinit();\n    Boolean.$f_FALSE__java_lang_Boolean \x3d false;\n    Boolean.$f_TRUE__java_lang_Boolean \x3d true;\n    Boolean.$f_TYPE__java_lang_Boolean \x3d Class.$get($boolean);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Boolean, $Util.$makeClassName('java.lang.Boolean'));\n\n\n/** @private {?boolean} */\nBoolean.$f_FALSE__java_lang_Boolean;\n\n\n/** @private {?boolean} */\nBoolean.$f_TRUE__java_lang_Boolean;\n\n\n/** @private {Class\x3c?boolean\x3e} */\nBoolean.$f_TYPE__java_lang_Boolean;\n\n\nComparable.$markImplementor(Boolean);\nSerializable.$markImplementor(Boolean);\n\n\nexports \x3d Boolean; \n//# sourceMappingURL\x3dBoolean.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Boolean.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Boolean.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Boolean');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$boolean \x3d goog.require('vmbootstrap.primitives.$boolean');\n\n\n// Re-exports the implementation.\nvar Boolean \x3d goog.require('java.lang.Boolean$impl');\nexports \x3d Boolean;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer$BoxedValues.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer$BoxedValues.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Integer.BoxedValues$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\nclass BoxedValues extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'BoxedValues()'.\n   * @return {!BoxedValues}\n   * @public\n   */\n  static $create__() {\n    BoxedValues.$clinit();\n    let $instance \x3d new BoxedValues();\n    $instance.$ctor__java_lang_Integer_BoxedValues__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'BoxedValues()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Integer_BoxedValues__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cInteger\x3e}\n   * @public\n   */\n  static get f_boxedValues__java_lang_Integer_BoxedValues_() {\n    return (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Integer_BoxedValues_);\n  }\n  \n  /**\n   * @param {Array\x3cInteger\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_boxedValues__java_lang_Integer_BoxedValues_(value) {\n    (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Integer_BoxedValues_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BoxedValues;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BoxedValues);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BoxedValues.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n    BoxedValues.$f_boxedValues__java_lang_Integer_BoxedValues_ \x3d /**@type {!Array\x3cInteger\x3e} */ ($Arrays.$create([256], Integer));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BoxedValues, $Util.$makeClassName('java.lang.Integer$BoxedValues'));\n\n\n/** @private {Array\x3cInteger\x3e} */\nBoxedValues.$f_boxedValues__java_lang_Integer_BoxedValues_;\n\n\n\n\nexports \x3d BoxedValues; \n//# sourceMappingURL\x3dInteger$BoxedValues.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer$BoxedValues.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer$BoxedValues.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Integer.BoxedValues');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar BoxedValues \x3d goog.require('java.lang.Integer.BoxedValues$impl');\nexports \x3d BoxedValues;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer$NativeNumber$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer$NativeNumber$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Integer.NativeNumber.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('Number'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dInteger$NativeNumber$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer$NativeNumber$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer$NativeNumber$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Integer.NativeNumber.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.Integer.NativeNumber.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/int.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$int$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class int.\n *\n * Non-instantiable.\n */\nclass $int {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $int;\n  }\n};\n\n\n/**\n * @public {number}\n */\n$int.$initialArrayValue \x3d 0;\n\n\n$Util.$setClassMetadataForPrimitive($int, 'int', 'I');\n\n\n/**\n * Exported class.\n */\nexports \x3d $int;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/int.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$int');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $int \x3d goog.require('vmbootstrap.primitives.$int$impl');\nexports \x3d $int;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer$ReverseNibbles.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer$ReverseNibbles.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Integer.ReverseNibbles$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\nclass ReverseNibbles extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ReverseNibbles()'.\n   * @return {!ReverseNibbles}\n   * @public\n   */\n  static $create__() {\n    ReverseNibbles.$clinit();\n    let $instance \x3d new ReverseNibbles();\n    $instance.$ctor__java_lang_Integer_ReverseNibbles__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ReverseNibbles()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Integer_ReverseNibbles__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_reverseNibbles__java_lang_Integer_ReverseNibbles_() {\n    return (ReverseNibbles.$clinit(), ReverseNibbles.$f_reverseNibbles__java_lang_Integer_ReverseNibbles_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_reverseNibbles__java_lang_Integer_ReverseNibbles_(value) {\n    (ReverseNibbles.$clinit(), ReverseNibbles.$f_reverseNibbles__java_lang_Integer_ReverseNibbles_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ReverseNibbles;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ReverseNibbles);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ReverseNibbles.$clinit \x3d function() {};\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    j_l_Object.$clinit();\n    ReverseNibbles.$f_reverseNibbles__java_lang_Integer_ReverseNibbles_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15], $int));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ReverseNibbles, $Util.$makeClassName('java.lang.Integer$ReverseNibbles'));\n\n\n/** @private {Array\x3cnumber\x3e} */\nReverseNibbles.$f_reverseNibbles__java_lang_Integer_ReverseNibbles_;\n\n\n\n\nexports \x3d ReverseNibbles; \n//# sourceMappingURL\x3dInteger$ReverseNibbles.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer$ReverseNibbles.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer$ReverseNibbles.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Integer.ReverseNibbles');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar ReverseNibbles \x3d goog.require('java.lang.Integer.ReverseNibbles$impl');\nexports \x3d ReverseNibbles;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/LongUtils$NativeLong$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.LongUtils$NativeLong$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.LongUtils.NativeLong.$Overlay$impl');\n\n\nconst NativeLong \x3d goog.require('nativebootstrap.Long');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NativeLong;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('nativebootstrap.Long'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dLongUtils$NativeLong$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/LongUtils$NativeLong$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.LongUtils$NativeLong$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.LongUtils.NativeLong.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _NativeLong \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.LongUtils.NativeLong.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/LongUtils.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.LongUtils.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('vmbootstrap.LongUtils$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.LongUtils.NativeLong.$Overlay$impl');\nlet NativeLong \x3d goog.forwardDeclare('nativebootstrap.Long');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\nclass LongUtils extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongUtils()'.\n   * @return {!LongUtils}\n   * @public\n   */\n  static $create__() {\n    LongUtils.$clinit();\n    let $instance \x3d new LongUtils();\n    $instance.$ctor__javaemul_internal_LongUtils__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongUtils()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_LongUtils__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {NativeLong} a\n   * @param {NativeLong} b\n   * @return {number}\n   * @public\n   */\n  static $compare(a, b) {\n    LongUtils.$clinit();\n    return a.compare(b);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {NativeLong}\n   * @public\n   */\n  static $fromInt(value) {\n    LongUtils.$clinit();\n    return NativeLong.fromInt(value | 0);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {NativeLong}\n   * @public\n   */\n  static $fromNumber(value) {\n    LongUtils.$clinit();\n    return NativeLong.fromNumber(value);\n  }\n  \n  /**\n   * @param {NativeLong} value\n   * @return {number}\n   * @public\n   */\n  static $toInt(value) {\n    LongUtils.$clinit();\n    return value.toInt();\n  }\n  \n  /**\n   * @param {NativeLong} value\n   * @return {number}\n   * @public\n   */\n  static $toNumber(value) {\n    LongUtils.$clinit();\n    return value.toNumber();\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $and(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.and(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $not(valueLong) {\n    LongUtils.$clinit();\n    return valueLong.not();\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $divide(leftLong, rightLong) {\n    LongUtils.$clinit();\n    LongUtils.checkDivisorZero(rightLong);\n    return leftLong.div(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {boolean}\n   * @public\n   */\n  static $equals(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.equals(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {boolean}\n   * @public\n   */\n  static $greater(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.greaterThan(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {boolean}\n   * @public\n   */\n  static $greaterEquals(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.greaterThanOrEqual(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @param {number} numBits\n   * @return {NativeLong}\n   * @public\n   */\n  static $leftShift(valueLong, numBits) {\n    LongUtils.$clinit();\n    return valueLong.shiftLeft(numBits);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {boolean}\n   * @public\n   */\n  static $less(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.lessThan(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {boolean}\n   * @public\n   */\n  static $lessEquals(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.lessThanOrEqual(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $minus(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.subtract(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $negate(valueLong) {\n    LongUtils.$clinit();\n    return valueLong.negate();\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {boolean}\n   * @public\n   */\n  static $notEquals(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.notEquals(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $or(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.or(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $plus(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.add(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $remainder(leftLong, rightLong) {\n    LongUtils.$clinit();\n    LongUtils.checkDivisorZero(rightLong);\n    return leftLong.modulo(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @param {number} numBits\n   * @return {NativeLong}\n   * @public\n   */\n  static $rightShiftSigned(valueLong, numBits) {\n    LongUtils.$clinit();\n    return valueLong.shiftRight(numBits);\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @param {number} numBits\n   * @return {NativeLong}\n   * @public\n   */\n  static $rightShiftUnsigned(valueLong, numBits) {\n    LongUtils.$clinit();\n    return valueLong.shiftRightUnsigned(numBits);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $times(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.multiply(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} leftLong\n   * @param {NativeLong} rightLong\n   * @return {NativeLong}\n   * @public\n   */\n  static $xor(leftLong, rightLong) {\n    LongUtils.$clinit();\n    return leftLong.xor(rightLong);\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @return {number}\n   * @public\n   */\n  static $getHighBits(valueLong) {\n    LongUtils.$clinit();\n    return valueLong.getHighBits();\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @return {number}\n   * @public\n   */\n  static $getLowBits(valueLong) {\n    LongUtils.$clinit();\n    return valueLong.getLowBits();\n  }\n  \n  /**\n   * @param {NativeLong} valueLong\n   * @return {?string}\n   * @public\n   */\n  static $toString(valueLong) {\n    LongUtils.$clinit();\n    return $Objects.m_toString__java_lang_Object(valueLong);\n  }\n  \n  /**\n   * @param {NativeLong} divisor\n   * @return {void}\n   * @public\n   */\n  static checkDivisorZero(divisor) {\n    LongUtils.$clinit();\n    $InternalPreconditions.m_checkArithmetic__boolean(!divisor.isZero());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongUtils;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongUtils);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongUtils.$clinit \x3d function() {};\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    NativeLong \x3d goog.module.get('nativebootstrap.Long');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongUtils, $Util.$makeClassName('javaemul.internal.LongUtils'));\n\n\n\n\nexports \x3d LongUtils; \n//# sourceMappingURL\x3dLongUtils.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/LongUtils.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.LongUtils.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('vmbootstrap.LongUtils');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Overlay \x3d goog.require('javaemul.internal.LongUtils.NativeLong.$Overlay');\nconst _NativeLong \x3d goog.require('nativebootstrap.Long');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar LongUtils \x3d goog.require('vmbootstrap.LongUtils$impl');\nexports \x3d LongUtils;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Primitives.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Primitives.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('vmbootstrap.Primitives$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.LongUtils.NativeLong.$Overlay$impl');\nlet NativeLong \x3d goog.forwardDeclare('nativebootstrap.Long');\nlet LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\n\n\nclass Primitives extends j_l_Object {\n  /**\n   * JsConstructor 'Primitives()'.\n   * @public\n   */\n  constructor() {\n    Primitives.$clinit();\n    super();\n    this.$ctor__javaemul_internal_Primitives__();\n  }\n  \n  /**\n   * Initialization from constructor 'Primitives()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_Primitives__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $toByte(instance) {\n    Primitives.$clinit();\n    return instance \x3c\x3c 24 \x3e\x3e 24;\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $toChar(instance) {\n    Primitives.$clinit();\n    return instance \x26 65535;\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $toShort(instance) {\n    Primitives.$clinit();\n    return instance \x3c\x3c 16 \x3e\x3e 16;\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $toInt(instance) {\n    Primitives.$clinit();\n    return instance | 0;\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $widenByteToChar(instance) {\n    Primitives.$clinit();\n    return Primitives.$toChar(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowCharToByte(instance) {\n    Primitives.$clinit();\n    return Primitives.$toByte(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowCharToShort(instance) {\n    Primitives.$clinit();\n    return Primitives.$toShort(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowShortToByte(instance) {\n    Primitives.$clinit();\n    return Primitives.$toByte(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowShortToChar(instance) {\n    Primitives.$clinit();\n    return Primitives.$toChar(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowIntToByte(instance) {\n    Primitives.$clinit();\n    return Primitives.$toByte(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowIntToChar(instance) {\n    Primitives.$clinit();\n    return Primitives.$toChar(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowIntToShort(instance) {\n    Primitives.$clinit();\n    return Primitives.$toShort(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {NativeLong}\n   * @public\n   */\n  static $widenByteToLong(instance) {\n    Primitives.$clinit();\n    return LongUtils.$fromInt(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {NativeLong}\n   * @public\n   */\n  static $widenCharToLong(instance) {\n    Primitives.$clinit();\n    return LongUtils.$fromInt(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {NativeLong}\n   * @public\n   */\n  static $widenShortToLong(instance) {\n    Primitives.$clinit();\n    return LongUtils.$fromInt(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {NativeLong}\n   * @public\n   */\n  static $widenIntToLong(instance) {\n    Primitives.$clinit();\n    return LongUtils.$fromInt(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {NativeLong}\n   * @public\n   */\n  static $narrowFloatToLong(instance) {\n    Primitives.$clinit();\n    return LongUtils.$fromNumber(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {NativeLong}\n   * @public\n   */\n  static $narrowDoubleToLong(instance) {\n    Primitives.$clinit();\n    return LongUtils.$fromNumber(instance);\n  }\n  \n  /**\n   * @param {NativeLong} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowLongToByte(instance) {\n    Primitives.$clinit();\n    let intValue \x3d LongUtils.$toInt(instance);\n    return Primitives.$toByte(intValue);\n  }\n  \n  /**\n   * @param {NativeLong} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowLongToChar(instance) {\n    Primitives.$clinit();\n    let intValue \x3d LongUtils.$toInt(instance);\n    return Primitives.$toChar(intValue);\n  }\n  \n  /**\n   * @param {NativeLong} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowLongToShort(instance) {\n    Primitives.$clinit();\n    let intValue \x3d LongUtils.$toInt(instance);\n    return Primitives.$toShort(intValue);\n  }\n  \n  /**\n   * @param {NativeLong} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowLongToInt(instance) {\n    Primitives.$clinit();\n    return LongUtils.$toInt(instance);\n  }\n  \n  /**\n   * @param {NativeLong} instance\n   * @return {number}\n   * @public\n   */\n  static $widenLongToFloat(instance) {\n    Primitives.$clinit();\n    return LongUtils.$toNumber(instance);\n  }\n  \n  /**\n   * @param {NativeLong} instance\n   * @return {number}\n   * @public\n   */\n  static $widenLongToDouble(instance) {\n    Primitives.$clinit();\n    return LongUtils.$toNumber(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowFloatToByte(instance) {\n    Primitives.$clinit();\n    let roundInt \x3d Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n    return Primitives.$toByte(roundInt);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowDoubleToByte(instance) {\n    Primitives.$clinit();\n    let roundInt \x3d Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n    return Primitives.$toByte(roundInt);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowFloatToChar(instance) {\n    Primitives.$clinit();\n    let roundInt \x3d Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n    return Primitives.$toChar(roundInt);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowDoubleToChar(instance) {\n    Primitives.$clinit();\n    let roundInt \x3d Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n    return Primitives.$toChar(roundInt);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowFloatToShort(instance) {\n    Primitives.$clinit();\n    let roundInt \x3d Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n    return Primitives.$toShort(roundInt);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowDoubleToShort(instance) {\n    Primitives.$clinit();\n    let roundInt \x3d Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n    return Primitives.$toShort(roundInt);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowFloatToInt(instance) {\n    Primitives.$clinit();\n    return Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n  }\n  \n  /**\n   * @param {number} instance\n   * @return {number}\n   * @public\n   */\n  static $narrowDoubleToInt(instance) {\n    Primitives.$clinit();\n    return Primitives.m_roundToInt__int_$p_javaemul_internal_Primitives(instance);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  static $coerceDivision(value) {\n    Primitives.$clinit();\n    $InternalPreconditions.m_checkArithmetic__boolean(isFinite(value));\n    return Primitives.$toInt(value);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  static m_roundToInt__int_$p_javaemul_internal_Primitives(value) {\n    Primitives.$clinit();\n    return Primitives.$toInt(Math.max(Math.min(value, Integer.f_MAX_VALUE__java_lang_Integer), Integer.f_MIN_VALUE__java_lang_Integer));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Primitives;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Primitives);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Primitives.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Primitives, $Util.$makeClassName('javaemul.internal.Primitives'));\n\n\n\n\nexports \x3d Primitives; \n//# sourceMappingURL\x3dPrimitives.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Primitives.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Primitives.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('vmbootstrap.Primitives');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Overlay \x3d goog.require('javaemul.internal.LongUtils.NativeLong.$Overlay');\nconst _NativeLong \x3d goog.require('nativebootstrap.Long');\nconst _LongUtils \x3d goog.require('vmbootstrap.LongUtils');\n\n\n// Re-exports the implementation.\nvar Primitives \x3d goog.require('vmbootstrap.Primitives$impl');\nexports \x3d Primitives;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Number$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.lang.Number.JavaLangNumber.$Overlay$impl');\nlet ____Decode \x3d goog.forwardDeclare('java.lang.Number.__Decode$impl');\nlet ____ParseLong \x3d goog.forwardDeclare('java.lang.Number.__ParseLong$impl');\nlet NumberFormatException \x3d goog.forwardDeclare('java.lang.NumberFormatException$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet NativeRegExp_$Overlay \x3d goog.forwardDeclare('javaemul.internal.NativeRegExp.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @abstract\n * @implements {Serializable}\n  */\nclass Number extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'Number()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Number__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    Number.$clinit();\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(\"number\", typeof(instance)) || $Overlay.$isInstance(instance);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} lowerBound\n   * @param {number} upperBound\n   * @return {number}\n   * @public\n   */\n  static m___decodeAndValidateInt__java_lang_String__int__int(s, lowerBound, upperBound) {\n    Number.$clinit();\n    let decode \x3d Number.m___decodeNumberString__java_lang_String(s);\n    return Number.m___parseAndValidateInt__java_lang_String__int__int__int(decode.f_payload__java_lang_Number___Decode, decode.f_radix__java_lang_Number___Decode, lowerBound, upperBound);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {____Decode}\n   * @public\n   */\n  static m___decodeNumberString__java_lang_String(s) {\n    Number.$clinit();\n    let /** boolean */ negative;\n    if (j_l_String.m_startsWith__java_lang_String__java_lang_String(s, \"-\")) {\n      negative \x3d true;\n      s \x3d j_l_String.m_substring__java_lang_String__int(s, 1);\n    } else {\n      negative \x3d false;\n      if (j_l_String.m_startsWith__java_lang_String__java_lang_String(s, \"+\")) {\n        s \x3d j_l_String.m_substring__java_lang_String__int(s, 1);\n      }\n    }\n    let /** number */ radix;\n    if (j_l_String.m_startsWith__java_lang_String__java_lang_String(s, \"0x\") || j_l_String.m_startsWith__java_lang_String__java_lang_String(s, \"0X\")) {\n      s \x3d j_l_String.m_substring__java_lang_String__int(s, 2);\n      radix \x3d 16;\n    } else if (j_l_String.m_startsWith__java_lang_String__java_lang_String(s, \"#\")) {\n      s \x3d j_l_String.m_substring__java_lang_String__int(s, 1);\n      radix \x3d 16;\n    } else if (j_l_String.m_startsWith__java_lang_String__java_lang_String(s, \"0\")) {\n      radix \x3d 8;\n    } else {\n      radix \x3d 10;\n    }\n    if (negative) {\n      s \x3d \"-\" + j_l_String.m_valueOf__java_lang_Object(s);\n    }\n    return ____Decode.$create__int__java_lang_String(radix, s);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m___parseAndValidateDouble__java_lang_String(s) {\n    Number.$clinit();\n    if (!Number.m___isValidDouble__java_lang_String_$p_java_lang_Number(s)) {\n      throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(s));\n    }\n    return parseFloat(s);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @param {number} lowerBound\n   * @param {number} upperBound\n   * @return {number}\n   * @public\n   */\n  static m___parseAndValidateInt__java_lang_String__int__int__int(s, radix, lowerBound, upperBound) {\n    Number.$clinit();\n    if ($Equality.$same(s, null)) {\n      throw $Exceptions.toJs(NumberFormatException.m_forNullInputString___$pp_java_lang());\n    }\n    if (radix \x3c Character.f_MIN_RADIX__java_lang_Character || radix \x3e Character.f_MAX_RADIX__java_lang_Character) {\n      throw $Exceptions.toJs(NumberFormatException.m_forRadix__int_$pp_java_lang(radix));\n    }\n    let length \x3d j_l_String.m_length__java_lang_String(s);\n    let startIndex \x3d (length \x3e 0) \x26\x26 (j_l_String.m_charAt__java_lang_String__int(s, 0) \x3d\x3d 45 /* '-' */ || j_l_String.m_charAt__java_lang_String__int(s, 0) \x3d\x3d 43 /* '+' */) ? 1 : 0;\n    for (let i \x3d startIndex; i \x3c length; i++) {\n      if (Character.m_digit__char__int(j_l_String.m_charAt__java_lang_String__int(s, i), radix) \x3d\x3d -1) {\n        throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(s));\n      }\n    }\n    let toReturn \x3d parseInt(s, radix);\n    let isTooLow \x3d toReturn \x3c lowerBound;\n    if (isNaN(toReturn)) {\n      throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(s));\n    } else if (isTooLow || toReturn \x3e upperBound) {\n      throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(s));\n    }\n    return toReturn;\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {!$Long}\n   * @public\n   */\n  static m___parseAndValidateLong__java_lang_String__int(s, radix) {\n    Number.$clinit();\n    if ($Equality.$same(s, null)) {\n      throw $Exceptions.toJs(NumberFormatException.m_forNullInputString___$pp_java_lang());\n    }\n    if (radix \x3c Character.f_MIN_RADIX__java_lang_Character || radix \x3e Character.f_MAX_RADIX__java_lang_Character) {\n      throw $Exceptions.toJs(NumberFormatException.m_forRadix__int_$pp_java_lang(radix));\n    }\n    let orig \x3d s;\n    let length \x3d j_l_String.m_length__java_lang_String(s);\n    let negative \x3d false;\n    if (length \x3e 0) {\n      let c \x3d j_l_String.m_charAt__java_lang_String__int(s, 0);\n      if (c \x3d\x3d 45 /* '-' */ || c \x3d\x3d 43 /* '+' */) {\n        s \x3d j_l_String.m_substring__java_lang_String__int(s, 1);\n        length--;\n        negative \x3d (c \x3d\x3d 45 /* '-' */);\n      }\n    }\n    if (length \x3d\x3d 0) {\n      throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(orig));\n    }\n    while (j_l_String.m_length__java_lang_String(s) \x3e 0 \x26\x26 j_l_String.m_charAt__java_lang_String__int(s, 0) \x3d\x3d 48 /* '0' */) {\n      s \x3d j_l_String.m_substring__java_lang_String__int(s, 1);\n      length--;\n    }\n    if (length \x3e ____ParseLong.f_maxLengthForRadix__java_lang_Number___ParseLong_[radix]) {\n      throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(orig));\n    }\n    for (let i \x3d 0; i \x3c length; i++) {\n      if (Character.m_digit__char__int(j_l_String.m_charAt__java_lang_String__int(s, i), radix) \x3d\x3d -1) {\n        throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(orig));\n      }\n    }\n    let toReturn \x3d $Long.fromInt(0);\n    let maxDigits \x3d ____ParseLong.f_maxDigitsForRadix__java_lang_Number___ParseLong_[radix];\n    let radixPower \x3d $Primitives.$widenIntToLong(____ParseLong.f_maxDigitsRadixPower__java_lang_Number___ParseLong_[radix]);\n    let minValue \x3d $LongUtils.$negate(____ParseLong.f_maxValueForRadix__java_lang_Number___ParseLong_[radix]);\n    let firstTime \x3d true;\n    let head \x3d $Primitives.$coerceDivision(length % maxDigits);\n    if (head \x3e 0) {\n      toReturn \x3d $Primitives.$widenIntToLong(-parseInt(j_l_String.m_substring__java_lang_String__int__int(s, 0, head), radix));\n      s \x3d j_l_String.m_substring__java_lang_String__int(s, head);\n      length -\x3d head;\n      firstTime \x3d false;\n    }\n    while (length \x3e\x3d maxDigits) {\n      head \x3d parseInt(j_l_String.m_substring__java_lang_String__int__int(s, 0, maxDigits), radix);\n      s \x3d j_l_String.m_substring__java_lang_String__int(s, maxDigits);\n      length -\x3d maxDigits;\n      if (!firstTime) {\n        if ($LongUtils.$less(toReturn, minValue)) {\n          throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(orig));\n        }\n        toReturn \x3d $LongUtils.$times(toReturn, radixPower);\n      } else {\n        firstTime \x3d false;\n      }\n      toReturn \x3d $LongUtils.$minus(toReturn, $Primitives.$widenIntToLong(head));\n    }\n    if ($LongUtils.$greater(toReturn, $Primitives.$widenIntToLong(0))) {\n      throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(orig));\n    }\n    if (!negative) {\n      toReturn \x3d $LongUtils.$negate(toReturn);\n      if ($LongUtils.$less(toReturn, $Primitives.$widenIntToLong(0))) {\n        throw $Exceptions.toJs(NumberFormatException.m_forInputString__java_lang_String_$pp_java_lang(orig));\n      }\n    }\n    return toReturn;\n  }\n  \n  /**\n   * @param {?string} str\n   * @return {boolean}\n   * @public\n   */\n  static m___isValidDouble__java_lang_String_$p_java_lang_Number(str) {\n    Number.$clinit();\n    if ($Equality.$same(Number.$f_floatRegex__java_lang_Number_, null)) {\n      Number.$f_floatRegex__java_lang_Number_ \x3d new RegExp(\"^\\\\s*[+-]?(NaN|Infinity|((\\\\d+\\\\.?\\\\d*)|(\\\\.\\\\d+))([eE][+-]?\\\\d+)?[dDfF]?)\\\\s*$\");\n    }\n    return Number.$f_floatRegex__java_lang_Number_.test(str);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_byteValue__() {\n    return $Primitives.$narrowIntToByte(this.m_intValue__());\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_doubleValue__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_floatValue__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_intValue__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_longValue__() {\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_shortValue__() {\n    return $Primitives.$narrowIntToShort(this.m_intValue__());\n  }\n  \n  /**\n   * @return {RegExp}\n   * @public\n   */\n  static get f_floatRegex__java_lang_Number_() {\n    return (Number.$clinit(), Number.$f_floatRegex__java_lang_Number_);\n  }\n  \n  /**\n   * @param {RegExp} value\n   * @return {void}\n   * @public\n   */\n  static set f_floatRegex__java_lang_Number_(value) {\n    (Number.$clinit(), Number.$f_floatRegex__java_lang_Number_ \x3d value);\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Number);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Number.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    $Overlay \x3d goog.module.get('java.lang.Number.JavaLangNumber.$Overlay$impl');\n    ____Decode \x3d goog.module.get('java.lang.Number.__Decode$impl');\n    ____ParseLong \x3d goog.module.get('java.lang.Number.__ParseLong$impl');\n    NumberFormatException \x3d goog.module.get('java.lang.NumberFormatException$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Number, $Util.$makeClassName('java.lang.Number'));\n\n\n/** @private {RegExp} */\nNumber.$f_floatRegex__java_lang_Number_;\n\n\nSerializable.$markImplementor(Number);\n\n\nexports \x3d Number; \n//# sourceMappingURL\x3dNumber.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Integer$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Number \x3d goog.require('java.lang.Number$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet BoxedValues \x3d goog.forwardDeclare('java.lang.Integer.BoxedValues$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.lang.Integer.NativeNumber.$Overlay$impl');\nlet ReverseNibbles \x3d goog.forwardDeclare('java.lang.Integer.ReverseNibbles$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\n/**\n * @implements {Comparable\x3cInteger\x3e}\n  */\nclass Integer extends j_l_Number {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_lang_Integer_ \x3d 0;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_bitCount__int(x) {\n    Integer.$clinit();\n    x -\x3d ((x \x3e\x3e 1) \x26 1431655765);\n    x \x3d (((x \x3e\x3e 2) \x26 858993459) + (x \x26 858993459));\n    x \x3d (((x \x3e\x3e 4) + x) \x26 252645135);\n    x +\x3d (x \x3e\x3e 8);\n    x +\x3d (x \x3e\x3e 16);\n    return x \x26 63;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__int__int(x, y) {\n    Integer.$clinit();\n    if (x \x3c y) {\n      return -1;\n    } else if (x \x3e y) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Integer}\n   * @public\n   */\n  static m_decode__java_lang_String(s) {\n    Integer.$clinit();\n    return Integer.m_valueOf__int(j_l_Number.m___decodeAndValidateInt__java_lang_String__int__int(s, Integer.f_MIN_VALUE__java_lang_Integer, Integer.f_MAX_VALUE__java_lang_Integer));\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__int(i) {\n    Integer.$clinit();\n    return i;\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_highestOneBit__int(i) {\n    Integer.$clinit();\n    if (i \x3c 0) {\n      return Integer.f_MIN_VALUE__java_lang_Integer;\n    } else if (i \x3d\x3d 0) {\n      return 0;\n    } else {\n      let /** number */ rtn;\n      for (rtn \x3d 1073741824; (rtn \x26 i) \x3d\x3d 0; rtn \x3e\x3e\x3d 1) {\n      }\n      return rtn;\n    }\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_lowestOneBit__int(i) {\n    Integer.$clinit();\n    return i \x26 -i;\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_max__int__int(a, b) {\n    Integer.$clinit();\n    return Math.max(a, b);\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_min__int__int(a, b) {\n    Integer.$clinit();\n    return Math.min(a, b);\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_numberOfLeadingZeros__int(i) {\n    Integer.$clinit();\n    if (i \x3c 0) {\n      return 0;\n    } else if (i \x3d\x3d 0) {\n      return Integer.f_SIZE__java_lang_Integer;\n    } else {\n      let /** number */ y, /** number */ m, /** number */ n;\n      y \x3d -(i \x3e\x3e 16);\n      m \x3d (y \x3e\x3e 16) \x26 16;\n      n \x3d 16 - m;\n      i \x3d i \x3e\x3e m;\n      y \x3d i - 256;\n      m \x3d (y \x3e\x3e 16) \x26 8;\n      n +\x3d m;\n      i \x3c\x3c\x3d m;\n      y \x3d i - 4096;\n      m \x3d (y \x3e\x3e 16) \x26 4;\n      n +\x3d m;\n      i \x3c\x3c\x3d m;\n      y \x3d i - 16384;\n      m \x3d (y \x3e\x3e 16) \x26 2;\n      n +\x3d m;\n      i \x3c\x3c\x3d m;\n      y \x3d i \x3e\x3e 14;\n      m \x3d y \x26 ~(y \x3e\x3e 1);\n      return n + 2 - m;\n    }\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_numberOfTrailingZeros__int(i) {\n    Integer.$clinit();\n    if (i \x3d\x3d 0) {\n      return Integer.f_SIZE__java_lang_Integer;\n    } else {\n      let rtn \x3d 0;\n      for (let r \x3d 1; (r \x26 i) \x3d\x3d 0; r \x3c\x3c\x3d 1) {\n        rtn++;\n      }\n      return rtn;\n    }\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m_parseInt__java_lang_String(s) {\n    Integer.$clinit();\n    return Integer.m_parseInt__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {number}\n   * @public\n   */\n  static m_parseInt__java_lang_String__int(s, radix) {\n    Integer.$clinit();\n    return j_l_Number.m___parseAndValidateInt__java_lang_String__int__int__int(s, radix, Integer.f_MIN_VALUE__java_lang_Integer, Integer.f_MAX_VALUE__java_lang_Integer);\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_reverse__int(i) {\n    Integer.$clinit();\n    let nibbles \x3d ReverseNibbles.f_reverseNibbles__java_lang_Integer_ReverseNibbles_;\n    return nibbles[(i \x3e\x3e\x3e 28 | 0)] | (nibbles[(i \x3e\x3e 24) \x26 15] \x3c\x3c 4) | (nibbles[(i \x3e\x3e 20) \x26 15] \x3c\x3c 8) | (nibbles[(i \x3e\x3e 16) \x26 15] \x3c\x3c 12) | (nibbles[(i \x3e\x3e 12) \x26 15] \x3c\x3c 16) | (nibbles[(i \x3e\x3e 8) \x26 15] \x3c\x3c 20) | (nibbles[(i \x3e\x3e 4) \x26 15] \x3c\x3c 24) | (nibbles[i \x26 15] \x3c\x3c 28);\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_reverseBytes__int(i) {\n    Integer.$clinit();\n    return ((i \x26 255) \x3c\x3c 24) | ((i \x26 65280) \x3c\x3c 8) | ((i \x26 16711680) \x3e\x3e 8) | ((i \x26 -16777216) \x3e\x3e\x3e 24 | 0);\n  }\n  \n  /**\n   * @param {number} i\n   * @param {number} distance\n   * @return {number}\n   * @public\n   */\n  static m_rotateLeft__int__int(i, distance) {\n    Integer.$clinit();\n    while (distance-- \x3e 0) {\n      i \x3d i \x3c\x3c 1 | ((i \x3c 0) ? 1 : 0);\n    }\n    return i;\n  }\n  \n  /**\n   * @param {number} i\n   * @param {number} distance\n   * @return {number}\n   * @public\n   */\n  static m_rotateRight__int__int(i, distance) {\n    Integer.$clinit();\n    let ui \x3d i \x26 Integer.f_MAX_VALUE__java_lang_Integer;\n    let carry \x3d (i \x3c 0) ? 1073741824 : 0;\n    while (distance-- \x3e 0) {\n      let nextcarry \x3d ui \x26 1;\n      ui \x3d carry | (ui \x3e\x3e 1);\n      carry \x3d (nextcarry \x3d\x3d 0) ? 0 : 1073741824;\n    }\n    if (carry !\x3d 0) {\n      ui \x3d ui | Integer.f_MIN_VALUE__java_lang_Integer;\n    }\n    return ui;\n  }\n  \n  /**\n   * @param {number} i\n   * @return {number}\n   * @public\n   */\n  static m_signum__int(i) {\n    Integer.$clinit();\n    if (i \x3d\x3d 0) {\n      return 0;\n    } else if (i \x3c 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_sum__int__int(a, b) {\n    Integer.$clinit();\n    return a + b;\n  }\n  \n  /**\n   * @param {number} value\n   * @return {?string}\n   * @public\n   */\n  static m_toBinaryString__int(value) {\n    Integer.$clinit();\n    return Integer.m_toUnsignedString__int__int_$p_java_lang_Integer(value, 2);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {?string}\n   * @public\n   */\n  static m_toHexString__int(value) {\n    Integer.$clinit();\n    return Integer.m_toUnsignedString__int__int_$p_java_lang_Integer(value, 16);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {?string}\n   * @public\n   */\n  static m_toOctalString__int(value) {\n    Integer.$clinit();\n    return Integer.m_toUnsignedString__int__int_$p_java_lang_Integer(value, 8);\n  }\n  \n  /**\n   * @param {number} value\n   * @param {number} radix\n   * @return {?string}\n   * @public\n   */\n  static m_toUnsignedString__int__int_$p_java_lang_Integer(value, radix) {\n    Integer.$clinit();\n    return Integer.m_toRadixString__double__int_$p_java_lang_Integer(Integer.m_toUnsigned__int_$p_java_lang_Integer(value), radix);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  // native static m_toUnsigned__int_$p_java_lang_Integer(value) \n  \n  /**\n   * @param {number} value\n   * @return {?string}\n   * @public\n   */\n  static m_toString__int(value) {\n    Integer.$clinit();\n    return j_l_String.m_valueOf__int(value);\n  }\n  \n  /**\n   * @param {number} value\n   * @param {number} radix\n   * @return {?string}\n   * @public\n   */\n  static m_toString__int__int(value, radix) {\n    Integer.$clinit();\n    if (radix \x3d\x3d 10 || radix \x3c Character.f_MIN_RADIX__java_lang_Character || radix \x3e Character.f_MAX_RADIX__java_lang_Character) {\n      return j_l_String.m_valueOf__int(value);\n    }\n    return Integer.m_toRadixString__double__int_$p_java_lang_Integer(value, radix);\n  }\n  \n  /**\n   * @param {number} value\n   * @param {number} radix\n   * @return {?string}\n   * @public\n   */\n  static m_toRadixString__double__int_$p_java_lang_Integer(value, radix) {\n    Integer.$clinit();\n    let number$1$ \x3d /**@type {Number} */ (JsUtils.m_uncheckedCast__java_lang_Object(value));\n    return number$1$.toString(radix);\n  }\n  \n  /**\n   * @param {number} i\n   * @return {Integer}\n   * @public\n   */\n  static m_valueOf__int(i) {\n    Integer.$clinit();\n    if (i \x3e -129 \x26\x26 i \x3c 128) {\n      let rebase \x3d i + 128;\n      let result \x3d BoxedValues.f_boxedValues__java_lang_Integer_BoxedValues_[rebase];\n      if ($Equality.$same(result, null)) {\n        result \x3d $Arrays.$set(BoxedValues.f_boxedValues__java_lang_Integer_BoxedValues_, rebase, Integer.$create__int(i));\n      }\n      return result;\n    }\n    return Integer.$create__int(i);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Integer}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Integer.$clinit();\n    return Integer.m_valueOf__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {Integer}\n   * @public\n   */\n  static m_valueOf__java_lang_String__int(s, radix) {\n    Integer.$clinit();\n    return Integer.m_valueOf__int(Integer.m_parseInt__java_lang_String__int(s, radix));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Integer(int)'.\n   * @param {number} value\n   * @return {!Integer}\n   * @public\n   */\n  static $create__int(value) {\n    Integer.$clinit();\n    let $instance \x3d new Integer();\n    $instance.$ctor__java_lang_Integer__int(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Integer(int)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Integer__int(value) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Integer_ \x3d value;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Integer(String)'.\n   * @param {?string} s\n   * @return {!Integer}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    Integer.$clinit();\n    let $instance \x3d new Integer();\n    $instance.$ctor__java_lang_Integer__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Integer(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Integer__java_lang_String(s) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Integer_ \x3d Integer.m_parseInt__java_lang_String(s);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_byteValue__() {\n    return $Primitives.$narrowIntToByte(this.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * @param {Integer} b\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Integer(b) {\n    return Integer.m_compare__int__int(this.f_value__java_lang_Integer_, b.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_doubleValue__() {\n    return this.f_value__java_lang_Integer_;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return Integer.$isInstance(o) \x26\x26 ((/**@type {Integer} */ ($Casts.$to(o, Integer))).f_value__java_lang_Integer_ \x3d\x3d this.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_floatValue__() {\n    return this.f_value__java_lang_Integer_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Integer.m_hashCode__int(this.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_intValue__() {\n    return this.f_value__java_lang_Integer_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_longValue__() {\n    return $Primitives.$widenIntToLong(this.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_shortValue__() {\n    return $Primitives.$narrowIntToShort(this.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return Integer.m_toString__int(this.f_value__java_lang_Integer_);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_lang_Integer(/**@type {Integer} */ ($Casts.$to(arg0, Integer)));\n  }\n  \n  /**\n   * @return {Class\x3cInteger\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Integer() {\n    return (Integer.$clinit(), Integer.$f_TYPE__java_lang_Integer);\n  }\n  \n  /**\n   * @param {Class\x3cInteger\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Integer(value) {\n    (Integer.$clinit(), Integer.$f_TYPE__java_lang_Integer \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Integer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Integer);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Integer.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    BoxedValues \x3d goog.module.get('java.lang.Integer.BoxedValues$impl');\n    ReverseNibbles \x3d goog.module.get('java.lang.Integer.ReverseNibbles$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    j_l_Number.$clinit();\n    Integer.$f_TYPE__java_lang_Integer \x3d Class.$get($int);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Integer, $Util.$makeClassName('java.lang.Integer'));\n\n\n/** @public {number} @const */\nInteger.f_MAX_VALUE__java_lang_Integer \x3d 2147483647;\n\n\n/** @public {number} @const */\nInteger.f_MIN_VALUE__java_lang_Integer \x3d -2147483648;\n\n\n/** @public {number} @const */\nInteger.f_SIZE__java_lang_Integer \x3d 32;\n\n\n/** @public {number} @const */\nInteger.f_BYTES__java_lang_Integer \x3d 4;\n\n\n/** @private {Class\x3cInteger\x3e} */\nInteger.$f_TYPE__java_lang_Integer;\n\n\nComparable.$markImplementor(Integer);\n\n\n/* NATIVE.JS EPILOG */\n\nconst java_lang_Integer \x3d Integer;\n\n/**\n * @param {number} value\n * @return {number}\n */\njava_lang_Integer.m_toUnsigned__int_$p_java_lang_Integer \x3d function(value) {\n  java_lang_Integer.$clinit();\n  // Might return a number that is larger than int32\n  return (value \x3e\x3e\x3e 0);\n};\n\n\nexports \x3d Integer; \n//# sourceMappingURL\x3dInteger.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Integer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Integer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Integer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Number \x3d goog.require('java.lang.Number');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _BoxedValues \x3d goog.require('java.lang.Integer.BoxedValues');\nconst _$Overlay \x3d goog.require('java.lang.Integer.NativeNumber.$Overlay');\nconst _ReverseNibbles \x3d goog.require('java.lang.Integer.ReverseNibbles');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar Integer \x3d goog.require('java.lang.Integer$impl');\nexports \x3d Integer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Hashing.impl.java.js
goog.loadModule("'use strict'"+'// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module(\'nativebootstrap.Hashing$impl\');\n\n\n/**\n * Utility functions for setting and retrieving system level hashcodes.\n */\nclass Hashing {\n  /**\n   * Gets a hash code on the passed-in object.\n   *\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static $getHashCode(obj) {\n    let o \x3d /** @type {Object} */ (obj);\n    return o.$systemHashCode || (Object.defineProperties(o, {\n             $systemHashCode:\n                 {value: Hashing.$getNextHashId(), enumerable: false}\n           }),\n                                 o.$systemHashCode);\n  }\n\n  /**\n   * Gets the next hash code.\n   *\n   * @return {number}\n   * @private\n   */\n  static $getNextHashId() {\n    return ++Hashing.$nextHashId_;\n  }\n};\n\n\n/**\n * @private {number}\n */\nHashing.$nextHashId_ \x3d 0;\n\n\n/**\n * Exported class.\n */\nexports \x3d Hashing;\n');

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Arrays.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('vmbootstrap.Arrays$impl');\n\n\n// Don't reformat these imports! The uncompiled test harness contains a bug\n// that will miss some multiline goog.require's.\nconst Constructor \x3d goog.require('javaemul.internal.Constructor');\nconst Hashing \x3d goog.require('nativebootstrap.Hashing$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JavaLangObject \x3d goog.forwardDeclare('java.lang.Object');\nlet Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n/**\n * Static Array helper and devirtualized functions.\n *\n * @public\n */\nclass Arrays {\n\n  /**\n   * Creates, initializes, and returns an array with the given number of\n   * dimensions, lengths and of the given type.\n   *\n   * @param {Array\x3cnumber\x3e} dimensionLengths\n   * @param {Object} leafType\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static $create(dimensionLengths, leafType) {\n    return Arrays.$createInternal_(\n        dimensionLengths, /** @type {Constructor} */ (leafType), leafType.$isInstance,\n        leafType.$isAssignableFrom, leafType.$initialArrayValue);\n  }\n\n  /**\n   * Creates, initializes, and returns a native array with the given\n   * number of dimensions.\n   * Note that this is only used for multi dimension native array creation since\n   * single dimension array creation uses a faster code path.\n   *\n   * @param {Array\x3cnumber\x3e} dimensionLengths\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static $createNative(dimensionLengths) {\n    return Arrays.$createRecursiveInternal_(dimensionLengths, null, undefined);\n  }\n\n  /**\n   * @param {Array\x3cnumber\x3e} dimensionLengths\n   * @param {Constructor} leafType\n   * @param {Function} leafTypeIsInstance\n   * @param {Function} leafTypeIsAssignableFrom\n   * @param {*} leafTypeInitialValue\n   * @return {Array\x3c*\x3e}\n   * @private\n   */\n  static $createInternal_(\n      dimensionLengths, leafType, leafTypeIsInstance, leafTypeIsAssignableFrom,\n      leafTypeInitialValue) {\n    return Arrays.$createRecursiveInternal_(\n        dimensionLengths, leafTypeInitialValue,\n        Arrays.$createMetadata_(\n            leafType, leafTypeIsInstance, leafTypeIsAssignableFrom,\n            dimensionLengths.length));\n  }\n\n  /**\n   * @param {Array\x3cnumber\x3e} dimensionLengths\n   * @param {*} leafTypeInitialValue\n   * @param {Arrays.Metadata_} metadata\n   * @return {Array\x3c*\x3e}\n   * @private\n   */\n  static $createRecursiveInternal_(dimensionLengths, leafTypeInitialValue, metadata) {\n    let length \x3d dimensionLengths[0];\n    if (length \x3d\x3d null) {\n      return null;\n    }\n    let array \x3d [];\n    array.length \x3d length;\n    if (metadata) {\n      array.$$arrayMetadata \x3d metadata;\n    }\n\n    if (dimensionLengths.length \x3e 1) {\n      // Contains sub arrays.\n      let subDimensionLengths \x3d dimensionLengths.slice(1);\n      let subComponentMetadata \x3d\n          metadata \x26\x26 Arrays.$createSubComponentMetadata_(metadata);\n      for (let i \x3d 0; i \x3c length; i++) {\n        array[i] \x3d Arrays.$createRecursiveInternal_(\n            subDimensionLengths, leafTypeInitialValue, subComponentMetadata);\n      }\n    } else {\n      // Contains leaf type values.\n      if (leafTypeInitialValue !\x3d\x3d undefined) {\n        // Replace with Array.fill() when there is broad browser support.\n        for (let index \x3d 0; index \x3c length; index++) {\n          array[index] \x3d leafTypeInitialValue;\n        }\n      } else {\n        // Object leaf types don't need a defined initial value because the\n        // Javascript array's default of 'undefined' works fine.\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Returns the given array after marking it with known # of dimensions and\n   * leafType.\n   * \x3cp\x3e\n   * Dimension count is optional and omission indicates 1 dimension.\n   * \x3cp\x3e\n   * Unlike array creation, the actual lengths of each dimension do not need to\n   * be specified because the passed array already contains values.\n   *\n   * @param {Array\x3c*\x3e} array\n   * @param {Object} leafType\n   * @param {number\x3d} opt_dimensionCount\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static $init(array, leafType, opt_dimensionCount) {\n    return Arrays.$initInternal_(\n        array, /** @type {Constructor} */ (leafType), leafType.$isInstance,\n        leafType.$isAssignableFrom, opt_dimensionCount || 1);\n  }\n\n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {Constructor} leafType\n   * @param {Function} leafTypeIsInstance\n   * @param {Function} leafTypeIsAssignableFrom\n   * @param {number} dimensionCount\n   * @return {Array\x3c*\x3e}\n   * @private\n   */\n  static $initInternal_(\n      array, leafType, leafTypeIsInstance, leafTypeIsAssignableFrom,\n      dimensionCount) {\n    return Arrays.$initRecursiveInternal_(\n        array,\n        Arrays.$createMetadata_(\n            leafType, leafTypeIsInstance, leafTypeIsAssignableFrom,\n            dimensionCount)\n\n    );\n  }\n\n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {Arrays.Metadata_} metadata\n   * @return {Array\x3c*\x3e}\n   * @private\n   */\n  static $initRecursiveInternal_(array, metadata) {\n    array.$$arrayMetadata \x3d metadata;\n\n    if (metadata.dimensionCount \x3e 1) {\n      let subComponentMetadata \x3d Arrays.$createSubComponentMetadata_(metadata);\n      for (let i \x3d 0; i \x3c array.length; i++) {\n        let nestedArray \x3d /** @type {Array\x3c*\x3e} */ (array[i]);\n        if (nestedArray) {\n          Arrays.$initRecursiveInternal_(nestedArray, subComponentMetadata);\n        }\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {Object} leafType\n   * @param {number} dimensionCount\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static $stampType(array, leafType, dimensionCount) {\n    return Arrays.$stampTypeInternal_(\n        array,\n        Arrays.$createMetadata_(\n            /** @type {Constructor} */ (leafType), leafType.$isInstance,\n            leafType.$isAssignableFrom, dimensionCount));\n  }\n\n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {Arrays.Metadata_} metadata\n   * @return {Array\x3c*\x3e}\n   * @private\n   */\n  static $stampTypeInternal_(array, metadata) {\n    array.$$arrayMetadata \x3d metadata;\n    return array;\n  }\n\n  /**\n   * Sets the given value into the given index in the given array.\n   *\n   * @template T\n   * @param {Array\x3c*\x3e} array\n   * @param {number} index\n   * @param {T} value\n   * @return {T}\n   * @public\n   */\n  static $set(array, index, value) {\n    Arrays.$clinit();\n\n    // TODO(goktug) remove m_isTypeChecked when $canSet_ could be marked or\n    // proved as side effect free.\n    if (InternalPreconditions.m_isTypeChecked__()) {\n      InternalPreconditions.m_checkArrayType__boolean(\n          value \x3d\x3d null || Arrays.$canSet_(array, index, value));\n    }\n\n    return array[index] \x3d value;\n  }\n\n  /**\n   * @template T\n   * @param {Array\x3c*\x3e} array\n   * @param {number} index\n   * @param {T} value\n   * @return {boolean}\n   * @private\n   */\n  static $canSet_(array, index, value) {\n    // Only check when the array has metadata.\n    var metadata \x3d Arrays.$getMetadata_(array);\n    if (metadata) {\n      if (metadata.dimensionCount \x3e 1) {\n        if (!Arrays.$instanceIsOfTypeInternal_(\n                value, metadata.leafType, metadata.leafTypeIsAssignableFrom,\n                metadata.dimensionCount - 1)) {\n          // The inserted array must fit dimensions and the array leaf type.\n          return false;\n        }\n      } else if (value !\x3d null \x26\x26 !metadata.leafTypeIsInstance(value)) {\n        // The inserted value must fit the array leaf type.\n        // If leafType is not a primitive type, a 'null' should always be a\n        // legal value. If leafType is a primitive type, value cannot be null\n        // because that is illegal in Java.\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Changes the given array's to the given leafType.\n   *\n   * @param {Array\x3c*\x3e} array\n   * @param {Array\x3c*\x3e} otherArray\n   * @public\n   */\n  static $copyType(array, otherArray) {\n    array.$$arrayMetadata \x3d Arrays.$getMetadata_(otherArray);\n  }\n\n  /**\n   * Returns whether the given instance is an array, whether it has the given\n   * number of dimensions and whether its leaf type is assignable from the given\n   * leaf type.\n   *\n   * @param {*} instance\n   * @param {Object} requiredLeafType\n   * @param {number} requiredDimensionCount\n   * @return {boolean}\n   * @public\n   */\n  static $instanceIsOfType(instance, requiredLeafType, requiredDimensionCount) {\n    return Arrays.$instanceIsOfTypeInternal_(\n        instance, /** @type {Constructor} */ (requiredLeafType),\n        requiredLeafType.$isAssignableFrom, requiredDimensionCount);\n  }\n\n  /**\n   * @param {*} instance\n   * @param {Constructor} requiredLeafType\n   * @param {Function} requiredLeafTypeIsAssignableFrom\n   * @param {number} requiredDimensionCount\n   * @return {boolean}\n   * @private\n   */\n  static $instanceIsOfTypeInternal_(\n      instance, requiredLeafType, requiredLeafTypeIsAssignableFrom,\n      requiredDimensionCount) {\n    Arrays.$clinit();\n    if (instance \x3d\x3d null || !Array.isArray(instance)) {\n      // Null or not an Array can't cast.\n      return false;\n    }\n\n    var metadata \x3d Arrays.$getMetadata_(instance) ||\n        /** @type {Arrays.Metadata_} */ ({dimensionCount: 1});\n\n    var effectiveInstanceDimensionCount \x3d metadata.dimensionCount;\n    if (effectiveInstanceDimensionCount \x3d\x3d requiredDimensionCount) {\n      // If dimensions are equal then the leaftypes must be castable.\n      return requiredLeafTypeIsAssignableFrom(metadata.leafType);\n    }\n    if (effectiveInstanceDimensionCount \x3e requiredDimensionCount) {\n      // If shrinking the dimensions then the new leaf type must *be* Object.\n      return JavaLangObject \x3d\x3d requiredLeafType;\n    }\n    return false;\n  }\n\n  /**\n   * Returns whether the given instance is a raw JS array.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $instanceIsOfNative(instance) {\n    return Array.isArray(instance);\n  }\n\n  /**\n   * Casts the provided instance to the provided array type.\n   * \x3cp\x3e\n   * If the cast is invalid then an exception will be thrown otherwise the\n   * provided instance is returned.\n   *\n   * @param {*} instance\n   * @param {Object} requiredLeafType\n   * @param {number} requiredDimensionCount\n   * @return {*}\n   * @public\n   */\n  static $castTo(instance, requiredLeafType, requiredDimensionCount) {\n    return Arrays.$castToInternal_(\n        instance, /** @type {Constructor} */ (requiredLeafType),\n        requiredLeafType.$isAssignableFrom, requiredDimensionCount);\n  }\n\n  /**\n   * @param {*} instance\n   * @param {Constructor} requiredLeafType\n   * @param {Function} requiredLeafTypeIsAssignableFrom\n   * @param {number} requiredDimensionCount\n   * @return {*}\n   * @private\n   */\n  static $castToInternal_(\n      instance, requiredLeafType, requiredLeafTypeIsAssignableFrom,\n      requiredDimensionCount) {\n    Arrays.$clinit();\n    if (InternalPreconditions.m_isTypeChecked__()) {\n      const castSucceeds \x3d instance \x3d\x3d null ||\n          Arrays.$instanceIsOfTypeInternal_(\n              instance, requiredLeafType, requiredLeafTypeIsAssignableFrom,\n              requiredDimensionCount);\n      if (!castSucceeds) {\n        // We don't delegate to a common throw function because it confuses\n        // JSCompiler's inliner and costs 1% code size.\n        const castTypeClass \x3d\n            Class.$get(requiredLeafType, requiredDimensionCount);\n        const instanceTypeClass \x3d\n            Objects.m_getClass__java_lang_Object(instance);\n        const message \x3d instanceTypeClass.m_getName__() +\n            ' cannot be cast to ' + castTypeClass.m_getName__();\n        InternalPreconditions.m_checkType__boolean__java_lang_String(\n            false, message);\n      }\n    }\n    return instance;\n  }\n\n  /**\n   * Casts the provided instance to a raw JS array type. It is valid if the\n   * instance is a JS array.\n   * \x3cp\x3e\n   * If the cast is invalid then an exception will be thrown otherwise the\n   * provided instance is returned.\n   *\n   * @param {*} instance\n   * @return {*}\n   * @public\n   */\n  static $castToNative(instance) {\n    Arrays.$clinit();\n    InternalPreconditions.m_checkType__boolean(\n        instance \x3d\x3d null || Array.isArray(instance));\n    return instance;\n  }\n\n  /**\n   * @param {Array\x3c*\x3e} obj\n   * @return {string}\n   * @public\n   */\n  static m_toString__java_lang_Object(obj) {\n    Arrays.$clinit();\n    return Arrays.m_getClass__java_lang_Object(obj).m_getName__() + '@' +\n        Integer.m_toHexString__int(Hashing.$getHashCode(obj));\n  }\n\n  /**\n   * @param {Array\x3c*\x3e} obj\n   * @return {Class}\n   * @public\n   */\n  static m_getClass__java_lang_Object(obj) {\n    Arrays.$clinit();\n    var metadata \x3d Arrays.$getMetadata_(obj);\n    if (metadata) {\n      return Class.$get(metadata.leafType, metadata.dimensionCount);\n    }\n    // Uninitialized arrays lack a 'leafType' but are implicitly Object[].\n    return Class.$get(JavaLangObject, 1);\n  }\n\n  /**\n   * @param {Arrays.Metadata_} metadata\n   * @return {Arrays.Metadata_}\n   * @private\n   */\n  static $createSubComponentMetadata_(metadata) {\n    return Arrays.$createMetadata_(\n        metadata.leafType,\n        metadata.leafTypeIsInstance,\n        metadata.leafTypeIsAssignableFrom,\n        metadata.dimensionCount - 1\n    );\n  }\n\n  /**\n   * @param {Constructor} leafType\n   * @param {Function} leafTypeIsInstance\n   * @param {Function} leafTypeIsAssignableFrom\n   * @param {number} dimensionCount\n   * @return {Arrays.Metadata_}\n   * @private\n   */\n  static $createMetadata_(\n      leafType, leafTypeIsInstance, leafTypeIsAssignableFrom, dimensionCount) {\n    return {\n      leafType: leafType,\n      leafTypeIsInstance: leafTypeIsInstance,\n      leafTypeIsAssignableFrom: leafTypeIsAssignableFrom,\n      dimensionCount: dimensionCount\n    };\n  }\n\n   /**\n    * @param {Array\x3c*\x3e} array\n    * @return {Arrays.Metadata_}\n    * @private\n    */\n  static $getMetadata_(array) {\n    var enhancedArray \x3d /** @type {Arrays.EnhancedArray_} */ (array);\n    return enhancedArray.$$arrayMetadata;\n  }\n\n  /**\n   * Runs inline static field initializers.\n   * @public\n   */\n  static $clinit() {\n    Arrays.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class');\n    JavaLangObject \x3d goog.module.get('java.lang.Object');\n    Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    InternalPreconditions \x3d\n        goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n}\n\n\n/**\n * A typedef for the extra properties added to new arrays which are created via\n * this class. These properties allow for  emulation of Java array semantics.\n *\n * @typedef {{\n *   leafType: Function,\n *   leafTypeIsInstance: Function,\n *   leafTypeIsAssignableFrom: Function,\n *   dimensionCount: number,\n * }}\n * @private\n */\nArrays.Metadata_;\n\n/**\n * Arrays.Metadata_ enhanced Array.\n *\n * @typedef {{\n *   $$arrayMetadata: Arrays.Metadata_,\n *   length: number\n * }}\n * @private\n */\nArrays.EnhancedArray_;\n\n\n/**\n * Exported class.\n */\nexports \x3d Arrays;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Arrays.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {extraRequire, lateProvide}\n */\ngoog.module('vmbootstrap.Arrays');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Object \x3d goog.require('java.lang.Object');\nconst _Objects \x3d goog.require('vmbootstrap.Objects');\nconst _InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nconst Arrays \x3d goog.require('vmbootstrap.Arrays$impl');\nexports \x3d Arrays;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Character$BoxedValues.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Character$BoxedValues.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Character.BoxedValues$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\nclass BoxedValues extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'BoxedValues()'.\n   * @return {!BoxedValues}\n   * @public\n   */\n  static $create__() {\n    BoxedValues.$clinit();\n    let $instance \x3d new BoxedValues();\n    $instance.$ctor__java_lang_Character_BoxedValues__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'BoxedValues()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Character_BoxedValues__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cCharacter\x3e}\n   * @public\n   */\n  static get f_boxedValues__java_lang_Character_BoxedValues_() {\n    return (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Character_BoxedValues_);\n  }\n  \n  /**\n   * @param {Array\x3cCharacter\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_boxedValues__java_lang_Character_BoxedValues_(value) {\n    (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Character_BoxedValues_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BoxedValues;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BoxedValues);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BoxedValues.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n    BoxedValues.$f_boxedValues__java_lang_Character_BoxedValues_ \x3d /**@type {!Array\x3cCharacter\x3e} */ ($Arrays.$create([128], Character));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BoxedValues, $Util.$makeClassName('java.lang.Character$BoxedValues'));\n\n\n/** @private {Array\x3cCharacter\x3e} */\nBoxedValues.$f_boxedValues__java_lang_Character_BoxedValues_;\n\n\n\n\nexports \x3d BoxedValues; \n//# sourceMappingURL\x3dCharacter$BoxedValues.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Character$BoxedValues.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Character$BoxedValues.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Character.BoxedValues');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar BoxedValues \x3d goog.require('java.lang.Character.BoxedValues$impl');\nexports \x3d BoxedValues;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Runnable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Runnable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Runnable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.lang.Runnable.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass Runnable {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_run__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {Runnable}\n   * @public\n   */\n  static $adapt(fn) {\n    Runnable.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_Runnable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_lang_Runnable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_Runnable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Runnable.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.lang.Runnable.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Runnable, $Util.$makeClassName('java.lang.Runnable'));\n\n\nRunnable.$markImplementor(/** @type {Function} */ (Runnable));\n\n\nexports \x3d Runnable; \n//# sourceMappingURL\x3dRunnable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Runnable$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Runnable$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Runnable.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Runnable \x3d goog.require('java.lang.Runnable$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {Runnable}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__java_lang_Runnable_$LambdaAdaptor;\n    this.$ctor__java_lang_Runnable_$LambdaAdaptor__java_lang_Runnable_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Runnable_$LambdaAdaptor__java_lang_Runnable_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_lang_Runnable_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_run__() {\n    {\n      let $function \x3d this.f_$$fn__java_lang_Runnable_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.lang.Runnable$$LambdaAdaptor'));\n\n\nRunnable.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dRunnable$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Runnable$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Runnable$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Runnable.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.lang.Runnable.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Runnable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Runnable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Runnable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.lang.Runnable.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar Runnable \x3d goog.require('java.lang.Runnable$impl');\nexports \x3d Runnable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/IllegalStateException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.IllegalStateException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.IllegalStateException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\n\n\nclass IllegalStateException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalStateException()'.\n   * @return {!IllegalStateException}\n   * @public\n   */\n  static $create__() {\n    IllegalStateException.$clinit();\n    let $instance \x3d new IllegalStateException();\n    $instance.$ctor__java_lang_IllegalStateException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalStateException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalStateException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalStateException(String)'.\n   * @param {?string} s\n   * @return {!IllegalStateException}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    IllegalStateException.$clinit();\n    let $instance \x3d new IllegalStateException();\n    $instance.$ctor__java_lang_IllegalStateException__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalStateException(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalStateException__java_lang_String(s) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(s);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalStateException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!IllegalStateException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    IllegalStateException.$clinit();\n    let $instance \x3d new IllegalStateException();\n    $instance.$ctor__java_lang_IllegalStateException__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalStateException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalStateException__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalStateException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!IllegalStateException}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    IllegalStateException.$clinit();\n    let $instance \x3d new IllegalStateException();\n    $instance.$ctor__java_lang_IllegalStateException__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalStateException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalStateException__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IllegalStateException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IllegalStateException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IllegalStateException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IllegalStateException, $Util.$makeClassName('java.lang.IllegalStateException'));\n\n\n\n\nexports \x3d IllegalStateException; \n//# sourceMappingURL\x3dIllegalStateException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/IllegalStateException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.IllegalStateException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.IllegalStateException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\n\n\n// Re-exports the implementation.\nvar IllegalStateException \x3d goog.require('java.lang.IllegalStateException$impl');\nexports \x3d IllegalStateException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Long$BoxedValues.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Long$BoxedValues.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Long.BoxedValues$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\nclass BoxedValues extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'BoxedValues()'.\n   * @return {!BoxedValues}\n   * @public\n   */\n  static $create__() {\n    BoxedValues.$clinit();\n    let $instance \x3d new BoxedValues();\n    $instance.$ctor__java_lang_Long_BoxedValues__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'BoxedValues()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Long_BoxedValues__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cLong\x3e}\n   * @public\n   */\n  static get f_boxedValues__java_lang_Long_BoxedValues() {\n    return (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Long_BoxedValues);\n  }\n  \n  /**\n   * @param {Array\x3cLong\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_boxedValues__java_lang_Long_BoxedValues(value) {\n    (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Long_BoxedValues \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BoxedValues;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BoxedValues);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BoxedValues.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n    BoxedValues.$f_boxedValues__java_lang_Long_BoxedValues \x3d /**@type {!Array\x3cLong\x3e} */ ($Arrays.$create([256], Long));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BoxedValues, $Util.$makeClassName('java.lang.Long$BoxedValues'));\n\n\n/** @private {Array\x3cLong\x3e} */\nBoxedValues.$f_boxedValues__java_lang_Long_BoxedValues;\n\n\n\n\nexports \x3d BoxedValues; \n//# sourceMappingURL\x3dLong$BoxedValues.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Long$BoxedValues.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Long$BoxedValues.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Long.BoxedValues');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar BoxedValues \x3d goog.require('java.lang.Long.BoxedValues$impl');\nexports \x3d BoxedValues;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Math.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Math.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Math$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass j_l_Math extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Math()'.\n   * @return {!j_l_Math}\n   * @public\n   */\n  static $create__() {\n    j_l_Math.$clinit();\n    let $instance \x3d new j_l_Math();\n    $instance.$ctor__java_lang_Math__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Math()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Math__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {!$Long}\n   * @public\n   */\n  static m_abs__long(x) {\n    j_l_Math.$clinit();\n    return $LongUtils.$less(x, $Primitives.$widenIntToLong(0)) ? $LongUtils.$negate(x) : x;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_addExact__int__int(x, y) {\n    j_l_Math.$clinit();\n    let r \x3d x + y;\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(j_l_Math.m_isSafeIntegerRange__double_$p_java_lang_Math(r));\n    return $Primitives.$narrowDoubleToInt(r);\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @param {!$Long} y\n   * @return {!$Long}\n   * @public\n   */\n  static m_addExact__long__long(x, y) {\n    j_l_Math.$clinit();\n    let r \x3d $LongUtils.$plus(x, y);\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$greaterEquals($LongUtils.$and($LongUtils.$xor(x, r), $LongUtils.$xor(y, r)), $Primitives.$widenIntToLong(0)));\n    return r;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_cbrt__double(x) {\n    j_l_Math.$clinit();\n    return x \x3d\x3d 0 || !isFinite(x) ? x : Math.pow(x, 1.0 / 3.0);\n  }\n  \n  /**\n   * @param {number} magnitude\n   * @param {number} sign\n   * @return {number}\n   * @public\n   */\n  static m_copySign__double__double(magnitude, sign) {\n    j_l_Math.$clinit();\n    return j_l_Math.m_isNegative__double_$p_java_lang_Math(sign) ? -Math.abs(magnitude) : Math.abs(magnitude);\n  }\n  \n  /**\n   * @param {number} d\n   * @return {boolean}\n   * @public\n   */\n  static m_isNegative__double_$p_java_lang_Math(d) {\n    j_l_Math.$clinit();\n    return d \x3c 0 || 1 / d \x3c 0;\n  }\n  \n  /**\n   * @param {number} magnitude\n   * @param {number} sign\n   * @return {number}\n   * @public\n   */\n  static m_copySign__float__float(magnitude, sign) {\n    j_l_Math.$clinit();\n    return j_l_Math.m_copySign__double__double(magnitude, sign);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_cosh__double(x) {\n    j_l_Math.$clinit();\n    return (Math.exp(x) + Math.exp(-x)) / 2;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_decrementExact__int(x) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(x !\x3d Integer.f_MIN_VALUE__java_lang_Integer);\n    return x - 1;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {!$Long}\n   * @public\n   */\n  static m_decrementExact__long(x) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$notEquals(x, Long.f_MIN_VALUE__java_lang_Long));\n    return $LongUtils.$minus(x, $Primitives.$widenIntToLong(1));\n  }\n  \n  /**\n   * @param {number} d\n   * @return {number}\n   * @public\n   */\n  static m_expm1__double(d) {\n    j_l_Math.$clinit();\n    return d \x3d\x3d 0 ? d : Math.exp(d) - 1;\n  }\n  \n  /**\n   * @param {number} dividend\n   * @param {number} divisor\n   * @return {number}\n   * @public\n   */\n  static m_floorDiv__int__int(dividend, divisor) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(divisor !\x3d 0);\n    return ((dividend ^ divisor) \x3e\x3d 0 ? $Primitives.$coerceDivision(dividend / divisor) : $Primitives.$coerceDivision((dividend + 1) / divisor) - 1);\n  }\n  \n  /**\n   * @param {!$Long} dividend\n   * @param {!$Long} divisor\n   * @return {!$Long}\n   * @public\n   */\n  static m_floorDiv__long__long(dividend, divisor) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$notEquals(divisor, $Primitives.$widenIntToLong(0)));\n    return ($LongUtils.$greaterEquals($LongUtils.$xor(dividend, divisor), $Primitives.$widenIntToLong(0)) ? $LongUtils.$divide(dividend, divisor) : $LongUtils.$minus($LongUtils.$divide($LongUtils.$plus(dividend, $Primitives.$widenIntToLong(1)), divisor), $Primitives.$widenIntToLong(1)));\n  }\n  \n  /**\n   * @param {number} dividend\n   * @param {number} divisor\n   * @return {number}\n   * @public\n   */\n  static m_floorMod__int__int(dividend, divisor) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(divisor !\x3d 0);\n    return $Primitives.$coerceDivision(($Primitives.$coerceDivision(dividend % divisor) + divisor) % divisor);\n  }\n  \n  /**\n   * @param {!$Long} dividend\n   * @param {!$Long} divisor\n   * @return {!$Long}\n   * @public\n   */\n  static m_floorMod__long__long(dividend, divisor) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$notEquals(divisor, $Primitives.$widenIntToLong(0)));\n    return $LongUtils.$remainder($LongUtils.$plus($LongUtils.$remainder(dividend, divisor), divisor), divisor);\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_hypot__double__double(x, y) {\n    j_l_Math.$clinit();\n    return Double.m_isInfinite__double(x) || Double.m_isInfinite__double(y) ? Double.f_POSITIVE_INFINITY__java_lang_Double : Math.sqrt(x * x + y * y);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_incrementExact__int(x) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(x !\x3d Integer.f_MAX_VALUE__java_lang_Integer);\n    return x + 1;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {!$Long}\n   * @public\n   */\n  static m_incrementExact__long(x) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$notEquals(x, Long.f_MAX_VALUE__java_lang_Long));\n    return $LongUtils.$plus(x, $Primitives.$widenIntToLong(1));\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_log10__double(x) {\n    j_l_Math.$clinit();\n    return Math.log(x) * Math.LOG10E;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_log1p__double(x) {\n    j_l_Math.$clinit();\n    return x \x3d\x3d 0 ? x : Math.log(x + 1);\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @param {!$Long} y\n   * @return {!$Long}\n   * @public\n   */\n  static m_max__long__long(x, y) {\n    j_l_Math.$clinit();\n    return $LongUtils.$greater(x, y) ? x : y;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @param {!$Long} y\n   * @return {!$Long}\n   * @public\n   */\n  static m_min__long__long(x, y) {\n    j_l_Math.$clinit();\n    return $LongUtils.$less(x, y) ? x : y;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_multiplyExact__int__int(x, y) {\n    j_l_Math.$clinit();\n    let r \x3d x * y;\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(j_l_Math.m_isSafeIntegerRange__double_$p_java_lang_Math(r));\n    return $Primitives.$narrowDoubleToInt(r);\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @param {!$Long} y\n   * @return {!$Long}\n   * @public\n   */\n  static m_multiplyExact__long__long(x, y) {\n    j_l_Math.$clinit();\n    if ($LongUtils.$equals(y, $Primitives.$widenIntToLong(-1))) {\n      return j_l_Math.m_negateExact__long(x);\n    }\n    if ($LongUtils.$equals(y, $Primitives.$widenIntToLong(0))) {\n      return $Long.fromInt(0);\n    }\n    let r \x3d $LongUtils.$times(x, y);\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$equals($LongUtils.$divide(r, y), x));\n    return r;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_negateExact__int(x) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(x !\x3d Integer.f_MIN_VALUE__java_lang_Integer);\n    return -x;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {!$Long}\n   * @public\n   */\n  static m_negateExact__long(x) {\n    j_l_Math.$clinit();\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$notEquals(x, Long.f_MIN_VALUE__java_lang_Long));\n    return $LongUtils.$negate(x);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_rint__double(x) {\n    j_l_Math.$clinit();\n    if (Math.abs(x) \x3c $Primitives.$widenLongToDouble($LongUtils.$leftShift($Long.fromInt(1), 52))) {\n      let mod2 \x3d x % 2;\n      if ((mod2 \x3d\x3d -1.5) || (mod2 \x3d\x3d 0.5)) {\n        x \x3d Math.floor(x);\n      } else {\n        x \x3d $Primitives.$widenLongToDouble(j_l_Math.m_round__double(x));\n      }\n    }\n    return x;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {!$Long}\n   * @public\n   */\n  static m_round__double(x) {\n    j_l_Math.$clinit();\n    return $Primitives.$narrowDoubleToLong(Math.round(x));\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_round__float(x) {\n    j_l_Math.$clinit();\n    return $Primitives.$narrowDoubleToInt(Math.round(x));\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_subtractExact__int__int(x, y) {\n    j_l_Math.$clinit();\n    let r \x3d x - y;\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean(j_l_Math.m_isSafeIntegerRange__double_$p_java_lang_Math(r));\n    return $Primitives.$narrowDoubleToInt(r);\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @param {!$Long} y\n   * @return {!$Long}\n   * @public\n   */\n  static m_subtractExact__long__long(x, y) {\n    j_l_Math.$clinit();\n    let r \x3d $LongUtils.$minus(x, y);\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$greaterEquals($LongUtils.$and($LongUtils.$xor(x, y), $LongUtils.$xor(x, r)), $Primitives.$widenIntToLong(0)));\n    return r;\n  }\n  \n  /**\n   * @param {number} d\n   * @param {number} scaleFactor\n   * @return {number}\n   * @public\n   */\n  static m_scalb__double__int(d, scaleFactor) {\n    j_l_Math.$clinit();\n    if (scaleFactor \x3e\x3d 31 || scaleFactor \x3c\x3d -31) {\n      return d * Math.pow(2, scaleFactor);\n    } else if (scaleFactor \x3e 0) {\n      return d * (1 \x3c\x3c scaleFactor);\n    } else if (scaleFactor \x3d\x3d 0) {\n      return d;\n    } else {\n      return d / (1 \x3c\x3c -scaleFactor);\n    }\n  }\n  \n  /**\n   * @param {number} f\n   * @param {number} scaleFactor\n   * @return {number}\n   * @public\n   */\n  static m_scalb__float__int(f, scaleFactor) {\n    j_l_Math.$clinit();\n    return j_l_Math.m_scalb__double__int(f, scaleFactor);\n  }\n  \n  /**\n   * @param {number} d\n   * @return {number}\n   * @public\n   */\n  static m_signum__double(d) {\n    j_l_Math.$clinit();\n    if (d \x3d\x3d 0 || isNaN(d)) {\n      return d;\n    } else {\n      return d \x3c 0 ? -1 : 1;\n    }\n  }\n  \n  /**\n   * @param {number} f\n   * @return {number}\n   * @public\n   */\n  static m_signum__float(f) {\n    j_l_Math.$clinit();\n    return j_l_Math.m_signum__double(f);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_sinh__double(x) {\n    j_l_Math.$clinit();\n    return x \x3d\x3d 0 ? x : (Math.exp(x) - Math.exp(-x)) / 2;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_tanh__double(x) {\n    j_l_Math.$clinit();\n    if (x \x3d\x3d 0.0) {\n      return x;\n    } else if (Double.m_isInfinite__double(x)) {\n      return j_l_Math.m_signum__double(x);\n    } else {\n      let e2x \x3d Math.exp(2 * x);\n      return (e2x - 1) / (e2x + 1);\n    }\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_toDegrees__double(x) {\n    j_l_Math.$clinit();\n    return x * j_l_Math.f_PI_UNDER_180__java_lang_Math_;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {number}\n   * @public\n   */\n  static m_toIntExact__long(x) {\n    j_l_Math.$clinit();\n    let ix \x3d $Primitives.$narrowLongToInt(x);\n    $InternalPreconditions.m_checkCriticalArithmetic__boolean($LongUtils.$equals($Primitives.$widenIntToLong(ix), x));\n    return ix;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {number}\n   * @public\n   */\n  static m_toRadians__double(x) {\n    j_l_Math.$clinit();\n    return x * j_l_Math.f_PI_OVER_180__java_lang_Math_;\n  }\n  \n  /**\n   * @param {number} value\n   * @return {boolean}\n   * @public\n   */\n  static m_isSafeIntegerRange__double_$p_java_lang_Math(value) {\n    j_l_Math.$clinit();\n    return Integer.f_MIN_VALUE__java_lang_Integer \x3c\x3d value \x26\x26 value \x3c\x3d Integer.f_MAX_VALUE__java_lang_Integer;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof j_l_Math;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, j_l_Math);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    j_l_Math.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(j_l_Math, $Util.$makeClassName('java.lang.Math'));\n\n\n/** @public {number} @const */\nj_l_Math.f_E__java_lang_Math \x3d 2.718281828459045;\n\n\n/** @public {number} @const */\nj_l_Math.f_PI__java_lang_Math \x3d 3.141592653589793;\n\n\n/** @public {number} @const */\nj_l_Math.f_PI_OVER_180__java_lang_Math_ \x3d 0.017453292519943295;\n\n\n/** @public {number} @const */\nj_l_Math.f_PI_UNDER_180__java_lang_Math_ \x3d 57.29577951308232;\n\n\n\n\nexports \x3d j_l_Math; \n//# sourceMappingURL\x3dMath.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Math.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Math.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Math');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar j_l_Math \x3d goog.require('java.lang.Math$impl');\nexports \x3d j_l_Math;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/char.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$char$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class char.\n *\n * Non-instantiable.\n */\nclass $char {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $char;\n  }\n};\n\n\n/**\n * @public {number}\n */\n$char.$initialArrayValue \x3d 0;\n\n\n$Util.$setClassMetadataForPrimitive($char, 'char', 'C');\n\n\n/**\n * Exported class.\n */\nexports \x3d $char;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/char.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$char');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $char \x3d goog.require('vmbootstrap.primitives.$char$impl');\nexports \x3d $char;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/long.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$long$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst Long \x3d goog.require('nativebootstrap.Long$impl');\n\n\n/**\n * Placeholder class definition for the primitive class long.\n *\n * Non-instantiable.\n */\nclass $long {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $long;\n  }\n};\n\n\n/**\n * @public {Long}\n */\n$long.$initialArrayValue \x3d Long.fromInt(0);\n\n\n$Util.$setClassMetadataForPrimitive($long, 'long', 'J');\n\n\n/**\n * Exported class.\n */\nexports \x3d $long;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/long.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$long');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('nativebootstrap.Long$impl');\n\n\n// Re-exports the implementation.\nconst $long \x3d goog.require('vmbootstrap.primitives.$long$impl');\nexports \x3d $long;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Long.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Long.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Long$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst Number \x3d goog.require('java.lang.Number$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet BoxedValues \x3d goog.forwardDeclare('java.lang.Long.BoxedValues$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\n/**\n * @implements {Comparable\x3cLong\x3e}\n  */\nclass Long extends Number {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_value__java_lang_Long_ \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {number}\n   * @public\n   */\n  static m_bitCount__long(i) {\n    Long.$clinit();\n    let high \x3d $Primitives.$narrowLongToInt($LongUtils.$rightShiftSigned(i, 32));\n    let low \x3d $Primitives.$narrowLongToInt(i);\n    return Integer.m_bitCount__int(high) + Integer.m_bitCount__int(low);\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @param {!$Long} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__long__long(x, y) {\n    Long.$clinit();\n    if ($LongUtils.$less(x, y)) {\n      return -1;\n    } else if ($LongUtils.$greater(x, y)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Long}\n   * @public\n   */\n  static m_decode__java_lang_String(s) {\n    Long.$clinit();\n    let decode \x3d Number.m___decodeNumberString__java_lang_String(s);\n    return Long.m_valueOf__java_lang_String__int(decode.f_payload__java_lang_Number___Decode, decode.f_radix__java_lang_Number___Decode);\n  }\n  \n  /**\n   * @param {!$Long} l\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__long(l) {\n    Long.$clinit();\n    return $Primitives.$narrowLongToInt(l);\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {!$Long}\n   * @public\n   */\n  static m_highestOneBit__long(i) {\n    Long.$clinit();\n    let high \x3d $Primitives.$narrowLongToInt($LongUtils.$rightShiftSigned(i, 32));\n    if (high !\x3d 0) {\n      return $LongUtils.$leftShift($Primitives.$widenIntToLong(Integer.m_highestOneBit__int(high)), 32);\n    } else {\n      return $LongUtils.$and($Primitives.$widenIntToLong(Integer.m_highestOneBit__int($Primitives.$narrowLongToInt(i))), $Long.fromBits(-1, 0) /* 4294967295 */);\n    }\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {!$Long}\n   * @public\n   */\n  static m_lowestOneBit__long(i) {\n    Long.$clinit();\n    return $LongUtils.$and(i, $LongUtils.$negate(i));\n  }\n  \n  /**\n   * @param {!$Long} a\n   * @param {!$Long} b\n   * @return {!$Long}\n   * @public\n   */\n  static m_max__long__long(a, b) {\n    Long.$clinit();\n    return Math.m_max__long__long(a, b);\n  }\n  \n  /**\n   * @param {!$Long} a\n   * @param {!$Long} b\n   * @return {!$Long}\n   * @public\n   */\n  static m_min__long__long(a, b) {\n    Long.$clinit();\n    return Math.m_min__long__long(a, b);\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {number}\n   * @public\n   */\n  static m_numberOfLeadingZeros__long(i) {\n    Long.$clinit();\n    let high \x3d $Primitives.$narrowLongToInt($LongUtils.$rightShiftSigned(i, 32));\n    if (high !\x3d 0) {\n      return Integer.m_numberOfLeadingZeros__int(high);\n    } else {\n      return Integer.m_numberOfLeadingZeros__int($Primitives.$narrowLongToInt(i)) + 32;\n    }\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {number}\n   * @public\n   */\n  static m_numberOfTrailingZeros__long(i) {\n    Long.$clinit();\n    let low \x3d $Primitives.$narrowLongToInt(i);\n    if (low !\x3d 0) {\n      return Integer.m_numberOfTrailingZeros__int(low);\n    } else {\n      return Integer.m_numberOfTrailingZeros__int($Primitives.$narrowLongToInt($LongUtils.$rightShiftSigned(i, 32))) + 32;\n    }\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {!$Long}\n   * @public\n   */\n  static m_parseLong__java_lang_String(s) {\n    Long.$clinit();\n    return Long.m_parseLong__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {!$Long}\n   * @public\n   */\n  static m_parseLong__java_lang_String__int(s, radix) {\n    Long.$clinit();\n    return Number.m___parseAndValidateLong__java_lang_String__int(s, radix);\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {!$Long}\n   * @public\n   */\n  static m_reverse__long(i) {\n    Long.$clinit();\n    let high \x3d $Primitives.$narrowLongToInt($LongUtils.$rightShiftUnsigned(i, 32));\n    let low \x3d $Primitives.$narrowLongToInt(i);\n    return $LongUtils.$or($LongUtils.$leftShift($Primitives.$widenIntToLong(Integer.m_reverse__int(low)), 32), $LongUtils.$and($Primitives.$widenIntToLong(Integer.m_reverse__int(high)), $Long.fromBits(-1, 0) /* 4294967295 */));\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {!$Long}\n   * @public\n   */\n  static m_reverseBytes__long(i) {\n    Long.$clinit();\n    let high \x3d $Primitives.$narrowLongToInt($LongUtils.$rightShiftUnsigned(i, 32));\n    let low \x3d $Primitives.$narrowLongToInt(i);\n    return $LongUtils.$or($LongUtils.$leftShift($Primitives.$widenIntToLong(Integer.m_reverseBytes__int(low)), 32), $LongUtils.$and($Primitives.$widenIntToLong(Integer.m_reverseBytes__int(high)), $Long.fromBits(-1, 0) /* 4294967295 */));\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @param {number} distance\n   * @return {!$Long}\n   * @public\n   */\n  static m_rotateLeft__long__int(i, distance) {\n    Long.$clinit();\n    while (distance-- \x3e 0) {\n      i \x3d $LongUtils.$or($LongUtils.$leftShift(i, 1), $Primitives.$widenIntToLong(($LongUtils.$less(i, $Primitives.$widenIntToLong(0)) ? 1 : 0)));\n    }\n    return i;\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @param {number} distance\n   * @return {!$Long}\n   * @public\n   */\n  static m_rotateRight__long__int(i, distance) {\n    Long.$clinit();\n    let ui \x3d $LongUtils.$and(i, Long.f_MAX_VALUE__java_lang_Long);\n    let carry \x3d $LongUtils.$less(i, $Primitives.$widenIntToLong(0)) ? $Long.fromBits(0, 1073741824) /* 4611686018427387904 */ : $Long.fromInt(0);\n    while (distance-- \x3e 0) {\n      let nextcarry \x3d $LongUtils.$and(ui, $Primitives.$widenIntToLong(1));\n      ui \x3d $LongUtils.$or(carry, $LongUtils.$rightShiftSigned(ui, 1));\n      carry \x3d $LongUtils.$equals(nextcarry, $Primitives.$widenIntToLong(0)) ? $Long.fromInt(0) : $Long.fromBits(0, 1073741824) /* 4611686018427387904 */;\n    }\n    if ($LongUtils.$notEquals(carry, $Primitives.$widenIntToLong(0))) {\n      ui \x3d $LongUtils.$or(ui, Long.f_MIN_VALUE__java_lang_Long);\n    }\n    return ui;\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {number}\n   * @public\n   */\n  static m_signum__long(i) {\n    Long.$clinit();\n    if ($LongUtils.$equals(i, $Primitives.$widenIntToLong(0))) {\n      return 0;\n    } else if ($LongUtils.$less(i, $Primitives.$widenIntToLong(0))) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n  \n  /**\n   * @param {!$Long} a\n   * @param {!$Long} b\n   * @return {!$Long}\n   * @public\n   */\n  static m_sum__long__long(a, b) {\n    Long.$clinit();\n    return $LongUtils.$plus(a, b);\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @return {?string}\n   * @public\n   */\n  static m_toBinaryString__long(value) {\n    Long.$clinit();\n    return Long.m_toPowerOfTwoUnsignedString__long__int_$p_java_lang_Long(value, 1);\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @return {?string}\n   * @public\n   */\n  static m_toHexString__long(value) {\n    Long.$clinit();\n    return Long.m_toPowerOfTwoUnsignedString__long__int_$p_java_lang_Long(value, 4);\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @return {?string}\n   * @public\n   */\n  static m_toOctalString__long(value) {\n    Long.$clinit();\n    return Long.m_toPowerOfTwoUnsignedString__long__int_$p_java_lang_Long(value, 3);\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @return {?string}\n   * @public\n   */\n  static m_toString__long(value) {\n    Long.$clinit();\n    return j_l_String.m_valueOf__long(value);\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @param {number} intRadix\n   * @return {?string}\n   * @public\n   */\n  static m_toString__long__int(value, intRadix) {\n    Long.$clinit();\n    if (intRadix \x3d\x3d 10 || intRadix \x3c Character.f_MIN_RADIX__java_lang_Character || intRadix \x3e Character.f_MAX_RADIX__java_lang_Character) {\n      return j_l_String.m_valueOf__long(value);\n    }\n    let intValue \x3d $Primitives.$narrowLongToInt(value);\n    if ($LongUtils.$equals($Primitives.$widenIntToLong(intValue), value)) {\n      return Integer.m_toString__int__int(intValue, intRadix);\n    }\n    let negative \x3d $LongUtils.$less(value, $Primitives.$widenIntToLong(0));\n    if (!negative) {\n      value \x3d $LongUtils.$negate(value);\n    }\n    let bufLen \x3d intRadix \x3c 8 ? 65 : 23;\n    let buf \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([bufLen], $char));\n    let cursor \x3d bufLen;\n    let radix \x3d $Primitives.$widenIntToLong(intRadix);\n    do {\n      let q \x3d $LongUtils.$divide(value, radix);\n      $Arrays.$set(buf, --cursor, Character.m_forDigit__int_$pp_java_lang($Primitives.$narrowLongToInt($LongUtils.$minus($LongUtils.$times(radix, q), value))));\n      value \x3d q;\n    }while ($LongUtils.$notEquals(value, $Primitives.$widenIntToLong(0)));\n    if (negative) {\n      $Arrays.$set(buf, --cursor, 45 /* '-' */);\n    }\n    return j_l_String.m_valueOf__arrayOf_char__int__int(buf, cursor, bufLen - cursor);\n  }\n  \n  /**\n   * @param {!$Long} i\n   * @return {Long}\n   * @public\n   */\n  static m_valueOf__long(i) {\n    Long.$clinit();\n    if ($LongUtils.$greater(i, $Primitives.$widenIntToLong(-129)) \x26\x26 $LongUtils.$less(i, $Primitives.$widenIntToLong(128))) {\n      let rebase \x3d $Primitives.$narrowLongToInt(i) + 128;\n      let result \x3d BoxedValues.f_boxedValues__java_lang_Long_BoxedValues[rebase];\n      if ($Equality.$same(result, null)) {\n        result \x3d $Arrays.$set(BoxedValues.f_boxedValues__java_lang_Long_BoxedValues, rebase, Long.$create__long(i));\n      }\n      return result;\n    }\n    return Long.$create__long(i);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Long}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Long.$clinit();\n    return Long.m_valueOf__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {Long}\n   * @public\n   */\n  static m_valueOf__java_lang_String__int(s, radix) {\n    Long.$clinit();\n    return Long.m_valueOf__long(Long.m_parseLong__java_lang_String__int(s, radix));\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @param {number} shift\n   * @return {?string}\n   * @public\n   */\n  static m_toPowerOfTwoUnsignedString__long__int_$p_java_lang_Long(value, shift) {\n    Long.$clinit();\n    let radix \x3d 1 \x3c\x3c shift;\n    if ($LongUtils.$lessEquals($Primitives.$widenIntToLong(Integer.f_MIN_VALUE__java_lang_Integer), value) \x26\x26 $LongUtils.$lessEquals(value, $Primitives.$widenIntToLong(Integer.f_MAX_VALUE__java_lang_Integer))) {\n      return Integer.m_toString__int__int($Primitives.$narrowLongToInt(value), radix);\n    }\n    let mask \x3d radix - 1;\n    let bufSize \x3d $Primitives.$coerceDivision(64 / shift) + 1;\n    let buf \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([bufSize], $char));\n    let pos \x3d bufSize;\n    do {\n      $Arrays.$set(buf, --pos, Character.m_forDigit__int_$pp_java_lang($Primitives.$narrowLongToInt(value) \x26 mask));\n      value \x3d $LongUtils.$rightShiftUnsigned(value, shift);\n    }while ($LongUtils.$notEquals(value, $Primitives.$widenIntToLong(0)));\n    return j_l_String.m_valueOf__arrayOf_char__int__int(buf, pos, bufSize - pos);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Long(long)'.\n   * @param {!$Long} value\n   * @return {!Long}\n   * @public\n   */\n  static $create__long(value) {\n    Long.$clinit();\n    let $instance \x3d new Long();\n    $instance.$ctor__java_lang_Long__long(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Long(long)'.\n   * @param {!$Long} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Long__long(value) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Long_ \x3d value;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Long(String)'.\n   * @param {?string} s\n   * @return {!Long}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    Long.$clinit();\n    let $instance \x3d new Long();\n    $instance.$ctor__java_lang_Long__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Long(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Long__java_lang_String(s) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Long_ \x3d Long.m_parseLong__java_lang_String(s);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_byteValue__() {\n    return $Primitives.$narrowLongToByte(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @param {Long} b\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Long(b) {\n    return Long.m_compare__long__long(this.f_value__java_lang_Long_, b.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_doubleValue__() {\n    return $Primitives.$widenLongToDouble(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return Long.$isInstance(o) \x26\x26 $LongUtils.$equals((/**@type {Long} */ ($Casts.$to(o, Long))).f_value__java_lang_Long_, this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_floatValue__() {\n    return $Primitives.$widenLongToFloat(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Long.m_hashCode__long(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_intValue__() {\n    return $Primitives.$narrowLongToInt(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_longValue__() {\n    return this.f_value__java_lang_Long_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_shortValue__() {\n    return $Primitives.$narrowLongToShort(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return Long.m_toString__long(this.f_value__java_lang_Long_);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_lang_Long(/**@type {Long} */ ($Casts.$to(arg0, Long)));\n  }\n  \n  /**\n   * @return {Class\x3cLong\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Long() {\n    return (Long.$clinit(), Long.$f_TYPE__java_lang_Long);\n  }\n  \n  /**\n   * @param {Class\x3cLong\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Long(value) {\n    (Long.$clinit(), Long.$f_TYPE__java_lang_Long \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Long;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Long);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Long.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    BoxedValues \x3d goog.module.get('java.lang.Long.BoxedValues$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    Number.$clinit();\n    Long.$f_TYPE__java_lang_Long \x3d Class.$get($long);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Long, $Util.$makeClassName('java.lang.Long'));\n\n\n/** @public {!$Long} @const */\nLong.f_MAX_VALUE__java_lang_Long \x3d $Long.fromBits(-1, 2147483647) /* 9223372036854775807 */;\n\n\n/** @public {!$Long} @const */\nLong.f_MIN_VALUE__java_lang_Long \x3d $Long.fromBits(0, -2147483648) /* -9223372036854775808 */;\n\n\n/** @public {number} @const */\nLong.f_SIZE__java_lang_Long \x3d 64;\n\n\n/** @public {number} @const */\nLong.f_BYTES__java_lang_Long \x3d 8;\n\n\n/** @private {Class\x3cLong\x3e} */\nLong.$f_TYPE__java_lang_Long;\n\n\nComparable.$markImplementor(Long);\n\n\nexports \x3d Long; \n//# sourceMappingURL\x3dLong.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Long.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Long.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Long');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Number \x3d goog.require('java.lang.Number');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _BoxedValues \x3d goog.require('java.lang.Long.BoxedValues');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar Long \x3d goog.require('java.lang.Long$impl');\nexports \x3d Long;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Function.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Function.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Function$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.Function.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T, C_R\n */\nclass j_u_function_Function {\n  /**\n   * @template M_T\n   * @return {j_u_function_Function\x3cM_T, M_T\x3e}\n   * @public\n   */\n  static m_identity__() {\n    j_u_function_Function.$clinit();\n    return /**@type {j_u_function_Function\x3c*, *\x3e} */ (j_u_function_Function.$adapt(((/** * */ t) \x3d\x3e{\n      return t;\n    })));\n  }\n  \n  /**\n   * @abstract\n   * @param {C_T} t\n   * @return {C_R}\n   * @public\n   */\n  m_apply__java_lang_Object(t) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} after\n   * @return {j_u_function_Function\x3cC_T, M_V\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Function(after) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} before\n   * @return {j_u_function_Function\x3cM_V, C_R\x3e}\n   * @public\n   */\n  m_compose__java_util_function_Function(before) {\n  }\n  \n  /**\n   * @template C_T, C_R\n   * @param {?function(C_T):C_R} fn\n   * @return {j_u_function_Function\x3cC_T, C_R\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    j_u_function_Function.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*, *\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template M_V, C_T, C_R\n   * @param {j_u_function_Function\x3cC_T, C_R\x3e} $thisArg\n   * @param {j_u_function_Function\x3c?, ?\x3e} after\n   * @return {j_u_function_Function\x3cC_T, M_V\x3e}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_Function__java_util_function_Function($thisArg, after) {\n    j_u_function_Function.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return /**@type {j_u_function_Function\x3c*, *\x3e} */ (j_u_function_Function.$adapt(((/** * */ t) \x3d\x3e{\n      return after.m_apply__java_lang_Object($thisArg.m_apply__java_lang_Object(t));\n    })));\n  }\n  \n  /**\n   * @template M_V, C_T, C_R\n   * @param {j_u_function_Function\x3cC_T, C_R\x3e} $thisArg\n   * @param {j_u_function_Function\x3c?, ?\x3e} before\n   * @return {j_u_function_Function\x3cM_V, C_R\x3e}\n   * @public\n   */\n  static m_compose__$default__java_util_function_Function__java_util_function_Function($thisArg, before) {\n    j_u_function_Function.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(before);\n    return /**@type {j_u_function_Function\x3c*, *\x3e} */ (j_u_function_Function.$adapt(((/** * */ t) \x3d\x3e{\n      return $thisArg.m_apply__java_lang_Object(before.m_apply__java_lang_Object(t));\n    })));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_Function \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_Function;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_Function;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    j_u_function_Function.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.Function.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(j_u_function_Function, $Util.$makeClassName('java.util.function.Function'));\n\n\nj_u_function_Function.$markImplementor(/** @type {Function} */ (j_u_function_Function));\n\n\nexports \x3d j_u_function_Function; \n//# sourceMappingURL\x3dFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Function$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Function$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Function.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst j_u_function_Function \x3d goog.require('java.util.function.Function$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T, C_R\n * @implements {j_u_function_Function\x3cC_T, C_R\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):C_R} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):C_R} */\n    this.f_$$fn__java_util_function_Function_$LambdaAdaptor;\n    this.$ctor__java_util_function_Function_$LambdaAdaptor__java_util_function_Function_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):C_R} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_Function_$LambdaAdaptor__java_util_function_Function_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_Function_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {C_R}\n   * @public\n   */\n  m_apply__java_lang_Object(arg0) {\n    let /** ?function(C_T):C_R */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_Function_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {j_u_function_Function\x3cC_T, M_V\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Function(arg0) {\n    return /**@type {j_u_function_Function\x3cC_T, *\x3e} */ (j_u_function_Function.m_andThen__$default__java_util_function_Function__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {j_u_function_Function\x3cM_V, C_R\x3e}\n   * @public\n   */\n  m_compose__java_util_function_Function(arg0) {\n    return /**@type {j_u_function_Function\x3c*, C_R\x3e} */ (j_u_function_Function.m_compose__$default__java_util_function_Function__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    j_u_function_Function.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.Function$$LambdaAdaptor'));\n\n\nj_u_function_Function.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Function$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Function$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Function.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.Function.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Function.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Function.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Function');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.Function.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar j_u_function_Function \x3d goog.require('java.util.function.Function$impl');\nexports \x3d j_u_function_Function;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToDoubleFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToDoubleFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ToDoubleFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass ToDoubleFunction {\n  /**\n   * @abstract\n   * @param {C_T} value\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__java_lang_Object(value) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):number} fn\n   * @return {ToDoubleFunction\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    ToDoubleFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_ToDoubleFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_ToDoubleFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_ToDoubleFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ToDoubleFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.ToDoubleFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ToDoubleFunction, $Util.$makeClassName('java.util.function.ToDoubleFunction'));\n\n\nToDoubleFunction.$markImplementor(/** @type {Function} */ (ToDoubleFunction));\n\n\nexports \x3d ToDoubleFunction; \n//# sourceMappingURL\x3dToDoubleFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToDoubleFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToDoubleFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ToDoubleFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {ToDoubleFunction\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):number} */\n    this.f_$$fn__java_util_function_ToDoubleFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_ToDoubleFunction_$LambdaAdaptor__java_util_function_ToDoubleFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_ToDoubleFunction_$LambdaAdaptor__java_util_function_ToDoubleFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_ToDoubleFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__java_lang_Object(arg0) {\n    let /** ?function(C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_ToDoubleFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.ToDoubleFunction$$LambdaAdaptor'));\n\n\nToDoubleFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dToDoubleFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToDoubleFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToDoubleFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ToDoubleFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.ToDoubleFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToDoubleFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToDoubleFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ToDoubleFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.ToDoubleFunction.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction$impl');\nexports \x3d ToDoubleFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToIntFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToIntFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ToIntFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.ToIntFunction.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass ToIntFunction {\n  /**\n   * @abstract\n   * @param {C_T} value\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__java_lang_Object(value) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):number} fn\n   * @return {ToIntFunction\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    ToIntFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_ToIntFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_ToIntFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_ToIntFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ToIntFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.ToIntFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ToIntFunction, $Util.$makeClassName('java.util.function.ToIntFunction'));\n\n\nToIntFunction.$markImplementor(/** @type {Function} */ (ToIntFunction));\n\n\nexports \x3d ToIntFunction; \n//# sourceMappingURL\x3dToIntFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToIntFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToIntFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ToIntFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ToIntFunction \x3d goog.require('java.util.function.ToIntFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {ToIntFunction\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):number} */\n    this.f_$$fn__java_util_function_ToIntFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_ToIntFunction_$LambdaAdaptor__java_util_function_ToIntFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_ToIntFunction_$LambdaAdaptor__java_util_function_ToIntFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_ToIntFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__java_lang_Object(arg0) {\n    let /** ?function(C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_ToIntFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.ToIntFunction$$LambdaAdaptor'));\n\n\nToIntFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dToIntFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToIntFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToIntFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ToIntFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.ToIntFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToIntFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToIntFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ToIntFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.ToIntFunction.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar ToIntFunction \x3d goog.require('java.util.function.ToIntFunction$impl');\nexports \x3d ToIntFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToLongFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToLongFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ToLongFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.ToLongFunction.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass ToLongFunction {\n  /**\n   * @abstract\n   * @param {C_T} value\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__java_lang_Object(value) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):!$Long} fn\n   * @return {ToLongFunction\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    ToLongFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_ToLongFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_ToLongFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_ToLongFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ToLongFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.ToLongFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ToLongFunction, $Util.$makeClassName('java.util.function.ToLongFunction'));\n\n\nToLongFunction.$markImplementor(/** @type {Function} */ (ToLongFunction));\n\n\nexports \x3d ToLongFunction; \n//# sourceMappingURL\x3dToLongFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToLongFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToLongFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ToLongFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ToLongFunction \x3d goog.require('java.util.function.ToLongFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_T\n * @implements {ToLongFunction\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):!$Long} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):!$Long} */\n    this.f_$$fn__java_util_function_ToLongFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_ToLongFunction_$LambdaAdaptor__java_util_function_ToLongFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):!$Long} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_ToLongFunction_$LambdaAdaptor__java_util_function_ToLongFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_ToLongFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__java_lang_Object(arg0) {\n    let /** ?function(C_T):!$Long */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_ToLongFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.ToLongFunction$$LambdaAdaptor'));\n\n\nToLongFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dToLongFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToLongFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToLongFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ToLongFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.ToLongFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ToLongFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ToLongFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ToLongFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.ToLongFunction.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar ToLongFunction \x3d goog.require('java.util.function.ToLongFunction$impl');\nexports \x3d ToLongFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Serializable \x3d goog.forwardDeclare('java.io.Serializable$impl');\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet $LambdaAdaptor$1 \x3d goog.forwardDeclare('java.util.Comparator.$LambdaAdaptor$1$impl');\nlet $LambdaAdaptor$2 \x3d goog.forwardDeclare('java.util.Comparator.$LambdaAdaptor$2$impl');\nlet $LambdaAdaptor$3 \x3d goog.forwardDeclare('java.util.Comparator.$LambdaAdaptor$3$impl');\nlet $LambdaAdaptor$4 \x3d goog.forwardDeclare('java.util.Comparator.$LambdaAdaptor$4$impl');\nlet $LambdaAdaptor$5 \x3d goog.forwardDeclare('java.util.Comparator.$LambdaAdaptor$5$impl');\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.Comparator.$LambdaAdaptor$impl');\nlet Comparators \x3d goog.forwardDeclare('java.util.Comparators$impl');\nlet NullComparator \x3d goog.forwardDeclare('java.util.Comparators.NullComparator$impl');\nlet ReversedComparator \x3d goog.forwardDeclare('java.util.Comparators.ReversedComparator$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Comparator {\n  /**\n   * @abstract\n   * @param {C_T} a\n   * @param {C_T} b\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(a, b) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  equals(other) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Comparator\x3c?\x3e} other\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(other) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyExtractor\n   * @param {Comparator\x3c?\x3e} keyComparator\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(keyExtractor, keyComparator) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(keyExtractor) {\n  }\n  \n  /**\n   * @abstract\n   * @param {ToIntFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(keyExtractor) {\n  }\n  \n  /**\n   * @abstract\n   * @param {ToLongFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(keyExtractor) {\n  }\n  \n  /**\n   * @abstract\n   * @param {ToDoubleFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(keyExtractor) {\n  }\n  \n  /**\n   * @template M_T, M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyExtractor\n   * @param {Comparator\x3c?\x3e} keyComparator\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_comparing__java_util_function_Function__java_util_Comparator(keyExtractor, keyComparator) {\n    Comparator.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(keyExtractor);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(keyComparator);\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$2(((/** * */ a, /** * */ b) \x3d\x3e{\n      return keyComparator.m_compare__java_lang_Object__java_lang_Object(keyExtractor.m_apply__java_lang_Object(a), keyExtractor.m_apply__java_lang_Object(b));\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @template M_T, M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyExtractor\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_comparing__java_util_function_Function(keyExtractor) {\n    Comparator.$clinit();\n    return /**@type {Comparator\x3c*\x3e} */ (Comparator.m_comparing__java_util_function_Function__java_util_Comparator(keyExtractor, /**@type {Comparator\x3c?\x3e} */ (Comparator.m_naturalOrder__())));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToDoubleFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_comparingDouble__java_util_function_ToDoubleFunction(keyExtractor) {\n    Comparator.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(keyExtractor);\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$3(((/** * */ a, /** * */ b) \x3d\x3e{\n      return Double.m_compare__double__double(keyExtractor.m_applyAsDouble__java_lang_Object(a), keyExtractor.m_applyAsDouble__java_lang_Object(b));\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToIntFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_comparingInt__java_util_function_ToIntFunction(keyExtractor) {\n    Comparator.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(keyExtractor);\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$4(((/** * */ a, /** * */ b) \x3d\x3e{\n      return Integer.m_compare__int__int(keyExtractor.m_applyAsInt__java_lang_Object(a), keyExtractor.m_applyAsInt__java_lang_Object(b));\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToLongFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_comparingLong__java_util_function_ToLongFunction(keyExtractor) {\n    Comparator.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(keyExtractor);\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$5(((/** * */ a, /** * */ b) \x3d\x3e{\n      return Long.m_compare__long__long(keyExtractor.m_applyAsLong__java_lang_Object(a), keyExtractor.m_applyAsLong__java_lang_Object(b));\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_naturalOrder__() {\n    Comparator.$clinit();\n    return /**@type {Comparator\x3c(Comparable|boolean|number|string)\x3e} */ (Comparators.m_naturalOrder___$pp_java_util());\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_nullsFirst__java_util_Comparator(comparator) {\n    Comparator.$clinit();\n    return /**@type {!NullComparator\x3c*\x3e} */ (NullComparator.$create__boolean__java_util_Comparator(true, comparator));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_nullsLast__java_util_Comparator(comparator) {\n    Comparator.$clinit();\n    return /**@type {!NullComparator\x3c*\x3e} */ (NullComparator.$create__boolean__java_util_Comparator(false, comparator));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_reverseOrder__() {\n    Comparator.$clinit();\n    return /**@type {Comparator\x3c(Comparable|boolean|number|string)\x3e} */ (Comparators.m_reverseNaturalOrder___$pp_java_util());\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T, C_T):number} fn\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    Comparator.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_reversed__$default__java_util_Comparator($thisArg) {\n    Comparator.$clinit();\n    return /**@type {!ReversedComparator\x3c*\x3e} */ (ReversedComparator.$create__java_util_Comparator($thisArg));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @param {Comparator\x3c?\x3e} other\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_thenComparing__$default__java_util_Comparator__java_util_Comparator($thisArg, other) {\n    Comparator.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(other);\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$1(((/** * */ a, /** * */ b) \x3d\x3e{\n      let c \x3d $thisArg.m_compare__java_lang_Object__java_lang_Object(a, b);\n      return (c !\x3d 0) ? c : other.m_compare__java_lang_Object__java_lang_Object(a, b);\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @template M_U, C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyExtractor\n   * @param {Comparator\x3c?\x3e} keyComparator\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator($thisArg, keyExtractor, keyComparator) {\n    Comparator.$clinit();\n    return $thisArg.m_thenComparing__java_util_Comparator(/**@type {Comparator\x3c*\x3e} */ (Comparator.m_comparing__java_util_function_Function__java_util_Comparator(keyExtractor, keyComparator)));\n  }\n  \n  /**\n   * @template M_U, C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_thenComparing__$default__java_util_Comparator__java_util_function_Function($thisArg, keyExtractor) {\n    Comparator.$clinit();\n    return $thisArg.m_thenComparing__java_util_Comparator(/**@type {Comparator\x3c*\x3e} */ (Comparator.m_comparing__java_util_function_Function(keyExtractor)));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @param {ToIntFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction($thisArg, keyExtractor) {\n    Comparator.$clinit();\n    return $thisArg.m_thenComparing__java_util_Comparator(/**@type {Comparator\x3c*\x3e} */ (Comparator.m_comparingInt__java_util_function_ToIntFunction(keyExtractor)));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @param {ToLongFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction($thisArg, keyExtractor) {\n    Comparator.$clinit();\n    return $thisArg.m_thenComparing__java_util_Comparator(/**@type {Comparator\x3c*\x3e} */ (Comparator.m_comparingLong__java_util_function_ToLongFunction(keyExtractor)));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Comparator\x3cC_T\x3e} $thisArg\n   * @param {ToDoubleFunction\x3c?\x3e} keyExtractor\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  static m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction($thisArg, keyExtractor) {\n    Comparator.$clinit();\n    return $thisArg.m_thenComparing__java_util_Comparator(/**@type {Comparator\x3c*\x3e} */ (Comparator.m_comparingDouble__java_util_function_ToDoubleFunction(keyExtractor)));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Comparator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Comparator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Comparator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Comparator.$clinit \x3d function() {};\n    Serializable \x3d goog.module.get('java.io.Serializable$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    $LambdaAdaptor$1 \x3d goog.module.get('java.util.Comparator.$LambdaAdaptor$1$impl');\n    $LambdaAdaptor$2 \x3d goog.module.get('java.util.Comparator.$LambdaAdaptor$2$impl');\n    $LambdaAdaptor$3 \x3d goog.module.get('java.util.Comparator.$LambdaAdaptor$3$impl');\n    $LambdaAdaptor$4 \x3d goog.module.get('java.util.Comparator.$LambdaAdaptor$4$impl');\n    $LambdaAdaptor$5 \x3d goog.module.get('java.util.Comparator.$LambdaAdaptor$5$impl');\n    $LambdaAdaptor \x3d goog.module.get('java.util.Comparator.$LambdaAdaptor$impl');\n    Comparators \x3d goog.module.get('java.util.Comparators$impl');\n    NullComparator \x3d goog.module.get('java.util.Comparators.NullComparator$impl');\n    ReversedComparator \x3d goog.module.get('java.util.Comparators.ReversedComparator$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Comparator, $Util.$makeClassName('java.util.Comparator'));\n\n\nComparator.$markImplementor(/** @type {Function} */ (Comparator));\n\n\nexports \x3d Comparator; \n//# sourceMappingURL\x3dComparator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$1$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$1 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$1($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$1.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$1;\n    this.$ctor__java_util_Comparator_$LambdaAdaptor$1__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$1($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparator_$LambdaAdaptor$1__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$1 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Comparator_$LambdaAdaptor$1, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$1.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$1, $Util.$makeClassName('java.util.Comparator$$LambdaAdaptor$1'));\n\n\nComparator.$markImplementor($LambdaAdaptor$1);\nSerializable.$markImplementor($LambdaAdaptor$1);\n\n\nexports \x3d $LambdaAdaptor$1; \n//# sourceMappingURL\x3dComparator$$LambdaAdaptor$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$1 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$1$impl');\nexports \x3d $LambdaAdaptor$1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$2$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$2 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$2($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$2.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$2;\n    this.$ctor__java_util_Comparator_$LambdaAdaptor$2__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$2($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparator_$LambdaAdaptor$2__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$2 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Comparator_$LambdaAdaptor$2, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$2.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$2, $Util.$makeClassName('java.util.Comparator$$LambdaAdaptor$2'));\n\n\nComparator.$markImplementor($LambdaAdaptor$2);\nSerializable.$markImplementor($LambdaAdaptor$2);\n\n\nexports \x3d $LambdaAdaptor$2; \n//# sourceMappingURL\x3dComparator$$LambdaAdaptor$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$2 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$2$impl');\nexports \x3d $LambdaAdaptor$2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$3$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$3 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$3($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$3.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$3;\n    this.$ctor__java_util_Comparator_$LambdaAdaptor$3__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$3($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparator_$LambdaAdaptor$3__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$3 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Comparator_$LambdaAdaptor$3, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$3.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$3, $Util.$makeClassName('java.util.Comparator$$LambdaAdaptor$3'));\n\n\nComparator.$markImplementor($LambdaAdaptor$3);\nSerializable.$markImplementor($LambdaAdaptor$3);\n\n\nexports \x3d $LambdaAdaptor$3; \n//# sourceMappingURL\x3dComparator$$LambdaAdaptor$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$3 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$3$impl');\nexports \x3d $LambdaAdaptor$3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$4$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$4 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$4($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$4.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$4;\n    this.$ctor__java_util_Comparator_$LambdaAdaptor$4__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$4($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparator_$LambdaAdaptor$4__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$4 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Comparator_$LambdaAdaptor$4, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$4.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$4, $Util.$makeClassName('java.util.Comparator$$LambdaAdaptor$4'));\n\n\nComparator.$markImplementor($LambdaAdaptor$4);\nSerializable.$markImplementor($LambdaAdaptor$4);\n\n\nexports \x3d $LambdaAdaptor$4; \n//# sourceMappingURL\x3dComparator$$LambdaAdaptor$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$4 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$4$impl');\nexports \x3d $LambdaAdaptor$4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$5.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$5.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$5$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$5 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$5($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$5.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$5;\n    this.$ctor__java_util_Comparator_$LambdaAdaptor$5__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$5($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparator_$LambdaAdaptor$5__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor$5 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Comparator_$LambdaAdaptor$5, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$5;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$5);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$5.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$5, $Util.$makeClassName('java.util.Comparator$$LambdaAdaptor$5'));\n\n\nComparator.$markImplementor($LambdaAdaptor$5);\nSerializable.$markImplementor($LambdaAdaptor$5);\n\n\nexports \x3d $LambdaAdaptor$5; \n//# sourceMappingURL\x3dComparator$$LambdaAdaptor$5.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor$5.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor$5.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$5');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$5 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$5$impl');\nexports \x3d $LambdaAdaptor$5;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor;\n    this.$ctor__java_util_Comparator_$LambdaAdaptor__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparator_$LambdaAdaptor__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Comparator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Comparator_$LambdaAdaptor, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.Comparator$$LambdaAdaptor'));\n\n\nComparator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dComparator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.Comparator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/double.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$double$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class double.\n *\n * Non-instantiable.\n */\nclass $double {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $double;\n  }\n};\n\n\n/**\n * @public {number}\n */\n$double.$initialArrayValue \x3d 0;\n\n\n$Util.$setClassMetadataForPrimitive($double, 'double', 'D');\n\n\n/**\n * Exported class.\n */\nexports \x3d $double;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/double.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$double');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $double \x3d goog.require('vmbootstrap.primitives.$double$impl');\nexports \x3d $double;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Comparables.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('vmbootstrap.Comparables$impl');\n\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $boolean \x3d goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * Provides devirtualized method implementations for Comparable.\n */\nclass Comparables {\n  /**\n   * @param {Comparable|string|number|boolean} a\n   * @param {*} b\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_Comparable__java_lang_Object(a, b) {\n    Comparables.$clinit();\n    var type \x3d typeof a;\n    if (type \x3d\x3d 'number') {\n      return Double.m_compareTo__java_lang_Double__java_lang_Object(\n          /**@type {number} */ (a), /**@type {number} */ (b));\n    } else if (type \x3d\x3d 'boolean') {\n      return Boolean.m_compareTo__java_lang_Boolean__java_lang_Object(\n          /**@type {boolean} */ (a), /**@type {boolean} */ (b));\n    } else if (type \x3d\x3d 'string') {\n      return String.m_compareTo__java_lang_String__java_lang_Object(\n          /**@type {string} */ (a), /**@type {string} */ (b));\n    }\n    return a.m_compareTo__java_lang_Object(b);\n  }\n\n  /**\n   * Runs inline static field initializers.\n   * @public\n   */\n  static $clinit() {\n    Comparables.$clinit \x3d function() {};\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    Comparable \x3d goog.module.get('java.lang.Comparable$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    String \x3d goog.module.get('java.lang.String$impl');\n    $boolean \x3d goog.module.get('vmbootstrap.primitives.$boolean$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n  }\n};\n\n\n/**\n * Exported class.\n */\nexports \x3d Comparables;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Comparables.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('vmbootstrap.Comparables');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _String \x3d goog.require('java.lang.String');\nconst _$boolean \x3d goog.require('vmbootstrap.primitives.$boolean');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n// Re-exports the implementation.\nconst Comparables \x3d goog.require('vmbootstrap.Comparables$impl');\nexports \x3d Comparables;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$NaturalOrderComparator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$NaturalOrderComparator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparators.NaturalOrderComparator$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Comparators \x3d goog.forwardDeclare('java.util.Comparators$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Comparables \x3d goog.forwardDeclare('vmbootstrap.Comparables$impl');\n\n\n/**\n * @implements {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n * @implements {Serializable}\n  */\nclass NaturalOrderComparator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NaturalOrderComparator()'.\n   * @return {!NaturalOrderComparator}\n   * @public\n   */\n  static $create__() {\n    NaturalOrderComparator.$clinit();\n    let $instance \x3d new NaturalOrderComparator();\n    $instance.$ctor__java_util_Comparators_NaturalOrderComparator__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NaturalOrderComparator()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparators_NaturalOrderComparator__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {(Comparable\x3c*\x3e|boolean|number|string)} a\n   * @param {(Comparable\x3c*\x3e|boolean|number|string)} b\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Comparable__java_lang_Comparable(a, b) {\n    return $Comparables.m_compareTo__java_lang_Comparable__java_lang_Object(/**@type {(Comparable\x3c*\x3e|boolean|number|string)} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(a), Comparable)), $InternalPreconditions.m_checkNotNull__java_lang_Object(b));\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return Comparators.f_REVERSE_NATURAL_ORDER__java_util_Comparators_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.m_compare__java_lang_Comparable__java_lang_Comparable(/**@type {(Comparable\x3c*\x3e|boolean|number|string)} */ ($Casts.$to(arg0, Comparable)), /**@type {(Comparable\x3c*\x3e|boolean|number|string)} */ ($Casts.$to(arg1, Comparable)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NaturalOrderComparator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NaturalOrderComparator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NaturalOrderComparator.$clinit \x3d function() {};\n    Comparable \x3d goog.module.get('java.lang.Comparable$impl');\n    Comparators \x3d goog.module.get('java.util.Comparators$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Comparables \x3d goog.module.get('vmbootstrap.Comparables$impl');\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NaturalOrderComparator, $Util.$makeClassName('java.util.Comparators$NaturalOrderComparator'));\n\n\nComparator.$markImplementor(NaturalOrderComparator);\nSerializable.$markImplementor(NaturalOrderComparator);\n\n\nexports \x3d NaturalOrderComparator; \n//# sourceMappingURL\x3dComparators$NaturalOrderComparator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$NaturalOrderComparator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$NaturalOrderComparator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparators.NaturalOrderComparator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Comparators \x3d goog.require('java.util.Comparators');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Comparables \x3d goog.require('vmbootstrap.Comparables');\n\n\n// Re-exports the implementation.\nvar NaturalOrderComparator \x3d goog.require('java.util.Comparators.NaturalOrderComparator$impl');\nexports \x3d NaturalOrderComparator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$ReverseNaturalOrderComparator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$ReverseNaturalOrderComparator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparators.ReverseNaturalOrderComparator$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Comparators \x3d goog.forwardDeclare('java.util.Comparators$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Comparables \x3d goog.forwardDeclare('vmbootstrap.Comparables$impl');\n\n\n/**\n * @implements {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n * @implements {Serializable}\n  */\nclass ReverseNaturalOrderComparator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ReverseNaturalOrderComparator()'.\n   * @return {!ReverseNaturalOrderComparator}\n   * @public\n   */\n  static $create__() {\n    ReverseNaturalOrderComparator.$clinit();\n    let $instance \x3d new ReverseNaturalOrderComparator();\n    $instance.$ctor__java_util_Comparators_ReverseNaturalOrderComparator__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ReverseNaturalOrderComparator()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparators_ReverseNaturalOrderComparator__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {(Comparable\x3c*\x3e|boolean|number|string)} a\n   * @param {(Comparable\x3c*\x3e|boolean|number|string)} b\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Comparable__java_lang_Comparable(a, b) {\n    return $Comparables.m_compareTo__java_lang_Comparable__java_lang_Object(/**@type {(Comparable\x3c*\x3e|boolean|number|string)} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(b), Comparable)), $InternalPreconditions.m_checkNotNull__java_lang_Object(a));\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return Comparators.f_NATURAL_ORDER__java_util_Comparators_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.m_compare__java_lang_Comparable__java_lang_Comparable(/**@type {(Comparable\x3c*\x3e|boolean|number|string)} */ ($Casts.$to(arg0, Comparable)), /**@type {(Comparable\x3c*\x3e|boolean|number|string)} */ ($Casts.$to(arg1, Comparable)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ReverseNaturalOrderComparator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ReverseNaturalOrderComparator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ReverseNaturalOrderComparator.$clinit \x3d function() {};\n    Comparable \x3d goog.module.get('java.lang.Comparable$impl');\n    Comparators \x3d goog.module.get('java.util.Comparators$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Comparables \x3d goog.module.get('vmbootstrap.Comparables$impl');\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ReverseNaturalOrderComparator, $Util.$makeClassName('java.util.Comparators$ReverseNaturalOrderComparator'));\n\n\nComparator.$markImplementor(ReverseNaturalOrderComparator);\nSerializable.$markImplementor(ReverseNaturalOrderComparator);\n\n\nexports \x3d ReverseNaturalOrderComparator; \n//# sourceMappingURL\x3dComparators$ReverseNaturalOrderComparator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$ReverseNaturalOrderComparator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$ReverseNaturalOrderComparator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparators.ReverseNaturalOrderComparator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Comparators \x3d goog.require('java.util.Comparators');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Comparables \x3d goog.require('vmbootstrap.Comparables');\n\n\n// Re-exports the implementation.\nvar ReverseNaturalOrderComparator \x3d goog.require('java.util.Comparators.ReverseNaturalOrderComparator$impl');\nexports \x3d ReverseNaturalOrderComparator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparators$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet NaturalOrderComparator \x3d goog.forwardDeclare('java.util.Comparators.NaturalOrderComparator$impl');\nlet ReverseNaturalOrderComparator \x3d goog.forwardDeclare('java.util.Comparators.ReverseNaturalOrderComparator$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass Comparators extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @template M_T\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_naturalOrder___$pp_java_util() {\n    Comparators.$clinit();\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to(Comparators.$f_NATURAL_ORDER__java_util_Comparators_, Comparator));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_reverseNaturalOrder___$pp_java_util() {\n    Comparators.$clinit();\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to(Comparators.$f_REVERSE_NATURAL_ORDER__java_util_Comparators_, Comparator));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3cM_T\x3e} cmp\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_nullToNaturalOrder__java_util_Comparator_$pp_java_util(cmp) {\n    Comparators.$clinit();\n    return $Equality.$same(cmp, null) ? /**@type {Comparator\x3c*\x3e} */ ($Casts.$to(Comparators.$f_INTERNAL_NATURAL_ORDER__java_util_Comparators_, Comparator)) : cmp;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3cM_T\x3e} cmp\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_naturalOrderToNull__java_util_Comparator_$pp_java_util(cmp) {\n    Comparators.$clinit();\n    return $Equality.$same(cmp, Comparators.$f_INTERNAL_NATURAL_ORDER__java_util_Comparators_) ? null : cmp;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Comparators()'.\n   * @return {!Comparators}\n   * @public\n   */\n  static $create__() {\n    Comparators.$clinit();\n    let $instance \x3d new Comparators();\n    $instance.$ctor__java_util_Comparators__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Comparators()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparators__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  static get f_INTERNAL_NATURAL_ORDER__java_util_Comparators_() {\n    return (Comparators.$clinit(), Comparators.$f_INTERNAL_NATURAL_ORDER__java_util_Comparators_);\n  }\n  \n  /**\n   * @param {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_INTERNAL_NATURAL_ORDER__java_util_Comparators_(value) {\n    (Comparators.$clinit(), Comparators.$f_INTERNAL_NATURAL_ORDER__java_util_Comparators_ \x3d value);\n  }\n  \n  /**\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  static get f_NATURAL_ORDER__java_util_Comparators_() {\n    return (Comparators.$clinit(), Comparators.$f_NATURAL_ORDER__java_util_Comparators_);\n  }\n  \n  /**\n   * @param {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_NATURAL_ORDER__java_util_Comparators_(value) {\n    (Comparators.$clinit(), Comparators.$f_NATURAL_ORDER__java_util_Comparators_ \x3d value);\n  }\n  \n  /**\n   * @return {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e}\n   * @public\n   */\n  static get f_REVERSE_NATURAL_ORDER__java_util_Comparators_() {\n    return (Comparators.$clinit(), Comparators.$f_REVERSE_NATURAL_ORDER__java_util_Comparators_);\n  }\n  \n  /**\n   * @param {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_REVERSE_NATURAL_ORDER__java_util_Comparators_(value) {\n    (Comparators.$clinit(), Comparators.$f_REVERSE_NATURAL_ORDER__java_util_Comparators_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Comparators;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Comparators);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Comparators.$clinit \x3d function() {};\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    NaturalOrderComparator \x3d goog.module.get('java.util.Comparators.NaturalOrderComparator$impl');\n    ReverseNaturalOrderComparator \x3d goog.module.get('java.util.Comparators.ReverseNaturalOrderComparator$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Comparators.$f_INTERNAL_NATURAL_ORDER__java_util_Comparators_ \x3d NaturalOrderComparator.$create__();\n    Comparators.$f_NATURAL_ORDER__java_util_Comparators_ \x3d NaturalOrderComparator.$create__();\n    Comparators.$f_REVERSE_NATURAL_ORDER__java_util_Comparators_ \x3d ReverseNaturalOrderComparator.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Comparators, $Util.$makeClassName('java.util.Comparators'));\n\n\n/** @private {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */\nComparators.$f_INTERNAL_NATURAL_ORDER__java_util_Comparators_;\n\n\n/** @private {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */\nComparators.$f_NATURAL_ORDER__java_util_Comparators_;\n\n\n/** @private {Comparator\x3c(Comparable\x3c*\x3e|boolean|number|string)\x3e} */\nComparators.$f_REVERSE_NATURAL_ORDER__java_util_Comparators_;\n\n\n\n\nexports \x3d Comparators; \n//# sourceMappingURL\x3dComparators.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparators');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _NaturalOrderComparator \x3d goog.require('java.util.Comparators.NaturalOrderComparator');\nconst _ReverseNaturalOrderComparator \x3d goog.require('java.util.Comparators.ReverseNaturalOrderComparator');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Comparators \x3d goog.require('java.util.Comparators$impl');\nexports \x3d Comparators;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$NullComparator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$NullComparator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparators.NullComparator$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_NullComparator_T\n * @implements {Comparator\x3cC_NullComparator_T\x3e}\n * @implements {Serializable}\n  */\nclass NullComparator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {boolean} */\n    this.f_nullFirst__java_util_Comparators_NullComparator_ \x3d false;\n    /** @public {Comparator\x3cC_NullComparator_T\x3e} */\n    this.f_delegate__java_util_Comparators_NullComparator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NullComparator(boolean, Comparator)'.\n   * @template C_NullComparator_T\n   * @param {boolean} nullFirst\n   * @param {Comparator\x3c?\x3e} delegate\n   * @return {!NullComparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  static $create__boolean__java_util_Comparator(nullFirst, delegate) {\n    NullComparator.$clinit();\n    let $instance \x3d new NullComparator();\n    $instance.$ctor__java_util_Comparators_NullComparator__boolean__java_util_Comparator(nullFirst, delegate);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NullComparator(boolean, Comparator)'.\n   * @param {boolean} nullFirst\n   * @param {Comparator\x3c?\x3e} delegate\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparators_NullComparator__boolean__java_util_Comparator(nullFirst, delegate) {\n    this.$ctor__java_lang_Object__();\n    this.f_nullFirst__java_util_Comparators_NullComparator_ \x3d nullFirst;\n    this.f_delegate__java_util_Comparators_NullComparator_ \x3d /**@type {Comparator\x3cC_NullComparator_T\x3e} */ ($Casts.$to(delegate, Comparator));\n  }\n  \n  /**\n   * @override\n   * @param {C_NullComparator_T} a\n   * @param {C_NullComparator_T} b\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(a, b) {\n    if ($Equality.$same(a, null)) {\n      return $Equality.$same(b, null) ? 0 : (this.f_nullFirst__java_util_Comparators_NullComparator_ ? -1 : 1);\n    }\n    if ($Equality.$same(b, null)) {\n      return this.f_nullFirst__java_util_Comparators_NullComparator_ ? 1 : -1;\n    }\n    return $Equality.$same(this.f_delegate__java_util_Comparators_NullComparator_, null) ? 0 : this.f_delegate__java_util_Comparators_NullComparator_.m_compare__java_lang_Object__java_lang_Object(a, b);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {!NullComparator\x3cC_NullComparator_T\x3e} */ (NullComparator.$create__boolean__java_util_Comparator(!this.f_nullFirst__java_util_Comparators_NullComparator_, $Equality.$same(this.f_delegate__java_util_Comparators_NullComparator_, null) ? null : this.f_delegate__java_util_Comparators_NullComparator_.m_reversed__()));\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} other\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(other) {\n    return /**@type {!NullComparator\x3cC_NullComparator_T\x3e} */ (NullComparator.$create__boolean__java_util_Comparator(this.f_nullFirst__java_util_Comparators_NullComparator_, $Equality.$same(this.f_delegate__java_util_Comparators_NullComparator_, null) ? other : this.f_delegate__java_util_Comparators_NullComparator_.m_thenComparing__java_util_Comparator(other)));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_NullComparator_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_NullComparator_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_NullComparator_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_NullComparator_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_NullComparator_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_NullComparator_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NullComparator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NullComparator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NullComparator.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NullComparator, $Util.$makeClassName('java.util.Comparators$NullComparator'));\n\n\nComparator.$markImplementor(NullComparator);\nSerializable.$markImplementor(NullComparator);\n\n\nexports \x3d NullComparator; \n//# sourceMappingURL\x3dComparators$NullComparator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$NullComparator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$NullComparator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparators.NullComparator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar NullComparator \x3d goog.require('java.util.Comparators.NullComparator$impl');\nexports \x3d NullComparator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$ReversedComparator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$ReversedComparator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Comparators.ReversedComparator$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_ReversedComparator_T\n * @implements {Comparator\x3cC_ReversedComparator_T\x3e}\n * @implements {Serializable}\n  */\nclass ReversedComparator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Comparator\x3cC_ReversedComparator_T\x3e} */\n    this.f_comparator__java_util_Comparators_ReversedComparator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ReversedComparator(Comparator)'.\n   * @template C_ReversedComparator_T\n   * @param {Comparator\x3cC_ReversedComparator_T\x3e} comparator\n   * @return {!ReversedComparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  static $create__java_util_Comparator(comparator) {\n    ReversedComparator.$clinit();\n    let $instance \x3d new ReversedComparator();\n    $instance.$ctor__java_util_Comparators_ReversedComparator__java_util_Comparator(comparator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ReversedComparator(Comparator)'.\n   * @param {Comparator\x3cC_ReversedComparator_T\x3e} comparator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Comparators_ReversedComparator__java_util_Comparator(comparator) {\n    this.$ctor__java_lang_Object__();\n    this.f_comparator__java_util_Comparators_ReversedComparator_ \x3d comparator;\n  }\n  \n  /**\n   * @override\n   * @param {C_ReversedComparator_T} a\n   * @param {C_ReversedComparator_T} b\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(a, b) {\n    return this.f_comparator__java_util_Comparators_ReversedComparator_.m_compare__java_lang_Object__java_lang_Object(b, a);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return this.f_comparator__java_util_Comparators_ReversedComparator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_ReversedComparator_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_ReversedComparator_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_ReversedComparator_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_ReversedComparator_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_ReversedComparator_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_ReversedComparator_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_ReversedComparator_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ReversedComparator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ReversedComparator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ReversedComparator.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ReversedComparator, $Util.$makeClassName('java.util.Comparators$ReversedComparator'));\n\n\nComparator.$markImplementor(ReversedComparator);\nSerializable.$markImplementor(ReversedComparator);\n\n\nexports \x3d ReversedComparator; \n//# sourceMappingURL\x3dComparators$ReversedComparator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparators$ReversedComparator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparators$ReversedComparator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparators.ReversedComparator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar ReversedComparator \x3d goog.require('java.util.Comparators.ReversedComparator$impl');\nexports \x3d ReversedComparator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Comparator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Comparator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Comparator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _$LambdaAdaptor$1 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$1');\nconst _$LambdaAdaptor$2 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$2');\nconst _$LambdaAdaptor$3 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$3');\nconst _$LambdaAdaptor$4 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$4');\nconst _$LambdaAdaptor$5 \x3d goog.require('java.util.Comparator.$LambdaAdaptor$5');\nconst _$LambdaAdaptor \x3d goog.require('java.util.Comparator.$LambdaAdaptor');\nconst _Comparators \x3d goog.require('java.util.Comparators');\nconst _NullComparator \x3d goog.require('java.util.Comparators.NullComparator');\nconst _ReversedComparator \x3d goog.require('java.util.Comparators.ReversedComparator');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Comparator \x3d goog.require('java.util.Comparator$impl');\nexports \x3d Comparator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Consumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Consumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Consumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.Consumer.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Consumer {\n  /**\n   * @abstract\n   * @param {C_T} t\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object(t) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} after\n   * @return {Consumer\x3cC_T\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Consumer(after) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):void} fn\n   * @return {Consumer\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    Consumer.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Consumer\x3cC_T\x3e} $thisArg\n   * @param {Consumer\x3c?\x3e} after\n   * @return {Consumer\x3cC_T\x3e}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_Consumer__java_util_function_Consumer($thisArg, after) {\n    Consumer.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return /**@type {Consumer\x3c*\x3e} */ (Consumer.$adapt(((/** * */ t) \x3d\x3e{\n      $thisArg.m_accept__java_lang_Object(t);\n      after.m_accept__java_lang_Object(t);\n    })));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_Consumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_Consumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_Consumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Consumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.Consumer.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Consumer, $Util.$makeClassName('java.util.function.Consumer'));\n\n\nConsumer.$markImplementor(/** @type {Function} */ (Consumer));\n\n\nexports \x3d Consumer; \n//# sourceMappingURL\x3dConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Consumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Consumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Consumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Consumer \x3d goog.require('java.util.function.Consumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {Consumer\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):void} */\n    this.f_$$fn__java_util_function_Consumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_Consumer_$LambdaAdaptor__java_util_function_Consumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_Consumer_$LambdaAdaptor__java_util_function_Consumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_Consumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object(arg0) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_Consumer_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {Consumer\x3cC_T\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Consumer(arg0) {\n    return /**@type {Consumer\x3cC_T\x3e} */ (Consumer.m_andThen__$default__java_util_function_Consumer__java_util_function_Consumer(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Consumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.Consumer$$LambdaAdaptor'));\n\n\nConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Consumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Consumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Consumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.Consumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Consumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Consumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Consumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.Consumer.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar Consumer \x3d goog.require('java.util.function.Consumer$impl');\nexports \x3d Consumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Exceptions.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Exceptions.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('vmbootstrap.Exceptions$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AutoCloseable \x3d goog.forwardDeclare('java.lang.AutoCloseable$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass Exceptions extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Exceptions()'.\n   * @return {!Exceptions}\n   * @public\n   */\n  static $create__() {\n    Exceptions.$clinit();\n    let $instance \x3d new Exceptions();\n    $instance.$ctor__javaemul_internal_Exceptions__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Exceptions()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_Exceptions__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {AutoCloseable} resource\n   * @param {Throwable} currentException\n   * @return {Throwable}\n   * @public\n   */\n  static safeClose(resource, currentException) {\n    Exceptions.$clinit();\n    if ($Equality.$same(resource, null)) {\n      return currentException;\n    }\n    try {\n      resource.m_close__();\n    } catch (__$exc) {\n      __$exc \x3d $Exceptions.toJava(__$exc);\n      if (Throwable.$isInstance(__$exc)) {\n        let t \x3d /**@type {Throwable} */ (__$exc);\n        if ($Equality.$same(currentException, null)) {\n          return t;\n        }\n        currentException.m_addSuppressed__java_lang_Throwable(t);\n      } else {\n        throw $Exceptions.toJs(__$exc);\n      }\n    }\n    return currentException;\n  }\n  \n  /**\n   * @param {*} e\n   * @return {Throwable}\n   * @public\n   */\n  static toJava(e) {\n    Exceptions.$clinit();\n    return Throwable.of(e);\n  }\n  \n  /**\n   * @param {Throwable} t\n   * @return {*}\n   * @public\n   */\n  static toJs(t) {\n    Exceptions.$clinit();\n    return t.m_getBackingJsObject__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Exceptions;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Exceptions);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Exceptions.$clinit \x3d function() {};\n    Throwable \x3d goog.module.get('java.lang.Throwable$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Exceptions, $Util.$makeClassName('javaemul.internal.Exceptions'));\n\n\n\n\nexports \x3d Exceptions; \n//# sourceMappingURL\x3dExceptions.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Exceptions.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Exceptions.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('vmbootstrap.Exceptions');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AutoCloseable \x3d goog.require('java.lang.AutoCloseable');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar Exceptions \x3d goog.require('vmbootstrap.Exceptions$impl');\nexports \x3d Exceptions;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IllegalStateException \x3d goog.forwardDeclare('java.lang.IllegalStateException$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Spliterator {\n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_characteristics__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_estimateSize__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} characteristics\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(characteristics) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_T\x3e}\n   * @public\n   */\n  m_trySplit__() {\n  }\n  \n  /**\n   * @template C_T\n   * @param {Spliterator\x3cC_T\x3e} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer($thisArg, consumer) {\n    Spliterator.$clinit();\n    while ($thisArg.m_tryAdvance__java_util_function_Consumer(consumer)) {\n    }\n  }\n  \n  /**\n   * @template C_T\n   * @param {Spliterator\x3cC_T\x3e} $thisArg\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  static m_getComparator__$default__java_util_Spliterator($thisArg) {\n    Spliterator.$clinit();\n    throw $Exceptions.toJs(IllegalStateException.$create__());\n  }\n  \n  /**\n   * @template C_T\n   * @param {Spliterator\x3cC_T\x3e} $thisArg\n   * @return {!$Long}\n   * @public\n   */\n  static m_getExactSizeIfKnown__$default__java_util_Spliterator($thisArg) {\n    Spliterator.$clinit();\n    return $thisArg.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? $thisArg.m_estimateSize__() : $LongUtils.$negate($Long.fromInt(1));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Spliterator\x3cC_T\x3e} $thisArg\n   * @param {number} characteristics\n   * @return {boolean}\n   * @public\n   */\n  static m_hasCharacteristics__$default__java_util_Spliterator__int($thisArg, characteristics) {\n    Spliterator.$clinit();\n    return ($thisArg.m_characteristics__() \x26 characteristics) !\x3d 0;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Spliterator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Spliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Spliterator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Spliterator.$clinit \x3d function() {};\n    IllegalStateException \x3d goog.module.get('java.lang.IllegalStateException$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Spliterator, $Util.$makeClassName('java.util.Spliterator'));\n\n\n/** @public {number} @const */\nSpliterator.f_DISTINCT__java_util_Spliterator \x3d 1;\n\n\n/** @public {number} @const */\nSpliterator.f_ORDERED__java_util_Spliterator \x3d 16;\n\n\n/** @public {number} @const */\nSpliterator.f_NONNULL__java_util_Spliterator \x3d 256;\n\n\n/** @public {number} @const */\nSpliterator.f_CONCURRENT__java_util_Spliterator \x3d 4096;\n\n\n/** @public {number} @const */\nSpliterator.f_SORTED__java_util_Spliterator \x3d 4;\n\n\n/** @public {number} @const */\nSpliterator.f_SIZED__java_util_Spliterator \x3d 64;\n\n\n/** @public {number} @const */\nSpliterator.f_IMMUTABLE__java_util_Spliterator \x3d 1024;\n\n\n/** @public {number} @const */\nSpliterator.f_SUBSIZED__java_util_Spliterator \x3d 16384;\n\n\nSpliterator.$markImplementor(/** @type {Function} */ (Spliterator));\n\n\nexports \x3d Spliterator; \n//# sourceMappingURL\x3dSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IllegalStateException \x3d goog.require('java.lang.IllegalStateException');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\n\n\n// Re-exports the implementation.\nvar Spliterator \x3d goog.require('java.util.Spliterator$impl');\nexports \x3d Spliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/BaseStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.BaseStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.BaseStream$impl');\n\n\nconst AutoCloseable \x3d goog.require('java.lang.AutoCloseable$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Runnable \x3d goog.forwardDeclare('java.lang.Runnable$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\n\n\n/**\n * @interface\n * @template C_T, C_S\n * @extends {AutoCloseable}\n */\nclass BaseStream {\n  /**\n   * @abstract\n   * @return {Iterator\x3cC_T\x3e}\n   * @public\n   */\n  m_iterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_S}\n   * @public\n   */\n  m_sequential__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_S}\n   * @public\n   */\n  m_parallel__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_S}\n   * @public\n   */\n  m_unordered__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Runnable} closeHandler\n   * @return {C_S}\n   * @public\n   */\n  m_onClose__java_lang_Runnable(closeHandler) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    AutoCloseable.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_BaseStream \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_BaseStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_BaseStream;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BaseStream.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(BaseStream, $Util.$makeClassName('java.util.stream.BaseStream'));\n\n\nBaseStream.$markImplementor(/** @type {Function} */ (BaseStream));\n\n\nexports \x3d BaseStream; \n//# sourceMappingURL\x3dBaseStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/BaseStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.BaseStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.BaseStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AutoCloseable \x3d goog.require('java.lang.AutoCloseable');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\n\n\n// Re-exports the implementation.\nvar BaseStream \x3d goog.require('java.util.stream.BaseStream$impl');\nexports \x3d BaseStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Byte$BoxedValues.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Byte$BoxedValues.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Byte.BoxedValues$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Byte \x3d goog.forwardDeclare('java.lang.Byte$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\nclass BoxedValues extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'BoxedValues()'.\n   * @return {!BoxedValues}\n   * @public\n   */\n  static $create__() {\n    BoxedValues.$clinit();\n    let $instance \x3d new BoxedValues();\n    $instance.$ctor__java_lang_Byte_BoxedValues__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'BoxedValues()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Byte_BoxedValues__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cByte\x3e}\n   * @public\n   */\n  static get f_boxedValues__java_lang_Byte_BoxedValues_() {\n    return (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Byte_BoxedValues_);\n  }\n  \n  /**\n   * @param {Array\x3cByte\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_boxedValues__java_lang_Byte_BoxedValues_(value) {\n    (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Byte_BoxedValues_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BoxedValues;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BoxedValues);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BoxedValues.$clinit \x3d function() {};\n    Byte \x3d goog.module.get('java.lang.Byte$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n    BoxedValues.$f_boxedValues__java_lang_Byte_BoxedValues_ \x3d /**@type {!Array\x3cByte\x3e} */ ($Arrays.$create([256], Byte));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BoxedValues, $Util.$makeClassName('java.lang.Byte$BoxedValues'));\n\n\n/** @private {Array\x3cByte\x3e} */\nBoxedValues.$f_boxedValues__java_lang_Byte_BoxedValues_;\n\n\n\n\nexports \x3d BoxedValues; \n//# sourceMappingURL\x3dByte$BoxedValues.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Byte$BoxedValues.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Byte$BoxedValues.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Byte.BoxedValues');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Byte \x3d goog.require('java.lang.Byte');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar BoxedValues \x3d goog.require('java.lang.Byte.BoxedValues$impl');\nexports \x3d BoxedValues;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/byte.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$byte$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class byte.\n *\n * Non-instantiable.\n */\nclass $byte {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $byte;\n  }\n};\n\n\n/**\n * @public {number}\n */\n$byte.$initialArrayValue \x3d 0;\n\n\n$Util.$setClassMetadataForPrimitive($byte, 'byte', 'B');\n\n\n/**\n * Exported class.\n */\nexports \x3d $byte;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/byte.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$byte');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $byte \x3d goog.require('vmbootstrap.primitives.$byte$impl');\nexports \x3d $byte;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Byte.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Byte.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Byte$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst Number \x3d goog.require('java.lang.Number$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet BoxedValues \x3d goog.forwardDeclare('java.lang.Byte.BoxedValues$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $byte \x3d goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');\n\n\n/**\n * @implements {Comparable\x3cByte\x3e}\n  */\nclass Byte extends Number {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_lang_Byte_ \x3d 0;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__byte__byte(x, y) {\n    Byte.$clinit();\n    return x - y;\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Byte}\n   * @public\n   */\n  static m_decode__java_lang_String(s) {\n    Byte.$clinit();\n    return Byte.m_valueOf__byte($Primitives.$narrowIntToByte(Number.m___decodeAndValidateInt__java_lang_String__int__int(s, Byte.f_MIN_VALUE__java_lang_Byte, Byte.f_MAX_VALUE__java_lang_Byte)));\n  }\n  \n  /**\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__byte(b) {\n    Byte.$clinit();\n    return b;\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m_parseByte__java_lang_String(s) {\n    Byte.$clinit();\n    return Byte.m_parseByte__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {number}\n   * @public\n   */\n  static m_parseByte__java_lang_String__int(s, radix) {\n    Byte.$clinit();\n    return $Primitives.$narrowIntToByte(Number.m___parseAndValidateInt__java_lang_String__int__int__int(s, radix, Byte.f_MIN_VALUE__java_lang_Byte, Byte.f_MAX_VALUE__java_lang_Byte));\n  }\n  \n  /**\n   * @param {number} b\n   * @return {?string}\n   * @public\n   */\n  static m_toString__byte(b) {\n    Byte.$clinit();\n    return j_l_String.m_valueOf__int(b);\n  }\n  \n  /**\n   * @param {number} b\n   * @return {Byte}\n   * @public\n   */\n  static m_valueOf__byte(b) {\n    Byte.$clinit();\n    let rebase \x3d b + 128;\n    let result \x3d BoxedValues.f_boxedValues__java_lang_Byte_BoxedValues_[rebase];\n    if ($Equality.$same(result, null)) {\n      result \x3d $Arrays.$set(BoxedValues.f_boxedValues__java_lang_Byte_BoxedValues_, rebase, Byte.$create__byte(b));\n    }\n    return result;\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Byte}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Byte.$clinit();\n    return Byte.m_valueOf__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {Byte}\n   * @public\n   */\n  static m_valueOf__java_lang_String__int(s, radix) {\n    Byte.$clinit();\n    return Byte.m_valueOf__byte(Byte.m_parseByte__java_lang_String__int(s, radix));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Byte(byte)'.\n   * @param {number} value\n   * @return {!Byte}\n   * @public\n   */\n  static $create__byte(value) {\n    Byte.$clinit();\n    let $instance \x3d new Byte();\n    $instance.$ctor__java_lang_Byte__byte(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Byte(byte)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Byte__byte(value) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Byte_ \x3d value;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Byte(String)'.\n   * @param {?string} s\n   * @return {!Byte}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    Byte.$clinit();\n    let $instance \x3d new Byte();\n    $instance.$ctor__java_lang_Byte__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Byte(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Byte__java_lang_String(s) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Byte_ \x3d Byte.m_parseByte__java_lang_String(s);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_byteValue__() {\n    return this.f_value__java_lang_Byte_;\n  }\n  \n  /**\n   * @param {Byte} b\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Byte(b) {\n    return Byte.m_compare__byte__byte(this.f_value__java_lang_Byte_, b.f_value__java_lang_Byte_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_doubleValue__() {\n    return this.f_value__java_lang_Byte_;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return Byte.$isInstance(o) \x26\x26 ((/**@type {Byte} */ ($Casts.$to(o, Byte))).f_value__java_lang_Byte_ \x3d\x3d this.f_value__java_lang_Byte_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_floatValue__() {\n    return this.f_value__java_lang_Byte_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Byte.m_hashCode__byte(this.f_value__java_lang_Byte_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_intValue__() {\n    return this.f_value__java_lang_Byte_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_longValue__() {\n    return $Primitives.$widenByteToLong(this.f_value__java_lang_Byte_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_shortValue__() {\n    return this.f_value__java_lang_Byte_;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return Byte.m_toString__byte(this.f_value__java_lang_Byte_);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_lang_Byte(/**@type {Byte} */ ($Casts.$to(arg0, Byte)));\n  }\n  \n  /**\n   * @return {Class\x3cByte\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Byte() {\n    return (Byte.$clinit(), Byte.$f_TYPE__java_lang_Byte);\n  }\n  \n  /**\n   * @param {Class\x3cByte\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Byte(value) {\n    (Byte.$clinit(), Byte.$f_TYPE__java_lang_Byte \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Byte;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Byte);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Byte.$clinit \x3d function() {};\n    BoxedValues \x3d goog.module.get('java.lang.Byte.BoxedValues$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $byte \x3d goog.module.get('vmbootstrap.primitives.$byte$impl');\n    Number.$clinit();\n    Byte.$f_TYPE__java_lang_Byte \x3d Class.$get($byte);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Byte, $Util.$makeClassName('java.lang.Byte'));\n\n\n/** @public {number} @const */\nByte.f_MIN_VALUE__java_lang_Byte \x3d -128;\n\n\n/** @public {number} @const */\nByte.f_MAX_VALUE__java_lang_Byte \x3d 127;\n\n\n/** @public {number} @const */\nByte.f_SIZE__java_lang_Byte \x3d 8;\n\n\n/** @public {number} @const */\nByte.f_BYTES__java_lang_Byte \x3d 1;\n\n\n/** @private {Class\x3cByte\x3e} */\nByte.$f_TYPE__java_lang_Byte;\n\n\nComparable.$markImplementor(Byte);\n\n\nexports \x3d Byte; \n//# sourceMappingURL\x3dByte.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Byte.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Byte.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Byte');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Number \x3d goog.require('java.lang.Number');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _BoxedValues \x3d goog.require('java.lang.Byte.BoxedValues');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$byte \x3d goog.require('vmbootstrap.primitives.$byte');\n\n\n// Re-exports the implementation.\nvar Byte \x3d goog.require('java.lang.Byte$impl');\nexports \x3d Byte;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/float.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$float$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class float.\n *\n * Non-instantiable.\n */\nclass $float {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $float;\n  }\n};\n\n\n/**\n * @public {number}\n */\n$float.$initialArrayValue \x3d 0;\n\n\n$Util.$setClassMetadataForPrimitive($float, 'float', 'F');\n\n\n/**\n * Exported class.\n */\nexports \x3d $float;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/float.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$float');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $float \x3d goog.require('vmbootstrap.primitives.$float$impl');\nexports \x3d $float;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Float.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Float.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Float$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst Number \x3d goog.require('java.lang.Number$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $float \x3d goog.forwardDeclare('vmbootstrap.primitives.$float$impl');\n\n\n/**\n * @implements {Comparable\x3cFloat\x3e}\n  */\nclass Float extends Number {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_lang_Float_ \x3d 0.0;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__float__float(x, y) {\n    Float.$clinit();\n    return Double.m_compare__double__double(x, y);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  static m_floatToIntBits__float(value) {\n    Float.$clinit();\n    if (Float.m_isNaN__float(value)) {\n      return 2143289344;\n    }\n    if (value \x3d\x3d 0.0) {\n      if (1.0 / value \x3d\x3d Float.f_NEGATIVE_INFINITY__java_lang_Float) {\n        return -2147483648;\n      } else {\n        return 0;\n      }\n    }\n    let negative \x3d false;\n    if (value \x3c 0.0) {\n      negative \x3d true;\n      value \x3d -value;\n    }\n    if (Float.m_isInfinite__float(value)) {\n      if (negative) {\n        return -8388608;\n      } else {\n        return 2139095040;\n      }\n    }\n    let l \x3d Double.m_doubleToLongBits__double(value);\n    let exp \x3d $Primitives.$narrowLongToInt($LongUtils.$minus($LongUtils.$and($LongUtils.$rightShiftSigned(l, 52), $Primitives.$widenIntToLong(2047)), $Primitives.$widenIntToLong(1023)));\n    let mantissa \x3d $Primitives.$narrowLongToInt($LongUtils.$rightShiftSigned($LongUtils.$and(l, $Long.fromBits(-1, 1048575) /* 4503599627370495 */), 29));\n    if (exp \x3c\x3d -127) {\n      mantissa \x3d (8388608 | mantissa) \x3e\x3e (-127 - exp + 1);\n      exp \x3d -127;\n    }\n    let bits \x3d negative ? Float.f_POWER_31_INT__java_lang_Float_ : $Long.fromInt(0);\n    bits \x3d $LongUtils.$or(bits, $Primitives.$widenIntToLong(((exp + 127) \x3c\x3c 23)));\n    bits \x3d $LongUtils.$or(bits, $Primitives.$widenIntToLong(mantissa));\n    return $Primitives.$narrowLongToInt(bits);\n  }\n  \n  /**\n   * @param {number} f\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__float(f) {\n    Float.$clinit();\n    return $Primitives.$narrowFloatToInt(f);\n  }\n  \n  /**\n   * @param {number} bits\n   * @return {number}\n   * @public\n   */\n  static m_intBitsToFloat__int(bits) {\n    Float.$clinit();\n    let negative \x3d (bits \x26 -2147483648) !\x3d 0;\n    let exp \x3d (bits \x3e\x3e 23) \x26 255;\n    bits \x26\x3d 8388607;\n    if (exp \x3d\x3d 0) {\n      if (bits \x3d\x3d 0) {\n        return negative ? -0.0 : 0.0;\n      }\n    } else if (exp \x3d\x3d 255) {\n      if (bits \x3d\x3d 0) {\n        return negative ? Float.f_NEGATIVE_INFINITY__java_lang_Float : Float.f_POSITIVE_INFINITY__java_lang_Float;\n      } else {\n        return Float.f_NaN__java_lang_Float;\n      }\n    }\n    if (exp \x3d\x3d 0) {\n      exp \x3d 1;\n      while ((bits \x26 8388608) \x3d\x3d 0) {\n        bits \x3c\x3c\x3d 1;\n        exp--;\n      }\n      bits \x26\x3d 8388607;\n    }\n    let bits64 \x3d negative ? $Long.fromBits(0, -2147483648) /* -9223372036854775808 */ : $Long.fromInt(0);\n    bits64 \x3d $LongUtils.$or(bits64, $LongUtils.$leftShift($Primitives.$widenIntToLong((exp + 896)), 52));\n    bits64 \x3d $LongUtils.$or(bits64, $LongUtils.$leftShift($Primitives.$widenIntToLong(bits), 29));\n    return Double.m_longBitsToDouble__long(bits64);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {boolean}\n   * @public\n   */\n  static m_isFinite__float(x) {\n    Float.$clinit();\n    return isFinite(x);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {boolean}\n   * @public\n   */\n  static m_isInfinite__float(x) {\n    Float.$clinit();\n    return Double.m_isInfinite__double(x);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {boolean}\n   * @public\n   */\n  static m_isNaN__float(x) {\n    Float.$clinit();\n    return isNaN(x);\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_max__float__float(a, b) {\n    Float.$clinit();\n    return Math.max(a, b);\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_min__float__float(a, b) {\n    Float.$clinit();\n    return Math.min(a, b);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m_parseFloat__java_lang_String(s) {\n    Float.$clinit();\n    let doubleValue \x3d Number.m___parseAndValidateDouble__java_lang_String(s);\n    if (doubleValue \x3e Float.f_MAX_VALUE__java_lang_Float) {\n      return Float.f_POSITIVE_INFINITY__java_lang_Float;\n    } else if (doubleValue \x3c -Float.f_MAX_VALUE__java_lang_Float) {\n      return Float.f_NEGATIVE_INFINITY__java_lang_Float;\n    }\n    return doubleValue;\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_sum__float__float(a, b) {\n    Float.$clinit();\n    return a + b;\n  }\n  \n  /**\n   * @param {number} b\n   * @return {?string}\n   * @public\n   */\n  static m_toString__float(b) {\n    Float.$clinit();\n    return j_l_String.m_valueOf__float(b);\n  }\n  \n  /**\n   * @param {number} f\n   * @return {Float}\n   * @public\n   */\n  static m_valueOf__float(f) {\n    Float.$clinit();\n    return Float.$create__float(f);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Float}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Float.$clinit();\n    return Float.$create__java_lang_String(s);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Float(double)'.\n   * @param {number} value\n   * @return {!Float}\n   * @public\n   */\n  static $create__double(value) {\n    Float.$clinit();\n    let $instance \x3d new Float();\n    $instance.$ctor__java_lang_Float__double(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Float(double)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Float__double(value) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Float_ \x3d value;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Float(float)'.\n   * @param {number} value\n   * @return {!Float}\n   * @public\n   */\n  static $create__float(value) {\n    Float.$clinit();\n    let $instance \x3d new Float();\n    $instance.$ctor__java_lang_Float__float(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Float(float)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Float__float(value) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Float_ \x3d value;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Float(String)'.\n   * @param {?string} s\n   * @return {!Float}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    Float.$clinit();\n    let $instance \x3d new Float();\n    $instance.$ctor__java_lang_Float__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Float(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Float__java_lang_String(s) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Float_ \x3d Float.m_parseFloat__java_lang_String(s);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_byteValue__() {\n    return $Primitives.$narrowFloatToByte(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @param {Float} b\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Float(b) {\n    return Float.m_compare__float__float(this.f_value__java_lang_Float_, b.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_doubleValue__() {\n    return this.f_value__java_lang_Float_;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return Float.$isInstance(o) \x26\x26 ((/**@type {Float} */ ($Casts.$to(o, Float))).f_value__java_lang_Float_ \x3d\x3d this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_floatValue__() {\n    return this.f_value__java_lang_Float_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Float.m_hashCode__float(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_intValue__() {\n    return $Primitives.$narrowFloatToInt(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isInfinite__() {\n    return Float.m_isInfinite__float(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isNaN__() {\n    return Float.m_isNaN__float(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_longValue__() {\n    return $Primitives.$narrowFloatToLong(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_shortValue__() {\n    return $Primitives.$narrowFloatToShort(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return Float.m_toString__float(this.f_value__java_lang_Float_);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_lang_Float(/**@type {Float} */ ($Casts.$to(arg0, Float)));\n  }\n  \n  /**\n   * @return {Class\x3cFloat\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Float() {\n    return (Float.$clinit(), Float.$f_TYPE__java_lang_Float);\n  }\n  \n  /**\n   * @param {Class\x3cFloat\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Float(value) {\n    (Float.$clinit(), Float.$f_TYPE__java_lang_Float \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Float;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Float);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Float.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $float \x3d goog.module.get('vmbootstrap.primitives.$float$impl');\n    Number.$clinit();\n    Float.$f_TYPE__java_lang_Float \x3d Class.$get($float);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Float, $Util.$makeClassName('java.lang.Float'));\n\n\n/** @public {number} @const */\nFloat.f_MAX_VALUE__java_lang_Float \x3d 3.4028234663852886E38;\n\n\n/** @public {number} @const */\nFloat.f_MIN_VALUE__java_lang_Float \x3d 1.401298464324817E-45;\n\n\n/** @public {number} @const */\nFloat.f_MAX_EXPONENT__java_lang_Float \x3d 127;\n\n\n/** @public {number} @const */\nFloat.f_MIN_EXPONENT__java_lang_Float \x3d -126;\n\n\n/** @public {number} @const */\nFloat.f_MIN_NORMAL__java_lang_Float \x3d 1.1754943508222875E-38;\n\n\n/** @public {number} @const */\nFloat.f_NaN__java_lang_Float \x3d NaN;\n\n\n/** @public {number} @const */\nFloat.f_NEGATIVE_INFINITY__java_lang_Float \x3d -Infinity;\n\n\n/** @public {number} @const */\nFloat.f_POSITIVE_INFINITY__java_lang_Float \x3d Infinity;\n\n\n/** @public {number} @const */\nFloat.f_SIZE__java_lang_Float \x3d 32;\n\n\n/** @public {number} @const */\nFloat.f_BYTES__java_lang_Float \x3d 4;\n\n\n/** @private {Class\x3cFloat\x3e} */\nFloat.$f_TYPE__java_lang_Float;\n\n\n/** @public {!$Long} @const */\nFloat.f_POWER_31_INT__java_lang_Float_ \x3d $Long.fromBits(-2147483648, 0) /* 2147483648 */;\n\n\nComparable.$markImplementor(Float);\n\n\nexports \x3d Float; \n//# sourceMappingURL\x3dFloat.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Float.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Float.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Float');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Number \x3d goog.require('java.lang.Number');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$float \x3d goog.require('vmbootstrap.primitives.$float');\n\n\n// Re-exports the implementation.\nvar Float \x3d goog.require('java.lang.Float$impl');\nexports \x3d Float;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Short$BoxedValues.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Short$BoxedValues.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Short.BoxedValues$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Short \x3d goog.forwardDeclare('java.lang.Short$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\nclass BoxedValues extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'BoxedValues()'.\n   * @return {!BoxedValues}\n   * @public\n   */\n  static $create__() {\n    BoxedValues.$clinit();\n    let $instance \x3d new BoxedValues();\n    $instance.$ctor__java_lang_Short_BoxedValues__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'BoxedValues()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Short_BoxedValues__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cShort\x3e}\n   * @public\n   */\n  static get f_boxedValues__java_lang_Short_BoxedValues_() {\n    return (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Short_BoxedValues_);\n  }\n  \n  /**\n   * @param {Array\x3cShort\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_boxedValues__java_lang_Short_BoxedValues_(value) {\n    (BoxedValues.$clinit(), BoxedValues.$f_boxedValues__java_lang_Short_BoxedValues_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BoxedValues;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BoxedValues);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BoxedValues.$clinit \x3d function() {};\n    Short \x3d goog.module.get('java.lang.Short$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n    BoxedValues.$f_boxedValues__java_lang_Short_BoxedValues_ \x3d /**@type {!Array\x3cShort\x3e} */ ($Arrays.$create([256], Short));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BoxedValues, $Util.$makeClassName('java.lang.Short$BoxedValues'));\n\n\n/** @private {Array\x3cShort\x3e} */\nBoxedValues.$f_boxedValues__java_lang_Short_BoxedValues_;\n\n\n\n\nexports \x3d BoxedValues; \n//# sourceMappingURL\x3dShort$BoxedValues.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Short$BoxedValues.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Short$BoxedValues.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Short.BoxedValues');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Short \x3d goog.require('java.lang.Short');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar BoxedValues \x3d goog.require('java.lang.Short.BoxedValues$impl');\nexports \x3d BoxedValues;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/short.impl.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.impl.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$short$impl');\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Placeholder class definition for the primitive class short.\n *\n * Non-instantiable.\n */\nclass $short {\n  /**\n   * Defines instance fields.\n   */\n  constructor() {}\n\n  /**\n   * Returns whether the provided instance is an instance of this class.\n   * Note that this always return true, because it is only used for ArrayStoreException\n   * purposes which never happens for primitive arrays as they are compile time checked.\n   *\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) { return true; }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   *\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @private\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor \x3d\x3d\x3d $short;\n  }\n};\n\n\n/**\n * @public {number}\n */\n$short.$initialArrayValue \x3d 0;\n\n\n$Util.$setClassMetadataForPrimitive($short, 'short', 'S');\n\n\n/**\n * Exported class.\n */\nexports \x3d $short;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/primitives/short.java.js
goog.loadModule("'use strict'"+"// GENERATED CODE! Edit jre/java/javaemul/internal/vmbootstrap/primitives/primitive.java.js.template instead!\ngoog.module('vmbootstrap.primitives.$short');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst $short \x3d goog.require('vmbootstrap.primitives.$short$impl');\nexports \x3d $short;");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Short.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Short.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Short$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst Number \x3d goog.require('java.lang.Number$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet BoxedValues \x3d goog.forwardDeclare('java.lang.Short.BoxedValues$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $short \x3d goog.forwardDeclare('vmbootstrap.primitives.$short$impl');\n\n\n/**\n * @implements {Comparable\x3cShort\x3e}\n  */\nclass Short extends Number {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_lang_Short_ \x3d 0;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__short__short(x, y) {\n    Short.$clinit();\n    return x - y;\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Short}\n   * @public\n   */\n  static m_decode__java_lang_String(s) {\n    Short.$clinit();\n    return Short.m_valueOf__short($Primitives.$narrowIntToShort(Number.m___decodeAndValidateInt__java_lang_String__int__int(s, Short.f_MIN_VALUE__java_lang_Short, Short.f_MAX_VALUE__java_lang_Short)));\n  }\n  \n  /**\n   * @param {number} s\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__short(s) {\n    Short.$clinit();\n    return s;\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m_parseShort__java_lang_String(s) {\n    Short.$clinit();\n    return Short.m_parseShort__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {number}\n   * @public\n   */\n  static m_parseShort__java_lang_String__int(s, radix) {\n    Short.$clinit();\n    return $Primitives.$narrowIntToShort(Number.m___parseAndValidateInt__java_lang_String__int__int__int(s, radix, Short.f_MIN_VALUE__java_lang_Short, Short.f_MAX_VALUE__java_lang_Short));\n  }\n  \n  /**\n   * @param {number} s\n   * @return {number}\n   * @public\n   */\n  static m_reverseBytes__short(s) {\n    Short.$clinit();\n    return $Primitives.$narrowIntToShort((((s \x26 255) \x3c\x3c 8) | ((s \x26 65280) \x3e\x3e 8)));\n  }\n  \n  /**\n   * @param {number} b\n   * @return {?string}\n   * @public\n   */\n  static m_toString__short(b) {\n    Short.$clinit();\n    return j_l_String.m_valueOf__int(b);\n  }\n  \n  /**\n   * @param {number} s\n   * @return {Short}\n   * @public\n   */\n  static m_valueOf__short(s) {\n    Short.$clinit();\n    if (s \x3e -129 \x26\x26 s \x3c 128) {\n      let rebase \x3d s + 128;\n      let result \x3d BoxedValues.f_boxedValues__java_lang_Short_BoxedValues_[rebase];\n      if ($Equality.$same(result, null)) {\n        result \x3d $Arrays.$set(BoxedValues.f_boxedValues__java_lang_Short_BoxedValues_, rebase, Short.$create__short(s));\n      }\n      return result;\n    }\n    return Short.$create__short(s);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {Short}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Short.$clinit();\n    return Short.m_valueOf__java_lang_String__int(s, 10);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} radix\n   * @return {Short}\n   * @public\n   */\n  static m_valueOf__java_lang_String__int(s, radix) {\n    Short.$clinit();\n    return Short.m_valueOf__short(Short.m_parseShort__java_lang_String__int(s, radix));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Short(short)'.\n   * @param {number} value\n   * @return {!Short}\n   * @public\n   */\n  static $create__short(value) {\n    Short.$clinit();\n    let $instance \x3d new Short();\n    $instance.$ctor__java_lang_Short__short(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Short(short)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Short__short(value) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Short_ \x3d value;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Short(String)'.\n   * @param {?string} s\n   * @return {!Short}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    Short.$clinit();\n    let $instance \x3d new Short();\n    $instance.$ctor__java_lang_Short__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Short(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Short__java_lang_String(s) {\n    this.$ctor__java_lang_Number__();\n    this.f_value__java_lang_Short_ \x3d Short.m_parseShort__java_lang_String(s);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_byteValue__() {\n    return $Primitives.$narrowShortToByte(this.f_value__java_lang_Short_);\n  }\n  \n  /**\n   * @param {Short} b\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Short(b) {\n    return Short.m_compare__short__short(this.f_value__java_lang_Short_, b.f_value__java_lang_Short_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_doubleValue__() {\n    return this.f_value__java_lang_Short_;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return Short.$isInstance(o) \x26\x26 ((/**@type {Short} */ ($Casts.$to(o, Short))).f_value__java_lang_Short_ \x3d\x3d this.f_value__java_lang_Short_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_floatValue__() {\n    return this.f_value__java_lang_Short_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Short.m_hashCode__short(this.f_value__java_lang_Short_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_intValue__() {\n    return this.f_value__java_lang_Short_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_longValue__() {\n    return $Primitives.$widenShortToLong(this.f_value__java_lang_Short_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_shortValue__() {\n    return this.f_value__java_lang_Short_;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return Short.m_toString__short(this.f_value__java_lang_Short_);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_lang_Short(/**@type {Short} */ ($Casts.$to(arg0, Short)));\n  }\n  \n  /**\n   * @return {Class\x3cShort\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Short() {\n    return (Short.$clinit(), Short.$f_TYPE__java_lang_Short);\n  }\n  \n  /**\n   * @param {Class\x3cShort\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Short(value) {\n    (Short.$clinit(), Short.$f_TYPE__java_lang_Short \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Short;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Short);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Short.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    BoxedValues \x3d goog.module.get('java.lang.Short.BoxedValues$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $short \x3d goog.module.get('vmbootstrap.primitives.$short$impl');\n    Number.$clinit();\n    Short.$f_TYPE__java_lang_Short \x3d Class.$get($short);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Short, $Util.$makeClassName('java.lang.Short'));\n\n\n/** @public {number} @const */\nShort.f_MIN_VALUE__java_lang_Short \x3d -32768;\n\n\n/** @public {number} @const */\nShort.f_MAX_VALUE__java_lang_Short \x3d 32767;\n\n\n/** @public {number} @const */\nShort.f_SIZE__java_lang_Short \x3d 16;\n\n\n/** @public {number} @const */\nShort.f_BYTES__java_lang_Short \x3d 2;\n\n\n/** @private {Class\x3cShort\x3e} */\nShort.$f_TYPE__java_lang_Short;\n\n\nComparable.$markImplementor(Short);\n\n\nexports \x3d Short; \n//# sourceMappingURL\x3dShort.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Short.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Short.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Short');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Number \x3d goog.require('java.lang.Number');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _BoxedValues \x3d goog.require('java.lang.Short.BoxedValues');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$short \x3d goog.require('vmbootstrap.primitives.$short');\n\n\n// Re-exports the implementation.\nvar Short \x3d goog.require('java.lang.Short$impl');\nexports \x3d Short;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Iterable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Iterable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Iterable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.lang.Iterable.$LambdaAdaptor$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Iterable {\n  /**\n   * @abstract\n   * @return {Iterator\x3cC_T\x3e}\n   * @public\n   */\n  m_iterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function():Iterator\x3cC_T\x3e} fn\n   * @return {Iterable\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    Iterable.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Iterable\x3cC_T\x3e} $thisArg\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  static m_forEach__$default__java_lang_Iterable__java_util_function_Consumer($thisArg, action) {\n    Iterable.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(action);\n    for (let $iterator \x3d $thisArg.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let t \x3d $iterator.m_next__();\n      action.m_accept__java_lang_Object(t);\n    }\n  }\n  \n  /**\n   * @template C_T\n   * @param {Iterable\x3cC_T\x3e} $thisArg\n   * @return {Spliterator\x3cC_T\x3e}\n   * @public\n   */\n  static m_spliterator__$default__java_lang_Iterable($thisArg) {\n    Iterable.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ (Spliterators.m_spliteratorUnknownSize__java_util_Iterator__int($thisArg.m_iterator__(), 0));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_Iterable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_lang_Iterable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_Iterable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Iterable.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.lang.Iterable.$LambdaAdaptor$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Iterable, $Util.$makeClassName('java.lang.Iterable'));\n\n\nIterable.$markImplementor(/** @type {Function} */ (Iterable));\n\n\nexports \x3d Iterable; \n//# sourceMappingURL\x3dIterable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Iterable$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Iterable$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Iterable.$LambdaAdaptor$impl');\n\n\nconst Iterable \x3d goog.require('java.lang.Iterable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\n\n\n/**\n * @template C_T\n * @implements {Iterable\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():Iterator\x3cC_T\x3e} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():Iterator\x3cC_T\x3e} */\n    this.f_$$fn__java_lang_Iterable_$LambdaAdaptor;\n    this.$ctor__java_lang_Iterable_$LambdaAdaptor__java_lang_Iterable_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():Iterator\x3cC_T\x3e} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Iterable_$LambdaAdaptor__java_lang_Iterable_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_lang_Iterable_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {Iterator\x3cC_T\x3e}\n   * @public\n   */\n  m_iterator__() {\n    let /** ?function():Iterator\x3cC_T\x3e */ $function;\n    return ($function \x3d this.f_$$fn__java_lang_Iterable_$LambdaAdaptor, $function());\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_T\x3e} */ (Iterable.m_spliterator__$default__java_lang_Iterable(this));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Iterable.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.lang.Iterable$$LambdaAdaptor'));\n\n\nIterable.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIterable$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Iterable$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Iterable$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Iterable.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.lang.Iterable.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleConsumer.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n */\nclass DoubleConsumer {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__double(value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleConsumer} after\n   * @return {DoubleConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleConsumer(after) {\n  }\n  \n  /**\n   * @param {?function(number):void} fn\n   * @return {DoubleConsumer}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleConsumer.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {DoubleConsumer} $thisArg\n   * @param {DoubleConsumer} after\n   * @return {DoubleConsumer}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_DoubleConsumer__java_util_function_DoubleConsumer($thisArg, after) {\n    DoubleConsumer.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return DoubleConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      $thisArg.m_accept__double(value);\n      after.m_accept__double(value);\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleConsumer.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleConsumer, $Util.$makeClassName('java.util.function.DoubleConsumer'));\n\n\nDoubleConsumer.$markImplementor(/** @type {Function} */ (DoubleConsumer));\n\n\nexports \x3d DoubleConsumer; \n//# sourceMappingURL\x3dDoubleConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoubleConsumer}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):void} */\n    this.f_$$fn__java_util_function_DoubleConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleConsumer_$LambdaAdaptor__java_util_function_DoubleConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleConsumer_$LambdaAdaptor__java_util_function_DoubleConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {void}\n   * @public\n   */\n  m_accept__double(arg0) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_DoubleConsumer_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {DoubleConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleConsumer(arg0) {\n    return DoubleConsumer.m_andThen__$default__java_util_function_DoubleConsumer__java_util_function_DoubleConsumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    DoubleConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleConsumer$$LambdaAdaptor'));\n\n\nDoubleConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleConsumer.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer$impl');\nexports \x3d DoubleConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Iterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Iterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Iterator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @interface\n * @template C_E\n */\nclass Iterator {\n  /**\n   * @abstract\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_next__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n  }\n  \n  /**\n   * @template C_E\n   * @param {Iterator\x3cC_E\x3e} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer($thisArg, consumer) {\n    Iterator.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    while ($thisArg.m_hasNext__()) {\n      consumer.m_accept__java_lang_Object($thisArg.m_next__());\n    }\n  }\n  \n  /**\n   * @template C_E\n   * @param {Iterator\x3cC_E\x3e} $thisArg\n   * @return {void}\n   * @public\n   */\n  static m_remove__$default__java_util_Iterator($thisArg) {\n    Iterator.$clinit();\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Iterator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Iterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Iterator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Iterator.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Iterator, $Util.$makeClassName('java.util.Iterator'));\n\n\nIterator.$markImplementor(/** @type {Function} */ (Iterator));\n\n\nexports \x3d Iterator; \n//# sourceMappingURL\x3dIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.PrimitiveIterator$impl');\n\n\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n * @template C_T, C_C\n * @extends {Iterator\x3cC_T\x3e}\n */\nclass PrimitiveIterator {\n  /**\n   * @abstract\n   * @param {C_C} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(consumer) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Iterator.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_PrimitiveIterator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_PrimitiveIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_PrimitiveIterator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PrimitiveIterator.$clinit \x3d function() {};\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(PrimitiveIterator, $Util.$makeClassName('java.util.PrimitiveIterator'));\n\n\nPrimitiveIterator.$markImplementor(/** @type {Function} */ (PrimitiveIterator));\n\n\nexports \x3d PrimitiveIterator; \n//# sourceMappingURL\x3dPrimitiveIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator$OfDouble.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator$OfDouble.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.PrimitiveIterator.OfDouble$impl');\n\n\nconst PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @extends {PrimitiveIterator\x3c?number, DoubleConsumer\x3e}\n */\nclass OfDouble {\n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_nextDouble__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {?number}\n   * @public\n   */\n  m_next__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_DoubleConsumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @param {OfDouble} $thisArg\n   * @return {?number}\n   * @public\n   */\n  static m_next__$default__java_util_PrimitiveIterator_OfDouble($thisArg) {\n    OfDouble.$clinit();\n    return $thisArg.m_nextDouble__();\n  }\n  \n  /**\n   * @param {OfDouble} $thisArg\n   * @param {DoubleConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_PrimitiveIterator_OfDouble__java_util_function_DoubleConsumer($thisArg, consumer) {\n    OfDouble.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    while ($thisArg.m_hasNext__()) {\n      consumer.m_accept__double($thisArg.m_nextDouble__());\n    }\n  }\n  \n  /**\n   * @param {OfDouble} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_PrimitiveIterator_OfDouble__java_util_function_Consumer($thisArg, consumer) {\n    OfDouble.$clinit();\n    if (DoubleConsumer.$isInstance(consumer)) {\n      $thisArg.m_forEachRemaining__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(consumer, DoubleConsumer)));\n    } else {\n      $thisArg.m_forEachRemaining__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(DoubleConsumer.$adapt(((/** number */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(arg0);\n      })), DoubleConsumer)));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    PrimitiveIterator.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_PrimitiveIterator_OfDouble \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_PrimitiveIterator_OfDouble;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_PrimitiveIterator_OfDouble;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfDouble.$clinit \x3d function() {};\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfDouble, $Util.$makeClassName('java.util.PrimitiveIterator$OfDouble'));\n\n\nOfDouble.$markImplementor(/** @type {Function} */ (OfDouble));\n\n\nexports \x3d OfDouble; \n//# sourceMappingURL\x3dPrimitiveIterator$OfDouble.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator$OfDouble.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator$OfDouble.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.PrimitiveIterator.OfDouble');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble$impl');\nexports \x3d OfDouble;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongConsumer.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongConsumer {\n  /**\n   * @abstract\n   * @param {!$Long} value\n   * @return {void}\n   * @public\n   */\n  m_accept__long(value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongConsumer} after\n   * @return {LongConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_LongConsumer(after) {\n  }\n  \n  /**\n   * @param {?function(!$Long):void} fn\n   * @return {LongConsumer}\n   * @public\n   */\n  static $adapt(fn) {\n    LongConsumer.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {LongConsumer} $thisArg\n   * @param {LongConsumer} after\n   * @return {LongConsumer}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_LongConsumer__java_util_function_LongConsumer($thisArg, after) {\n    LongConsumer.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return LongConsumer.$adapt(((/** !$Long */ value) \x3d\x3e{\n      $thisArg.m_accept__long(value);\n      after.m_accept__long(value);\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongConsumer.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongConsumer, $Util.$makeClassName('java.util.function.LongConsumer'));\n\n\nLongConsumer.$markImplementor(/** @type {Function} */ (LongConsumer));\n\n\nexports \x3d LongConsumer; \n//# sourceMappingURL\x3dLongConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongConsumer \x3d goog.require('java.util.function.LongConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongConsumer}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long):void} */\n    this.f_$$fn__java_util_function_LongConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongConsumer_$LambdaAdaptor__java_util_function_LongConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongConsumer_$LambdaAdaptor__java_util_function_LongConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @return {void}\n   * @public\n   */\n  m_accept__long(arg0) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_LongConsumer_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {LongConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_LongConsumer(arg0) {\n    return LongConsumer.m_andThen__$default__java_util_function_LongConsumer__java_util_function_LongConsumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    LongConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongConsumer$$LambdaAdaptor'));\n\n\nLongConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongConsumer.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongConsumer \x3d goog.require('java.util.function.LongConsumer$impl');\nexports \x3d LongConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator$OfLong.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator$OfLong.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.PrimitiveIterator.OfLong$impl');\n\n\nconst PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @extends {PrimitiveIterator\x3cLong, LongConsumer\x3e}\n */\nclass OfLong {\n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_nextLong__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Long}\n   * @public\n   */\n  m_next__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_LongConsumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @param {OfLong} $thisArg\n   * @return {Long}\n   * @public\n   */\n  static m_next__$default__java_util_PrimitiveIterator_OfLong($thisArg) {\n    OfLong.$clinit();\n    return Long.m_valueOf__long($thisArg.m_nextLong__());\n  }\n  \n  /**\n   * @param {OfLong} $thisArg\n   * @param {LongConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_PrimitiveIterator_OfLong__java_util_function_LongConsumer($thisArg, consumer) {\n    OfLong.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    while ($thisArg.m_hasNext__()) {\n      consumer.m_accept__long($thisArg.m_nextLong__());\n    }\n  }\n  \n  /**\n   * @param {OfLong} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_PrimitiveIterator_OfLong__java_util_function_Consumer($thisArg, consumer) {\n    OfLong.$clinit();\n    if (LongConsumer.$isInstance(consumer)) {\n      $thisArg.m_forEachRemaining__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(consumer, LongConsumer)));\n    } else {\n      $thisArg.m_forEachRemaining__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(LongConsumer.$adapt(((/** !$Long */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(Long.m_valueOf__long(arg0));\n      })), LongConsumer)));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    PrimitiveIterator.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_PrimitiveIterator_OfLong \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_PrimitiveIterator_OfLong;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_PrimitiveIterator_OfLong;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfLong.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfLong, $Util.$makeClassName('java.util.PrimitiveIterator$OfLong'));\n\n\nOfLong.$markImplementor(/** @type {Function} */ (OfLong));\n\n\nexports \x3d OfLong; \n//# sourceMappingURL\x3dPrimitiveIterator$OfLong.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator$OfLong.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator$OfLong.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.PrimitiveIterator.OfLong');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong$impl');\nexports \x3d OfLong;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfPrimitive.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfPrimitive.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterator.OfPrimitive$impl');\n\n\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n * @template C_OfPrimitive_T, C_OfPrimitive_C, C_OfPrimitive_S\n * @extends {Spliterator\x3cC_OfPrimitive_T\x3e}\n */\nclass OfPrimitive {\n  /**\n   * @abstract\n   * @param {C_OfPrimitive_C} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {C_OfPrimitive_S}\n   * @public\n   */\n  m_trySplit__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_OfPrimitive_C} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(consumer) {\n  }\n  \n  /**\n   * @template C_OfPrimitive_T, C_OfPrimitive_C, C_OfPrimitive_S\n   * @param {OfPrimitive\x3cC_OfPrimitive_T, C_OfPrimitive_C, C_OfPrimitive_S\x3e} $thisArg\n   * @param {C_OfPrimitive_C} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object($thisArg, consumer) {\n    OfPrimitive.$clinit();\n    while ($thisArg.m_tryAdvance__java_lang_Object(consumer)) {\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Spliterator.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Spliterator_OfPrimitive \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Spliterator_OfPrimitive;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Spliterator_OfPrimitive;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfPrimitive.$clinit \x3d function() {};\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfPrimitive, $Util.$makeClassName('java.util.Spliterator$OfPrimitive'));\n\n\nOfPrimitive.$markImplementor(/** @type {Function} */ (OfPrimitive));\n\n\nexports \x3d OfPrimitive; \n//# sourceMappingURL\x3dSpliterator$OfPrimitive.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfPrimitive.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfPrimitive.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterator.OfPrimitive');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive$impl');\nexports \x3d OfPrimitive;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfDouble.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfDouble.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterator.OfDouble$impl');\n\n\nconst OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @extends {OfPrimitive\x3c?number, DoubleConsumer, OfDouble\x3e}\n */\nclass OfDouble {\n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @param {OfDouble} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  static m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer($thisArg, consumer) {\n    OfDouble.$clinit();\n    if (DoubleConsumer.$isInstance(consumer)) {\n      return $thisArg.m_tryAdvance__java_lang_Object(/**@type {DoubleConsumer} */ ($Casts.$to(consumer, DoubleConsumer)));\n    } else {\n      return $thisArg.m_tryAdvance__java_lang_Object(/**@type {DoubleConsumer} */ ($Casts.$to(DoubleConsumer.$adapt(((/** number */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(arg0);\n      })), DoubleConsumer)));\n    }\n  }\n  \n  /**\n   * @param {OfDouble} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer($thisArg, consumer) {\n    OfDouble.$clinit();\n    if (DoubleConsumer.$isInstance(consumer)) {\n      $thisArg.m_forEachRemaining__java_lang_Object(/**@type {DoubleConsumer} */ ($Casts.$to(consumer, DoubleConsumer)));\n    } else {\n      $thisArg.m_forEachRemaining__java_lang_Object(/**@type {DoubleConsumer} */ ($Casts.$to(DoubleConsumer.$adapt(((/** number */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(arg0);\n      })), DoubleConsumer)));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    OfPrimitive.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Spliterator_OfDouble \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Spliterator_OfDouble;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Spliterator_OfDouble;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfDouble.$clinit \x3d function() {};\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    OfPrimitive.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfDouble, $Util.$makeClassName('java.util.Spliterator$OfDouble'));\n\n\nOfDouble.$markImplementor(/** @type {Function} */ (OfDouble));\n\n\nexports \x3d OfDouble; \n//# sourceMappingURL\x3dSpliterator$OfDouble.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfDouble.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfDouble.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterator.OfDouble');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfDouble \x3d goog.require('java.util.Spliterator.OfDouble$impl');\nexports \x3d OfDouble;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntConsumer.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n */\nclass IntConsumer {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__int(value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntConsumer} after\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(after) {\n  }\n  \n  /**\n   * @param {?function(number):void} fn\n   * @return {IntConsumer}\n   * @public\n   */\n  static $adapt(fn) {\n    IntConsumer.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {IntConsumer} $thisArg\n   * @param {IntConsumer} after\n   * @return {IntConsumer}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer($thisArg, after) {\n    IntConsumer.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return IntConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      $thisArg.m_accept__int(value);\n      after.m_accept__int(value);\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntConsumer.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntConsumer, $Util.$makeClassName('java.util.function.IntConsumer'));\n\n\nIntConsumer.$markImplementor(/** @type {Function} */ (IntConsumer));\n\n\nexports \x3d IntConsumer; \n//# sourceMappingURL\x3dIntConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntConsumer}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):void} */\n    this.f_$$fn__java_util_function_IntConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntConsumer_$LambdaAdaptor__java_util_function_IntConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntConsumer_$LambdaAdaptor__java_util_function_IntConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {void}\n   * @public\n   */\n  m_accept__int(arg0) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_IntConsumer_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(arg0) {\n    return IntConsumer.m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    IntConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntConsumer$$LambdaAdaptor'));\n\n\nIntConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntConsumer.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nexports \x3d IntConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfInt.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfInt.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterator.OfInt$impl');\n\n\nconst OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @extends {OfPrimitive\x3cInteger, IntConsumer, OfInt\x3e}\n */\nclass OfInt {\n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @param {OfInt} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  static m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer($thisArg, consumer) {\n    OfInt.$clinit();\n    if (IntConsumer.$isInstance(consumer)) {\n      return $thisArg.m_tryAdvance__java_lang_Object(/**@type {IntConsumer} */ ($Casts.$to(consumer, IntConsumer)));\n    } else {\n      return $thisArg.m_tryAdvance__java_lang_Object(/**@type {IntConsumer} */ ($Casts.$to(IntConsumer.$adapt(((/** number */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(Integer.m_valueOf__int(arg0));\n      })), IntConsumer)));\n    }\n  }\n  \n  /**\n   * @param {OfInt} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer($thisArg, consumer) {\n    OfInt.$clinit();\n    if (IntConsumer.$isInstance(consumer)) {\n      $thisArg.m_forEachRemaining__java_lang_Object(/**@type {IntConsumer} */ ($Casts.$to(consumer, IntConsumer)));\n    } else {\n      $thisArg.m_forEachRemaining__java_lang_Object(/**@type {IntConsumer} */ ($Casts.$to(IntConsumer.$adapt(((/** number */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(Integer.m_valueOf__int(arg0));\n      })), IntConsumer)));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    OfPrimitive.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Spliterator_OfInt \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Spliterator_OfInt;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Spliterator_OfInt;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfInt.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    OfPrimitive.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfInt, $Util.$makeClassName('java.util.Spliterator$OfInt'));\n\n\nOfInt.$markImplementor(/** @type {Function} */ (OfInt));\n\n\nexports \x3d OfInt; \n//# sourceMappingURL\x3dSpliterator$OfInt.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfInt.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfInt.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterator.OfInt');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfInt \x3d goog.require('java.util.Spliterator.OfInt$impl');\nexports \x3d OfInt;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfLong.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfLong.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterator.OfLong$impl');\n\n\nconst OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @extends {OfPrimitive\x3cLong, LongConsumer, OfLong\x3e}\n */\nclass OfLong {\n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @param {OfLong} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  static m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer($thisArg, consumer) {\n    OfLong.$clinit();\n    if (LongConsumer.$isInstance(consumer)) {\n      return $thisArg.m_tryAdvance__java_lang_Object(/**@type {LongConsumer} */ ($Casts.$to(consumer, LongConsumer)));\n    } else {\n      return $thisArg.m_tryAdvance__java_lang_Object(/**@type {LongConsumer} */ ($Casts.$to(LongConsumer.$adapt(((/** !$Long */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(Long.m_valueOf__long(arg0));\n      })), LongConsumer)));\n    }\n  }\n  \n  /**\n   * @param {OfLong} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer($thisArg, consumer) {\n    OfLong.$clinit();\n    if (LongConsumer.$isInstance(consumer)) {\n      $thisArg.m_forEachRemaining__java_lang_Object(/**@type {LongConsumer} */ ($Casts.$to(consumer, LongConsumer)));\n    } else {\n      $thisArg.m_forEachRemaining__java_lang_Object(/**@type {LongConsumer} */ ($Casts.$to(LongConsumer.$adapt(((/** !$Long */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(Long.m_valueOf__long(arg0));\n      })), LongConsumer)));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    OfPrimitive.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Spliterator_OfLong \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Spliterator_OfLong;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Spliterator_OfLong;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfLong.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    OfPrimitive.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfLong, $Util.$makeClassName('java.util.Spliterator$OfLong'));\n\n\nOfLong.$markImplementor(/** @type {Function} */ (OfLong));\n\n\nexports \x3d OfLong; \n//# sourceMappingURL\x3dSpliterator$OfLong.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterator$OfLong.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterator$OfLong.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterator.OfLong');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfLong \x3d goog.require('java.util.Spliterator.OfLong$impl');\nexports \x3d OfLong;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$BaseArraySpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$BaseArraySpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.BaseArraySpliterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @abstract\n * @template C_BaseArraySpliterator_T, C_BaseArraySpliterator_S, C_BaseArraySpliterator_C\n * @implements {Spliterator\x3cC_BaseArraySpliterator_T\x3e}\n  */\nclass BaseArraySpliterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_index__java_util_Spliterators_BaseArraySpliterator_ \x3d 0;\n    /** @public {number} */\n    this.f_limit__java_util_Spliterators_BaseArraySpliterator_ \x3d 0;\n    /** @public {number} */\n    this.f_characteristics__java_util_Spliterators_BaseArraySpliterator_ \x3d 0;\n  }\n  \n  /**\n   * Initialization from constructor 'BaseArraySpliterator(int, int, int)'.\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_BaseArraySpliterator__int__int__int(from, limit, characteristics) {\n    this.$ctor__java_lang_Object__();\n    this.f_index__java_util_Spliterators_BaseArraySpliterator_ \x3d from;\n    this.f_limit__java_util_Spliterators_BaseArraySpliterator_ \x3d limit;\n    this.f_characteristics__java_util_Spliterators_BaseArraySpliterator_ \x3d Spliterators.m_sizeKnownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_characteristics__() {\n    return this.f_characteristics__java_util_Spliterators_BaseArraySpliterator_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_estimateSize__() {\n    return $Primitives.$widenIntToLong(this.f_limit__java_util_Spliterators_BaseArraySpliterator_ - this.f_index__java_util_Spliterators_BaseArraySpliterator_);\n  }\n  \n  /**\n   * @param {C_BaseArraySpliterator_C} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    while (this.f_index__java_util_Spliterators_BaseArraySpliterator_ \x3c this.f_limit__java_util_Spliterators_BaseArraySpliterator_) {\n      this.m_consume__java_lang_Object__int(consumer, this.f_index__java_util_Spliterators_BaseArraySpliterator_++);\n    }\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    Spliterators.m_checkSorted__int_$p_java_util_Spliterators(this.f_characteristics__java_util_Spliterators_BaseArraySpliterator_);\n    return null;\n  }\n  \n  /**\n   * @param {C_BaseArraySpliterator_C} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    if (this.f_index__java_util_Spliterators_BaseArraySpliterator_ \x3c this.f_limit__java_util_Spliterators_BaseArraySpliterator_) {\n      this.m_consume__java_lang_Object__int(consumer, this.f_index__java_util_Spliterators_BaseArraySpliterator_++);\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {C_BaseArraySpliterator_S}\n   * @public\n   */\n  m_trySplit__() {\n    return null;\n  }\n  \n  /**\n   * @abstract\n   * @param {C_BaseArraySpliterator_C} consumer\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  m_consume__java_lang_Object__int(consumer, index) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BaseArraySpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BaseArraySpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BaseArraySpliterator.$clinit \x3d function() {};\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BaseArraySpliterator, $Util.$makeClassName('java.util.Spliterators$BaseArraySpliterator'));\n\n\nSpliterator.$markImplementor(BaseArraySpliterator);\n\n\nexports \x3d BaseArraySpliterator; \n//# sourceMappingURL\x3dSpliterators$BaseArraySpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$BaseArraySpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$BaseArraySpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.BaseArraySpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator$impl');\nexports \x3d BaseArraySpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$ArraySpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$ArraySpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.ArraySpliterator$impl');\n\n\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_ArraySpliterator_T\n * @extends {BaseArraySpliterator\x3cC_ArraySpliterator_T, Spliterator\x3cC_ArraySpliterator_T\x3e, Consumer\x3c?\x3e\x3e}\n * @implements {Spliterator\x3cC_ArraySpliterator_T\x3e}\n  */\nclass ArraySpliterator extends BaseArraySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3c*\x3e} */\n    this.f_array__java_util_Spliterators_ArraySpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArraySpliterator(Object[], int)'.\n   * @template C_ArraySpliterator_T\n   * @param {Array\x3c*\x3e} array\n   * @param {number} characteristics\n   * @return {!ArraySpliterator\x3cC_ArraySpliterator_T\x3e}\n   * @public\n   */\n  static $create__arrayOf_java_lang_Object__int(array, characteristics) {\n    ArraySpliterator.$clinit();\n    let $instance \x3d new ArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_ArraySpliterator__arrayOf_java_lang_Object__int(array, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArraySpliterator(Object[], int)'.\n   * @param {Array\x3c*\x3e} array\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_ArraySpliterator__arrayOf_java_lang_Object__int(array, characteristics) {\n    this.$ctor__java_util_Spliterators_ArraySpliterator__arrayOf_java_lang_Object__int__int__int(array, 0, array.length, characteristics);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArraySpliterator(Object[], int, int, int)'.\n   * @template C_ArraySpliterator_T\n   * @param {Array\x3c*\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {!ArraySpliterator\x3cC_ArraySpliterator_T\x3e}\n   * @public\n   */\n  static $create__arrayOf_java_lang_Object__int__int__int(array, from, limit, characteristics) {\n    ArraySpliterator.$clinit();\n    let $instance \x3d new ArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_ArraySpliterator__arrayOf_java_lang_Object__int__int__int(array, from, limit, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArraySpliterator(Object[], int, int, int)'.\n   * @param {Array\x3c*\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_ArraySpliterator__arrayOf_java_lang_Object__int__int__int(array, from, limit, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseArraySpliterator__int__int__int(from, limit, characteristics);\n    this.f_array__java_util_Spliterators_ArraySpliterator_ \x3d array;\n  }\n  \n  /**\n   * @param {Consumer\x3c?\x3e} consumer\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  m_consume__java_util_function_Consumer__int(consumer, index) {\n    consumer.m_accept__java_lang_Object(/**@type {C_ArraySpliterator_T} */ ($Casts.$to(this.f_array__java_util_Spliterators_ArraySpliterator_[index], j_l_Object)));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {number} arg1\n   * @return {void}\n   * @public\n   */\n  m_consume__java_lang_Object__int(arg0, arg1) {\n    this.m_consume__java_util_function_Consumer__int(/**@type {Consumer\x3c*\x3e} */ ($Casts.$to(arg0, Consumer)), arg1);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_Consumer(/**@type {Consumer\x3c*\x3e} */ ($Casts.$to(arg0, Consumer)));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {Consumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    super.m_forEachRemaining__java_lang_Object(arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {Consumer} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return super.m_tryAdvance__java_lang_Object(arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArraySpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArraySpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArraySpliterator.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    BaseArraySpliterator.$clinit();\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArraySpliterator, $Util.$makeClassName('java.util.Spliterators$ArraySpliterator'));\n\n\nSpliterator.$markImplementor(ArraySpliterator);\n\n\nexports \x3d ArraySpliterator; \n//# sourceMappingURL\x3dSpliterators$ArraySpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$ArraySpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$ArraySpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.ArraySpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ArraySpliterator \x3d goog.require('java.util.Spliterators.ArraySpliterator$impl');\nexports \x3d ArraySpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$ConsumerIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$ConsumerIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.ConsumerIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst Consumer \x3d goog.require('java.util.function.Consumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_ConsumerIterator_T\n * @implements {Consumer\x3cC_ConsumerIterator_T\x3e}\n * @implements {Iterator\x3cC_ConsumerIterator_T\x3e}\n  */\nclass ConsumerIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Spliterator\x3c?\x3e} */\n    this.f_spliterator__java_util_Spliterators_ConsumerIterator_;\n    /** @public {C_ConsumerIterator_T} */\n    this.f_nextElement__java_util_Spliterators_ConsumerIterator_;\n    /** @public {boolean} */\n    this.f_hasElement__java_util_Spliterators_ConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConsumerIterator(Spliterator)'.\n   * @template C_ConsumerIterator_T\n   * @param {Spliterator\x3c?\x3e} spliterator\n   * @return {!ConsumerIterator\x3cC_ConsumerIterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_Spliterator(spliterator) {\n    ConsumerIterator.$clinit();\n    let $instance \x3d new ConsumerIterator();\n    $instance.$ctor__java_util_Spliterators_ConsumerIterator__java_util_Spliterator(spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConsumerIterator(Spliterator)'.\n   * @param {Spliterator\x3c?\x3e} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_ConsumerIterator__java_util_Spliterator(spliterator) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_Spliterators_ConsumerIterator();\n    this.f_spliterator__java_util_Spliterators_ConsumerIterator_ \x3d /**@type {Spliterator\x3c*\x3e} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(spliterator), Spliterator));\n  }\n  \n  /**\n   * @override\n   * @param {C_ConsumerIterator_T} element\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object(element) {\n    this.f_nextElement__java_util_Spliterators_ConsumerIterator_ \x3d element;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    if (!this.f_hasElement__java_util_Spliterators_ConsumerIterator_) {\n      this.f_hasElement__java_util_Spliterators_ConsumerIterator_ \x3d this.f_spliterator__java_util_Spliterators_ConsumerIterator_.m_tryAdvance__java_util_function_Consumer(this);\n    }\n    return this.f_hasElement__java_util_Spliterators_ConsumerIterator_;\n  }\n  \n  /**\n   * @override\n   * @return {C_ConsumerIterator_T}\n   * @public\n   */\n  m_next__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.m_hasNext__());\n    this.f_hasElement__java_util_Spliterators_ConsumerIterator_ \x3d false;\n    let element \x3d this.f_nextElement__java_util_Spliterators_ConsumerIterator_;\n    this.f_nextElement__java_util_Spliterators_ConsumerIterator_ \x3d null;\n    return element;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {Consumer\x3cC_ConsumerIterator_T\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Consumer(arg0) {\n    return /**@type {Consumer\x3cC_ConsumerIterator_T\x3e} */ (Consumer.m_andThen__$default__java_util_function_Consumer__java_util_function_Consumer(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    Iterator.m_remove__$default__java_util_Iterator(this);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_Spliterators_ConsumerIterator() {\n    this.f_hasElement__java_util_Spliterators_ConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ConsumerIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ConsumerIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ConsumerIterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Consumer.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ConsumerIterator, $Util.$makeClassName('java.util.Spliterators$ConsumerIterator'));\n\n\nConsumer.$markImplementor(ConsumerIterator);\nIterator.$markImplementor(ConsumerIterator);\n\n\nexports \x3d ConsumerIterator; \n//# sourceMappingURL\x3dSpliterators$ConsumerIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$ConsumerIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$ConsumerIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.ConsumerIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ConsumerIterator \x3d goog.require('java.util.Spliterators.ConsumerIterator$impl');\nexports \x3d ConsumerIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$DoubleArraySpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$DoubleArraySpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.DoubleArraySpliterator$impl');\n\n\nconst OfDouble \x3d goog.require('java.util.Spliterator.OfDouble$impl');\nconst BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @extends {BaseArraySpliterator\x3c?number, OfDouble, DoubleConsumer\x3e}\n * @implements {OfDouble}\n  */\nclass DoubleArraySpliterator extends BaseArraySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cnumber\x3e} */\n    this.f_array__java_util_Spliterators_DoubleArraySpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleArraySpliterator(double[], int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} characteristics\n   * @return {!DoubleArraySpliterator}\n   * @public\n   */\n  static $create__arrayOf_double__int(array, characteristics) {\n    DoubleArraySpliterator.$clinit();\n    let $instance \x3d new DoubleArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_DoubleArraySpliterator__arrayOf_double__int(array, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleArraySpliterator(double[], int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_DoubleArraySpliterator__arrayOf_double__int(array, characteristics) {\n    this.$ctor__java_util_Spliterators_DoubleArraySpliterator__arrayOf_double__int__int__int(array, 0, array.length, characteristics);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleArraySpliterator(double[], int, int, int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {!DoubleArraySpliterator}\n   * @public\n   */\n  static $create__arrayOf_double__int__int__int(array, from, limit, characteristics) {\n    DoubleArraySpliterator.$clinit();\n    let $instance \x3d new DoubleArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_DoubleArraySpliterator__arrayOf_double__int__int__int(array, from, limit, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleArraySpliterator(double[], int, int, int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_DoubleArraySpliterator__arrayOf_double__int__int__int(array, from, limit, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseArraySpliterator__int__int__int(from, limit, characteristics);\n    this.f_array__java_util_Spliterators_DoubleArraySpliterator_ \x3d array;\n  }\n  \n  /**\n   * @param {DoubleConsumer} consumer\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  m_consume__java_util_function_DoubleConsumer__int(consumer, index) {\n    consumer.m_accept__double(this.f_array__java_util_Spliterators_DoubleArraySpliterator_[index]);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {number} arg1\n   * @return {void}\n   * @public\n   */\n  m_consume__java_lang_Object__int(arg0, arg1) {\n    this.m_consume__java_util_function_DoubleConsumer__int(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)), arg1);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DoubleArraySpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DoubleArraySpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleArraySpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    BaseArraySpliterator.$clinit();\n    OfDouble.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DoubleArraySpliterator, $Util.$makeClassName('java.util.Spliterators$DoubleArraySpliterator'));\n\n\nOfDouble.$markImplementor(DoubleArraySpliterator);\n\n\nexports \x3d DoubleArraySpliterator; \n//# sourceMappingURL\x3dSpliterators$DoubleArraySpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$DoubleArraySpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$DoubleArraySpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.DoubleArraySpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar DoubleArraySpliterator \x3d goog.require('java.util.Spliterators.DoubleArraySpliterator$impl');\nexports \x3d DoubleArraySpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$DoubleConsumerIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$DoubleConsumerIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.DoubleConsumerIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst PrimitiveIterator_OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble$impl');\nconst DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @implements {DoubleConsumer}\n * @implements {PrimitiveIterator_OfDouble}\n  */\nclass DoubleConsumerIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfDouble} */\n    this.f_spliterator__java_util_Spliterators_DoubleConsumerIterator_;\n    /** @public {number} */\n    this.f_nextElement__java_util_Spliterators_DoubleConsumerIterator_ \x3d 0.0;\n    /** @public {boolean} */\n    this.f_hasElement__java_util_Spliterators_DoubleConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleConsumerIterator(OfDouble)'.\n   * @param {OfDouble} spliterator\n   * @return {!DoubleConsumerIterator}\n   * @public\n   */\n  static $create__java_util_Spliterator_OfDouble(spliterator) {\n    DoubleConsumerIterator.$clinit();\n    let $instance \x3d new DoubleConsumerIterator();\n    $instance.$ctor__java_util_Spliterators_DoubleConsumerIterator__java_util_Spliterator_OfDouble(spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleConsumerIterator(OfDouble)'.\n   * @param {OfDouble} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_DoubleConsumerIterator__java_util_Spliterator_OfDouble(spliterator) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_Spliterators_DoubleConsumerIterator();\n    this.f_spliterator__java_util_Spliterators_DoubleConsumerIterator_ \x3d /**@type {OfDouble} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(spliterator), OfDouble));\n  }\n  \n  /**\n   * @override\n   * @param {number} d\n   * @return {void}\n   * @public\n   */\n  m_accept__double(d) {\n    this.f_nextElement__java_util_Spliterators_DoubleConsumerIterator_ \x3d d;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    if (!this.f_hasElement__java_util_Spliterators_DoubleConsumerIterator_) {\n      this.f_hasElement__java_util_Spliterators_DoubleConsumerIterator_ \x3d this.f_spliterator__java_util_Spliterators_DoubleConsumerIterator_.m_tryAdvance__java_lang_Object(this);\n    }\n    return this.f_hasElement__java_util_Spliterators_DoubleConsumerIterator_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_nextDouble__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.m_hasNext__());\n    this.f_hasElement__java_util_Spliterators_DoubleConsumerIterator_ \x3d false;\n    return this.f_nextElement__java_util_Spliterators_DoubleConsumerIterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_DoubleConsumer(arg0) {\n    PrimitiveIterator_OfDouble.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfDouble__java_util_function_DoubleConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    PrimitiveIterator_OfDouble.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {?number}\n   * @public\n   */\n  m_next__() {\n    return PrimitiveIterator_OfDouble.m_next__$default__java_util_PrimitiveIterator_OfDouble(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {DoubleConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleConsumer(arg0) {\n    return DoubleConsumer.m_andThen__$default__java_util_function_DoubleConsumer__java_util_function_DoubleConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    Iterator.m_remove__$default__java_util_Iterator(this);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_Spliterators_DoubleConsumerIterator() {\n    this.f_hasElement__java_util_Spliterators_DoubleConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DoubleConsumerIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DoubleConsumerIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleConsumerIterator.$clinit \x3d function() {};\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    DoubleConsumer.$clinit();\n    PrimitiveIterator_OfDouble.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DoubleConsumerIterator, $Util.$makeClassName('java.util.Spliterators$DoubleConsumerIterator'));\n\n\nDoubleConsumer.$markImplementor(DoubleConsumerIterator);\nPrimitiveIterator_OfDouble.$markImplementor(DoubleConsumerIterator);\n\n\nexports \x3d DoubleConsumerIterator; \n//# sourceMappingURL\x3dSpliterators$DoubleConsumerIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$DoubleConsumerIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$DoubleConsumerIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.DoubleConsumerIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _PrimitiveIterator_OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar DoubleConsumerIterator \x3d goog.require('java.util.Spliterators.DoubleConsumerIterator$impl');\nexports \x3d DoubleConsumerIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$BaseSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$BaseSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.BaseSpliterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\n\n\n/**\n * @abstract\n * @template C_BaseSpliterator_T, C_BaseSpliterator_S\n * @implements {Spliterator\x3cC_BaseSpliterator_T\x3e}\n  */\nclass BaseSpliterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_characteristics__java_util_Spliterators_BaseSpliterator_ \x3d 0;\n    /** @public {!$Long} */\n    this.f_sizeEstimate__java_util_Spliterators_BaseSpliterator_ \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * Initialization from constructor 'BaseSpliterator(long, int)'.\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_BaseSpliterator__long__int(size, characteristics) {\n    this.$ctor__java_lang_Object__();\n    this.f_sizeEstimate__java_util_Spliterators_BaseSpliterator_ \x3d size;\n    this.f_characteristics__java_util_Spliterators_BaseSpliterator_ \x3d (characteristics \x26 Spliterator.f_SIZED__java_util_Spliterator) !\x3d 0 ? characteristics | Spliterator.f_SUBSIZED__java_util_Spliterator : characteristics;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_characteristics__() {\n    return this.f_characteristics__java_util_Spliterators_BaseSpliterator_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_estimateSize__() {\n    return this.f_sizeEstimate__java_util_Spliterators_BaseSpliterator_;\n  }\n  \n  /**\n   * @override\n   * @return {C_BaseSpliterator_S}\n   * @public\n   */\n  m_trySplit__() {\n    return null;\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof BaseSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, BaseSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BaseSpliterator.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(BaseSpliterator, $Util.$makeClassName('java.util.Spliterators$BaseSpliterator'));\n\n\nSpliterator.$markImplementor(BaseSpliterator);\n\n\nexports \x3d BaseSpliterator; \n//# sourceMappingURL\x3dSpliterators$BaseSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$BaseSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$BaseSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.BaseSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\n\n\n// Re-exports the implementation.\nvar BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator$impl');\nexports \x3d BaseSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractDoubleSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractDoubleSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.AbstractDoubleSpliterator$impl');\n\n\nconst OfDouble \x3d goog.require('java.util.Spliterator.OfDouble$impl');\nconst BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @abstract\n * @extends {BaseSpliterator\x3c?number, OfDouble\x3e}\n * @implements {OfDouble}\n  */\nclass AbstractDoubleSpliterator extends BaseSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractDoubleSpliterator(long, int)'.\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(size, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseSpliterator__long__int(size, characteristics);\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractDoubleSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractDoubleSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractDoubleSpliterator.$clinit \x3d function() {};\n    BaseSpliterator.$clinit();\n    OfDouble.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractDoubleSpliterator, $Util.$makeClassName('java.util.Spliterators$AbstractDoubleSpliterator'));\n\n\nOfDouble.$markImplementor(AbstractDoubleSpliterator);\n\n\nexports \x3d AbstractDoubleSpliterator; \n//# sourceMappingURL\x3dSpliterators$AbstractDoubleSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractDoubleSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractDoubleSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.AbstractDoubleSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nexports \x3d AbstractDoubleSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$DoubleIteratorSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$DoubleIteratorSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.DoubleIteratorSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfDouble$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterator_OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass DoubleIteratorSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfDouble} */\n    this.f_it__java_util_Spliterators_DoubleIteratorSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleIteratorSpliterator(OfDouble, long, int)'.\n   * @param {OfDouble} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {!DoubleIteratorSpliterator}\n   * @public\n   */\n  static $create__java_util_PrimitiveIterator_OfDouble__long__int(it, size, characteristics) {\n    DoubleIteratorSpliterator.$clinit();\n    let $instance \x3d new DoubleIteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_DoubleIteratorSpliterator__java_util_PrimitiveIterator_OfDouble__long__int(it, size, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleIteratorSpliterator(OfDouble, long, int)'.\n   * @param {OfDouble} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_DoubleIteratorSpliterator__java_util_PrimitiveIterator_OfDouble__long__int(it, size, characteristics) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(size, Spliterators.m_sizeKnownIteratorSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics));\n    this.f_it__java_util_Spliterators_DoubleIteratorSpliterator_ \x3d /**@type {OfDouble} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), OfDouble));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleIteratorSpliterator(OfDouble, int)'.\n   * @param {OfDouble} it\n   * @param {number} characteristics\n   * @return {!DoubleIteratorSpliterator}\n   * @public\n   */\n  static $create__java_util_PrimitiveIterator_OfDouble__int(it, characteristics) {\n    DoubleIteratorSpliterator.$clinit();\n    let $instance \x3d new DoubleIteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_DoubleIteratorSpliterator__java_util_PrimitiveIterator_OfDouble__int(it, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleIteratorSpliterator(OfDouble, int)'.\n   * @param {OfDouble} it\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_DoubleIteratorSpliterator__java_util_PrimitiveIterator_OfDouble__int(it, characteristics) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(Long.f_MAX_VALUE__java_lang_Long, Spliterators.m_sizeUnknownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics));\n    this.f_it__java_util_Spliterators_DoubleIteratorSpliterator_ \x3d /**@type {OfDouble} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), OfDouble));\n  }\n  \n  /**\n   * @param {DoubleConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_DoubleConsumer(consumer) {\n    this.f_it__java_util_Spliterators_DoubleIteratorSpliterator_.m_forEachRemaining__java_util_function_DoubleConsumer(consumer);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    Spliterators.m_checkSorted__int_$p_java_util_Spliterators(this.m_characteristics__());\n    return null;\n  }\n  \n  /**\n   * @param {DoubleConsumer} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    if (this.f_it__java_util_Spliterators_DoubleIteratorSpliterator_.m_hasNext__()) {\n      consumer.m_accept__double(this.f_it__java_util_Spliterators_DoubleIteratorSpliterator_.m_nextDouble__());\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator_OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return Spliterator_OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DoubleIteratorSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DoubleIteratorSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleIteratorSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    OfDouble \x3d goog.module.get('java.util.PrimitiveIterator.OfDouble$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterator_OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DoubleIteratorSpliterator, $Util.$makeClassName('java.util.Spliterators$DoubleIteratorSpliterator'));\n\n\n\n\nexports \x3d DoubleIteratorSpliterator; \n//# sourceMappingURL\x3dSpliterators$DoubleIteratorSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$DoubleIteratorSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$DoubleIteratorSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.DoubleIteratorSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterator_OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar DoubleIteratorSpliterator \x3d goog.require('java.util.Spliterators.DoubleIteratorSpliterator$impl');\nexports \x3d DoubleIteratorSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator_OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet Spliterator_OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet Spliterator_OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterators.EmptySpliterator.OfDouble$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterators.EmptySpliterator.OfInt$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterators.EmptySpliterator.OfLong$impl');\nlet OfRef \x3d goog.forwardDeclare('java.util.Spliterators.EmptySpliterator.OfRef$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @abstract\n * @template C_EmptySpliterator_T, C_EmptySpliterator_S, C_EmptySpliterator_C\n * @implements {Spliterator\x3cC_EmptySpliterator_T\x3e}\n  */\nclass EmptySpliterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'EmptySpliterator()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_EmptySpliterator__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_characteristics__() {\n    return Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_estimateSize__() {\n    return $Long.fromInt(0);\n  }\n  \n  /**\n   * @param {C_EmptySpliterator_C} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n  }\n  \n  /**\n   * @param {C_EmptySpliterator_C} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {C_EmptySpliterator_S}\n   * @public\n   */\n  m_trySplit__() {\n    return null;\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @return {Spliterator\x3c*\x3e}\n   * @public\n   */\n  static get f_OF_REF__java_util_Spliterators_EmptySpliterator() {\n    return (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_REF__java_util_Spliterators_EmptySpliterator);\n  }\n  \n  /**\n   * @param {Spliterator\x3c*\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_OF_REF__java_util_Spliterators_EmptySpliterator(value) {\n    (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_REF__java_util_Spliterators_EmptySpliterator \x3d value);\n  }\n  \n  /**\n   * @return {Spliterator_OfDouble}\n   * @public\n   */\n  static get f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator() {\n    return (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator);\n  }\n  \n  /**\n   * @param {Spliterator_OfDouble} value\n   * @return {void}\n   * @public\n   */\n  static set f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator(value) {\n    (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator \x3d value);\n  }\n  \n  /**\n   * @return {Spliterator_OfInt}\n   * @public\n   */\n  static get f_OF_INT__java_util_Spliterators_EmptySpliterator() {\n    return (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_INT__java_util_Spliterators_EmptySpliterator);\n  }\n  \n  /**\n   * @param {Spliterator_OfInt} value\n   * @return {void}\n   * @public\n   */\n  static set f_OF_INT__java_util_Spliterators_EmptySpliterator(value) {\n    (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_INT__java_util_Spliterators_EmptySpliterator \x3d value);\n  }\n  \n  /**\n   * @return {Spliterator_OfLong}\n   * @public\n   */\n  static get f_OF_LONG__java_util_Spliterators_EmptySpliterator() {\n    return (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_LONG__java_util_Spliterators_EmptySpliterator);\n  }\n  \n  /**\n   * @param {Spliterator_OfLong} value\n   * @return {void}\n   * @public\n   */\n  static set f_OF_LONG__java_util_Spliterators_EmptySpliterator(value) {\n    (EmptySpliterator.$clinit(), EmptySpliterator.$f_OF_LONG__java_util_Spliterators_EmptySpliterator \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptySpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptySpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptySpliterator.$clinit \x3d function() {};\n    OfDouble \x3d goog.module.get('java.util.Spliterators.EmptySpliterator.OfDouble$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterators.EmptySpliterator.OfInt$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterators.EmptySpliterator.OfLong$impl');\n    OfRef \x3d goog.module.get('java.util.Spliterators.EmptySpliterator.OfRef$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    j_l_Object.$clinit();\n    Spliterator.$clinit();\n    EmptySpliterator.$f_OF_REF__java_util_Spliterators_EmptySpliterator \x3d /**@type {!OfRef\x3c*\x3e} */ (OfRef.$create__());\n    EmptySpliterator.$f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator \x3d OfDouble.$create__();\n    EmptySpliterator.$f_OF_INT__java_util_Spliterators_EmptySpliterator \x3d OfInt.$create__();\n    EmptySpliterator.$f_OF_LONG__java_util_Spliterators_EmptySpliterator \x3d OfLong.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptySpliterator, $Util.$makeClassName('java.util.Spliterators$EmptySpliterator'));\n\n\n/** @private {Spliterator\x3c*\x3e} */\nEmptySpliterator.$f_OF_REF__java_util_Spliterators_EmptySpliterator;\n\n\n/** @private {Spliterator_OfDouble} */\nEmptySpliterator.$f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator;\n\n\n/** @private {Spliterator_OfInt} */\nEmptySpliterator.$f_OF_INT__java_util_Spliterators_EmptySpliterator;\n\n\n/** @private {Spliterator_OfLong} */\nEmptySpliterator.$f_OF_LONG__java_util_Spliterators_EmptySpliterator;\n\n\nSpliterator.$markImplementor(EmptySpliterator);\n\n\nexports \x3d EmptySpliterator; \n//# sourceMappingURL\x3dSpliterators$EmptySpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfDouble.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfDouble.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfDouble$impl');\n\n\nconst OfDouble \x3d goog.require('java.util.Spliterator.OfDouble$impl');\nconst EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @extends {EmptySpliterator\x3c?number, OfDouble, DoubleConsumer\x3e}\n * @implements {OfDouble}\n  */\nclass EmptySpliterator_OfDouble extends EmptySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OfDouble()'.\n   * @return {!EmptySpliterator_OfDouble}\n   * @public\n   */\n  static $create__() {\n    EmptySpliterator_OfDouble.$clinit();\n    let $instance \x3d new EmptySpliterator_OfDouble();\n    $instance.$ctor__java_util_Spliterators_EmptySpliterator_OfDouble__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OfDouble()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_EmptySpliterator_OfDouble__() {\n    this.$ctor__java_util_Spliterators_EmptySpliterator__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptySpliterator_OfDouble;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptySpliterator_OfDouble);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptySpliterator_OfDouble.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    EmptySpliterator.$clinit();\n    OfDouble.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptySpliterator_OfDouble, $Util.$makeClassName('java.util.Spliterators$EmptySpliterator$OfDouble'));\n\n\nOfDouble.$markImplementor(EmptySpliterator_OfDouble);\n\n\nexports \x3d EmptySpliterator_OfDouble; \n//# sourceMappingURL\x3dSpliterators$EmptySpliterator$OfDouble.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfDouble.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfDouble.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfDouble');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar EmptySpliterator_OfDouble \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfDouble$impl');\nexports \x3d EmptySpliterator_OfDouble;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfInt.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfInt.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfInt$impl');\n\n\nconst OfInt \x3d goog.require('java.util.Spliterator.OfInt$impl');\nconst EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @extends {EmptySpliterator\x3cInteger, OfInt, IntConsumer\x3e}\n * @implements {OfInt}\n  */\nclass EmptySpliterator_OfInt extends EmptySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OfInt()'.\n   * @return {!EmptySpliterator_OfInt}\n   * @public\n   */\n  static $create__() {\n    EmptySpliterator_OfInt.$clinit();\n    let $instance \x3d new EmptySpliterator_OfInt();\n    $instance.$ctor__java_util_Spliterators_EmptySpliterator_OfInt__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OfInt()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_EmptySpliterator_OfInt__() {\n    this.$ctor__java_util_Spliterators_EmptySpliterator__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptySpliterator_OfInt;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptySpliterator_OfInt);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptySpliterator_OfInt.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    EmptySpliterator.$clinit();\n    OfInt.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptySpliterator_OfInt, $Util.$makeClassName('java.util.Spliterators$EmptySpliterator$OfInt'));\n\n\nOfInt.$markImplementor(EmptySpliterator_OfInt);\n\n\nexports \x3d EmptySpliterator_OfInt; \n//# sourceMappingURL\x3dSpliterators$EmptySpliterator$OfInt.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfInt.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfInt.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfInt');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar EmptySpliterator_OfInt \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfInt$impl');\nexports \x3d EmptySpliterator_OfInt;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfLong.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfLong.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfLong$impl');\n\n\nconst OfLong \x3d goog.require('java.util.Spliterator.OfLong$impl');\nconst EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @extends {EmptySpliterator\x3cLong, OfLong, LongConsumer\x3e}\n * @implements {OfLong}\n  */\nclass EmptySpliterator_OfLong extends EmptySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OfLong()'.\n   * @return {!EmptySpliterator_OfLong}\n   * @public\n   */\n  static $create__() {\n    EmptySpliterator_OfLong.$clinit();\n    let $instance \x3d new EmptySpliterator_OfLong();\n    $instance.$ctor__java_util_Spliterators_EmptySpliterator_OfLong__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OfLong()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_EmptySpliterator_OfLong__() {\n    this.$ctor__java_util_Spliterators_EmptySpliterator__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptySpliterator_OfLong;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptySpliterator_OfLong);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptySpliterator_OfLong.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    EmptySpliterator.$clinit();\n    OfLong.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptySpliterator_OfLong, $Util.$makeClassName('java.util.Spliterators$EmptySpliterator$OfLong'));\n\n\nOfLong.$markImplementor(EmptySpliterator_OfLong);\n\n\nexports \x3d EmptySpliterator_OfLong; \n//# sourceMappingURL\x3dSpliterators$EmptySpliterator$OfLong.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfLong.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfLong.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfLong');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar EmptySpliterator_OfLong \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfLong$impl');\nexports \x3d EmptySpliterator_OfLong;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfRef.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfRef.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfRef$impl');\n\n\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_EmptySpliterator_OfRef_T\n * @extends {EmptySpliterator\x3cC_EmptySpliterator_OfRef_T, Spliterator\x3cC_EmptySpliterator_OfRef_T\x3e, Consumer\x3c?\x3e\x3e}\n * @implements {Spliterator\x3cC_EmptySpliterator_OfRef_T\x3e}\n  */\nclass OfRef extends EmptySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OfRef()'.\n   * @template C_EmptySpliterator_OfRef_T\n   * @return {!OfRef\x3cC_EmptySpliterator_OfRef_T\x3e}\n   * @public\n   */\n  static $create__() {\n    OfRef.$clinit();\n    let $instance \x3d new OfRef();\n    $instance.$ctor__java_util_Spliterators_EmptySpliterator_OfRef__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OfRef()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_EmptySpliterator_OfRef__() {\n    this.$ctor__java_util_Spliterators_EmptySpliterator__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_Consumer(/**@type {Consumer\x3c*\x3e} */ ($Casts.$to(arg0, Consumer)));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {Consumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    super.m_forEachRemaining__java_lang_Object(arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {Consumer} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return super.m_tryAdvance__java_lang_Object(arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof OfRef;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, OfRef);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfRef.$clinit \x3d function() {};\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    EmptySpliterator.$clinit();\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(OfRef, $Util.$makeClassName('java.util.Spliterators$EmptySpliterator$OfRef'));\n\n\nSpliterator.$markImplementor(OfRef);\n\n\nexports \x3d OfRef; \n//# sourceMappingURL\x3dSpliterators$EmptySpliterator$OfRef.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator$OfRef.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator$OfRef.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator.OfRef');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfRef \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfRef$impl');\nexports \x3d OfRef;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$EmptySpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$EmptySpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.EmptySpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator_OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _Spliterator_OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _Spliterator_OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfDouble \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfDouble');\nconst _OfInt \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfInt');\nconst _OfLong \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfLong');\nconst _OfRef \x3d goog.require('java.util.Spliterators.EmptySpliterator.OfRef');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator$impl');\nexports \x3d EmptySpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IntArraySpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IntArraySpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.IntArraySpliterator$impl');\n\n\nconst OfInt \x3d goog.require('java.util.Spliterator.OfInt$impl');\nconst BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @extends {BaseArraySpliterator\x3cInteger, OfInt, IntConsumer\x3e}\n * @implements {OfInt}\n  */\nclass IntArraySpliterator extends BaseArraySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cnumber\x3e} */\n    this.f_array__java_util_Spliterators_IntArraySpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntArraySpliterator(int[], int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} characteristics\n   * @return {!IntArraySpliterator}\n   * @public\n   */\n  static $create__arrayOf_int__int(array, characteristics) {\n    IntArraySpliterator.$clinit();\n    let $instance \x3d new IntArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_IntArraySpliterator__arrayOf_int__int(array, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntArraySpliterator(int[], int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IntArraySpliterator__arrayOf_int__int(array, characteristics) {\n    this.$ctor__java_util_Spliterators_IntArraySpliterator__arrayOf_int__int__int__int(array, 0, array.length, characteristics);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntArraySpliterator(int[], int, int, int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {!IntArraySpliterator}\n   * @public\n   */\n  static $create__arrayOf_int__int__int__int(array, from, limit, characteristics) {\n    IntArraySpliterator.$clinit();\n    let $instance \x3d new IntArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_IntArraySpliterator__arrayOf_int__int__int__int(array, from, limit, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntArraySpliterator(int[], int, int, int)'.\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IntArraySpliterator__arrayOf_int__int__int__int(array, from, limit, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseArraySpliterator__int__int__int(from, limit, characteristics);\n    this.f_array__java_util_Spliterators_IntArraySpliterator_ \x3d array;\n  }\n  \n  /**\n   * @param {IntConsumer} consumer\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  m_consume__java_util_function_IntConsumer__int(consumer, index) {\n    consumer.m_accept__int(this.f_array__java_util_Spliterators_IntArraySpliterator_[index]);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {number} arg1\n   * @return {void}\n   * @public\n   */\n  m_consume__java_lang_Object__int(arg0, arg1) {\n    this.m_consume__java_util_function_IntConsumer__int(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)), arg1);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IntArraySpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IntArraySpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntArraySpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    BaseArraySpliterator.$clinit();\n    OfInt.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IntArraySpliterator, $Util.$makeClassName('java.util.Spliterators$IntArraySpliterator'));\n\n\nOfInt.$markImplementor(IntArraySpliterator);\n\n\nexports \x3d IntArraySpliterator; \n//# sourceMappingURL\x3dSpliterators$IntArraySpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IntArraySpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IntArraySpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.IntArraySpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar IntArraySpliterator \x3d goog.require('java.util.Spliterators.IntArraySpliterator$impl');\nexports \x3d IntArraySpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator$OfInt.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator$OfInt.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.PrimitiveIterator.OfInt$impl');\n\n\nconst PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @extends {PrimitiveIterator\x3cInteger, IntConsumer\x3e}\n */\nclass OfInt {\n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_nextInt__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Integer}\n   * @public\n   */\n  m_next__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_IntConsumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n  }\n  \n  /**\n   * @param {OfInt} $thisArg\n   * @return {Integer}\n   * @public\n   */\n  static m_next__$default__java_util_PrimitiveIterator_OfInt($thisArg) {\n    OfInt.$clinit();\n    return Integer.m_valueOf__int($thisArg.m_nextInt__());\n  }\n  \n  /**\n   * @param {OfInt} $thisArg\n   * @param {IntConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_PrimitiveIterator_OfInt__java_util_function_IntConsumer($thisArg, consumer) {\n    OfInt.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    while ($thisArg.m_hasNext__()) {\n      consumer.m_accept__int($thisArg.m_nextInt__());\n    }\n  }\n  \n  /**\n   * @param {OfInt} $thisArg\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEachRemaining__$default__java_util_PrimitiveIterator_OfInt__java_util_function_Consumer($thisArg, consumer) {\n    OfInt.$clinit();\n    if (IntConsumer.$isInstance(consumer)) {\n      $thisArg.m_forEachRemaining__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(consumer, IntConsumer)));\n    } else {\n      $thisArg.m_forEachRemaining__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(IntConsumer.$adapt(((/** number */ arg0) \x3d\x3e{\n        consumer.m_accept__java_lang_Object(Integer.m_valueOf__int(arg0));\n      })), IntConsumer)));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    PrimitiveIterator.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_PrimitiveIterator_OfInt \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_PrimitiveIterator_OfInt;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_PrimitiveIterator_OfInt;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OfInt.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OfInt, $Util.$makeClassName('java.util.PrimitiveIterator$OfInt'));\n\n\nOfInt.$markImplementor(/** @type {Function} */ (OfInt));\n\n\nexports \x3d OfInt; \n//# sourceMappingURL\x3dPrimitiveIterator$OfInt.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IntConsumerIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IntConsumerIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.IntConsumerIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst PrimitiveIterator_OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt$impl');\nconst IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @implements {IntConsumer}\n * @implements {PrimitiveIterator_OfInt}\n  */\nclass IntConsumerIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfInt} */\n    this.f_spliterator__java_util_Spliterators_IntConsumerIterator_;\n    /** @public {number} */\n    this.f_nextElement__java_util_Spliterators_IntConsumerIterator_ \x3d 0;\n    /** @public {boolean} */\n    this.f_hasElement__java_util_Spliterators_IntConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntConsumerIterator(OfInt)'.\n   * @param {OfInt} spliterator\n   * @return {!IntConsumerIterator}\n   * @public\n   */\n  static $create__java_util_Spliterator_OfInt(spliterator) {\n    IntConsumerIterator.$clinit();\n    let $instance \x3d new IntConsumerIterator();\n    $instance.$ctor__java_util_Spliterators_IntConsumerIterator__java_util_Spliterator_OfInt(spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntConsumerIterator(OfInt)'.\n   * @param {OfInt} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IntConsumerIterator__java_util_Spliterator_OfInt(spliterator) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_Spliterators_IntConsumerIterator();\n    this.f_spliterator__java_util_Spliterators_IntConsumerIterator_ \x3d /**@type {OfInt} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(spliterator), OfInt));\n  }\n  \n  /**\n   * @override\n   * @param {number} i\n   * @return {void}\n   * @public\n   */\n  m_accept__int(i) {\n    this.f_nextElement__java_util_Spliterators_IntConsumerIterator_ \x3d i;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    if (!this.f_hasElement__java_util_Spliterators_IntConsumerIterator_) {\n      this.f_hasElement__java_util_Spliterators_IntConsumerIterator_ \x3d this.f_spliterator__java_util_Spliterators_IntConsumerIterator_.m_tryAdvance__java_lang_Object(this);\n    }\n    return this.f_hasElement__java_util_Spliterators_IntConsumerIterator_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_nextInt__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.m_hasNext__());\n    this.f_hasElement__java_util_Spliterators_IntConsumerIterator_ \x3d false;\n    return this.f_nextElement__java_util_Spliterators_IntConsumerIterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_IntConsumer(arg0) {\n    PrimitiveIterator_OfInt.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfInt__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    PrimitiveIterator_OfInt.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Integer}\n   * @public\n   */\n  m_next__() {\n    return PrimitiveIterator_OfInt.m_next__$default__java_util_PrimitiveIterator_OfInt(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(arg0) {\n    return IntConsumer.m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    Iterator.m_remove__$default__java_util_Iterator(this);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_Spliterators_IntConsumerIterator() {\n    this.f_hasElement__java_util_Spliterators_IntConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IntConsumerIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IntConsumerIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntConsumerIterator.$clinit \x3d function() {};\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    IntConsumer.$clinit();\n    PrimitiveIterator_OfInt.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IntConsumerIterator, $Util.$makeClassName('java.util.Spliterators$IntConsumerIterator'));\n\n\nIntConsumer.$markImplementor(IntConsumerIterator);\nPrimitiveIterator_OfInt.$markImplementor(IntConsumerIterator);\n\n\nexports \x3d IntConsumerIterator; \n//# sourceMappingURL\x3dSpliterators$IntConsumerIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IntConsumerIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IntConsumerIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.IntConsumerIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _PrimitiveIterator_OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar IntConsumerIterator \x3d goog.require('java.util.Spliterators.IntConsumerIterator$impl');\nexports \x3d IntConsumerIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractIntSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractIntSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.AbstractIntSpliterator$impl');\n\n\nconst OfInt \x3d goog.require('java.util.Spliterator.OfInt$impl');\nconst BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @abstract\n * @extends {BaseSpliterator\x3cInteger, OfInt\x3e}\n * @implements {OfInt}\n  */\nclass AbstractIntSpliterator extends BaseSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractIntSpliterator(long, int)'.\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(size, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseSpliterator__long__int(size, characteristics);\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractIntSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractIntSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractIntSpliterator.$clinit \x3d function() {};\n    BaseSpliterator.$clinit();\n    OfInt.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractIntSpliterator, $Util.$makeClassName('java.util.Spliterators$AbstractIntSpliterator'));\n\n\nOfInt.$markImplementor(AbstractIntSpliterator);\n\n\nexports \x3d AbstractIntSpliterator; \n//# sourceMappingURL\x3dSpliterators$AbstractIntSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractIntSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractIntSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.AbstractIntSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nexports \x3d AbstractIntSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IntIteratorSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IntIteratorSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.IntIteratorSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfInt$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterator_OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass IntIteratorSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfInt} */\n    this.f_it__java_util_Spliterators_IntIteratorSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntIteratorSpliterator(OfInt, long, int)'.\n   * @param {OfInt} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {!IntIteratorSpliterator}\n   * @public\n   */\n  static $create__java_util_PrimitiveIterator_OfInt__long__int(it, size, characteristics) {\n    IntIteratorSpliterator.$clinit();\n    let $instance \x3d new IntIteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_IntIteratorSpliterator__java_util_PrimitiveIterator_OfInt__long__int(it, size, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntIteratorSpliterator(OfInt, long, int)'.\n   * @param {OfInt} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IntIteratorSpliterator__java_util_PrimitiveIterator_OfInt__long__int(it, size, characteristics) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(size, Spliterators.m_sizeKnownIteratorSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics));\n    this.f_it__java_util_Spliterators_IntIteratorSpliterator_ \x3d /**@type {OfInt} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), OfInt));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntIteratorSpliterator(OfInt, int)'.\n   * @param {OfInt} it\n   * @param {number} characteristics\n   * @return {!IntIteratorSpliterator}\n   * @public\n   */\n  static $create__java_util_PrimitiveIterator_OfInt__int(it, characteristics) {\n    IntIteratorSpliterator.$clinit();\n    let $instance \x3d new IntIteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_IntIteratorSpliterator__java_util_PrimitiveIterator_OfInt__int(it, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntIteratorSpliterator(OfInt, int)'.\n   * @param {OfInt} it\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IntIteratorSpliterator__java_util_PrimitiveIterator_OfInt__int(it, characteristics) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(Long.f_MAX_VALUE__java_lang_Long, Spliterators.m_sizeUnknownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics));\n    this.f_it__java_util_Spliterators_IntIteratorSpliterator_ \x3d /**@type {OfInt} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), OfInt));\n  }\n  \n  /**\n   * @param {IntConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_IntConsumer(consumer) {\n    this.f_it__java_util_Spliterators_IntIteratorSpliterator_.m_forEachRemaining__java_util_function_IntConsumer(consumer);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    Spliterators.m_checkSorted__int_$p_java_util_Spliterators(this.m_characteristics__());\n    return null;\n  }\n  \n  /**\n   * @param {IntConsumer} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    if (this.f_it__java_util_Spliterators_IntIteratorSpliterator_.m_hasNext__()) {\n      consumer.m_accept__int(this.f_it__java_util_Spliterators_IntIteratorSpliterator_.m_nextInt__());\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator_OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return Spliterator_OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IntIteratorSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IntIteratorSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntIteratorSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    OfInt \x3d goog.module.get('java.util.PrimitiveIterator.OfInt$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterator_OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IntIteratorSpliterator, $Util.$makeClassName('java.util.Spliterators$IntIteratorSpliterator'));\n\n\n\n\nexports \x3d IntIteratorSpliterator; \n//# sourceMappingURL\x3dSpliterators$IntIteratorSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IntIteratorSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IntIteratorSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.IntIteratorSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterator_OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar IntIteratorSpliterator \x3d goog.require('java.util.Spliterators.IntIteratorSpliterator$impl');\nexports \x3d IntIteratorSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IteratorSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IteratorSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.IteratorSpliterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @template C_IteratorSpliterator_T\n * @implements {Spliterator\x3cC_IteratorSpliterator_T\x3e}\n  */\nclass IteratorSpliterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Collection\x3c?\x3e} */\n    this.f_collection__java_util_Spliterators_IteratorSpliterator_;\n    /** @public {Iterator\x3c?\x3e} */\n    this.f_it__java_util_Spliterators_IteratorSpliterator_;\n    /** @public {number} */\n    this.f_characteristics__java_util_Spliterators_IteratorSpliterator_ \x3d 0;\n    /** @public {!$Long} */\n    this.f_estimateSize__java_util_Spliterators_IteratorSpliterator_ \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IteratorSpliterator(Collection, int)'.\n   * @template C_IteratorSpliterator_T\n   * @param {Collection\x3c?\x3e} collection\n   * @param {number} characteristics\n   * @return {!IteratorSpliterator\x3cC_IteratorSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_Collection__int(collection, characteristics) {\n    IteratorSpliterator.$clinit();\n    let $instance \x3d new IteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_IteratorSpliterator__java_util_Collection__int(collection, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IteratorSpliterator(Collection, int)'.\n   * @param {Collection\x3c?\x3e} collection\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IteratorSpliterator__java_util_Collection__int(collection, characteristics) {\n    this.$ctor__java_lang_Object__();\n    this.f_collection__java_util_Spliterators_IteratorSpliterator_ \x3d /**@type {Collection\x3c*\x3e} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(collection), Collection));\n    this.f_characteristics__java_util_Spliterators_IteratorSpliterator_ \x3d Spliterators.m_sizeKnownIteratorSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IteratorSpliterator(Iterator, long, int)'.\n   * @template C_IteratorSpliterator_T\n   * @param {Iterator\x3c?\x3e} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {!IteratorSpliterator\x3cC_IteratorSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_Iterator__long__int(it, size, characteristics) {\n    IteratorSpliterator.$clinit();\n    let $instance \x3d new IteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_IteratorSpliterator__java_util_Iterator__long__int(it, size, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IteratorSpliterator(Iterator, long, int)'.\n   * @param {Iterator\x3c?\x3e} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IteratorSpliterator__java_util_Iterator__long__int(it, size, characteristics) {\n    this.$ctor__java_lang_Object__();\n    this.f_it__java_util_Spliterators_IteratorSpliterator_ \x3d /**@type {Iterator\x3c*\x3e} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), Iterator));\n    this.f_characteristics__java_util_Spliterators_IteratorSpliterator_ \x3d Spliterators.m_sizeKnownIteratorSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics);\n    this.f_estimateSize__java_util_Spliterators_IteratorSpliterator_ \x3d size;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IteratorSpliterator(Iterator, int)'.\n   * @template C_IteratorSpliterator_T\n   * @param {Iterator\x3c?\x3e} it\n   * @param {number} characteristics\n   * @return {!IteratorSpliterator\x3cC_IteratorSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_Iterator__int(it, characteristics) {\n    IteratorSpliterator.$clinit();\n    let $instance \x3d new IteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_IteratorSpliterator__java_util_Iterator__int(it, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IteratorSpliterator(Iterator, int)'.\n   * @param {Iterator\x3c?\x3e} it\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_IteratorSpliterator__java_util_Iterator__int(it, characteristics) {\n    this.$ctor__java_lang_Object__();\n    this.f_it__java_util_Spliterators_IteratorSpliterator_ \x3d /**@type {Iterator\x3c*\x3e} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), Iterator));\n    this.f_characteristics__java_util_Spliterators_IteratorSpliterator_ \x3d Spliterators.m_sizeUnknownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics);\n    this.f_estimateSize__java_util_Spliterators_IteratorSpliterator_ \x3d Long.f_MAX_VALUE__java_lang_Long;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_characteristics__() {\n    return this.f_characteristics__java_util_Spliterators_IteratorSpliterator_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_estimateSize__() {\n    this.m_initIterator___$p_java_util_Spliterators_IteratorSpliterator();\n    return this.f_estimateSize__java_util_Spliterators_IteratorSpliterator_;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(consumer) {\n    this.m_initIterator___$p_java_util_Spliterators_IteratorSpliterator();\n    this.f_it__java_util_Spliterators_IteratorSpliterator_.m_forEachRemaining__java_util_function_Consumer(consumer);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    Spliterators.m_checkSorted__int_$p_java_util_Spliterators(this.f_characteristics__java_util_Spliterators_IteratorSpliterator_);\n    return null;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    this.m_initIterator___$p_java_util_Spliterators_IteratorSpliterator();\n    if (this.f_it__java_util_Spliterators_IteratorSpliterator_.m_hasNext__()) {\n      consumer.m_accept__java_lang_Object(this.f_it__java_util_Spliterators_IteratorSpliterator_.m_next__());\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Spliterator\x3cC_IteratorSpliterator_T\x3e}\n   * @public\n   */\n  m_trySplit__() {\n    return null;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_initIterator___$p_java_util_Spliterators_IteratorSpliterator() {\n    if ($Equality.$same(this.f_it__java_util_Spliterators_IteratorSpliterator_, null)) {\n      this.f_it__java_util_Spliterators_IteratorSpliterator_ \x3d this.f_collection__java_util_Spliterators_IteratorSpliterator_.m_iterator__();\n      this.f_estimateSize__java_util_Spliterators_IteratorSpliterator_ \x3d $Primitives.$widenIntToLong(this.f_collection__java_util_Spliterators_IteratorSpliterator_.size());\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IteratorSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IteratorSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IteratorSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IteratorSpliterator, $Util.$makeClassName('java.util.Spliterators$IteratorSpliterator'));\n\n\nSpliterator.$markImplementor(IteratorSpliterator);\n\n\nexports \x3d IteratorSpliterator; \n//# sourceMappingURL\x3dSpliterators$IteratorSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$IteratorSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$IteratorSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.IteratorSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar IteratorSpliterator \x3d goog.require('java.util.Spliterators.IteratorSpliterator$impl');\nexports \x3d IteratorSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$LongArraySpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$LongArraySpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.LongArraySpliterator$impl');\n\n\nconst OfLong \x3d goog.require('java.util.Spliterator.OfLong$impl');\nconst BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @extends {BaseArraySpliterator\x3cLong, OfLong, LongConsumer\x3e}\n * @implements {OfLong}\n  */\nclass LongArraySpliterator extends BaseArraySpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3c!$Long\x3e} */\n    this.f_array__java_util_Spliterators_LongArraySpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongArraySpliterator(long[], int)'.\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} characteristics\n   * @return {!LongArraySpliterator}\n   * @public\n   */\n  static $create__arrayOf_long__int(array, characteristics) {\n    LongArraySpliterator.$clinit();\n    let $instance \x3d new LongArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_LongArraySpliterator__arrayOf_long__int(array, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongArraySpliterator(long[], int)'.\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_LongArraySpliterator__arrayOf_long__int(array, characteristics) {\n    this.$ctor__java_util_Spliterators_LongArraySpliterator__arrayOf_long__int__int__int(array, 0, array.length, characteristics);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongArraySpliterator(long[], int, int, int)'.\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {!LongArraySpliterator}\n   * @public\n   */\n  static $create__arrayOf_long__int__int__int(array, from, limit, characteristics) {\n    LongArraySpliterator.$clinit();\n    let $instance \x3d new LongArraySpliterator();\n    $instance.$ctor__java_util_Spliterators_LongArraySpliterator__arrayOf_long__int__int__int(array, from, limit, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongArraySpliterator(long[], int, int, int)'.\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} from\n   * @param {number} limit\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_LongArraySpliterator__arrayOf_long__int__int__int(array, from, limit, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseArraySpliterator__int__int__int(from, limit, characteristics);\n    this.f_array__java_util_Spliterators_LongArraySpliterator_ \x3d array;\n  }\n  \n  /**\n   * @param {LongConsumer} consumer\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  m_consume__java_util_function_LongConsumer__int(consumer, index) {\n    consumer.m_accept__long(this.f_array__java_util_Spliterators_LongArraySpliterator_[index]);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {number} arg1\n   * @return {void}\n   * @public\n   */\n  m_consume__java_lang_Object__int(arg0, arg1) {\n    this.m_consume__java_util_function_LongConsumer__int(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)), arg1);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongArraySpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongArraySpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongArraySpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    BaseArraySpliterator.$clinit();\n    OfLong.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongArraySpliterator, $Util.$makeClassName('java.util.Spliterators$LongArraySpliterator'));\n\n\nOfLong.$markImplementor(LongArraySpliterator);\n\n\nexports \x3d LongArraySpliterator; \n//# sourceMappingURL\x3dSpliterators$LongArraySpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$LongArraySpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$LongArraySpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.LongArraySpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _BaseArraySpliterator \x3d goog.require('java.util.Spliterators.BaseArraySpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar LongArraySpliterator \x3d goog.require('java.util.Spliterators.LongArraySpliterator$impl');\nexports \x3d LongArraySpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$LongConsumerIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$LongConsumerIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.LongConsumerIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst PrimitiveIterator_OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong$impl');\nconst LongConsumer \x3d goog.require('java.util.function.LongConsumer$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @implements {LongConsumer}\n * @implements {PrimitiveIterator_OfLong}\n  */\nclass LongConsumerIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfLong} */\n    this.f_spliterator__java_util_Spliterators_LongConsumerIterator_;\n    /** @public {!$Long} */\n    this.f_nextElement__java_util_Spliterators_LongConsumerIterator_ \x3d $Long.fromInt(0);\n    /** @public {boolean} */\n    this.f_hasElement__java_util_Spliterators_LongConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongConsumerIterator(OfLong)'.\n   * @param {OfLong} spliterator\n   * @return {!LongConsumerIterator}\n   * @public\n   */\n  static $create__java_util_Spliterator_OfLong(spliterator) {\n    LongConsumerIterator.$clinit();\n    let $instance \x3d new LongConsumerIterator();\n    $instance.$ctor__java_util_Spliterators_LongConsumerIterator__java_util_Spliterator_OfLong(spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongConsumerIterator(OfLong)'.\n   * @param {OfLong} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_LongConsumerIterator__java_util_Spliterator_OfLong(spliterator) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_Spliterators_LongConsumerIterator();\n    this.f_spliterator__java_util_Spliterators_LongConsumerIterator_ \x3d /**@type {OfLong} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(spliterator), OfLong));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} l\n   * @return {void}\n   * @public\n   */\n  m_accept__long(l) {\n    this.f_nextElement__java_util_Spliterators_LongConsumerIterator_ \x3d l;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    if (!this.f_hasElement__java_util_Spliterators_LongConsumerIterator_) {\n      this.f_hasElement__java_util_Spliterators_LongConsumerIterator_ \x3d this.f_spliterator__java_util_Spliterators_LongConsumerIterator_.m_tryAdvance__java_lang_Object(this);\n    }\n    return this.f_hasElement__java_util_Spliterators_LongConsumerIterator_;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_nextLong__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.m_hasNext__());\n    this.f_hasElement__java_util_Spliterators_LongConsumerIterator_ \x3d false;\n    return this.f_nextElement__java_util_Spliterators_LongConsumerIterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_LongConsumer(arg0) {\n    PrimitiveIterator_OfLong.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfLong__java_util_function_LongConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    PrimitiveIterator_OfLong.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Long}\n   * @public\n   */\n  m_next__() {\n    return PrimitiveIterator_OfLong.m_next__$default__java_util_PrimitiveIterator_OfLong(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {LongConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_LongConsumer(arg0) {\n    return LongConsumer.m_andThen__$default__java_util_function_LongConsumer__java_util_function_LongConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    Iterator.m_remove__$default__java_util_Iterator(this);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_Spliterators_LongConsumerIterator() {\n    this.f_hasElement__java_util_Spliterators_LongConsumerIterator_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongConsumerIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongConsumerIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongConsumerIterator.$clinit \x3d function() {};\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    LongConsumer.$clinit();\n    PrimitiveIterator_OfLong.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongConsumerIterator, $Util.$makeClassName('java.util.Spliterators$LongConsumerIterator'));\n\n\nLongConsumer.$markImplementor(LongConsumerIterator);\nPrimitiveIterator_OfLong.$markImplementor(LongConsumerIterator);\n\n\nexports \x3d LongConsumerIterator; \n//# sourceMappingURL\x3dSpliterators$LongConsumerIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$LongConsumerIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$LongConsumerIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.LongConsumerIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _PrimitiveIterator_OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar LongConsumerIterator \x3d goog.require('java.util.Spliterators.LongConsumerIterator$impl');\nexports \x3d LongConsumerIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractLongSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractLongSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.AbstractLongSpliterator$impl');\n\n\nconst OfLong \x3d goog.require('java.util.Spliterator.OfLong$impl');\nconst BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @abstract\n * @extends {BaseSpliterator\x3cLong, OfLong\x3e}\n * @implements {OfLong}\n  */\nclass AbstractLongSpliterator extends BaseSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractLongSpliterator(long, int)'.\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(size, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseSpliterator__long__int(size, characteristics);\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractLongSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractLongSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractLongSpliterator.$clinit \x3d function() {};\n    BaseSpliterator.$clinit();\n    OfLong.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractLongSpliterator, $Util.$makeClassName('java.util.Spliterators$AbstractLongSpliterator'));\n\n\nOfLong.$markImplementor(AbstractLongSpliterator);\n\n\nexports \x3d AbstractLongSpliterator; \n//# sourceMappingURL\x3dSpliterators$AbstractLongSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractLongSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractLongSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.AbstractLongSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nexports \x3d AbstractLongSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$LongIteratorSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$LongIteratorSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.LongIteratorSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfLong$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterator_OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass LongIteratorSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfLong} */\n    this.f_it__java_util_Spliterators_LongIteratorSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongIteratorSpliterator(OfLong, long, int)'.\n   * @param {OfLong} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {!LongIteratorSpliterator}\n   * @public\n   */\n  static $create__java_util_PrimitiveIterator_OfLong__long__int(it, size, characteristics) {\n    LongIteratorSpliterator.$clinit();\n    let $instance \x3d new LongIteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_LongIteratorSpliterator__java_util_PrimitiveIterator_OfLong__long__int(it, size, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongIteratorSpliterator(OfLong, long, int)'.\n   * @param {OfLong} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_LongIteratorSpliterator__java_util_PrimitiveIterator_OfLong__long__int(it, size, characteristics) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(size, Spliterators.m_sizeKnownIteratorSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics));\n    this.f_it__java_util_Spliterators_LongIteratorSpliterator_ \x3d /**@type {OfLong} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), OfLong));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongIteratorSpliterator(OfLong, int)'.\n   * @param {OfLong} it\n   * @param {number} characteristics\n   * @return {!LongIteratorSpliterator}\n   * @public\n   */\n  static $create__java_util_PrimitiveIterator_OfLong__int(it, characteristics) {\n    LongIteratorSpliterator.$clinit();\n    let $instance \x3d new LongIteratorSpliterator();\n    $instance.$ctor__java_util_Spliterators_LongIteratorSpliterator__java_util_PrimitiveIterator_OfLong__int(it, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongIteratorSpliterator(OfLong, int)'.\n   * @param {OfLong} it\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_LongIteratorSpliterator__java_util_PrimitiveIterator_OfLong__int(it, characteristics) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(Long.f_MAX_VALUE__java_lang_Long, Spliterators.m_sizeUnknownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics));\n    this.f_it__java_util_Spliterators_LongIteratorSpliterator_ \x3d /**@type {OfLong} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(it), OfLong));\n  }\n  \n  /**\n   * @param {LongConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_LongConsumer(consumer) {\n    this.f_it__java_util_Spliterators_LongIteratorSpliterator_.m_forEachRemaining__java_util_function_LongConsumer(consumer);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    Spliterators.m_checkSorted__int_$p_java_util_Spliterators(this.m_characteristics__());\n    return null;\n  }\n  \n  /**\n   * @param {LongConsumer} consumer\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    if (this.f_it__java_util_Spliterators_LongIteratorSpliterator_.m_hasNext__()) {\n      consumer.m_accept__long(this.f_it__java_util_Spliterators_LongIteratorSpliterator_.m_nextLong__());\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator_OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return Spliterator_OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongIteratorSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongIteratorSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongIteratorSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    OfLong \x3d goog.module.get('java.util.PrimitiveIterator.OfLong$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterator_OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongIteratorSpliterator, $Util.$makeClassName('java.util.Spliterators$LongIteratorSpliterator'));\n\n\n\n\nexports \x3d LongIteratorSpliterator; \n//# sourceMappingURL\x3dSpliterators$LongIteratorSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$LongIteratorSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$LongIteratorSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.LongIteratorSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterator_OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar LongIteratorSpliterator \x3d goog.require('java.util.Spliterators.LongIteratorSpliterator$impl');\nexports \x3d LongIteratorSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ArrayIndexOutOfBoundsException \x3d goog.forwardDeclare('java.lang.ArrayIndexOutOfBoundsException$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet PrimitiveIterator_OfDouble \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfDouble$impl');\nlet PrimitiveIterator_OfInt \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfInt$impl');\nlet PrimitiveIterator_OfLong \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfLong$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet ArraySpliterator \x3d goog.forwardDeclare('java.util.Spliterators.ArraySpliterator$impl');\nlet ConsumerIterator \x3d goog.forwardDeclare('java.util.Spliterators.ConsumerIterator$impl');\nlet DoubleArraySpliterator \x3d goog.forwardDeclare('java.util.Spliterators.DoubleArraySpliterator$impl');\nlet DoubleConsumerIterator \x3d goog.forwardDeclare('java.util.Spliterators.DoubleConsumerIterator$impl');\nlet DoubleIteratorSpliterator \x3d goog.forwardDeclare('java.util.Spliterators.DoubleIteratorSpliterator$impl');\nlet EmptySpliterator \x3d goog.forwardDeclare('java.util.Spliterators.EmptySpliterator$impl');\nlet IntArraySpliterator \x3d goog.forwardDeclare('java.util.Spliterators.IntArraySpliterator$impl');\nlet IntConsumerIterator \x3d goog.forwardDeclare('java.util.Spliterators.IntConsumerIterator$impl');\nlet IntIteratorSpliterator \x3d goog.forwardDeclare('java.util.Spliterators.IntIteratorSpliterator$impl');\nlet IteratorSpliterator \x3d goog.forwardDeclare('java.util.Spliterators.IteratorSpliterator$impl');\nlet LongArraySpliterator \x3d goog.forwardDeclare('java.util.Spliterators.LongArraySpliterator$impl');\nlet LongConsumerIterator \x3d goog.forwardDeclare('java.util.Spliterators.LongConsumerIterator$impl');\nlet LongIteratorSpliterator \x3d goog.forwardDeclare('java.util.Spliterators.LongIteratorSpliterator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass Spliterators extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @template M_T\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_emptySpliterator__() {\n    Spliterators.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ ($Casts.$to(EmptySpliterator.f_OF_REF__java_util_Spliterators_EmptySpliterator, Spliterator));\n  }\n  \n  /**\n   * @return {OfDouble}\n   * @public\n   */\n  static m_emptyDoubleSpliterator__() {\n    Spliterators.$clinit();\n    return EmptySpliterator.f_OF_DOUBLE__java_util_Spliterators_EmptySpliterator;\n  }\n  \n  /**\n   * @return {OfInt}\n   * @public\n   */\n  static m_emptyIntSpliterator__() {\n    Spliterators.$clinit();\n    return EmptySpliterator.f_OF_INT__java_util_Spliterators_EmptySpliterator;\n  }\n  \n  /**\n   * @return {OfLong}\n   * @public\n   */\n  static m_emptyLongSpliterator__() {\n    Spliterators.$clinit();\n    return EmptySpliterator.f_OF_LONG__java_util_Spliterators_EmptySpliterator;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3c*\x3e} array\n   * @param {number} characteristics\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliterator__arrayOf_java_lang_Object__int(array, characteristics) {\n    Spliterators.$clinit();\n    return /**@type {!ArraySpliterator\x3c*\x3e} */ (ArraySpliterator.$create__arrayOf_java_lang_Object__int(array, characteristics));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3c*\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} characteristics\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliterator__arrayOf_java_lang_Object__int__int__int(array, fromIndex, toIndex, characteristics) {\n    Spliterators.$clinit();\n    Spliterators.m_checkCriticalArrayBounds__int__int__int_$p_java_util_Spliterators(fromIndex, toIndex, array.length);\n    return /**@type {!ArraySpliterator\x3c*\x3e} */ (ArraySpliterator.$create__arrayOf_java_lang_Object__int__int__int(array, fromIndex, toIndex, characteristics));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} characteristics\n   * @return {OfInt}\n   * @public\n   */\n  static m_spliterator__arrayOf_int__int(array, characteristics) {\n    Spliterators.$clinit();\n    return IntArraySpliterator.$create__arrayOf_int__int(array, characteristics);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} characteristics\n   * @return {OfInt}\n   * @public\n   */\n  static m_spliterator__arrayOf_int__int__int__int(array, fromIndex, toIndex, characteristics) {\n    Spliterators.$clinit();\n    Spliterators.m_checkCriticalArrayBounds__int__int__int_$p_java_util_Spliterators(fromIndex, toIndex, array.length);\n    return IntArraySpliterator.$create__arrayOf_int__int__int__int(array, fromIndex, toIndex, characteristics);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} characteristics\n   * @return {OfLong}\n   * @public\n   */\n  static m_spliterator__arrayOf_long__int(array, characteristics) {\n    Spliterators.$clinit();\n    return LongArraySpliterator.$create__arrayOf_long__int(array, characteristics);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} characteristics\n   * @return {OfLong}\n   * @public\n   */\n  static m_spliterator__arrayOf_long__int__int__int(array, fromIndex, toIndex, characteristics) {\n    Spliterators.$clinit();\n    Spliterators.m_checkCriticalArrayBounds__int__int__int_$p_java_util_Spliterators(fromIndex, toIndex, array.length);\n    return LongArraySpliterator.$create__arrayOf_long__int__int__int(array, fromIndex, toIndex, characteristics);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} characteristics\n   * @return {OfDouble}\n   * @public\n   */\n  static m_spliterator__arrayOf_double__int(array, characteristics) {\n    Spliterators.$clinit();\n    return DoubleArraySpliterator.$create__arrayOf_double__int(array, characteristics);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} characteristics\n   * @return {OfDouble}\n   * @public\n   */\n  static m_spliterator__arrayOf_double__int__int__int(array, fromIndex, toIndex, characteristics) {\n    Spliterators.$clinit();\n    Spliterators.m_checkCriticalArrayBounds__int__int__int_$p_java_util_Spliterators(fromIndex, toIndex, array.length);\n    return DoubleArraySpliterator.$create__arrayOf_double__int__int__int(array, fromIndex, toIndex, characteristics);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} c\n   * @param {number} characteristics\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliterator__java_util_Collection__int(c, characteristics) {\n    Spliterators.$clinit();\n    return /**@type {!IteratorSpliterator\x3c*\x3e} */ (IteratorSpliterator.$create__java_util_Collection__int(c, characteristics));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Iterator\x3c?\x3e} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliterator__java_util_Iterator__long__int(it, size, characteristics) {\n    Spliterators.$clinit();\n    return /**@type {!IteratorSpliterator\x3c*\x3e} */ (IteratorSpliterator.$create__java_util_Iterator__long__int(it, size, characteristics));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Iterator\x3c?\x3e} it\n   * @param {number} characteristics\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliteratorUnknownSize__java_util_Iterator__int(it, characteristics) {\n    Spliterators.$clinit();\n    return /**@type {!IteratorSpliterator\x3c*\x3e} */ (IteratorSpliterator.$create__java_util_Iterator__int(it, characteristics));\n  }\n  \n  /**\n   * @param {PrimitiveIterator_OfInt} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {OfInt}\n   * @public\n   */\n  static m_spliterator__java_util_PrimitiveIterator_OfInt__long__int(it, size, characteristics) {\n    Spliterators.$clinit();\n    return IntIteratorSpliterator.$create__java_util_PrimitiveIterator_OfInt__long__int(it, size, characteristics);\n  }\n  \n  /**\n   * @param {PrimitiveIterator_OfInt} it\n   * @param {number} characteristics\n   * @return {OfInt}\n   * @public\n   */\n  static m_spliteratorUnknownSize__java_util_PrimitiveIterator_OfInt__int(it, characteristics) {\n    Spliterators.$clinit();\n    return IntIteratorSpliterator.$create__java_util_PrimitiveIterator_OfInt__int(it, characteristics);\n  }\n  \n  /**\n   * @param {PrimitiveIterator_OfLong} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {OfLong}\n   * @public\n   */\n  static m_spliterator__java_util_PrimitiveIterator_OfLong__long__int(it, size, characteristics) {\n    Spliterators.$clinit();\n    return LongIteratorSpliterator.$create__java_util_PrimitiveIterator_OfLong__long__int(it, size, characteristics);\n  }\n  \n  /**\n   * @param {PrimitiveIterator_OfLong} it\n   * @param {number} characteristics\n   * @return {OfLong}\n   * @public\n   */\n  static m_spliteratorUnknownSize__java_util_PrimitiveIterator_OfLong__int(it, characteristics) {\n    Spliterators.$clinit();\n    return LongIteratorSpliterator.$create__java_util_PrimitiveIterator_OfLong__int(it, characteristics);\n  }\n  \n  /**\n   * @param {PrimitiveIterator_OfDouble} it\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {OfDouble}\n   * @public\n   */\n  static m_spliterator__java_util_PrimitiveIterator_OfDouble__long__int(it, size, characteristics) {\n    Spliterators.$clinit();\n    return DoubleIteratorSpliterator.$create__java_util_PrimitiveIterator_OfDouble__long__int(it, size, characteristics);\n  }\n  \n  /**\n   * @param {PrimitiveIterator_OfDouble} it\n   * @param {number} characteristics\n   * @return {OfDouble}\n   * @public\n   */\n  static m_spliteratorUnknownSize__java_util_PrimitiveIterator_OfDouble__int(it, characteristics) {\n    Spliterators.$clinit();\n    return DoubleIteratorSpliterator.$create__java_util_PrimitiveIterator_OfDouble__int(it, characteristics);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Spliterator\x3c?\x3e} spliterator\n   * @return {Iterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_iterator__java_util_Spliterator(spliterator) {\n    Spliterators.$clinit();\n    return /**@type {!ConsumerIterator\x3c*\x3e} */ (ConsumerIterator.$create__java_util_Spliterator(spliterator));\n  }\n  \n  /**\n   * @param {OfDouble} spliterator\n   * @return {PrimitiveIterator_OfDouble}\n   * @public\n   */\n  static m_iterator__java_util_Spliterator_OfDouble(spliterator) {\n    Spliterators.$clinit();\n    return DoubleConsumerIterator.$create__java_util_Spliterator_OfDouble(spliterator);\n  }\n  \n  /**\n   * @param {OfInt} spliterator\n   * @return {PrimitiveIterator_OfInt}\n   * @public\n   */\n  static m_iterator__java_util_Spliterator_OfInt(spliterator) {\n    Spliterators.$clinit();\n    return IntConsumerIterator.$create__java_util_Spliterator_OfInt(spliterator);\n  }\n  \n  /**\n   * @param {OfLong} spliterator\n   * @return {PrimitiveIterator_OfLong}\n   * @public\n   */\n  static m_iterator__java_util_Spliterator_OfLong(spliterator) {\n    Spliterators.$clinit();\n    return LongConsumerIterator.$create__java_util_Spliterator_OfLong(spliterator);\n  }\n  \n  /**\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  static m_checkSorted__int_$p_java_util_Spliterators(characteristics) {\n    Spliterators.$clinit();\n    $InternalPreconditions.m_checkCriticalState__boolean((characteristics \x26 Spliterator.f_SORTED__java_util_Spliterator) !\x3d 0);\n  }\n  \n  /**\n   * @param {number} characteristics\n   * @return {number}\n   * @public\n   */\n  static m_sizeKnownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics) {\n    Spliterators.$clinit();\n    return characteristics | Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator;\n  }\n  \n  /**\n   * @param {number} characteristics\n   * @return {number}\n   * @public\n   */\n  static m_sizeKnownIteratorSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics) {\n    Spliterators.$clinit();\n    return (characteristics \x26 Spliterator.f_CONCURRENT__java_util_Spliterator) \x3d\x3d 0 ? Spliterators.m_sizeKnownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics) : characteristics;\n  }\n  \n  /**\n   * @param {number} characteristics\n   * @return {number}\n   * @public\n   */\n  static m_sizeUnknownSpliteratorCharacteristics__int_$p_java_util_Spliterators(characteristics) {\n    Spliterators.$clinit();\n    return characteristics \x26 ~(Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator);\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArrayBounds__int__int__int_$p_java_util_Spliterators(start, end, length) {\n    Spliterators.$clinit();\n    if (start \x3e end || start \x3c 0 || end \x3e length) {\n      throw $Exceptions.toJs(ArrayIndexOutOfBoundsException.$create__java_lang_String(\"fromIndex: \" + start + \", toIndex: \" + end + \", length: \" + length));\n    }\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Spliterators()'.\n   * @return {!Spliterators}\n   * @public\n   */\n  static $create__() {\n    Spliterators.$clinit();\n    let $instance \x3d new Spliterators();\n    $instance.$ctor__java_util_Spliterators__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Spliterators()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Spliterators;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Spliterators);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Spliterators.$clinit \x3d function() {};\n    ArrayIndexOutOfBoundsException \x3d goog.module.get('java.lang.ArrayIndexOutOfBoundsException$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    ArraySpliterator \x3d goog.module.get('java.util.Spliterators.ArraySpliterator$impl');\n    ConsumerIterator \x3d goog.module.get('java.util.Spliterators.ConsumerIterator$impl');\n    DoubleArraySpliterator \x3d goog.module.get('java.util.Spliterators.DoubleArraySpliterator$impl');\n    DoubleConsumerIterator \x3d goog.module.get('java.util.Spliterators.DoubleConsumerIterator$impl');\n    DoubleIteratorSpliterator \x3d goog.module.get('java.util.Spliterators.DoubleIteratorSpliterator$impl');\n    EmptySpliterator \x3d goog.module.get('java.util.Spliterators.EmptySpliterator$impl');\n    IntArraySpliterator \x3d goog.module.get('java.util.Spliterators.IntArraySpliterator$impl');\n    IntConsumerIterator \x3d goog.module.get('java.util.Spliterators.IntConsumerIterator$impl');\n    IntIteratorSpliterator \x3d goog.module.get('java.util.Spliterators.IntIteratorSpliterator$impl');\n    IteratorSpliterator \x3d goog.module.get('java.util.Spliterators.IteratorSpliterator$impl');\n    LongArraySpliterator \x3d goog.module.get('java.util.Spliterators.LongArraySpliterator$impl');\n    LongConsumerIterator \x3d goog.module.get('java.util.Spliterators.LongConsumerIterator$impl');\n    LongIteratorSpliterator \x3d goog.module.get('java.util.Spliterators.LongIteratorSpliterator$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Spliterators, $Util.$makeClassName('java.util.Spliterators'));\n\n\n\n\nexports \x3d Spliterators; \n//# sourceMappingURL\x3dSpliterators.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ArrayIndexOutOfBoundsException \x3d goog.require('java.lang.ArrayIndexOutOfBoundsException');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _PrimitiveIterator_OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble');\nconst _PrimitiveIterator_OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _PrimitiveIterator_OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _ArraySpliterator \x3d goog.require('java.util.Spliterators.ArraySpliterator');\nconst _ConsumerIterator \x3d goog.require('java.util.Spliterators.ConsumerIterator');\nconst _DoubleArraySpliterator \x3d goog.require('java.util.Spliterators.DoubleArraySpliterator');\nconst _DoubleConsumerIterator \x3d goog.require('java.util.Spliterators.DoubleConsumerIterator');\nconst _DoubleIteratorSpliterator \x3d goog.require('java.util.Spliterators.DoubleIteratorSpliterator');\nconst _EmptySpliterator \x3d goog.require('java.util.Spliterators.EmptySpliterator');\nconst _IntArraySpliterator \x3d goog.require('java.util.Spliterators.IntArraySpliterator');\nconst _IntConsumerIterator \x3d goog.require('java.util.Spliterators.IntConsumerIterator');\nconst _IntIteratorSpliterator \x3d goog.require('java.util.Spliterators.IntIteratorSpliterator');\nconst _IteratorSpliterator \x3d goog.require('java.util.Spliterators.IteratorSpliterator');\nconst _LongArraySpliterator \x3d goog.require('java.util.Spliterators.LongArraySpliterator');\nconst _LongConsumerIterator \x3d goog.require('java.util.Spliterators.LongConsumerIterator');\nconst _LongIteratorSpliterator \x3d goog.require('java.util.Spliterators.LongIteratorSpliterator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Spliterators \x3d goog.require('java.util.Spliterators$impl');\nexports \x3d Spliterators;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Iterable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Iterable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Iterable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.lang.Iterable.$LambdaAdaptor');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar Iterable \x3d goog.require('java.lang.Iterable$impl');\nexports \x3d Iterable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/JsException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.JsException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.JsException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass JsException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'JsException(Object)'.\n   * @param {*} backingJsObject\n   * @return {!JsException}\n   * @public\n   */\n  static $create__java_lang_Object(backingJsObject) {\n    JsException.$clinit();\n    let $instance \x3d new JsException();\n    $instance.$ctor__java_lang_JsException__java_lang_Object(backingJsObject);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'JsException(Object)'.\n   * @param {*} backingJsObject\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_JsException__java_lang_Object(backingJsObject) {\n    this.$ctor__java_lang_RuntimeException__java_lang_Object(backingJsObject);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'JsException(String)'.\n   * @param {?string} msg\n   * @return {!JsException}\n   * @public\n   */\n  static $create__java_lang_String(msg) {\n    JsException.$clinit();\n    let $instance \x3d new JsException();\n    $instance.$ctor__java_lang_JsException__java_lang_String(msg);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'JsException(String)'.\n   * @param {?string} msg\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_JsException__java_lang_String(msg) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(msg);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'JsException()'.\n   * @return {!JsException}\n   * @public\n   */\n  static $create__() {\n    JsException.$clinit();\n    let $instance \x3d new JsException();\n    $instance.$ctor__java_lang_JsException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'JsException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_JsException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof JsException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, JsException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    JsException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(JsException, $Util.$makeClassName('java.lang.JsException'));\n\n\n\n\nexports \x3d JsException; \n//# sourceMappingURL\x3dJsException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/JsException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.JsException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.JsException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar JsException \x3d goog.require('java.lang.JsException$impl');\nexports \x3d JsException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/NullPointerException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.NullPointerException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.NullPointerException$impl');\n\n\nconst JsException \x3d goog.require('java.lang.JsException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass NullPointerException extends JsException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NullPointerException()'.\n   * @return {!NullPointerException}\n   * @public\n   */\n  static $create__() {\n    NullPointerException.$clinit();\n    let $instance \x3d new NullPointerException();\n    $instance.$ctor__java_lang_NullPointerException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NullPointerException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NullPointerException__() {\n    this.$ctor__java_lang_JsException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NullPointerException(String)'.\n   * @param {?string} message\n   * @return {!NullPointerException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    NullPointerException.$clinit();\n    let $instance \x3d new NullPointerException();\n    $instance.$ctor__java_lang_NullPointerException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NullPointerException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NullPointerException__java_lang_String(message) {\n    this.$ctor__java_lang_JsException__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NullPointerException(Object)'.\n   * @param {*} typeError\n   * @return {!NullPointerException}\n   * @public\n   */\n  static $create__java_lang_Object(typeError) {\n    NullPointerException.$clinit();\n    let $instance \x3d new NullPointerException();\n    $instance.$ctor__java_lang_NullPointerException__java_lang_Object(typeError);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NullPointerException(Object)'.\n   * @param {*} typeError\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NullPointerException__java_lang_Object(typeError) {\n    this.$ctor__java_lang_JsException__java_lang_Object(typeError);\n  }\n  \n  /**\n   * @override\n   * @param {?string} msg\n   * @return {*}\n   * @public\n   */\n  m_createError__java_lang_String_$pp_java_lang(msg) {\n    return new TypeError(msg);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NullPointerException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NullPointerException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NullPointerException.$clinit \x3d function() {};\n    JsException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NullPointerException, $Util.$makeClassName('java.lang.NullPointerException'));\n\n\n\n\nexports \x3d NullPointerException; \n//# sourceMappingURL\x3dNullPointerException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/NullPointerException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.NullPointerException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.NullPointerException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _JsException \x3d goog.require('java.lang.JsException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar NullPointerException \x3d goog.require('java.lang.NullPointerException$impl');\nexports \x3d NullPointerException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Supplier.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Supplier.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Supplier$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.Supplier.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Supplier {\n  /**\n   * @abstract\n   * @return {C_T}\n   * @public\n   */\n  m_get__() {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function():C_T} fn\n   * @return {Supplier\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    Supplier.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_Supplier \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_Supplier;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_Supplier;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Supplier.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.Supplier.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Supplier, $Util.$makeClassName('java.util.function.Supplier'));\n\n\nSupplier.$markImplementor(/** @type {Function} */ (Supplier));\n\n\nexports \x3d Supplier; \n//# sourceMappingURL\x3dSupplier.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Supplier$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Supplier$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Supplier.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Supplier \x3d goog.require('java.util.function.Supplier$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {Supplier\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():C_T} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():C_T} */\n    this.f_$$fn__java_util_function_Supplier_$LambdaAdaptor;\n    this.$ctor__java_util_function_Supplier_$LambdaAdaptor__java_util_function_Supplier_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():C_T} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_Supplier_$LambdaAdaptor__java_util_function_Supplier_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_Supplier_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {C_T}\n   * @public\n   */\n  m_get__() {\n    let /** ?function():C_T */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_Supplier_$LambdaAdaptor, $function());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.Supplier$$LambdaAdaptor'));\n\n\nSupplier.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dSupplier$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Supplier$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Supplier$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Supplier.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.Supplier.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Supplier.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Supplier.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Supplier');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.Supplier.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar Supplier \x3d goog.require('java.util.function.Supplier$impl');\nexports \x3d Supplier;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Objects.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Objects.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Objects$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet NullPointerException \x3d goog.forwardDeclare('java.lang.NullPointerException$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\nlet $boolean \x3d goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');\nlet $byte \x3d goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\nlet $float \x3d goog.forwardDeclare('vmbootstrap.primitives.$float$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\nlet $short \x3d goog.forwardDeclare('vmbootstrap.primitives.$short$impl');\n\n\nclass Objects extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Objects()'.\n   * @return {!Objects}\n   * @public\n   */\n  static $create__() {\n    Objects.$clinit();\n    let $instance \x3d new Objects();\n    $instance.$ctor__java_util_Objects__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Objects()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Objects__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} a\n   * @param {M_T} b\n   * @param {Comparator\x3c?\x3e} c\n   * @return {number}\n   * @public\n   */\n  static m_compare__java_lang_Object__java_lang_Object__java_util_Comparator(a, b, c) {\n    Objects.$clinit();\n    return $Equality.$same(a, b) ? 0 : c.m_compare__java_lang_Object__java_lang_Object(a, b);\n  }\n  \n  /**\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   * @public\n   */\n  static m_deepEquals__java_lang_Object__java_lang_Object(a, b) {\n    Objects.$clinit();\n    if ($Equality.$same(a, b)) {\n      return true;\n    }\n    if ($Equality.$same(a, null) || $Equality.$same(b, null)) {\n      return false;\n    }\n    let class1 \x3d $Objects.m_getClass__java_lang_Object(a);\n    let class2 \x3d $Objects.m_getClass__java_lang_Object(b);\n    if (!class1.m_isArray__() || !class2.m_isArray__()) {\n      return $Objects.m_equals__java_lang_Object__java_lang_Object(a, b);\n    }\n    let isObjectArray1 \x3d $Arrays.$instanceIsOfType(a, j_l_Object, 1);\n    let isObjectArray2 \x3d $Arrays.$instanceIsOfType(b, j_l_Object, 1);\n    if (isObjectArray1 || isObjectArray2) {\n      return isObjectArray1 \x26\x26 isObjectArray2 \x26\x26 Arrays.m_deepEquals__arrayOf_java_lang_Object__arrayOf_java_lang_Object(/**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(a, j_l_Object, 1)), /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(b, j_l_Object, 1)));\n    }\n    if (!$Objects.m_equals__java_lang_Object__java_lang_Object(class1, class2)) {\n      return false;\n    }\n    if ($Arrays.$instanceIsOfType(a, $boolean, 1)) {\n      return Arrays.m_equals__arrayOf_boolean__arrayOf_boolean(/**@type {Array\x3cboolean\x3e} */ ($Arrays.$castTo(a, $boolean, 1)), /**@type {Array\x3cboolean\x3e} */ ($Arrays.$castTo(b, $boolean, 1)));\n    }\n    if ($Arrays.$instanceIsOfType(a, $byte, 1)) {\n      return Arrays.m_equals__arrayOf_byte__arrayOf_byte(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(a, $byte, 1)), /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(b, $byte, 1)));\n    }\n    if ($Arrays.$instanceIsOfType(a, $char, 1)) {\n      return Arrays.m_equals__arrayOf_char__arrayOf_char(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(a, $char, 1)), /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(b, $char, 1)));\n    }\n    if ($Arrays.$instanceIsOfType(a, $short, 1)) {\n      return Arrays.m_equals__arrayOf_short__arrayOf_short(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(a, $short, 1)), /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(b, $short, 1)));\n    }\n    if ($Arrays.$instanceIsOfType(a, $int, 1)) {\n      return Arrays.m_equals__arrayOf_int__arrayOf_int(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(a, $int, 1)), /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(b, $int, 1)));\n    }\n    if ($Arrays.$instanceIsOfType(a, $long, 1)) {\n      return Arrays.m_equals__arrayOf_long__arrayOf_long(/**@type {Array\x3c!$Long\x3e} */ ($Arrays.$castTo(a, $long, 1)), /**@type {Array\x3c!$Long\x3e} */ ($Arrays.$castTo(b, $long, 1)));\n    }\n    if ($Arrays.$instanceIsOfType(a, $float, 1)) {\n      return Arrays.m_equals__arrayOf_float__arrayOf_float(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(a, $float, 1)), /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(b, $float, 1)));\n    }\n    return Arrays.m_equals__arrayOf_double__arrayOf_double(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(a, $double, 1)), /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(b, $double, 1)));\n  }\n  \n  /**\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__java_lang_Object__java_lang_Object(a, b) {\n    Objects.$clinit();\n    return $Equality.$same(a, b) || (!$Equality.$same(a, null) \x26\x26 $Objects.m_equals__java_lang_Object__java_lang_Object(a, b));\n  }\n  \n  /**\n   * @param {?string} a\n   * @param {?string} b\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__java_lang_String__java_lang_String(a, b) {\n    Objects.$clinit();\n    return $Equality.$same(a, b);\n  }\n  \n  /**\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_lang_Object(o) {\n    Objects.$clinit();\n    return !$Equality.$same(o, null) ? $Objects.m_hashCode__java_lang_Object(o) : 0;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} values\n   * @return {number}\n   * @public\n   */\n  static m_hash__arrayOf_java_lang_Object(values) {\n    Objects.$clinit();\n    return Arrays.m_hashCode__arrayOf_java_lang_Object(values);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_isNull__java_lang_Object(obj) {\n    Objects.$clinit();\n    return $Equality.$same(obj, null);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_nonNull__java_lang_Object(obj) {\n    Objects.$clinit();\n    return !$Equality.$same(obj, null);\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} obj\n   * @return {M_T}\n   * @public\n   */\n  static m_requireNonNull__java_lang_Object(obj) {\n    Objects.$clinit();\n    if ($Equality.$same(obj, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__());\n    }\n    return obj;\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} obj\n   * @param {?string} message\n   * @return {M_T}\n   * @public\n   */\n  static m_requireNonNull__java_lang_Object__java_lang_String(obj, message) {\n    Objects.$clinit();\n    if ($Equality.$same(obj, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(message));\n    }\n    return obj;\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} obj\n   * @param {Supplier\x3c?string\x3e} messageSupplier\n   * @return {M_T}\n   * @public\n   */\n  static m_requireNonNull__java_lang_Object__java_util_function_Supplier(obj, messageSupplier) {\n    Objects.$clinit();\n    if ($Equality.$same(obj, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(/**@type {?string} */ ($Casts.$to(messageSupplier.m_get__(), j_l_String))));\n    }\n    return obj;\n  }\n  \n  /**\n   * @param {*} o\n   * @return {?string}\n   * @public\n   */\n  static m_toString__java_lang_Object(o) {\n    Objects.$clinit();\n    return j_l_String.m_valueOf__java_lang_Object(o);\n  }\n  \n  /**\n   * @param {*} o\n   * @param {?string} nullDefault\n   * @return {?string}\n   * @public\n   */\n  static m_toString__java_lang_Object__java_lang_String(o, nullDefault) {\n    Objects.$clinit();\n    return !$Equality.$same(o, null) ? $Objects.m_toString__java_lang_Object(o) : nullDefault;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Objects;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Objects);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Objects.$clinit \x3d function() {};\n    NullPointerException \x3d goog.module.get('java.lang.NullPointerException$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    $boolean \x3d goog.module.get('vmbootstrap.primitives.$boolean$impl');\n    $byte \x3d goog.module.get('vmbootstrap.primitives.$byte$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    $float \x3d goog.module.get('vmbootstrap.primitives.$float$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    $short \x3d goog.module.get('vmbootstrap.primitives.$short$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Objects, $Util.$makeClassName('java.util.Objects'));\n\n\n\n\nexports \x3d Objects; \n//# sourceMappingURL\x3dObjects.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Objects.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Objects.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Objects');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _NullPointerException \x3d goog.require('java.lang.NullPointerException');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\nconst _$boolean \x3d goog.require('vmbootstrap.primitives.$boolean');\nconst _$byte \x3d goog.require('vmbootstrap.primitives.$byte');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\nconst _$float \x3d goog.require('vmbootstrap.primitives.$float');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\nconst _$short \x3d goog.require('vmbootstrap.primitives.$short');\n\n\n// Re-exports the implementation.\nvar Objects \x3d goog.require('java.util.Objects$impl');\nexports \x3d Objects;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Predicate.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Predicate.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Predicate$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.Predicate.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass Predicate {\n  /**\n   * @template M_T\n   * @param {*} targetRef\n   * @return {Predicate\x3cM_T\x3e}\n   * @public\n   */\n  static m_isEqual__java_lang_Object(targetRef) {\n    Predicate.$clinit();\n    return $Equality.$same(targetRef, null) ? /**@type {Predicate\x3c*\x3e} */ (Predicate.$adapt(((/** * */ arg0) \x3d\x3e{\n      return Objects.m_isNull__java_lang_Object(arg0);\n    }))) : /**@type {Predicate\x3c*\x3e} */ (Predicate.$adapt(((/** * */ arg0$1$) \x3d\x3e{\n      return $Objects.m_equals__java_lang_Object__java_lang_Object(targetRef, arg0$1$);\n    })));\n  }\n  \n  /**\n   * @abstract\n   * @param {C_T} t\n   * @return {boolean}\n   * @public\n   */\n  m_test__java_lang_Object(t) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  m_negate__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} other\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  m_and__java_util_function_Predicate(other) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} other\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  m_or__java_util_function_Predicate(other) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):boolean} fn\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    Predicate.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Predicate\x3cC_T\x3e} $thisArg\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  static m_negate__$default__java_util_function_Predicate($thisArg) {\n    Predicate.$clinit();\n    return /**@type {Predicate\x3c*\x3e} */ (Predicate.$adapt(((/** * */ t) \x3d\x3e{\n      return !$thisArg.m_test__java_lang_Object(t);\n    })));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Predicate\x3cC_T\x3e} $thisArg\n   * @param {Predicate\x3c?\x3e} other\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  static m_and__$default__java_util_function_Predicate__java_util_function_Predicate($thisArg, other) {\n    Predicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return /**@type {Predicate\x3c*\x3e} */ (Predicate.$adapt(((/** * */ t) \x3d\x3e{\n      return $thisArg.m_test__java_lang_Object(t) \x26\x26 other.m_test__java_lang_Object(t);\n    })));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Predicate\x3cC_T\x3e} $thisArg\n   * @param {Predicate\x3c?\x3e} other\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  static m_or__$default__java_util_function_Predicate__java_util_function_Predicate($thisArg, other) {\n    Predicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return /**@type {Predicate\x3c*\x3e} */ (Predicate.$adapt(((/** * */ t) \x3d\x3e{\n      return $thisArg.m_test__java_lang_Object(t) || other.m_test__java_lang_Object(t);\n    })));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_Predicate \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_Predicate;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_Predicate;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Predicate.$clinit \x3d function() {};\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.Predicate.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Predicate, $Util.$makeClassName('java.util.function.Predicate'));\n\n\nPredicate.$markImplementor(/** @type {Function} */ (Predicate));\n\n\nexports \x3d Predicate; \n//# sourceMappingURL\x3dPredicate.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Predicate$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Predicate$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.Predicate.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Predicate \x3d goog.require('java.util.function.Predicate$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {Predicate\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):boolean} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):boolean} */\n    this.f_$$fn__java_util_function_Predicate_$LambdaAdaptor;\n    this.$ctor__java_util_function_Predicate_$LambdaAdaptor__java_util_function_Predicate_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):boolean} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_Predicate_$LambdaAdaptor__java_util_function_Predicate_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_Predicate_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_test__java_lang_Object(arg0) {\n    let /** ?function(C_T):boolean */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_Predicate_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  m_and__java_util_function_Predicate(arg0) {\n    return /**@type {Predicate\x3cC_T\x3e} */ (Predicate.m_and__$default__java_util_function_Predicate__java_util_function_Predicate(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  m_negate__() {\n    return /**@type {Predicate\x3cC_T\x3e} */ (Predicate.m_negate__$default__java_util_function_Predicate(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {Predicate\x3cC_T\x3e}\n   * @public\n   */\n  m_or__java_util_function_Predicate(arg0) {\n    return /**@type {Predicate\x3cC_T\x3e} */ (Predicate.m_or__$default__java_util_function_Predicate__java_util_function_Predicate(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Predicate.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.Predicate$$LambdaAdaptor'));\n\n\nPredicate.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dPredicate$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Predicate$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Predicate$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Predicate.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.Predicate.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/Predicate.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.Predicate.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.Predicate');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.Predicate.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar Predicate \x3d goog.require('java.util.function.Predicate$impl');\nexports \x3d Predicate;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Cloneable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Cloneable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Cloneable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n */\nclass Cloneable {\n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_Cloneable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_lang_Cloneable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_Cloneable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Cloneable.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Cloneable, $Util.$makeClassName('java.lang.Cloneable'));\n\n\nCloneable.$markImplementor(/** @type {Function} */ (Cloneable));\n\n\nexports \x3d Cloneable; \n//# sourceMappingURL\x3dCloneable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Cloneable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Cloneable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Cloneable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Cloneable \x3d goog.require('java.lang.Cloneable$impl');\nexports \x3d Cloneable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ListIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ListIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.ListIterator$impl');\n\n\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Iterator\x3cC_E\x3e}\n */\nclass ListIterator {\n  /**\n   * @abstract\n   * @param {C_E} o\n   * @return {void}\n   * @public\n   */\n  m_add__java_lang_Object(o) {\n  }\n  \n  /**\n   * @abstract\n   * @return {boolean}\n   * @public\n   */\n  m_hasPrevious__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_nextIndex__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_previous__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_previousIndex__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} o\n   * @return {void}\n   * @public\n   */\n  m_set__java_lang_Object(o) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Iterator.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_ListIterator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_ListIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_ListIterator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ListIterator.$clinit \x3d function() {};\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ListIterator, $Util.$makeClassName('java.util.ListIterator'));\n\n\nListIterator.$markImplementor(/** @type {Function} */ (ListIterator));\n\n\nexports \x3d ListIterator; \n//# sourceMappingURL\x3dListIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ListIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ListIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.ListIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ListIterator \x3d goog.require('java.util.ListIterator$impl');\nexports \x3d ListIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/UnaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.UnaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.UnaryOperator$impl');\n\n\nconst j_u_function_Function \x3d goog.require('java.util.function.Function$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.UnaryOperator.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_T\n * @extends {j_u_function_Function\x3cC_T, C_T\x3e}\n */\nclass UnaryOperator {\n  /**\n   * @template M_T\n   * @return {UnaryOperator\x3cM_T\x3e}\n   * @public\n   */\n  static m_identity__() {\n    UnaryOperator.$clinit();\n    return /**@type {UnaryOperator\x3c*\x3e} */ (UnaryOperator.$adapt(((/** * */ t) \x3d\x3e{\n      return t;\n    })));\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T):C_T} fn\n   * @return {UnaryOperator\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    UnaryOperator.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    j_u_function_Function.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_UnaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_UnaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_UnaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.UnaryOperator.$LambdaAdaptor$impl');\n    j_u_function_Function.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(UnaryOperator, $Util.$makeClassName('java.util.function.UnaryOperator'));\n\n\nUnaryOperator.$markImplementor(/** @type {Function} */ (UnaryOperator));\n\n\nexports \x3d UnaryOperator; \n//# sourceMappingURL\x3dUnaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/UnaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.UnaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.UnaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst UnaryOperator \x3d goog.require('java.util.function.UnaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\n\n\n/**\n * @template C_T\n * @implements {UnaryOperator\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):C_T} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T):C_T} */\n    this.f_$$fn__java_util_function_UnaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_UnaryOperator_$LambdaAdaptor__java_util_function_UnaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T):C_T} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_UnaryOperator_$LambdaAdaptor__java_util_function_UnaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_UnaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @return {C_T}\n   * @public\n   */\n  m_apply__java_lang_Object(arg0) {\n    let /** ?function(C_T):C_T */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_UnaryOperator_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {j_u_function_Function\x3cC_T, M_V\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Function(arg0) {\n    return /**@type {j_u_function_Function\x3cC_T, *\x3e} */ (j_u_function_Function.m_andThen__$default__java_util_function_Function__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {j_u_function_Function\x3cM_V, C_T\x3e}\n   * @public\n   */\n  m_compose__java_util_function_Function(arg0) {\n    return /**@type {j_u_function_Function\x3c*, C_T\x3e} */ (j_u_function_Function.m_compose__$default__java_util_function_Function__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_u_function_Function \x3d goog.module.get('java.util.function.Function$impl');\n    j_l_Object.$clinit();\n    j_u_function_Function.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.UnaryOperator$$LambdaAdaptor'));\n\n\nUnaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dUnaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/UnaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.UnaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.UnaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.UnaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/UnaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.UnaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.UnaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.UnaryOperator.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar UnaryOperator \x3d goog.require('java.util.function.UnaryOperator$impl');\nexports \x3d UnaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collection.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collection.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collection$impl');\n\n\nconst Iterable \x3d goog.require('java.lang.Iterable$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Iterable\x3cC_E\x3e}\n */\nclass Collection {\n  /**\n   * @abstract\n   * @param {C_E} o\n   * @return {boolean}\n   * @public\n   */\n  add(o) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAll(c) {\n  }\n  \n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  clear() {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  containsAll(c) {\n  }\n  \n  /**\n   * @abstract\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  removeAll(c) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} filter\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(filter) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  retainAll(c) {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  size() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_stream__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  toArray() {\n  }\n  \n  /**\n   * @abstract\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} a\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  m_toArray__arrayOf_java_lang_Object(a) {\n  }\n  \n  /**\n   * @template C_E\n   * @param {Collection\x3cC_E\x3e} $thisArg\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  static m_parallelStream__$default__java_util_Collection($thisArg) {\n    Collection.$clinit();\n    return $thisArg.m_stream__();\n  }\n  \n  /**\n   * @template C_E\n   * @param {Collection\x3cC_E\x3e} $thisArg\n   * @param {Predicate\x3c?\x3e} filter\n   * @return {boolean}\n   * @public\n   */\n  static m_removeIf__$default__java_util_Collection__java_util_function_Predicate($thisArg, filter) {\n    Collection.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(filter);\n    let removed \x3d false;\n    for (let it \x3d $thisArg.m_iterator__(); it.m_hasNext__(); ) {\n      if (filter.m_test__java_lang_Object(it.m_next__())) {\n        it.m_remove__();\n        removed \x3d true;\n      }\n    }\n    return removed;\n  }\n  \n  /**\n   * @template C_E\n   * @param {Collection\x3cC_E\x3e} $thisArg\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  static m_spliterator__$default__java_util_Collection($thisArg) {\n    Collection.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ (Spliterators.m_spliterator__java_util_Collection__int($thisArg, 0));\n  }\n  \n  /**\n   * @template C_E\n   * @param {Collection\x3cC_E\x3e} $thisArg\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  static m_stream__$default__java_util_Collection($thisArg) {\n    Collection.$clinit();\n    return /**@type {Stream\x3c*\x3e} */ (StreamSupport.m_stream__java_util_Spliterator__boolean($thisArg.m_spliterator__(), false));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Iterable.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Collection \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Collection;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Collection;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Collection.$clinit \x3d function() {};\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    Iterable.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Collection, $Util.$makeClassName('java.util.Collection'));\n\n\nCollection.$markImplementor(/** @type {Function} */ (Collection));\n\n\nexports \x3d Collection; \n//# sourceMappingURL\x3dCollection.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/List.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.List.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.List$impl');\n\n\nconst Collection \x3d goog.require('java.util.Collection$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Collection\x3cC_E\x3e}\n */\nclass List {\n  /**\n   * @abstract\n   * @param {number} index\n   * @param {C_E} element\n   * @return {void}\n   * @public\n   */\n  addAtIndex(index, element) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} index\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAllAtIndex(index, c) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} index\n   * @return {C_E}\n   * @public\n   */\n  getAtIndex(index) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  indexOf(o) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  lastIndexOf(o) {\n  }\n  \n  /**\n   * @abstract\n   * @return {ListIterator\x3cC_E\x3e}\n   * @public\n   */\n  m_listIterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} from\n   * @return {ListIterator\x3cC_E\x3e}\n   * @public\n   */\n  m_listIterator__int(from) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} index\n   * @return {C_E}\n   * @public\n   */\n  removeAtIndex(index) {\n  }\n  \n  /**\n   * @abstract\n   * @param {UnaryOperator\x3cC_E\x3e} operator\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(operator) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} index\n   * @param {C_E} element\n   * @return {C_E}\n   * @public\n   */\n  setAtIndex(index, element) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(c) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {!List\x3cC_E\x3e}\n   * @public\n   */\n  subList(fromIndex, toIndex) {\n  }\n  \n  /**\n   * @template C_E\n   * @param {List\x3cC_E\x3e} $thisArg\n   * @param {UnaryOperator\x3cC_E\x3e} operator\n   * @return {void}\n   * @public\n   */\n  static m_replaceAll__$default__java_util_List__java_util_function_UnaryOperator($thisArg, operator) {\n    List.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(operator);\n    for (let i \x3d 0, size \x3d $thisArg.size(); i \x3c size; i++) {\n      $thisArg.setAtIndex(i, operator.m_apply__java_lang_Object($thisArg.getAtIndex(i)));\n    }\n  }\n  \n  /**\n   * @template C_E\n   * @param {List\x3cC_E\x3e} $thisArg\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  static m_sort__$default__java_util_List__java_util_Comparator($thisArg, c) {\n    List.$clinit();\n    let a \x3d $thisArg.toArray();\n    Arrays.m_sort__arrayOf_java_lang_Object__java_util_Comparator(a, /**@type {Comparator\x3c*\x3e} */ ($Casts.$to(c, Comparator)));\n    for (let i \x3d 0; i \x3c a.length; i++) {\n      $thisArg.setAtIndex(i, /**@type {*} */ ($Casts.$to(a[i], j_l_Object)));\n    }\n  }\n  \n  /**\n   * @template C_E\n   * @param {List\x3cC_E\x3e} $thisArg\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  static m_spliterator__$default__java_util_List($thisArg) {\n    List.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ (Spliterators.m_spliterator__java_util_Collection__int($thisArg, Spliterator.f_ORDERED__java_util_Spliterator));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Collection.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_List \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_List;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_List;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    List.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(List, $Util.$makeClassName('java.util.List'));\n\n\nList.$markImplementor(/** @type {Function} */ (List));\n\n\nexports \x3d List; \n//# sourceMappingURL\x3dList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/List.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.List.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.List');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar List \x3d goog.require('java.util.List$impl');\nexports \x3d List;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/RandomAccess.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.RandomAccess.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.RandomAccess$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n */\nclass RandomAccess {\n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_RandomAccess \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_RandomAccess;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_RandomAccess;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    RandomAccess.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(RandomAccess, $Util.$makeClassName('java.util.RandomAccess'));\n\n\nRandomAccess.$markImplementor(/** @type {Function} */ (RandomAccess));\n\n\nexports \x3d RandomAccess; \n//# sourceMappingURL\x3dRandomAccess.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/RandomAccess.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.RandomAccess.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.RandomAccess');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar RandomAccess \x3d goog.require('java.util.RandomAccess$impl');\nexports \x3d RandomAccess;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ArrayList$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ArrayList$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.ArrayList.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @template C_E\n * @implements {Iterator\x3cC_E\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ArrayList\x3cC_E\x3e} */\n    this.f_$outer_this__java_util_ArrayList_1;\n    /** @public {number} */\n    this.f_i__java_util_ArrayList_1 \x3d 0;\n    /** @public {number} */\n    this.f_last__java_util_ArrayList_1 \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(ArrayList)'.\n   * @template C_E\n   * @param {ArrayList\x3cC_E\x3e} $outer_this\n   * @return {!$1\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_ArrayList($outer_this) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_ArrayList_1__java_util_ArrayList($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(ArrayList)'.\n   * @param {ArrayList\x3cC_E\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ArrayList_1__java_util_ArrayList($outer_this) {\n    this.f_$outer_this__java_util_ArrayList_1 \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_ArrayList_1();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_i__java_util_ArrayList_1 \x3c this.f_$outer_this__java_util_ArrayList_1.f_array__java_util_ArrayList_.length;\n  }\n  \n  /**\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_next__() {\n    $InternalPreconditions.m_checkElement__boolean(this.m_hasNext__());\n    this.f_last__java_util_ArrayList_1 \x3d this.f_i__java_util_ArrayList_1++;\n    return this.f_$outer_this__java_util_ArrayList_1.f_array__java_util_ArrayList_[this.f_last__java_util_ArrayList_1];\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    $InternalPreconditions.m_checkState__boolean(this.f_last__java_util_ArrayList_1 !\x3d -1);\n    this.f_$outer_this__java_util_ArrayList_1.removeAtIndex(this.f_i__java_util_ArrayList_1 \x3d this.f_last__java_util_ArrayList_1);\n    this.f_last__java_util_ArrayList_1 \x3d -1;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_ArrayList_1() {\n    this.f_i__java_util_ArrayList_1 \x3d 0;\n    this.f_last__java_util_ArrayList_1 \x3d -1;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.ArrayList$1'));\n\n\nIterator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dArrayList$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ArrayList$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ArrayList$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.ArrayList.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.ArrayList.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/ArrayHelper$NativeFunction$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.ArrayHelper$NativeFunction$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.ArrayHelper.NativeFunction.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Function;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Function'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dArrayHelper$NativeFunction$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/ArrayHelper$NativeFunction$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.ArrayHelper$NativeFunction$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.ArrayHelper.NativeFunction.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.ArrayHelper.NativeFunction.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/ArrayStamper.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.ArrayStamper.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.ArrayStamper$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\nclass ArrayStamper extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayStamper()'.\n   * @return {!ArrayStamper}\n   * @public\n   */\n  static $create__() {\n    ArrayStamper.$clinit();\n    let $instance \x3d new ArrayStamper();\n    $instance.$ctor__javaemul_internal_ArrayStamper__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayStamper()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_ArrayStamper__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @template M_T\n   * @param {*} array\n   * @param {Array\x3cM_T\x3e} referenceType\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  static m_stampJavaTypeInfo__java_lang_Object__arrayOf_java_lang_Object(array, referenceType) {\n    ArrayStamper.$clinit();\n    let asArray \x3d /**@type {Array\x3c*\x3e} */ (JsUtils.m_uncheckedCast__java_lang_Object(array));\n    $Arrays.$copyType(asArray, referenceType);\n    return asArray;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayStamper;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArrayStamper);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArrayStamper.$clinit \x3d function() {};\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArrayStamper, $Util.$makeClassName('javaemul.internal.ArrayStamper'));\n\n\n\n\nexports \x3d ArrayStamper; \n//# sourceMappingURL\x3dArrayStamper.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/ArrayStamper.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.ArrayStamper.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.ArrayStamper');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar ArrayStamper \x3d goog.require('javaemul.internal.ArrayStamper$impl');\nexports \x3d ArrayStamper;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/NativeArray$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.NativeArray$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.NativeArray.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Array;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Array'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dNativeArray$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/NativeArray$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.NativeArray$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.NativeArray.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.NativeArray.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/ArrayHelper.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.ArrayHelper.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.ArrayHelper$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper.NativeFunction.$Overlay$impl');\nlet ArrayStamper \x3d goog.forwardDeclare('javaemul.internal.ArrayStamper$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet NativeArray_$Overlay \x3d goog.forwardDeclare('javaemul.internal.NativeArray.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\nclass ArrayHelper extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayHelper()'.\n   * @return {!ArrayHelper}\n   * @public\n   */\n  static $create__() {\n    ArrayHelper.$clinit();\n    let $instance \x3d new ArrayHelper();\n    $instance.$ctor__javaemul_internal_ArrayHelper__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayHelper()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_ArrayHelper__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  static m_clone__arrayOf_java_lang_Object__int__int(array, fromIndex, toIndex) {\n    ArrayHelper.$clinit();\n    let result \x3d ArrayHelper.m_unsafeClone__java_lang_Object__int__int(array, fromIndex, toIndex);\n    return ArrayStamper.m_stampJavaTypeInfo__java_lang_Object__arrayOf_java_lang_Object(result, array);\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static m_unsafeClone__java_lang_Object__int__int(array, fromIndex, toIndex) {\n    ArrayHelper.$clinit();\n    return ArrayHelper.m_asNativeArray__java_lang_Object(array).slice(fromIndex, toIndex);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} length\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  static m_createFrom__arrayOf_java_lang_Object__int(array, length) {\n    ArrayHelper.$clinit();\n    return ArrayStamper.m_stampJavaTypeInfo__java_lang_Object__arrayOf_java_lang_Object(new Array(length), array);\n  }\n  \n  /**\n   * @param {*} array\n   * @return {number}\n   * @public\n   */\n  static m_getLength__java_lang_Object(array) {\n    ArrayHelper.$clinit();\n    return ArrayHelper.m_asNativeArray__java_lang_Object(array).length;\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  static m_setLength__java_lang_Object__int(array, length) {\n    ArrayHelper.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).length \x3d length;\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} index\n   * @param {number} deleteCount\n   * @return {void}\n   * @public\n   */\n  static m_removeFrom__java_lang_Object__int__int(array, index, deleteCount) {\n    ArrayHelper.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).splice(index, deleteCount);\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} index\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  static m_insertTo__java_lang_Object__int__java_lang_Object(array, index, value) {\n    ArrayHelper.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).splice(index, 0, value);\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} index\n   * @param {Array\x3c*\x3e} values\n   * @return {void}\n   * @public\n   */\n  static m_insertTo__java_lang_Object__int__arrayOf_java_lang_Object(array, index, values) {\n    ArrayHelper.$clinit();\n    ArrayHelper.m_copy__java_lang_Object__int__java_lang_Object__int__int__boolean_$p_javaemul_internal_ArrayHelper(values, 0, array, index, values.length, false);\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} srcOfs\n   * @param {*} dest\n   * @param {number} destOfs\n   * @param {number} len\n   * @return {void}\n   * @public\n   */\n  static m_copy__java_lang_Object__int__java_lang_Object__int__int(array, srcOfs, dest, destOfs, len) {\n    ArrayHelper.$clinit();\n    ArrayHelper.m_copy__java_lang_Object__int__java_lang_Object__int__int__boolean_$p_javaemul_internal_ArrayHelper(array, srcOfs, dest, destOfs, len, true);\n  }\n  \n  /**\n   * @param {*} src\n   * @param {number} srcOfs\n   * @param {*} dest\n   * @param {number} destOfs\n   * @param {number} len\n   * @param {boolean} overwrite\n   * @return {void}\n   * @public\n   */\n  static m_copy__java_lang_Object__int__java_lang_Object__int__int__boolean_$p_javaemul_internal_ArrayHelper(src, srcOfs, dest, destOfs, len, overwrite) {\n    ArrayHelper.$clinit();\n    if ($Equality.$same(src, dest)) {\n      src \x3d ArrayHelper.m_unsafeClone__java_lang_Object__int__int(src, srcOfs, srcOfs + len);\n      srcOfs \x3d 0;\n    }\n    let destArray \x3d ArrayHelper.m_asNativeArray__java_lang_Object(dest);\n    for (let batchStart \x3d srcOfs, end \x3d srcOfs + len; batchStart \x3c end; ) {\n      let batchEnd \x3d Math.min(batchStart + ArrayHelper.f_ARRAY_PROCESS_BATCH_SIZE__javaemul_internal_ArrayHelper, end);\n      len \x3d batchEnd - batchStart;\n      let spliceArgs \x3d ArrayHelper.m_unsafeClone__java_lang_Object__int__int(src, batchStart, batchEnd);\n      ArrayHelper.m_asNativeArray__java_lang_Object(spliceArgs).splice(0, 0, destOfs, overwrite ? len : 0);\n      Array.prototype.splice.apply(destArray, spliceArgs);\n      batchStart \x3d batchEnd;\n      destOfs +\x3d len;\n    }\n  }\n  \n  /**\n   * @param {*} array\n   * @return {Array}\n   * @public\n   */\n  static m_asNativeArray__java_lang_Object(array) {\n    ArrayHelper.$clinit();\n    return /**@type {Array} */ (JsUtils.m_uncheckedCast__java_lang_Object(array));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayHelper;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArrayHelper);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArrayHelper.$clinit \x3d function() {};\n    ArrayStamper \x3d goog.module.get('javaemul.internal.ArrayStamper$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArrayHelper, $Util.$makeClassName('javaemul.internal.ArrayHelper'));\n\n\n/** @public {number} @const */\nArrayHelper.f_ARRAY_PROCESS_BATCH_SIZE__javaemul_internal_ArrayHelper \x3d 10000;\n\n\n\n\nexports \x3d ArrayHelper; \n//# sourceMappingURL\x3dArrayHelper.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/ArrayHelper.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.ArrayHelper.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.ArrayHelper');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('javaemul.internal.ArrayHelper.NativeFunction.$Overlay');\nconst _ArrayStamper \x3d goog.require('javaemul.internal.ArrayStamper');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _NativeArray_$Overlay \x3d goog.require('javaemul.internal.NativeArray.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper$impl');\nexports \x3d ArrayHelper;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractCollection.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractCollection.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractCollection$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Collection \x3d goog.require('java.util.Collection$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet StringJoiner \x3d goog.forwardDeclare('java.util.StringJoiner$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @abstract\n * @template C_E\n * @implements {Collection\x3cC_E\x3e}\n  */\nclass AbstractCollection extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractCollection()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractCollection__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {C_E} o\n   * @return {boolean}\n   * @public\n   */\n  add(o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__java_lang_String(\"Add not supported on this collection\"));\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAll(c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    let changed \x3d false;\n    for (let $iterator \x3d c.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      changed \x3d !!(+changed | +this.add(e));\n    }\n    return changed;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    for (let iter \x3d this.m_iterator__(); iter.m_hasNext__(); ) {\n      iter.m_next__();\n      iter.m_remove__();\n    }\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return this.m_advanceToFind__java_lang_Object__boolean_$p_java_util_AbstractCollection(o, false);\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  containsAll(c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    for (let $iterator \x3d c.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      if (!this.contains(e)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.size() \x3d\x3d 0;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    return this.m_advanceToFind__java_lang_Object__boolean_$p_java_util_AbstractCollection(o, true);\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  removeAll(c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    let changed \x3d false;\n    for (let iter \x3d this.m_iterator__(); iter.m_hasNext__(); ) {\n      let o \x3d iter.m_next__();\n      if (c.contains(o)) {\n        iter.m_remove__();\n        changed \x3d true;\n      }\n    }\n    return changed;\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  retainAll(c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    let changed \x3d false;\n    for (let iter \x3d this.m_iterator__(); iter.m_hasNext__(); ) {\n      let o \x3d iter.m_next__();\n      if (!c.contains(o)) {\n        iter.m_remove__();\n        changed \x3d true;\n      }\n    }\n    return changed;\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  toArray() {\n    return this.m_toArray__arrayOf_java_lang_Object(new Array(this.size()));\n  }\n  \n  /**\n   * @override\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} a\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  m_toArray__arrayOf_java_lang_Object(a) {\n    let size \x3d this.size();\n    if (a.length \x3c size) {\n      a \x3d ArrayHelper.m_createFrom__arrayOf_java_lang_Object__int(a, size);\n    }\n    let result \x3d a;\n    let it \x3d this.m_iterator__();\n    for (let i \x3d 0; i \x3c size; ++i) {\n      $Arrays.$set(result, i, it.m_next__());\n    }\n    if (a.length \x3e size) {\n      $Arrays.$set(a, size, null);\n    }\n    return a;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $iterator \x3d this.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      joiner.m_add__java_lang_CharSequence($Equality.$same(e, this) ? \"(this Collection)\" : j_l_String.m_valueOf__java_lang_Object(e));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {*} o\n   * @param {boolean} remove\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToFind__java_lang_Object__boolean_$p_java_util_AbstractCollection(o, remove) {\n    for (let iter \x3d this.m_iterator__(); iter.m_hasNext__(); ) {\n      let e \x3d iter.m_next__();\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(o, e)) {\n        if (remove) {\n          iter.m_remove__();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_stream__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Iterator\x3cC_E\x3e}\n   * @public\n   */\n  m_iterator__() {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractCollection;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractCollection);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractCollection.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    StringJoiner \x3d goog.module.get('java.util.StringJoiner$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractCollection, $Util.$makeClassName('java.util.AbstractCollection'));\n\n\nCollection.$markImplementor(AbstractCollection);\n\n\nexports \x3d AbstractCollection; \n//# sourceMappingURL\x3dAbstractCollection.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractList$impl');\n\n\nconst AbstractCollection \x3d goog.require('java.util.AbstractCollection$impl');\nconst List \x3d goog.require('java.util.List$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet IteratorImpl \x3d goog.forwardDeclare('java.util.AbstractList.IteratorImpl$impl');\nlet ListIteratorImpl \x3d goog.forwardDeclare('java.util.AbstractList.ListIteratorImpl$impl');\nlet SubList \x3d goog.forwardDeclare('java.util.AbstractList.SubList$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @abstract\n * @template C_E\n * @extends {AbstractCollection\x3cC_E\x3e}\n * @implements {List\x3cC_E\x3e}\n  */\nclass AbstractList extends AbstractCollection {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_modCount__java_util_AbstractList \x3d 0;\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractList()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractList__() {\n    this.$ctor__java_util_AbstractCollection__();\n  }\n  \n  /**\n   * @override\n   * @param {C_E} obj\n   * @return {boolean}\n   * @public\n   */\n  add(obj) {\n    this.addAtIndex(this.size(), obj);\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_E} element\n   * @return {void}\n   * @public\n   */\n  addAtIndex(index, element) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__java_lang_String(\"Add not supported on this list\"));\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAllAtIndex(index, c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    let changed \x3d false;\n    for (let $iterator \x3d c.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      this.addAtIndex(index++, e);\n      changed \x3d true;\n    }\n    return changed;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.m_removeRange__int__int(0, this.size());\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    if ($Equality.$same(o, this)) {\n      return true;\n    }\n    if (!List.$isInstance(o)) {\n      return false;\n    }\n    let other \x3d /**@type {List\x3c*\x3e} */ ($Casts.$to(o, List));\n    if (this.size() !\x3d other.size()) {\n      return false;\n    }\n    let iterOther \x3d other.m_iterator__();\n    for (let $iterator \x3d this.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let elem \x3d $iterator.m_next__();\n      let elemOther \x3d iterOther.m_next__();\n      if (!Objects.m_equals__java_lang_Object__java_lang_Object(elem, elemOther)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Collections.m_hashCode__java_util_List_$pp_java_util(this);\n  }\n  \n  /**\n   * @override\n   * @param {*} toFind\n   * @return {number}\n   * @public\n   */\n  indexOf(toFind) {\n    for (let i \x3d 0, n \x3d this.size(); i \x3c n; ++i) {\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(toFind, this.getAtIndex(i))) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_E\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!IteratorImpl\x3cC_E\x3e} */ (IteratorImpl.$create__java_util_AbstractList(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} toFind\n   * @return {number}\n   * @public\n   */\n  lastIndexOf(toFind) {\n    for (let i \x3d this.size() - 1; i \x3e -1; --i) {\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(toFind, this.getAtIndex(i))) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  \n  /**\n   * @override\n   * @return {ListIterator\x3cC_E\x3e}\n   * @public\n   */\n  m_listIterator__() {\n    return this.m_listIterator__int(0);\n  }\n  \n  /**\n   * @override\n   * @param {number} from\n   * @return {ListIterator\x3cC_E\x3e}\n   * @public\n   */\n  m_listIterator__int(from) {\n    return /**@type {!ListIteratorImpl\x3cC_E\x3e} */ (ListIteratorImpl.$create__java_util_AbstractList__int(this, from));\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_E}\n   * @public\n   */\n  removeAtIndex(index) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__java_lang_String(\"Remove not supported on this list\"));\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_E} o\n   * @return {C_E}\n   * @public\n   */\n  setAtIndex(index, o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__java_lang_String(\"Set not supported on this list\"));\n  }\n  \n  /**\n   * @override\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {List\x3cC_E\x3e}\n   * @public\n   */\n  subList(fromIndex, toIndex) {\n    return /**@type {!SubList\x3cC_E\x3e} */ (SubList.$create__java_util_List__int__int(this, fromIndex, toIndex));\n  }\n  \n  /**\n   * @param {number} fromIndex\n   * @param {number} endIndex\n   * @return {void}\n   * @public\n   */\n  m_removeRange__int__int(fromIndex, endIndex) {\n    let iter \x3d this.m_listIterator__int(fromIndex);\n    for (let i \x3d fromIndex; i \x3c endIndex; ++i) {\n      iter.m_next__();\n      iter.m_remove__();\n    }\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @return {C_E}\n   * @public\n   */\n  getAtIndex(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {UnaryOperator\x3cC_E\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractList.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    IteratorImpl \x3d goog.module.get('java.util.AbstractList.IteratorImpl$impl');\n    ListIteratorImpl \x3d goog.module.get('java.util.AbstractList.ListIteratorImpl$impl');\n    SubList \x3d goog.module.get('java.util.AbstractList.SubList$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    AbstractCollection.$clinit();\n    List.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractList, $Util.$makeClassName('java.util.AbstractList'));\n\n\nList.$markImplementor(AbstractList);\n\n\nexports \x3d AbstractList; \n//# sourceMappingURL\x3dAbstractList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ArrayList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ArrayList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.ArrayList$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Cloneable \x3d goog.require('java.lang.Cloneable$impl');\nconst AbstractList \x3d goog.require('java.util.AbstractList$impl');\nconst List \x3d goog.require('java.util.List$impl');\nconst RandomAccess \x3d goog.require('java.util.RandomAccess$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.ArrayList.$1$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_E\n * @extends {AbstractList\x3cC_E\x3e}\n * @implements {List\x3cC_E\x3e}\n * @implements {Cloneable}\n * @implements {RandomAccess}\n * @implements {Serializable}\n  */\nclass ArrayList extends AbstractList {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cC_E\x3e} */\n    this.f_array__java_util_ArrayList_;\n    /** @public {C_E} */\n    this.f_exposeElement__java_util_ArrayList_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayList()'.\n   * @template C_E\n   * @return {!ArrayList\x3cC_E\x3e}\n   * @public\n   */\n  static $create__() {\n    ArrayList.$clinit();\n    let $instance \x3d new ArrayList();\n    $instance.$ctor__java_util_ArrayList__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayList()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ArrayList__() {\n    this.$ctor__java_util_AbstractList__();\n    this.$init__java_util_ArrayList();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayList(Collection)'.\n   * @template C_E\n   * @param {Collection\x3c?\x3e} c\n   * @return {!ArrayList\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_Collection(c) {\n    ArrayList.$clinit();\n    let $instance \x3d new ArrayList();\n    $instance.$ctor__java_util_ArrayList__java_util_Collection(c);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayList(Collection)'.\n   * @param {Collection\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ArrayList__java_util_Collection(c) {\n    this.$ctor__java_util_AbstractList__();\n    this.$init__java_util_ArrayList();\n    ArrayHelper.m_insertTo__java_lang_Object__int__arrayOf_java_lang_Object(this.f_array__java_util_ArrayList_, 0, c.toArray());\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayList(int)'.\n   * @template C_E\n   * @param {number} initialCapacity\n   * @return {!ArrayList\x3cC_E\x3e}\n   * @public\n   */\n  static $create__int(initialCapacity) {\n    ArrayList.$clinit();\n    let $instance \x3d new ArrayList();\n    $instance.$ctor__java_util_ArrayList__int(initialCapacity);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayList(int)'.\n   * @param {number} initialCapacity\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ArrayList__int(initialCapacity) {\n    this.$ctor__java_util_AbstractList__();\n    this.$init__java_util_ArrayList();\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_Object(initialCapacity \x3e\x3d 0, \"Initial capacity must not be negative\");\n  }\n  \n  /**\n   * @override\n   * @param {C_E} o\n   * @return {boolean}\n   * @public\n   */\n  add(o) {\n    $Arrays.$set(this.f_array__java_util_ArrayList_, this.f_array__java_util_ArrayList_.length, o);\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_E} o\n   * @return {void}\n   * @public\n   */\n  addAtIndex(index, o) {\n    $InternalPreconditions.m_checkPositionIndex__int__int(index, this.f_array__java_util_ArrayList_.length);\n    ArrayHelper.m_insertTo__java_lang_Object__int__java_lang_Object(this.f_array__java_util_ArrayList_, index, o);\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAll(c) {\n    let cArray \x3d c.toArray();\n    let len \x3d cArray.length;\n    if (len \x3d\x3d 0) {\n      return false;\n    }\n    ArrayHelper.m_insertTo__java_lang_Object__int__arrayOf_java_lang_Object(this.f_array__java_util_ArrayList_, this.f_array__java_util_ArrayList_.length, cArray);\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAllAtIndex(index, c) {\n    $InternalPreconditions.m_checkPositionIndex__int__int(index, this.f_array__java_util_ArrayList_.length);\n    let cArray \x3d c.toArray();\n    let len \x3d cArray.length;\n    if (len \x3d\x3d 0) {\n      return false;\n    }\n    ArrayHelper.m_insertTo__java_lang_Object__int__arrayOf_java_lang_Object(this.f_array__java_util_ArrayList_, index, cArray);\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_array__java_util_ArrayList_ \x3d /**@type {Array\x3cC_E\x3e} */ ($Arrays.$castTo(new Array(0), j_l_Object, 1));\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  m_clone__() {\n    return /**@type {!ArrayList\x3cC_E\x3e} */ (ArrayList.$create__java_util_Collection(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return (this.indexOf(o) !\x3d -1);\n  }\n  \n  /**\n   * @param {number} ignored\n   * @return {void}\n   * @public\n   */\n  m_ensureCapacity__int(ignored) {\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_E}\n   * @public\n   */\n  getAtIndex(index) {\n    $InternalPreconditions.m_checkElementIndex__int__int(index, this.f_array__java_util_ArrayList_.length);\n    return this.f_array__java_util_ArrayList_[index];\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  indexOf(o) {\n    return this.m_indexOf__java_lang_Object__int_$pp_java_util(o, 0);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_E\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!$1\x3cC_E\x3e} */ ($1.$create__java_util_ArrayList(this));\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    for (let $array \x3d this.f_array__java_util_ArrayList_, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      consumer.m_accept__java_lang_Object(e);\n    }\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.f_array__java_util_ArrayList_.length \x3d\x3d 0;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  lastIndexOf(o) {\n    return this.m_lastIndexOf__java_lang_Object__int_$pp_java_util(o, this.size() - 1);\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_E}\n   * @public\n   */\n  removeAtIndex(index) {\n    let previous \x3d this.getAtIndex(index);\n    ArrayHelper.m_removeFrom__java_lang_Object__int__int(this.f_array__java_util_ArrayList_, index, 1);\n    return previous;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    let i \x3d this.indexOf(o);\n    if (i \x3d\x3d -1) {\n      return false;\n    }\n    this.removeAtIndex(i);\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} filter\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(filter) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(filter);\n    let newArray \x3d null;\n    let newIndex \x3d 0;\n    for (let index \x3d 0; index \x3c this.f_array__java_util_ArrayList_.length; ++index) {\n      let e \x3d this.f_array__java_util_ArrayList_[index];\n      if (filter.m_test__java_lang_Object(e)) {\n        if ($Equality.$same(newArray, null)) {\n          newArray \x3d ArrayHelper.m_clone__arrayOf_java_lang_Object__int__int(this.f_array__java_util_ArrayList_, 0, index);\n          newIndex \x3d index;\n        }\n      } else if (!$Equality.$same(newArray, null)) {\n        $Arrays.$set(newArray, newIndex++, e);\n      }\n    }\n    if ($Equality.$same(newArray, null)) {\n      return false;\n    }\n    this.f_array__java_util_ArrayList_ \x3d newArray;\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {UnaryOperator\x3cC_E\x3e} operator\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(operator) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(operator);\n    for (let i \x3d 0; i \x3c this.f_array__java_util_ArrayList_.length; i++) {\n      $Arrays.$set(this.f_array__java_util_ArrayList_, i, operator.m_apply__java_lang_Object(this.f_array__java_util_ArrayList_[i]));\n    }\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_E} o\n   * @return {C_E}\n   * @public\n   */\n  setAtIndex(index, o) {\n    let previous \x3d this.getAtIndex(index);\n    $Arrays.$set(this.f_array__java_util_ArrayList_, index, o);\n    return previous;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_array__java_util_ArrayList_.length;\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(c) {\n    Arrays.m_sort__arrayOf_java_lang_Object__int__int__java_util_Comparator(this.f_array__java_util_ArrayList_, 0, this.f_array__java_util_ArrayList_.length, c);\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  toArray() {\n    return ArrayHelper.m_clone__arrayOf_java_lang_Object__int__int(this.f_array__java_util_ArrayList_, 0, this.f_array__java_util_ArrayList_.length);\n  }\n  \n  /**\n   * @override\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} out\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  m_toArray__arrayOf_java_lang_Object(out) {\n    let size \x3d this.f_array__java_util_ArrayList_.length;\n    if (out.length \x3c size) {\n      out \x3d ArrayHelper.m_createFrom__arrayOf_java_lang_Object__int(out, size);\n    }\n    for (let i \x3d 0; i \x3c size; ++i) {\n      $Arrays.$set(out, i, /**@type {*} */ ($Casts.$to(this.f_array__java_util_ArrayList_[i], j_l_Object)));\n    }\n    if (out.length \x3e size) {\n      $Arrays.$set(out, size, null);\n    }\n    return out;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_trimToSize__() {\n  }\n  \n  /**\n   * @override\n   * @param {number} fromIndex\n   * @param {number} endIndex\n   * @return {void}\n   * @public\n   */\n  m_removeRange__int__int(fromIndex, endIndex) {\n    $InternalPreconditions.m_checkPositionIndexes__int__int__int(fromIndex, endIndex, this.f_array__java_util_ArrayList_.length);\n    let count \x3d endIndex - fromIndex;\n    ArrayHelper.m_removeFrom__java_lang_Object__int__int(this.f_array__java_util_ArrayList_, fromIndex, count);\n  }\n  \n  /**\n   * @param {*} o\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  m_indexOf__java_lang_Object__int_$pp_java_util(o, index) {\n    for (; index \x3c this.f_array__java_util_ArrayList_.length; ++index) {\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(o, this.f_array__java_util_ArrayList_[index])) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  \n  /**\n   * @param {*} o\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  m_lastIndexOf__java_lang_Object__int_$pp_java_util(o, index) {\n    for (; index \x3e\x3d 0; --index) {\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(o, this.f_array__java_util_ArrayList_[index])) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  \n  /**\n   * @param {number} newSize\n   * @return {void}\n   * @public\n   */\n  m_setSize__int_$pp_java_util(newSize) {\n    ArrayHelper.m_setLength__java_lang_Object__int(this.f_array__java_util_ArrayList_, newSize);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_E\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_ArrayList() {\n    this.f_array__java_util_ArrayList_ \x3d /**@type {Array\x3cC_E\x3e} */ ($Arrays.$castTo(new Array(0), j_l_Object, 1));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArrayList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArrayList.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    $1 \x3d goog.module.get('java.util.ArrayList.$1$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractList.$clinit();\n    List.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArrayList, $Util.$makeClassName('java.util.ArrayList'));\n\n\nList.$markImplementor(ArrayList);\nCloneable.$markImplementor(ArrayList);\nRandomAccess.$markImplementor(ArrayList);\nSerializable.$markImplementor(ArrayList);\n\n\nexports \x3d ArrayList; \n//# sourceMappingURL\x3dArrayList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ArrayList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ArrayList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.ArrayList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Cloneable \x3d goog.require('java.lang.Cloneable');\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _List \x3d goog.require('java.util.List');\nconst _RandomAccess \x3d goog.require('java.util.RandomAccess');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$1 \x3d goog.require('java.util.ArrayList.$1');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ArrayList \x3d goog.require('java.util.ArrayList$impl');\nexports \x3d ArrayList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Enumeration.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Enumeration.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Enumeration$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n * @template C_E\n */\nclass Enumeration {\n  /**\n   * @abstract\n   * @return {boolean}\n   * @public\n   */\n  m_hasMoreElements__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_nextElement__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Enumeration \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Enumeration;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Enumeration;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Enumeration.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Enumeration, $Util.$makeClassName('java.util.Enumeration'));\n\n\nEnumeration.$markImplementor(/** @type {Function} */ (Enumeration));\n\n\nexports \x3d Enumeration; \n//# sourceMappingURL\x3dEnumeration.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Enumeration.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Enumeration.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Enumeration');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Enumeration \x3d goog.require('java.util.Enumeration$impl');\nexports \x3d Enumeration;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Enumeration \x3d goog.require('java.util.Enumeration$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\n\n\n/**\n * @template M_T\n * @implements {Enumeration\x3cM_T\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Iterator\x3cM_T\x3e} */\n    this.$c_it;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Enumeration(Iterator)'.\n   * @template M_T\n   * @param {Iterator\x3cM_T\x3e} $c_it\n   * @return {!$1\x3cM_T\x3e}\n   * @public\n   */\n  static $create__java_util_Iterator($c_it) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_Collections_1__java_util_Iterator($c_it);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Enumeration(Iterator)'.\n   * @param {Iterator\x3cM_T\x3e} $c_it\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_1__java_util_Iterator($c_it) {\n    this.$c_it \x3d $c_it;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasMoreElements__() {\n    return this.$c_it.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {M_T}\n   * @public\n   */\n  m_nextElement__() {\n    return this.$c_it.m_next__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.Collections$1'));\n\n\nEnumeration.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dCollections$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Enumeration \x3d goog.require('java.util.Enumeration');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterator \x3d goog.require('java.util.Iterator');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.Collections.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptyList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptyList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.EmptyList$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractList \x3d goog.require('java.util.AbstractList$impl');\nconst RandomAccess \x3d goog.require('java.util.RandomAccess$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @implements {RandomAccess}\n * @implements {Serializable}\n  */\nclass EmptyList extends AbstractList {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EmptyList()'.\n   * @return {!EmptyList}\n   * @public\n   */\n  static $create__() {\n    EmptyList.$clinit();\n    let $instance \x3d new EmptyList();\n    $instance.$ctor__java_util_Collections_EmptyList__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EmptyList()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_EmptyList__() {\n    this.$ctor__java_util_AbstractList__();\n  }\n  \n  /**\n   * @override\n   * @param {*} object\n   * @return {boolean}\n   * @public\n   */\n  contains(object) {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @param {number} location\n   * @return {*}\n   * @public\n   */\n  getAtIndex(location) {\n    $InternalPreconditions.m_checkElementIndex__int__int(location, 0);\n    return null;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {Iterator\x3c*\x3e} */ (Collections.m_emptyIterator__());\n  }\n  \n  /**\n   * @override\n   * @return {ListIterator}\n   * @public\n   */\n  m_listIterator__() {\n    return /**@type {ListIterator\x3c*\x3e} */ (Collections.m_emptyListIterator__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return 0;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {UnaryOperator\x3c*\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(arg0) {\n    List.m_replaceAll__$default__java_util_List__java_util_function_UnaryOperator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(arg0) {\n    List.m_sort__$default__java_util_List__java_util_Comparator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3c*\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3c*\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3c*\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3c*\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3c*\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3c*\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptyList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptyList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptyList.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractList.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptyList, $Util.$makeClassName('java.util.Collections$EmptyList'));\n\n\nRandomAccess.$markImplementor(EmptyList);\nSerializable.$markImplementor(EmptyList);\n\n\nexports \x3d EmptyList; \n//# sourceMappingURL\x3dCollections$EmptyList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptyList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptyList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.EmptyList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _RandomAccess \x3d goog.require('java.util.RandomAccess');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _List \x3d goog.require('java.util.List');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar EmptyList \x3d goog.require('java.util.Collections.EmptyList$impl');\nexports \x3d EmptyList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/NoSuchElementException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.NoSuchElementException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.NoSuchElementException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass NoSuchElementException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NoSuchElementException()'.\n   * @return {!NoSuchElementException}\n   * @public\n   */\n  static $create__() {\n    NoSuchElementException.$clinit();\n    let $instance \x3d new NoSuchElementException();\n    $instance.$ctor__java_util_NoSuchElementException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NoSuchElementException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_NoSuchElementException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NoSuchElementException(String)'.\n   * @param {?string} s\n   * @return {!NoSuchElementException}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    NoSuchElementException.$clinit();\n    let $instance \x3d new NoSuchElementException();\n    $instance.$ctor__java_util_NoSuchElementException__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NoSuchElementException(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_NoSuchElementException__java_lang_String(s) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(s);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NoSuchElementException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NoSuchElementException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NoSuchElementException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NoSuchElementException, $Util.$makeClassName('java.util.NoSuchElementException'));\n\n\n\n\nexports \x3d NoSuchElementException; \n//# sourceMappingURL\x3dNoSuchElementException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/NoSuchElementException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.NoSuchElementException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.NoSuchElementException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar NoSuchElementException \x3d goog.require('java.util.NoSuchElementException$impl');\nexports \x3d NoSuchElementException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptyListIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptyListIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.EmptyListIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ListIterator \x3d goog.require('java.util.ListIterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IllegalStateException \x3d goog.forwardDeclare('java.lang.IllegalStateException$impl');\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet NoSuchElementException \x3d goog.forwardDeclare('java.util.NoSuchElementException$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @implements {ListIterator}\n  */\nclass EmptyListIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EmptyListIterator()'.\n   * @return {!EmptyListIterator}\n   * @public\n   */\n  static $create__() {\n    EmptyListIterator.$clinit();\n    let $instance \x3d new EmptyListIterator();\n    $instance.$ctor__java_util_Collections_EmptyListIterator__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EmptyListIterator()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_EmptyListIterator__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {void}\n   * @public\n   */\n  m_add__java_lang_Object(o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasPrevious__() {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {*}\n   * @public\n   */\n  m_next__() {\n    throw $Exceptions.toJs(NoSuchElementException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_nextIndex__() {\n    return 0;\n  }\n  \n  /**\n   * @override\n   * @return {*}\n   * @public\n   */\n  m_previous__() {\n    throw $Exceptions.toJs(NoSuchElementException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_previousIndex__() {\n    return -1;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    throw $Exceptions.toJs(IllegalStateException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {void}\n   * @public\n   */\n  m_set__java_lang_Object(o) {\n    throw $Exceptions.toJs(IllegalStateException.$create__());\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @return {EmptyListIterator}\n   * @public\n   */\n  static get f_INSTANCE__java_util_Collections_EmptyListIterator() {\n    return (EmptyListIterator.$clinit(), EmptyListIterator.$f_INSTANCE__java_util_Collections_EmptyListIterator);\n  }\n  \n  /**\n   * @param {EmptyListIterator} value\n   * @return {void}\n   * @public\n   */\n  static set f_INSTANCE__java_util_Collections_EmptyListIterator(value) {\n    (EmptyListIterator.$clinit(), EmptyListIterator.$f_INSTANCE__java_util_Collections_EmptyListIterator \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptyListIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptyListIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptyListIterator.$clinit \x3d function() {};\n    IllegalStateException \x3d goog.module.get('java.lang.IllegalStateException$impl');\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    NoSuchElementException \x3d goog.module.get('java.util.NoSuchElementException$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n    EmptyListIterator.$f_INSTANCE__java_util_Collections_EmptyListIterator \x3d EmptyListIterator.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptyListIterator, $Util.$makeClassName('java.util.Collections$EmptyListIterator'));\n\n\n/** @private {EmptyListIterator} */\nEmptyListIterator.$f_INSTANCE__java_util_Collections_EmptyListIterator;\n\n\nListIterator.$markImplementor(EmptyListIterator);\n\n\nexports \x3d EmptyListIterator; \n//# sourceMappingURL\x3dCollections$EmptyListIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptyListIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptyListIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.EmptyListIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IllegalStateException \x3d goog.require('java.lang.IllegalStateException');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _NoSuchElementException \x3d goog.require('java.util.NoSuchElementException');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar EmptyListIterator \x3d goog.require('java.util.Collections.EmptyListIterator$impl');\nexports \x3d EmptyListIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map$Entry$$LambdaAdaptor$6.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map$Entry$$LambdaAdaptor$6.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Map.Entry.$LambdaAdaptor$6$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$6 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$6($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$6.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Map_Entry_$LambdaAdaptor$6;\n    this.$ctor__java_util_Map_Entry_$LambdaAdaptor$6__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$6($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Map_Entry_$LambdaAdaptor$6__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Map_Entry_$LambdaAdaptor$6 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Map_Entry_$LambdaAdaptor$6, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$6;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$6);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$6.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$6, $Util.$makeClassName('java.util.Map$Entry$$LambdaAdaptor$6'));\n\n\nComparator.$markImplementor($LambdaAdaptor$6);\nSerializable.$markImplementor($LambdaAdaptor$6);\n\n\nexports \x3d $LambdaAdaptor$6; \n//# sourceMappingURL\x3dMap$Entry$$LambdaAdaptor$6.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map$Entry$$LambdaAdaptor$6.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map$Entry$$LambdaAdaptor$6.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Map.Entry.$LambdaAdaptor$6');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$6 \x3d goog.require('java.util.Map.Entry.$LambdaAdaptor$6$impl');\nexports \x3d $LambdaAdaptor$6;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map$Entry$$LambdaAdaptor$7.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map$Entry$$LambdaAdaptor$7.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Map.Entry.$LambdaAdaptor$7$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\n\n\n/**\n * @template C_T\n * @implements {Comparator\x3cC_T\x3e}\n * @implements {Serializable}\n  */\nclass $LambdaAdaptor$7 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$7($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$7.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):number} */\n    this.f_$$fn__java_util_Map_Entry_$LambdaAdaptor$7;\n    this.$ctor__java_util_Map_Entry_$LambdaAdaptor$7__java_util_Comparator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$7($JsFunction)'.\n   * @param {?function(C_T, C_T):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Map_Entry_$LambdaAdaptor$7__java_util_Comparator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_Map_Entry_$LambdaAdaptor$7 \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_Map_Entry_$LambdaAdaptor$7, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3cC_T\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3cC_T\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$7;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$7);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$7.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$7, $Util.$makeClassName('java.util.Map$Entry$$LambdaAdaptor$7'));\n\n\nComparator.$markImplementor($LambdaAdaptor$7);\nSerializable.$markImplementor($LambdaAdaptor$7);\n\n\nexports \x3d $LambdaAdaptor$7; \n//# sourceMappingURL\x3dMap$Entry$$LambdaAdaptor$7.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map$Entry$$LambdaAdaptor$7.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map$Entry$$LambdaAdaptor$7.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Map.Entry.$LambdaAdaptor$7');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$7 \x3d goog.require('java.util.Map.Entry.$LambdaAdaptor$7$impl');\nexports \x3d $LambdaAdaptor$7;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map$Entry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map$Entry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Map.Entry$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Serializable \x3d goog.forwardDeclare('java.io.Serializable$impl');\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet $LambdaAdaptor$6 \x3d goog.forwardDeclare('java.util.Map.Entry.$LambdaAdaptor$6$impl');\nlet $LambdaAdaptor$7 \x3d goog.forwardDeclare('java.util.Map.Entry.$LambdaAdaptor$7$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @template C_Entry_K, C_Entry_V\n */\nclass Entry {\n  /**\n   * @abstract\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_Entry_K}\n   * @public\n   */\n  m_getKey__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_Entry_V}\n   * @public\n   */\n  m_getValue__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_Entry_V} value\n   * @return {C_Entry_V}\n   * @public\n   */\n  m_setValue__java_lang_Object(value) {\n  }\n  \n  /**\n   * @template M_Entry_comparingByKey_K, M_Entry_comparingByKey_V\n   * @return {Comparator\x3cEntry\x3cM_Entry_comparingByKey_K, M_Entry_comparingByKey_V\x3e\x3e}\n   * @public\n   */\n  static m_comparingByKey__() {\n    Entry.$clinit();\n    return /**@type {Comparator\x3cEntry\x3c(Comparable|boolean|number|string), *\x3e\x3e} */ (Entry.m_comparingByKey__java_util_Comparator(/**@type {Comparator\x3c(Comparable|boolean|number|string)\x3e} */ (Comparator.m_naturalOrder__())));\n  }\n  \n  /**\n   * @template M_Entry_comparingByKey_K, M_Entry_comparingByKey_V\n   * @param {Comparator\x3c?\x3e} cmp\n   * @return {Comparator\x3cEntry\x3cM_Entry_comparingByKey_K, M_Entry_comparingByKey_V\x3e\x3e}\n   * @public\n   */\n  static m_comparingByKey__java_util_Comparator(cmp) {\n    Entry.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(cmp);\n    return /**@type {Comparator\x3cEntry\x3c*, *\x3e\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$6(((/** Entry\x3c*, *\x3e */ a, /** Entry\x3c*, *\x3e */ b) \x3d\x3e{\n      return cmp.m_compare__java_lang_Object__java_lang_Object(a.m_getKey__(), b.m_getKey__());\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @template M_Entry_comparingByValue_K, M_Entry_comparingByValue_V\n   * @return {Comparator\x3cEntry\x3cM_Entry_comparingByValue_K, M_Entry_comparingByValue_V\x3e\x3e}\n   * @public\n   */\n  static m_comparingByValue__() {\n    Entry.$clinit();\n    return /**@type {Comparator\x3cEntry\x3c*, (Comparable|boolean|number|string)\x3e\x3e} */ (Entry.m_comparingByValue__java_util_Comparator(/**@type {Comparator\x3c(Comparable|boolean|number|string)\x3e} */ (Comparator.m_naturalOrder__())));\n  }\n  \n  /**\n   * @template M_Entry_comparingByValue_K, M_Entry_comparingByValue_V\n   * @param {Comparator\x3c?\x3e} cmp\n   * @return {Comparator\x3cEntry\x3cM_Entry_comparingByValue_K, M_Entry_comparingByValue_V\x3e\x3e}\n   * @public\n   */\n  static m_comparingByValue__java_util_Comparator(cmp) {\n    Entry.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(cmp);\n    return /**@type {Comparator\x3cEntry\x3c*, *\x3e\x3e} */ ($Casts.$to($Casts.$to(new $LambdaAdaptor$7(((/** Entry\x3c*, *\x3e */ a, /** Entry\x3c*, *\x3e */ b) \x3d\x3e{\n      return cmp.m_compare__java_lang_Object__java_lang_Object(a.m_getValue__(), b.m_getValue__());\n    })), Comparator), Serializable));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Map_Entry \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Map_Entry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Map_Entry;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Entry.$clinit \x3d function() {};\n    Serializable \x3d goog.module.get('java.io.Serializable$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    $LambdaAdaptor$6 \x3d goog.module.get('java.util.Map.Entry.$LambdaAdaptor$6$impl');\n    $LambdaAdaptor$7 \x3d goog.module.get('java.util.Map.Entry.$LambdaAdaptor$7$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Entry, $Util.$makeClassName('java.util.Map$Entry'));\n\n\nEntry.$markImplementor(/** @type {Function} */ (Entry));\n\n\nexports \x3d Entry; \n//# sourceMappingURL\x3dMap$Entry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map$Entry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map$Entry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Map.Entry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$LambdaAdaptor$6 \x3d goog.require('java.util.Map.Entry.$LambdaAdaptor$6');\nconst _$LambdaAdaptor$7 \x3d goog.require('java.util.Map.Entry.$LambdaAdaptor$7');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Entry \x3d goog.require('java.util.Map.Entry$impl');\nexports \x3d Entry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Set.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Set.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Set$impl');\n\n\nconst Collection \x3d goog.require('java.util.Collection$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Collection\x3cC_E\x3e}\n */\nclass Set {\n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @template C_E\n   * @param {Set\x3cC_E\x3e} $thisArg\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  static m_spliterator__$default__java_util_Set($thisArg) {\n    Set.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ (Spliterators.m_spliterator__java_util_Collection__int($thisArg, Spliterator.f_DISTINCT__java_util_Spliterator));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Collection.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Set \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Set;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Set;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Set.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Set, $Util.$makeClassName('java.util.Set'));\n\n\nSet.$markImplementor(/** @type {Function} */ (Set));\n\n\nexports \x3d Set; \n//# sourceMappingURL\x3dSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Set.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Set.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Set');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\n\n\n// Re-exports the implementation.\nvar Set \x3d goog.require('java.util.Set$impl');\nexports \x3d Set;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.BiConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.BiConsumer.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T, C_U\n */\nclass BiConsumer {\n  /**\n   * @abstract\n   * @param {C_T} t\n   * @param {C_U} u\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__java_lang_Object(t, u) {\n  }\n  \n  /**\n   * @abstract\n   * @param {BiConsumer\x3c?, ?\x3e} after\n   * @return {BiConsumer\x3cC_T, C_U\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_BiConsumer(after) {\n  }\n  \n  /**\n   * @template C_T, C_U\n   * @param {?function(C_T, C_U):void} fn\n   * @return {BiConsumer\x3cC_T, C_U\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    BiConsumer.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*, *\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template C_T, C_U\n   * @param {BiConsumer\x3cC_T, C_U\x3e} $thisArg\n   * @param {BiConsumer\x3c?, ?\x3e} after\n   * @return {BiConsumer\x3cC_T, C_U\x3e}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_BiConsumer__java_util_function_BiConsumer($thisArg, after) {\n    BiConsumer.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return /**@type {BiConsumer\x3c*, *\x3e} */ (BiConsumer.$adapt(((/** * */ t, /** * */ u) \x3d\x3e{\n      $thisArg.m_accept__java_lang_Object__java_lang_Object(t, u);\n      after.m_accept__java_lang_Object__java_lang_Object(t, u);\n    })));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_BiConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_BiConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_BiConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BiConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.BiConsumer.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(BiConsumer, $Util.$makeClassName('java.util.function.BiConsumer'));\n\n\nBiConsumer.$markImplementor(/** @type {Function} */ (BiConsumer));\n\n\nexports \x3d BiConsumer; \n//# sourceMappingURL\x3dBiConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.BiConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst BiConsumer \x3d goog.require('java.util.function.BiConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T, C_U\n * @implements {BiConsumer\x3cC_T, C_U\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_U):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, C_U):void} */\n    this.f_$$fn__java_util_function_BiConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_BiConsumer_$LambdaAdaptor__java_util_function_BiConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_U):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_BiConsumer_$LambdaAdaptor__java_util_function_BiConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_BiConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_U} arg1\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__java_lang_Object(arg0, arg1) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_BiConsumer_$LambdaAdaptor;\n      $function(arg0, arg1);\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {BiConsumer\x3cC_T, C_U\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_BiConsumer(arg0) {\n    return /**@type {BiConsumer\x3cC_T, C_U\x3e} */ (BiConsumer.m_andThen__$default__java_util_function_BiConsumer__java_util_function_BiConsumer(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    BiConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.BiConsumer$$LambdaAdaptor'));\n\n\nBiConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dBiConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.BiConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.BiConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.BiConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.BiConsumer.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar BiConsumer \x3d goog.require('java.util.function.BiConsumer$impl');\nexports \x3d BiConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.BiFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.BiFunction.$LambdaAdaptor$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T, C_U, C_R\n */\nclass BiFunction {\n  /**\n   * @abstract\n   * @param {C_T} t\n   * @param {C_U} u\n   * @return {C_R}\n   * @public\n   */\n  m_apply__java_lang_Object__java_lang_Object(t, u) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} after\n   * @return {BiFunction\x3cC_T, C_U, M_V\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Function(after) {\n  }\n  \n  /**\n   * @template C_T, C_U, C_R\n   * @param {?function(C_T, C_U):C_R} fn\n   * @return {BiFunction\x3cC_T, C_U, C_R\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    BiFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*, *, *\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @template M_V, C_T, C_U, C_R\n   * @param {BiFunction\x3cC_T, C_U, C_R\x3e} $thisArg\n   * @param {j_u_function_Function\x3c?, ?\x3e} after\n   * @return {BiFunction\x3cC_T, C_U, M_V\x3e}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_BiFunction__java_util_function_Function($thisArg, after) {\n    BiFunction.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return /**@type {BiFunction\x3c*, *, *\x3e} */ (BiFunction.$adapt(((/** * */ t, /** * */ u) \x3d\x3e{\n      return after.m_apply__java_lang_Object($thisArg.m_apply__java_lang_Object__java_lang_Object(t, u));\n    })));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_BiFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_BiFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_BiFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BiFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.BiFunction.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(BiFunction, $Util.$makeClassName('java.util.function.BiFunction'));\n\n\nBiFunction.$markImplementor(/** @type {Function} */ (BiFunction));\n\n\nexports \x3d BiFunction; \n//# sourceMappingURL\x3dBiFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.BiFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst BiFunction \x3d goog.require('java.util.function.BiFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\n\n\n/**\n * @template C_T, C_U, C_R\n * @implements {BiFunction\x3cC_T, C_U, C_R\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_U):C_R} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, C_U):C_R} */\n    this.f_$$fn__java_util_function_BiFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_BiFunction_$LambdaAdaptor__java_util_function_BiFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_U):C_R} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_BiFunction_$LambdaAdaptor__java_util_function_BiFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_BiFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_U} arg1\n   * @return {C_R}\n   * @public\n   */\n  m_apply__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_U):C_R */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_BiFunction_$LambdaAdaptor, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {BiFunction\x3cC_T, C_U, M_V\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Function(arg0) {\n    return /**@type {BiFunction\x3cC_T, C_U, *\x3e} */ (BiFunction.m_andThen__$default__java_util_function_BiFunction__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    BiFunction.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.BiFunction$$LambdaAdaptor'));\n\n\nBiFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dBiFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.BiFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.BiFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BiFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BiFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.BiFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.BiFunction.$LambdaAdaptor');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar BiFunction \x3d goog.require('java.util.function.BiFunction$impl');\nexports \x3d BiFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Map$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @template C_K, C_V\n */\nclass Map {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  clear() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {BiFunction\x3c?, ?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(key, remappingFunction) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {j_u_function_Function\x3c?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(key, remappingFunction) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {BiFunction\x3c?, ?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(key, remappingFunction) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  containsKey(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  containsValue(value) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {BiConsumer\x3c?, ?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(consumer) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  get(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} key\n   * @param {C_V} defaultValue\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(key, defaultValue) {\n  }\n  \n  /**\n   * @abstract\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n  }\n  \n  /**\n   * @abstract\n   * @return {!Set\x3cC_K\x3e}\n   * @public\n   */\n  keySet() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {C_V} value\n   * @param {BiFunction\x3c?, ?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(key, value, remappingFunction) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(key, value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Map\x3c?, ?\x3e} t\n   * @return {void}\n   * @public\n   */\n  putAll(t) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  remove(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} key\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(key, value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  replace(key, value) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @param {C_V} oldValue\n   * @param {C_V} newValue\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(key, oldValue, newValue) {\n  }\n  \n  /**\n   * @abstract\n   * @param {BiFunction\x3c?, ?, ?\x3e} function$1$\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(function$1$) {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  size() {\n  }\n  \n  /**\n   * @abstract\n   * @return {!Collection\x3cC_V\x3e}\n   * @public\n   */\n  values() {\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {BiFunction\x3c?, ?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  static m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction($thisArg, key, remappingFunction) {\n    Map.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(remappingFunction);\n    let value \x3d remappingFunction.m_apply__java_lang_Object__java_lang_Object(key, $thisArg.get(key));\n    if (!$Equality.$same(value, null)) {\n      $thisArg.put(key, value);\n    } else {\n      $thisArg.remove(key);\n    }\n    return value;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {j_u_function_Function\x3c?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  static m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function($thisArg, key, remappingFunction) {\n    Map.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(remappingFunction);\n    let value \x3d $thisArg.get(key);\n    if ($Equality.$same(value, null)) {\n      value \x3d remappingFunction.m_apply__java_lang_Object(key);\n      if (!$Equality.$same(value, null)) {\n        $thisArg.put(key, value);\n      }\n    }\n    return value;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {BiFunction\x3c?, ?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  static m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction($thisArg, key, remappingFunction) {\n    Map.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(remappingFunction);\n    let value \x3d $thisArg.get(key);\n    if (!$Equality.$same(value, null)) {\n      value \x3d remappingFunction.m_apply__java_lang_Object__java_lang_Object(key, value);\n      if (!$Equality.$same(value, null)) {\n        $thisArg.put(key, value);\n      } else {\n        $thisArg.remove(key);\n      }\n    }\n    return value;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {BiConsumer\x3c?, ?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  static m_forEach__$default__java_util_Map__java_util_function_BiConsumer($thisArg, consumer) {\n    Map.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    for (let $iterator \x3d $thisArg.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      consumer.m_accept__java_lang_Object__java_lang_Object(entry.m_getKey__(), entry.m_getValue__());\n    }\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {*} key\n   * @param {C_V} defaultValue\n   * @return {C_V}\n   * @public\n   */\n  static m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object($thisArg, key, defaultValue) {\n    Map.$clinit();\n    let currentValue \x3d $thisArg.get(key);\n    return ($Equality.$same(currentValue, null) \x26\x26 !$thisArg.containsKey(key)) ? defaultValue : currentValue;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {C_V} value\n   * @param {BiFunction\x3c?, ?, ?\x3e} remappingFunction\n   * @return {C_V}\n   * @public\n   */\n  static m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction($thisArg, key, value, remappingFunction) {\n    Map.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(remappingFunction);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(value);\n    let currentValue \x3d $thisArg.get(key);\n    let newValue \x3d $Equality.$same(currentValue, null) ? value : remappingFunction.m_apply__java_lang_Object__java_lang_Object(currentValue, value);\n    if ($Equality.$same(newValue, null)) {\n      $thisArg.remove(key);\n    } else {\n      $thisArg.put(key, newValue);\n    }\n    return newValue;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  static m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object($thisArg, key, value) {\n    Map.$clinit();\n    let currentValue \x3d $thisArg.get(key);\n    return !$Equality.$same(currentValue, null) ? currentValue : $thisArg.put(key, value);\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {*} key\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  static m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object($thisArg, key, value) {\n    Map.$clinit();\n    let currentValue \x3d $thisArg.get(key);\n    if (!Objects.m_equals__java_lang_Object__java_lang_Object(currentValue, value) || ($Equality.$same(currentValue, null) \x26\x26 !$thisArg.containsKey(key))) {\n      return false;\n    }\n    $thisArg.remove(key);\n    return true;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  static m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object($thisArg, key, value) {\n    Map.$clinit();\n    return $thisArg.containsKey(key) ? $thisArg.put(key, value) : null;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {C_K} key\n   * @param {C_V} oldValue\n   * @param {C_V} newValue\n   * @return {boolean}\n   * @public\n   */\n  static m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object($thisArg, key, oldValue, newValue) {\n    Map.$clinit();\n    let currentValue \x3d $thisArg.get(key);\n    if (!Objects.m_equals__java_lang_Object__java_lang_Object(currentValue, oldValue) || ($Equality.$same(currentValue, null) \x26\x26 !$thisArg.containsKey(key))) {\n      return false;\n    }\n    $thisArg.put(key, newValue);\n    return true;\n  }\n  \n  /**\n   * @template C_K, C_V\n   * @param {Map\x3cC_K, C_V\x3e} $thisArg\n   * @param {BiFunction\x3c?, ?, ?\x3e} function$1$\n   * @return {void}\n   * @public\n   */\n  static m_replaceAll__$default__java_util_Map__java_util_function_BiFunction($thisArg, function$1$) {\n    Map.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(function$1$);\n    for (let $iterator \x3d $thisArg.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      entry.m_setValue__java_lang_Object(function$1$.m_apply__java_lang_Object__java_lang_Object(entry.m_getKey__(), entry.m_getValue__()));\n    }\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Map \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Map;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Map;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Map.$clinit \x3d function() {};\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Map, $Util.$makeClassName('java.util.Map'));\n\n\nMap.$markImplementor(/** @type {Function} */ (Map));\n\n\nexports \x3d Map; \n//# sourceMappingURL\x3dMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Map.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Map.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Map');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Set \x3d goog.require('java.util.Set');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Map \x3d goog.require('java.util.Map$impl');\nexports \x3d Map;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractSet$impl');\n\n\nconst AbstractCollection \x3d goog.require('java.util.AbstractCollection$impl');\nconst Set \x3d goog.require('java.util.Set$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @abstract\n * @template C_E\n * @extends {AbstractCollection\x3cC_E\x3e}\n * @implements {Set\x3cC_E\x3e}\n  */\nclass AbstractSet extends AbstractCollection {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractSet()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractSet__() {\n    this.$ctor__java_util_AbstractCollection__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    if ($Equality.$same(o, this)) {\n      return true;\n    }\n    if (!Set.$isInstance(o)) {\n      return false;\n    }\n    let other \x3d /**@type {Set\x3c*\x3e} */ ($Casts.$to(o, Set));\n    if (other.size() !\x3d this.size()) {\n      return false;\n    }\n    return this.containsAll(other);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Collections.m_hashCode__java_lang_Iterable_$pp_java_util(this);\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  removeAll(c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    let size \x3d this.size();\n    if (size \x3c c.size()) {\n      for (let iter \x3d this.m_iterator__(); iter.m_hasNext__(); ) {\n        let o \x3d iter.m_next__();\n        if (c.contains(o)) {\n          iter.m_remove__();\n        }\n      }\n    } else {\n      for (let $iterator \x3d c.m_iterator__(); $iterator.m_hasNext__(); ) {\n        let o$1$ \x3d $iterator.m_next__();\n        this.remove(o$1$);\n      }\n    }\n    return (size !\x3d this.size());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractSet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractSet.$clinit \x3d function() {};\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractCollection.$clinit();\n    Set.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractSet, $Util.$makeClassName('java.util.AbstractSet'));\n\n\nSet.$markImplementor(AbstractSet);\n\n\nexports \x3d AbstractSet; \n//# sourceMappingURL\x3dAbstractSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractCollection \x3d goog.require('java.util.AbstractCollection');\nconst _Set \x3d goog.require('java.util.Set');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nexports \x3d AbstractSet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$1$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$1$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.$1.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $1 \x3d goog.forwardDeclare('java.util.AbstractMap.$1$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cC_K\x3e}\n  */\nclass $1_$1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {$1\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractMap_1_1;\n    /** @public {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.$c_outerIter;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(new AbstractSet, Iterator)'.\n   * @template C_K, C_V\n   * @param {$1\x3cC_K, C_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} $c_outerIter\n   * @return {!$1_$1\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractMap_1__java_util_Iterator($outer_this, $c_outerIter) {\n    $1_$1.$clinit();\n    let $instance \x3d new $1_$1();\n    $instance.$ctor__java_util_AbstractMap_1_1__java_util_AbstractMap_1__java_util_Iterator($outer_this, $c_outerIter);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(new AbstractSet, Iterator)'.\n   * @param {$1\x3cC_K, C_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} $c_outerIter\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_1_1__java_util_AbstractMap_1__java_util_Iterator($outer_this, $c_outerIter) {\n    this.f_$outer_this__java_util_AbstractMap_1_1 \x3d $outer_this;\n    this.$c_outerIter \x3d $c_outerIter;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.$c_outerIter.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {C_K}\n   * @public\n   */\n  m_next__() {\n    let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.$c_outerIter.m_next__(), Entry));\n    return entry.m_getKey__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.$c_outerIter.m_remove__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1_$1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1_$1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1_$1.$clinit \x3d function() {};\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1_$1, $Util.$makeClassName('java.util.AbstractMap$1$1'));\n\n\nIterator.$markImplementor($1_$1);\n\n\nexports \x3d $1_$1; \n//# sourceMappingURL\x3dAbstractMap$1$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$1$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$1$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.$1.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$1 \x3d goog.require('java.util.AbstractMap.$1');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1_$1 \x3d goog.require('java.util.AbstractMap.$1.$1$impl');\nexports \x3d $1_$1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.$1$impl');\n\n\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet AbstractMap \x3d goog.forwardDeclare('java.util.AbstractMap$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.AbstractMap.$1.$1$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractSet\x3cC_K\x3e}\n  */\nclass AbstractMap_$1 extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractMap_1;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSet(AbstractMap)'.\n   * @template C_K, C_V\n   * @param {AbstractMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!AbstractMap_$1\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractMap($outer_this) {\n    AbstractMap_$1.$clinit();\n    let $instance \x3d new AbstractMap_$1();\n    $instance.$ctor__java_util_AbstractMap_1__java_util_AbstractMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSet(AbstractMap)'.\n   * @param {AbstractMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_1__java_util_AbstractMap($outer_this) {\n    this.f_$outer_this__java_util_AbstractMap_1 \x3d $outer_this;\n    this.$ctor__java_util_AbstractSet__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_$outer_this__java_util_AbstractMap_1.clear();\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  contains(key) {\n    return this.f_$outer_this__java_util_AbstractMap_1.containsKey(key);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_K\x3e}\n   * @public\n   */\n  m_iterator__() {\n    let outerIter \x3d this.f_$outer_this__java_util_AbstractMap_1.m_entrySet__().m_iterator__();\n    return /**@type {!$1\x3cC_K, C_V\x3e} */ ($1.$create__java_util_AbstractMap_1__java_util_Iterator(this, outerIter));\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  remove(key) {\n    if (this.f_$outer_this__java_util_AbstractMap_1.containsKey(key)) {\n      this.f_$outer_this__java_util_AbstractMap_1.remove(key);\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_$outer_this__java_util_AbstractMap_1.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_K\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_K\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_K\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_K\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_K\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_K\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractMap_$1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractMap_$1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractMap_$1.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    $1 \x3d goog.module.get('java.util.AbstractMap.$1.$1$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    AbstractSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractMap_$1, $Util.$makeClassName('java.util.AbstractMap$1'));\n\n\n\n\nexports \x3d AbstractMap_$1; \n//# sourceMappingURL\x3dAbstractMap$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _AbstractMap \x3d goog.require('java.util.AbstractMap');\nconst _$1 \x3d goog.require('java.util.AbstractMap.$1.$1');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar AbstractMap_$1 \x3d goog.require('java.util.AbstractMap.$1$impl');\nexports \x3d AbstractMap_$1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$2$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$2$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.$2.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $2 \x3d goog.forwardDeclare('java.util.AbstractMap.$2$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cC_V\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {$2\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractMap_2_1;\n    /** @public {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.$c_outerIter;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(new AbstractCollection, Iterator)'.\n   * @template C_K, C_V\n   * @param {$2\x3cC_K, C_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} $c_outerIter\n   * @return {!$1\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractMap_2__java_util_Iterator($outer_this, $c_outerIter) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_AbstractMap_2_1__java_util_AbstractMap_2__java_util_Iterator($outer_this, $c_outerIter);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(new AbstractCollection, Iterator)'.\n   * @param {$2\x3cC_K, C_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} $c_outerIter\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_2_1__java_util_AbstractMap_2__java_util_Iterator($outer_this, $c_outerIter) {\n    this.f_$outer_this__java_util_AbstractMap_2_1 \x3d $outer_this;\n    this.$c_outerIter \x3d $c_outerIter;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.$c_outerIter.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {C_V}\n   * @public\n   */\n  m_next__() {\n    let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.$c_outerIter.m_next__(), Entry));\n    return entry.m_getValue__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.$c_outerIter.m_remove__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.AbstractMap$2$1'));\n\n\nIterator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dAbstractMap$2$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$2$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$2$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.$2.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$2 \x3d goog.require('java.util.AbstractMap.$2');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.AbstractMap.$2.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.$2$impl');\n\n\nconst AbstractCollection \x3d goog.require('java.util.AbstractCollection$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet AbstractMap \x3d goog.forwardDeclare('java.util.AbstractMap$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.AbstractMap.$2.$1$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractCollection\x3cC_V\x3e}\n  */\nclass $2 extends AbstractCollection {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractMap_2;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractCollection(AbstractMap)'.\n   * @template C_K, C_V\n   * @param {AbstractMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!$2\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractMap($outer_this) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_AbstractMap_2__java_util_AbstractMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractCollection(AbstractMap)'.\n   * @param {AbstractMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_2__java_util_AbstractMap($outer_this) {\n    this.f_$outer_this__java_util_AbstractMap_2 \x3d $outer_this;\n    this.$ctor__java_util_AbstractCollection__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_$outer_this__java_util_AbstractMap_2.clear();\n  }\n  \n  /**\n   * @override\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  contains(value) {\n    return this.f_$outer_this__java_util_AbstractMap_2.containsValue(value);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_V\x3e}\n   * @public\n   */\n  m_iterator__() {\n    let outerIter \x3d this.f_$outer_this__java_util_AbstractMap_2.m_entrySet__().m_iterator__();\n    return /**@type {!$1\x3cC_K, C_V\x3e} */ ($1.$create__java_util_AbstractMap_2__java_util_Iterator(this, outerIter));\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_$outer_this__java_util_AbstractMap_2.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_V\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_V\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_V\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_V\x3e} */ (Collection.m_spliterator__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_V\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_V\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    $1 \x3d goog.module.get('java.util.AbstractMap.$2.$1$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    AbstractCollection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.AbstractMap$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dAbstractMap$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractCollection \x3d goog.require('java.util.AbstractCollection');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _AbstractMap \x3d goog.require('java.util.AbstractMap');\nconst _$1 \x3d goog.require('java.util.AbstractMap.$2.$1');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.AbstractMap.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$AbstractEntry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$AbstractEntry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.AbstractEntry$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Entry \x3d goog.require('java.util.Map.Entry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @abstract\n * @template C_AbstractEntry_K, C_AbstractEntry_V\n * @implements {Entry\x3cC_AbstractEntry_K, C_AbstractEntry_V\x3e}\n  */\nclass AbstractEntry extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {C_AbstractEntry_K} */\n    this.f_key__java_util_AbstractMap_AbstractEntry_;\n    /** @public {C_AbstractEntry_V} */\n    this.f_value__java_util_AbstractMap_AbstractEntry_;\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractEntry(Object, Object)'.\n   * @param {C_AbstractEntry_K} key\n   * @param {C_AbstractEntry_V} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_AbstractEntry__java_lang_Object__java_lang_Object(key, value) {\n    this.$ctor__java_lang_Object__();\n    this.f_key__java_util_AbstractMap_AbstractEntry_ \x3d key;\n    this.f_value__java_util_AbstractMap_AbstractEntry_ \x3d value;\n  }\n  \n  /**\n   * @override\n   * @return {C_AbstractEntry_K}\n   * @public\n   */\n  m_getKey__() {\n    return this.f_key__java_util_AbstractMap_AbstractEntry_;\n  }\n  \n  /**\n   * @override\n   * @return {C_AbstractEntry_V}\n   * @public\n   */\n  m_getValue__() {\n    return this.f_value__java_util_AbstractMap_AbstractEntry_;\n  }\n  \n  /**\n   * @override\n   * @param {C_AbstractEntry_V} value\n   * @return {C_AbstractEntry_V}\n   * @public\n   */\n  m_setValue__java_lang_Object(value) {\n    let oldValue \x3d this.f_value__java_util_AbstractMap_AbstractEntry_;\n    this.f_value__java_util_AbstractMap_AbstractEntry_ \x3d value;\n    return oldValue;\n  }\n  \n  /**\n   * @override\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  equals(other) {\n    if (!Entry.$isInstance(other)) {\n      return false;\n    }\n    let entry \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(other, Entry));\n    return Objects.m_equals__java_lang_Object__java_lang_Object(this.f_key__java_util_AbstractMap_AbstractEntry_, entry.m_getKey__()) \x26\x26 Objects.m_equals__java_lang_Object__java_lang_Object(this.f_value__java_util_AbstractMap_AbstractEntry_, entry.m_getValue__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Objects.m_hashCode__java_lang_Object(this.f_key__java_util_AbstractMap_AbstractEntry_) ^ Objects.m_hashCode__java_lang_Object(this.f_value__java_util_AbstractMap_AbstractEntry_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return j_l_String.m_valueOf__java_lang_Object(this.f_key__java_util_AbstractMap_AbstractEntry_) + \"\x3d\" + j_l_String.m_valueOf__java_lang_Object(this.f_value__java_util_AbstractMap_AbstractEntry_);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractEntry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractEntry);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractEntry.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractEntry, $Util.$makeClassName('java.util.AbstractMap$AbstractEntry'));\n\n\nEntry.$markImplementor(AbstractEntry);\n\n\nexports \x3d AbstractEntry; \n//# sourceMappingURL\x3dAbstractMap$AbstractEntry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$AbstractEntry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$AbstractEntry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.AbstractEntry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AbstractEntry \x3d goog.require('java.util.AbstractMap.AbstractEntry$impl');\nexports \x3d AbstractEntry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$SimpleEntry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$SimpleEntry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.SimpleEntry$impl');\n\n\nconst AbstractEntry \x3d goog.require('java.util.AbstractMap.AbstractEntry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\n\n\n/**\n * @template C_SimpleEntry_K, C_SimpleEntry_V\n * @extends {AbstractEntry\x3cC_SimpleEntry_K, C_SimpleEntry_V\x3e}\n  */\nclass SimpleEntry extends AbstractEntry {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SimpleEntry(Object, Object)'.\n   * @template C_SimpleEntry_K, C_SimpleEntry_V\n   * @param {C_SimpleEntry_K} key\n   * @param {C_SimpleEntry_V} value\n   * @return {!SimpleEntry\x3cC_SimpleEntry_K, C_SimpleEntry_V\x3e}\n   * @public\n   */\n  static $create__java_lang_Object__java_lang_Object(key, value) {\n    SimpleEntry.$clinit();\n    let $instance \x3d new SimpleEntry();\n    $instance.$ctor__java_util_AbstractMap_SimpleEntry__java_lang_Object__java_lang_Object(key, value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SimpleEntry(Object, Object)'.\n   * @param {C_SimpleEntry_K} key\n   * @param {C_SimpleEntry_V} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_SimpleEntry__java_lang_Object__java_lang_Object(key, value) {\n    this.$ctor__java_util_AbstractMap_AbstractEntry__java_lang_Object__java_lang_Object(key, value);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SimpleEntry(Entry)'.\n   * @template C_SimpleEntry_K, C_SimpleEntry_V\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {!SimpleEntry\x3cC_SimpleEntry_K, C_SimpleEntry_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map_Entry(entry) {\n    SimpleEntry.$clinit();\n    let $instance \x3d new SimpleEntry();\n    $instance.$ctor__java_util_AbstractMap_SimpleEntry__java_util_Map_Entry(entry);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SimpleEntry(Entry)'.\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_SimpleEntry__java_util_Map_Entry(entry) {\n    this.$ctor__java_util_AbstractMap_AbstractEntry__java_lang_Object__java_lang_Object(entry.m_getKey__(), entry.m_getValue__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SimpleEntry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SimpleEntry);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SimpleEntry.$clinit \x3d function() {};\n    AbstractEntry.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SimpleEntry, $Util.$makeClassName('java.util.AbstractMap$SimpleEntry'));\n\n\n\n\nexports \x3d SimpleEntry; \n//# sourceMappingURL\x3dAbstractMap$SimpleEntry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$SimpleEntry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$SimpleEntry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.SimpleEntry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractEntry \x3d goog.require('java.util.AbstractMap.AbstractEntry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\n\n\n// Re-exports the implementation.\nvar SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry$impl');\nexports \x3d SimpleEntry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Appendable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Appendable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Appendable$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\n\n\n/**\n * @interface\n */\nclass Appendable {\n  /**\n   * @abstract\n   * @param {number} c\n   * @return {Appendable}\n   * @public\n   */\n  m_append__char(c) {\n  }\n  \n  /**\n   * @abstract\n   * @param {(CharSequence|string)} charSquence\n   * @return {Appendable}\n   * @public\n   */\n  m_append__java_lang_CharSequence(charSquence) {\n  }\n  \n  /**\n   * @abstract\n   * @param {(CharSequence|string)} charSquence\n   * @param {number} start\n   * @param {number} end\n   * @return {Appendable}\n   * @public\n   */\n  m_append__java_lang_CharSequence__int__int(charSquence, start, end) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_Appendable \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_lang_Appendable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_Appendable;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Appendable.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Appendable, $Util.$makeClassName('java.lang.Appendable'));\n\n\nAppendable.$markImplementor(/** @type {Function} */ (Appendable));\n\n\nexports \x3d Appendable; \n//# sourceMappingURL\x3dAppendable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Appendable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Appendable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Appendable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\n\n\n// Re-exports the implementation.\nvar Appendable \x3d goog.require('java.lang.Appendable$impl');\nexports \x3d Appendable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/CharSequence.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.CharSequence.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.CharSequence$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $1 \x3d goog.forwardDeclare('java.lang.CharSequence.$1$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.lang.HasCharSequenceTypeMarker.$Overlay$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @interface\n */\nclass CharSequence {\n  /**\n   * @abstract\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  m_charAt__int(index) {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_length__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} start\n   * @param {number} end\n   * @return {(CharSequence|string)}\n   * @public\n   */\n  m_subSequence__int__int(start, end) {\n  }\n  \n  /**\n   * @abstract\n   * @return {?string}\n   * @public\n   */\n  toString() {\n  }\n  \n  /**\n   * @abstract\n   * @return {IntStream}\n   * @public\n   */\n  m_chars__() {\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    CharSequence.$clinit();\n    if (j_l_String.m_equals__java_lang_String__java_lang_Object(typeof(instance), \"string\")) {\n      return true;\n    }\n    return !$Equality.$same(instance, null) \x26\x26 instance.$implements__java_lang_CharSequence \x3d\x3d true;\n  }\n  \n  /**\n   * @param {(CharSequence|string)} $thisArg\n   * @return {IntStream}\n   * @public\n   */\n  static m_chars__$default__java_lang_CharSequence($thisArg) {\n    CharSequence.$clinit();\n    return StreamSupport.m_intStream__java_util_function_Supplier__int__boolean(Supplier.$adapt((() \x3d\x3e{\n      let it \x3d $1.$create__java_lang_CharSequence($thisArg);\n      return Spliterators.m_spliterator__java_util_PrimitiveIterator_OfInt__long__int(it, $Primitives.$widenIntToLong($CharSequences.m_length__java_lang_CharSequence($thisArg)), Spliterator.f_ORDERED__java_util_Spliterator);\n    })), Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator, false);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_CharSequence \x3d true;\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_CharSequence;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    CharSequence.$clinit \x3d function() {};\n    $1 \x3d goog.module.get('java.lang.CharSequence.$1$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    Supplier \x3d goog.module.get('java.util.function.Supplier$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(CharSequence, $Util.$makeClassName('java.lang.CharSequence'));\n\n\nCharSequence.$markImplementor(/** @type {Function} */ (CharSequence));\n\n\nexports \x3d CharSequence; \n//# sourceMappingURL\x3dCharSequence.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AbstractStringBuilder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AbstractStringBuilder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.AbstractStringBuilder$impl');\n\n\nconst Appendable \x3d goog.require('java.lang.Appendable$impl');\nconst CharSequence \x3d goog.require('java.lang.CharSequence$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\n\n\n/**\n * @abstract\n * @implements {CharSequence}\n * @implements {Appendable}\n  */\nclass AbstractStringBuilder extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_string__java_lang_AbstractStringBuilder;\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractStringBuilder(String)'.\n   * @param {?string} string$1$\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AbstractStringBuilder__java_lang_String(string$1$) {\n    this.$ctor__java_lang_Object__();\n    this.f_string__java_lang_AbstractStringBuilder \x3d string$1$;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_length__() {\n    return j_l_String.m_length__java_lang_String(this.f_string__java_lang_AbstractStringBuilder);\n  }\n  \n  /**\n   * @param {number} newLength\n   * @return {void}\n   * @public\n   */\n  m_setLength__int(newLength) {\n    let oldLength \x3d this.m_length__();\n    if (newLength \x3c oldLength) {\n      this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_substring__java_lang_String__int__int(this.f_string__java_lang_AbstractStringBuilder, 0, newLength);\n    } else if (newLength \x3e oldLength) {\n      this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__arrayOf_char(/**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength - oldLength], $char))));\n    }\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_capacity__() {\n    return Integer.f_MAX_VALUE__java_lang_Integer;\n  }\n  \n  /**\n   * @param {number} ignoredCapacity\n   * @return {void}\n   * @public\n   */\n  m_ensureCapacity__int(ignoredCapacity) {\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_trimToSize__() {\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  m_charAt__int(index) {\n    return j_l_String.m_charAt__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, index);\n  }\n  \n  /**\n   * @param {number} srcStart\n   * @param {number} srcEnd\n   * @param {Array\x3cnumber\x3e} dst\n   * @param {number} dstStart\n   * @return {void}\n   * @public\n   */\n  m_getChars__int__int__arrayOf_char__int(srcStart, srcEnd, dst, dstStart) {\n    j_l_String.m_getChars__java_lang_String__int__int__arrayOf_char__int(this.f_string__java_lang_AbstractStringBuilder, srcStart, srcEnd, dst, dstStart);\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_setCharAt__int__char(index, x) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(index, index + 1, j_l_String.m_valueOf__char(x));\n  }\n  \n  /**\n   * @override\n   * @param {number} start\n   * @param {number} end\n   * @return {(CharSequence|string)}\n   * @public\n   */\n  m_subSequence__int__int(start, end) {\n    return j_l_String.m_substring__java_lang_String__int__int(this.f_string__java_lang_AbstractStringBuilder, start, end);\n  }\n  \n  /**\n   * @param {number} begin\n   * @return {?string}\n   * @public\n   */\n  m_substring__int(begin) {\n    return j_l_String.m_substring__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, begin);\n  }\n  \n  /**\n   * @param {number} begin\n   * @param {number} end\n   * @return {?string}\n   * @public\n   */\n  m_substring__int__int(begin, end) {\n    return j_l_String.m_substring__java_lang_String__int__int(this.f_string__java_lang_AbstractStringBuilder, begin, end);\n  }\n  \n  /**\n   * @param {?string} x\n   * @return {number}\n   * @public\n   */\n  m_indexOf__java_lang_String(x) {\n    return j_l_String.m_indexOf__java_lang_String__java_lang_String(this.f_string__java_lang_AbstractStringBuilder, x);\n  }\n  \n  /**\n   * @param {?string} x\n   * @param {number} start\n   * @return {number}\n   * @public\n   */\n  m_indexOf__java_lang_String__int(x, start) {\n    return j_l_String.m_indexOf__java_lang_String__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, x, start);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  m_lastIndexOf__java_lang_String(s) {\n    return j_l_String.m_lastIndexOf__java_lang_String__java_lang_String(this.f_string__java_lang_AbstractStringBuilder, s);\n  }\n  \n  /**\n   * @param {?string} s\n   * @param {number} start\n   * @return {number}\n   * @public\n   */\n  m_lastIndexOf__java_lang_String__int(s, start) {\n    return j_l_String.m_lastIndexOf__java_lang_String__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, s, start);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.f_string__java_lang_AbstractStringBuilder;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_appendCodePoint0__int_$pp_java_lang(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__arrayOf_char(Character.m_toChars__int(x)));\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {?string} toInsert\n   * @return {void}\n   * @public\n   */\n  m_replace0__int__int__java_lang_String_$pp_java_lang(start, end, toInsert) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int__int(this.f_string__java_lang_AbstractStringBuilder, 0, start)) + j_l_String.m_valueOf__java_lang_Object(toInsert) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, end));\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_reverse0___$pp_java_lang() {\n    let length \x3d j_l_String.m_length__java_lang_String(this.f_string__java_lang_AbstractStringBuilder);\n    if (length \x3c\x3d 1) {\n      return;\n    }\n    let buffer \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([length], $char));\n    $Arrays.$set(buffer, 0, j_l_String.m_charAt__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, length - 1));\n    for (let i \x3d 1; i \x3c length; i++) {\n      $Arrays.$set(buffer, i, j_l_String.m_charAt__java_lang_String__int(this.f_string__java_lang_AbstractStringBuilder, length - 1 - i));\n      if (Character.m_isSurrogatePair__char__char(buffer[i], buffer[i - 1])) {\n        AbstractStringBuilder.m_swap__arrayOf_char__int__int_$p_java_lang_AbstractStringBuilder(buffer, i - 1, i);\n      }\n    }\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.$create__arrayOf_char(buffer);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} buffer\n   * @param {number} f\n   * @param {number} s\n   * @return {void}\n   * @public\n   */\n  static m_swap__arrayOf_char__int__int_$p_java_lang_AbstractStringBuilder(buffer, f, s) {\n    AbstractStringBuilder.$clinit();\n    let tmp \x3d buffer[f];\n    $Arrays.$set(buffer, f, buffer[s]);\n    $Arrays.$set(buffer, s, tmp);\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @return {Appendable}\n   * @public\n   */\n  m_append__char(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {(CharSequence|string)} arg0\n   * @return {Appendable}\n   * @public\n   */\n  m_append__java_lang_CharSequence(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {(CharSequence|string)} arg0\n   * @param {number} arg1\n   * @param {number} arg2\n   * @return {Appendable}\n   * @public\n   */\n  m_append__java_lang_CharSequence__int__int(arg0, arg1, arg2) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_chars__() {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractStringBuilder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractStringBuilder);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractStringBuilder.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    j_l_Object.$clinit();\n    CharSequence.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractStringBuilder, $Util.$makeClassName('java.lang.AbstractStringBuilder'));\n\n\nCharSequence.$markImplementor(AbstractStringBuilder);\nAppendable.$markImplementor(AbstractStringBuilder);\n\n\nexports \x3d AbstractStringBuilder; \n//# sourceMappingURL\x3dAbstractStringBuilder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AbstractStringBuilder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AbstractStringBuilder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.AbstractStringBuilder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Appendable \x3d goog.require('java.lang.Appendable');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\n\n\n// Re-exports the implementation.\nvar AbstractStringBuilder \x3d goog.require('java.lang.AbstractStringBuilder$impl');\nexports \x3d AbstractStringBuilder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Numbers.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('vmbootstrap.Numbers$impl');\n\n\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet Number \x3d goog.forwardDeclare('java.lang.Number$impl');\nlet Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * Provides devirtualized method implementations for Numbers.\n */\nclass Numbers {\n  /**\n   * @param {Number|number} obj\n   * @return {number}\n   * @public\n   */\n  static m_byteValue__java_lang_Number(obj) {\n    Numbers.$clinit();\n    if (typeof obj \x3d\x3d 'number') {\n      return Double.m_byteValue__java_lang_Double(/**@type {number}*/ (obj));\n    }\n    return obj.m_byteValue__();\n  }\n\n  /**\n   * @param {Number|number} obj\n   * @return {number}\n   * @public\n   */\n  static m_doubleValue__java_lang_Number(obj) {\n    Numbers.$clinit();\n    if (typeof obj \x3d\x3d 'number') {\n      return Double.m_doubleValue__java_lang_Double(/**@type {number}*/ (obj));\n    }\n    return obj.m_doubleValue__();\n  }\n\n  /**\n   * @param {Number|number} obj\n   * @return {number}\n   * @public\n   */\n  static m_floatValue__java_lang_Number(obj) {\n    Numbers.$clinit();\n    if (typeof obj \x3d\x3d 'number') {\n      return Double.m_floatValue__java_lang_Double(/**@type {number}*/ (obj));\n    }\n    return obj.m_floatValue__();\n  }\n\n  /**\n   * @param {Number|number} obj\n   * @return {number}\n   * @public\n   */\n  static m_intValue__java_lang_Number(obj) {\n    Numbers.$clinit();\n    if (typeof obj \x3d\x3d 'number') {\n      return Double.m_intValue__java_lang_Double(/**@type {number}*/ (obj));\n    }\n    return obj.m_intValue__();\n  }\n\n  /**\n   * @param {Number|number} obj\n   * @return {!$Long}\n   * @public\n   */\n  static m_longValue__java_lang_Number(obj) {\n    Numbers.$clinit();\n    if (typeof obj \x3d\x3d 'number') {\n      return Double.m_longValue__java_lang_Double(/**@type {number}*/ (obj));\n    }\n    return obj.m_longValue__();\n  }\n\n  /**\n   * @param {Number|number} obj\n   * @return {number}\n   * @public\n   */\n  static m_shortValue__java_lang_Number(obj) {\n    Numbers.$clinit();\n    if (typeof obj \x3d\x3d 'number') {\n      return Double.m_shortValue__java_lang_Double(/**@type {number}*/ (obj));\n    }\n    return obj.m_shortValue__();\n  }\n\n  /**\n   * Runs inline static field initializers.\n   * @public\n   */\n  static $clinit() {\n    Numbers.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    Number \x3d goog.module.get('java.lang.Number$impl');\n    Object \x3d goog.module.get('java.lang.Object$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n  }\n};\n\n\n\n/**\n * Exported class.\n */\nexports \x3d Numbers;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Numbers.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('vmbootstrap.Numbers');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Character \x3d goog.require('java.lang.Character');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _Number \x3d goog.require('java.lang.Number');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nconst Numbers \x3d goog.require('vmbootstrap.Numbers$impl');\nexports \x3d Numbers;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/CharSequences.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Implementation hand rolled.\n */\ngoog.module('vmbootstrap.CharSequences$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet String \x3d goog.forwardDeclare('java.lang.String$impl');\n\n\n/**\n * Provides devirtualized method implementations for CharSequence.\n */\nclass CharSequences {\n  /**\n   * Redirect the string calls to use the devirtualized version.\n   *\n   * @param {CharSequence|string} obj\n   * @return {number}\n   * @public\n   */\n  static m_length__java_lang_CharSequence(obj) {\n    CharSequences.$clinit();\n    var type \x3d typeof obj;\n    if (type \x3d\x3d 'string') {\n      obj \x3d /**@type {string}*/ (obj);\n      return String.m_length__java_lang_String(obj);\n    }\n    return obj.m_length__();\n  }\n\n  /**\n   * Redirect the string calls to use the devirtualized version.\n   *\n   * @param {CharSequence|string} obj\n   * @param {number} index\n   * @return {number}\n   */\n  static m_charAt__java_lang_CharSequence__int(obj, index) {\n    CharSequences.$clinit();\n    var type \x3d typeof obj;\n    if (type \x3d\x3d 'string') {\n      obj \x3d /**@type {string}*/ (obj);\n      return String.m_charAt__java_lang_String__int(obj, index);\n    }\n    return obj.m_charAt__int(index);\n  }\n\n  /**\n   * Redirect the string calls to use the devirtualized version.\n   *\n   * @param {CharSequence|string} obj\n   * @return {string}\n   */\n  static m_toString__java_lang_CharSequence(obj) {\n    return obj.toString();\n  }\n\n  /**\n   * Redirect the string calls to use the devirtualized version.\n   *\n   * @param {CharSequence|string} obj\n   * @param {number} start\n   * @param {number} end\n   * @return {CharSequence|string}\n   */\n  static m_subSequence__java_lang_CharSequence__int__int(obj, start, end) {\n    CharSequences.$clinit();\n    var type \x3d typeof obj;\n    if (type \x3d\x3d 'string') {\n      obj \x3d /**@type {string}*/ (obj);\n      return String.m_subSequence__java_lang_String__int__int(obj, start, end);\n    }\n    return obj.m_subSequence__int__int(start, end);\n  }\n\n  /**\n   * Runs inline static field initializers.\n   * @public\n   */\n  static $clinit() {\n    CharSequences.$clinit \x3d function() {};\n    CharSequence \x3d goog.module.get('java.lang.CharSequence$impl');\n    String \x3d goog.module.get('java.lang.String$impl');\n  }\n}\n\n\n/**\n * Exported class.\n */\nexports \x3d CharSequences;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/CharSequences.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('vmbootstrap.CharSequences');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\n\nconst _Numbers \x3d goog.require('vmbootstrap.Numbers');\nconst _Comparable \x3d goog.require('java.lang.CharSequence');\nconst _String \x3d goog.require('java.lang.String');\n\n// Re-exports the implementation.\nconst CharSequences \x3d goog.require('vmbootstrap.CharSequences$impl');\nexports \x3d CharSequences;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StringBuffer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StringBuffer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.StringBuffer$impl');\n\n\nconst AbstractStringBuilder \x3d goog.require('java.lang.AbstractStringBuilder$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\n\n\nclass StringBuffer extends AbstractStringBuilder {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuffer()'.\n   * @return {!StringBuffer}\n   * @public\n   */\n  static $create__() {\n    StringBuffer.$clinit();\n    let $instance \x3d new StringBuffer();\n    $instance.$ctor__java_lang_StringBuffer__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuffer()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuffer__() {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String(\"\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuffer(CharSequence)'.\n   * @param {(CharSequence|string)} s\n   * @return {!StringBuffer}\n   * @public\n   */\n  static $create__java_lang_CharSequence(s) {\n    StringBuffer.$clinit();\n    let $instance \x3d new StringBuffer();\n    $instance.$ctor__java_lang_StringBuffer__java_lang_CharSequence(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuffer(CharSequence)'.\n   * @param {(CharSequence|string)} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuffer__java_lang_CharSequence(s) {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String($CharSequences.m_toString__java_lang_CharSequence(s));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuffer(int)'.\n   * @param {number} ignoredCapacity\n   * @return {!StringBuffer}\n   * @public\n   */\n  static $create__int(ignoredCapacity) {\n    StringBuffer.$clinit();\n    let $instance \x3d new StringBuffer();\n    $instance.$ctor__java_lang_StringBuffer__int(ignoredCapacity);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuffer(int)'.\n   * @param {number} ignoredCapacity\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuffer__int(ignoredCapacity) {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String(\"\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuffer(String)'.\n   * @param {?string} s\n   * @return {!StringBuffer}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    StringBuffer.$clinit();\n    let $instance \x3d new StringBuffer();\n    $instance.$ctor__java_lang_StringBuffer__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuffer(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuffer__java_lang_String(s) {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String(/**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(s), j_l_String)));\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__boolean(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__char(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__char(x);\n    return this;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__arrayOf_char(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__arrayOf_char(x));\n    return this;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @param {number} start\n   * @param {number} len\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__arrayOf_char__int__int(x, start, len) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__arrayOf_char__int__int(x, start, len));\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {(CharSequence|string)} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__java_lang_CharSequence(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {(CharSequence|string)} x\n   * @param {number} start\n   * @param {number} end\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__java_lang_CharSequence__int__int(x, start, end) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int__int(j_l_String.m_valueOf__java_lang_Object(x), start, end));\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__double(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__float(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__int(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__long(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {*} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__java_lang_Object(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @param {?string} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__java_lang_String(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @param {StringBuffer} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_append__java_lang_StringBuffer(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_appendCodePoint__int(x) {\n    this.m_appendCodePoint0__int_$pp_java_lang(x);\n    return this;\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @return {StringBuffer}\n   * @public\n   */\n  m_delete__int__int(start, end) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(start, end, \"\");\n    return this;\n  }\n  \n  /**\n   * @param {number} start\n   * @return {StringBuffer}\n   * @public\n   */\n  m_deleteCharAt__int(start) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(start, start + 1, \"\");\n    return this;\n  }\n  \n  /**\n   * @param {number} index\n   * @param {boolean} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__boolean(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__boolean(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__char(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__char(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {Array\x3cnumber\x3e} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__arrayOf_char(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__arrayOf_char(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {Array\x3cnumber\x3e} x\n   * @param {number} offset\n   * @param {number} len\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__arrayOf_char__int__int(index, x, offset, len) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__arrayOf_char__int__int(x, offset, len));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {(CharSequence|string)} chars\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__java_lang_CharSequence(index, chars) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__java_lang_Object(chars));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {(CharSequence|string)} chars\n   * @param {number} start\n   * @param {number} end\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__java_lang_CharSequence__int__int(index, chars, start, end) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_substring__java_lang_String__int__int(j_l_String.m_valueOf__java_lang_Object(chars), start, end));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__double(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__double(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__float(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__float(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__int(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__int(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {!$Long} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__long(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__long(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {*} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__java_lang_Object(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__java_lang_Object(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {?string} x\n   * @return {StringBuffer}\n   * @public\n   */\n  m_insert__int__java_lang_String(index, x) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(index, index, x);\n    return this;\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {?string} toInsert\n   * @return {StringBuffer}\n   * @public\n   */\n  m_replace__int__int__java_lang_String(start, end, toInsert) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(start, end, toInsert);\n    return this;\n  }\n  \n  /**\n   * @return {StringBuffer}\n   * @public\n   */\n  m_reverse__() {\n    this.m_reverse0___$pp_java_lang();\n    return this;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_chars__() {\n    return CharSequence.m_chars__$default__java_lang_CharSequence(this);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StringBuffer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StringBuffer);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StringBuffer.$clinit \x3d function() {};\n    CharSequence \x3d goog.module.get('java.lang.CharSequence$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    AbstractStringBuilder.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StringBuffer, $Util.$makeClassName('java.lang.StringBuffer'));\n\n\n\n\nexports \x3d StringBuffer; \n//# sourceMappingURL\x3dStringBuffer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StringBuffer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StringBuffer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.StringBuffer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractStringBuilder \x3d goog.require('java.lang.AbstractStringBuilder');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\n\n\n// Re-exports the implementation.\nvar StringBuffer \x3d goog.require('java.lang.StringBuffer$impl');\nexports \x3d StringBuffer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StringBuilder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StringBuilder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.StringBuilder$impl');\n\n\nconst AbstractStringBuilder \x3d goog.require('java.lang.AbstractStringBuilder$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet StringBuffer \x3d goog.forwardDeclare('java.lang.StringBuffer$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\n\n\nclass StringBuilder extends AbstractStringBuilder {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuilder()'.\n   * @return {!StringBuilder}\n   * @public\n   */\n  static $create__() {\n    StringBuilder.$clinit();\n    let $instance \x3d new StringBuilder();\n    $instance.$ctor__java_lang_StringBuilder__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuilder()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuilder__() {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String(\"\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuilder(CharSequence)'.\n   * @param {(CharSequence|string)} s\n   * @return {!StringBuilder}\n   * @public\n   */\n  static $create__java_lang_CharSequence(s) {\n    StringBuilder.$clinit();\n    let $instance \x3d new StringBuilder();\n    $instance.$ctor__java_lang_StringBuilder__java_lang_CharSequence(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuilder(CharSequence)'.\n   * @param {(CharSequence|string)} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuilder__java_lang_CharSequence(s) {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String($CharSequences.m_toString__java_lang_CharSequence(s));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuilder(int)'.\n   * @param {number} ignoredCapacity\n   * @return {!StringBuilder}\n   * @public\n   */\n  static $create__int(ignoredCapacity) {\n    StringBuilder.$clinit();\n    let $instance \x3d new StringBuilder();\n    $instance.$ctor__java_lang_StringBuilder__int(ignoredCapacity);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuilder(int)'.\n   * @param {number} ignoredCapacity\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuilder__int(ignoredCapacity) {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String(\"\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringBuilder(String)'.\n   * @param {?string} s\n   * @return {!StringBuilder}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    StringBuilder.$clinit();\n    let $instance \x3d new StringBuilder();\n    $instance.$ctor__java_lang_StringBuilder__java_lang_String(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringBuilder(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringBuilder__java_lang_String(s) {\n    this.$ctor__java_lang_AbstractStringBuilder__java_lang_String(/**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(s), j_l_String)));\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__boolean(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__char(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__char(x);\n    return this;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__arrayOf_char(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__arrayOf_char(x));\n    return this;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @param {number} start\n   * @param {number} len\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__arrayOf_char__int__int(x, start, len) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__arrayOf_char__int__int(x, start, len));\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {(CharSequence|string)} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__java_lang_CharSequence(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {(CharSequence|string)} x\n   * @param {number} start\n   * @param {number} end\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__java_lang_CharSequence__int__int(x, start, end) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int__int(j_l_String.m_valueOf__java_lang_Object(x), start, end));\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__double(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__float(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__int(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__long(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + x;\n    return this;\n  }\n  \n  /**\n   * @param {*} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__java_lang_Object(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @param {?string} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__java_lang_String(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @param {StringBuffer} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_append__java_lang_StringBuffer(x) {\n    this.f_string__java_lang_AbstractStringBuilder \x3d j_l_String.m_valueOf__java_lang_Object(this.f_string__java_lang_AbstractStringBuilder) + j_l_String.m_valueOf__java_lang_Object(x);\n    return this;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_appendCodePoint__int(x) {\n    this.m_appendCodePoint0__int_$pp_java_lang(x);\n    return this;\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @return {StringBuilder}\n   * @public\n   */\n  m_delete__int__int(start, end) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(start, end, \"\");\n    return this;\n  }\n  \n  /**\n   * @param {number} start\n   * @return {StringBuilder}\n   * @public\n   */\n  m_deleteCharAt__int(start) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(start, start + 1, \"\");\n    return this;\n  }\n  \n  /**\n   * @param {number} index\n   * @param {boolean} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__boolean(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__boolean(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__char(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__char(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {Array\x3cnumber\x3e} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__arrayOf_char(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__arrayOf_char(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {Array\x3cnumber\x3e} x\n   * @param {number} offset\n   * @param {number} len\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__arrayOf_char__int__int(index, x, offset, len) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__arrayOf_char__int__int(x, offset, len));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {(CharSequence|string)} chars\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__java_lang_CharSequence(index, chars) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__java_lang_Object(chars));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {(CharSequence|string)} chars\n   * @param {number} start\n   * @param {number} end\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__java_lang_CharSequence__int__int(index, chars, start, end) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_substring__java_lang_String__int__int(j_l_String.m_valueOf__java_lang_Object(chars), start, end));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__double(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__double(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__float(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__float(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__int(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__int(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {!$Long} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__long(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__long(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {*} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__java_lang_Object(index, x) {\n    return this.m_insert__int__java_lang_String(index, j_l_String.m_valueOf__java_lang_Object(x));\n  }\n  \n  /**\n   * @param {number} index\n   * @param {?string} x\n   * @return {StringBuilder}\n   * @public\n   */\n  m_insert__int__java_lang_String(index, x) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(index, index, x);\n    return this;\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {?string} toInsert\n   * @return {StringBuilder}\n   * @public\n   */\n  m_replace__int__int__java_lang_String(start, end, toInsert) {\n    this.m_replace0__int__int__java_lang_String_$pp_java_lang(start, end, toInsert);\n    return this;\n  }\n  \n  /**\n   * @return {StringBuilder}\n   * @public\n   */\n  m_reverse__() {\n    this.m_reverse0___$pp_java_lang();\n    return this;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_chars__() {\n    return CharSequence.m_chars__$default__java_lang_CharSequence(this);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StringBuilder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StringBuilder);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StringBuilder.$clinit \x3d function() {};\n    CharSequence \x3d goog.module.get('java.lang.CharSequence$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    AbstractStringBuilder.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StringBuilder, $Util.$makeClassName('java.lang.StringBuilder'));\n\n\n\n\nexports \x3d StringBuilder; \n//# sourceMappingURL\x3dStringBuilder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StringBuilder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StringBuilder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.StringBuilder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractStringBuilder \x3d goog.require('java.lang.AbstractStringBuilder');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _StringBuffer \x3d goog.require('java.lang.StringBuffer');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\n\n\n// Re-exports the implementation.\nvar StringBuilder \x3d goog.require('java.lang.StringBuilder$impl');\nexports \x3d StringBuilder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/StringJoiner.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.StringJoiner.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.StringJoiner$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet StringBuilder \x3d goog.forwardDeclare('java.lang.StringBuilder$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\n\n\nclass StringJoiner extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_delimiter__java_util_StringJoiner_;\n    /** @public {?string} */\n    this.f_prefix__java_util_StringJoiner_;\n    /** @public {?string} */\n    this.f_suffix__java_util_StringJoiner_;\n    /** @public {StringBuilder} */\n    this.f_builder__java_util_StringJoiner_;\n    /** @public {?string} */\n    this.f_emptyValue__java_util_StringJoiner_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringJoiner(CharSequence)'.\n   * @param {(CharSequence|string)} delimiter\n   * @return {!StringJoiner}\n   * @public\n   */\n  static $create__java_lang_CharSequence(delimiter) {\n    StringJoiner.$clinit();\n    let $instance \x3d new StringJoiner();\n    $instance.$ctor__java_util_StringJoiner__java_lang_CharSequence(delimiter);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringJoiner(CharSequence)'.\n   * @param {(CharSequence|string)} delimiter\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_StringJoiner__java_lang_CharSequence(delimiter) {\n    this.$ctor__java_util_StringJoiner__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, \"\", \"\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringJoiner(CharSequence, CharSequence, CharSequence)'.\n   * @param {(CharSequence|string)} delimiter\n   * @param {(CharSequence|string)} prefix\n   * @param {(CharSequence|string)} suffix\n   * @return {!StringJoiner}\n   * @public\n   */\n  static $create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, prefix, suffix) {\n    StringJoiner.$clinit();\n    let $instance \x3d new StringJoiner();\n    $instance.$ctor__java_util_StringJoiner__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, prefix, suffix);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringJoiner(CharSequence, CharSequence, CharSequence)'.\n   * @param {(CharSequence|string)} delimiter\n   * @param {(CharSequence|string)} prefix\n   * @param {(CharSequence|string)} suffix\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_StringJoiner__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, prefix, suffix) {\n    this.$ctor__java_lang_Object__();\n    this.f_delimiter__java_util_StringJoiner_ \x3d $CharSequences.m_toString__java_lang_CharSequence(delimiter);\n    this.f_prefix__java_util_StringJoiner_ \x3d $CharSequences.m_toString__java_lang_CharSequence(prefix);\n    this.f_suffix__java_util_StringJoiner_ \x3d $CharSequences.m_toString__java_lang_CharSequence(suffix);\n    this.f_emptyValue__java_util_StringJoiner_ \x3d j_l_String.m_valueOf__java_lang_Object(this.f_prefix__java_util_StringJoiner_) + j_l_String.m_valueOf__java_lang_Object(this.f_suffix__java_util_StringJoiner_);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} newElement\n   * @return {StringJoiner}\n   * @public\n   */\n  m_add__java_lang_CharSequence(newElement) {\n    this.m_initBuilderOrAddDelimiter___$p_java_util_StringJoiner();\n    this.f_builder__java_util_StringJoiner_.m_append__java_lang_CharSequence(newElement);\n    return this;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_length__() {\n    if ($Equality.$same(this.f_builder__java_util_StringJoiner_, null)) {\n      return j_l_String.m_length__java_lang_String(this.f_emptyValue__java_util_StringJoiner_);\n    }\n    return this.f_builder__java_util_StringJoiner_.m_length__() + j_l_String.m_length__java_lang_String(this.f_suffix__java_util_StringJoiner_);\n  }\n  \n  /**\n   * @param {StringJoiner} other\n   * @return {StringJoiner}\n   * @public\n   */\n  m_merge__java_util_StringJoiner(other) {\n    if (!$Equality.$same(other.f_builder__java_util_StringJoiner_, null)) {\n      let otherLength \x3d other.f_builder__java_util_StringJoiner_.m_length__();\n      this.m_initBuilderOrAddDelimiter___$p_java_util_StringJoiner();\n      this.f_builder__java_util_StringJoiner_.m_append__java_lang_CharSequence__int__int(other.f_builder__java_util_StringJoiner_, j_l_String.m_length__java_lang_String(other.f_prefix__java_util_StringJoiner_), otherLength);\n    }\n    return this;\n  }\n  \n  /**\n   * @param {(CharSequence|string)} emptyValue\n   * @return {StringJoiner}\n   * @public\n   */\n  m_setEmptyValue__java_lang_CharSequence(emptyValue) {\n    this.f_emptyValue__java_util_StringJoiner_ \x3d $CharSequences.m_toString__java_lang_CharSequence(emptyValue);\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    if ($Equality.$same(this.f_builder__java_util_StringJoiner_, null)) {\n      return this.f_emptyValue__java_util_StringJoiner_;\n    } else if (j_l_String.m_isEmpty__java_lang_String(this.f_suffix__java_util_StringJoiner_)) {\n      return this.f_builder__java_util_StringJoiner_.toString();\n    } else {\n      return j_l_String.m_valueOf__java_lang_Object(this.f_builder__java_util_StringJoiner_.toString()) + j_l_String.m_valueOf__java_lang_Object(this.f_suffix__java_util_StringJoiner_);\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_initBuilderOrAddDelimiter___$p_java_util_StringJoiner() {\n    if ($Equality.$same(this.f_builder__java_util_StringJoiner_, null)) {\n      this.f_builder__java_util_StringJoiner_ \x3d StringBuilder.$create__java_lang_String(this.f_prefix__java_util_StringJoiner_);\n    } else {\n      this.f_builder__java_util_StringJoiner_.m_append__java_lang_String(this.f_delimiter__java_util_StringJoiner_);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StringJoiner;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StringJoiner);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StringJoiner.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    StringBuilder \x3d goog.module.get('java.lang.StringBuilder$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StringJoiner, $Util.$makeClassName('java.util.StringJoiner'));\n\n\n\n\nexports \x3d StringJoiner; \n//# sourceMappingURL\x3dStringJoiner.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/StringJoiner.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.StringJoiner.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.StringJoiner');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _StringBuilder \x3d goog.require('java.lang.StringBuilder');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\n\n\n// Re-exports the implementation.\nvar StringJoiner \x3d goog.require('java.util.StringJoiner$impl');\nexports \x3d StringJoiner;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Map \x3d goog.require('java.util.Map$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.AbstractMap.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.AbstractMap.$2$impl');\nlet SimpleEntry \x3d goog.forwardDeclare('java.util.AbstractMap.SimpleEntry$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet StringJoiner \x3d goog.forwardDeclare('java.util.StringJoiner$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @abstract\n * @template C_K, C_V\n * @implements {Map\x3cC_K, C_V\x3e}\n  */\nclass AbstractMap extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.m_entrySet__().clear();\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  containsKey(key) {\n    return !$Equality.$same(this.m_implFindEntry__java_lang_Object__boolean_$p_java_util_AbstractMap(key, false), null);\n  }\n  \n  /**\n   * @override\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  containsValue(value) {\n    for (let $iterator \x3d this.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      let v \x3d entry.m_getValue__();\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(value, v)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {boolean}\n   * @public\n   */\n  m_containsEntry__java_util_Map_Entry_$pp_java_util(entry) {\n    let key \x3d entry.m_getKey__();\n    let value \x3d entry.m_getValue__();\n    let ourValue \x3d this.get(key);\n    if (!Objects.m_equals__java_lang_Object__java_lang_Object(value, ourValue)) {\n      return false;\n    }\n    if ($Equality.$same(ourValue, null) \x26\x26 !this.containsKey(key)) {\n      return false;\n    }\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  equals(obj) {\n    if ($Equality.$same(obj, this)) {\n      return true;\n    }\n    if (!Map.$isInstance(obj)) {\n      return false;\n    }\n    let otherMap \x3d /**@type {Map\x3c*, *\x3e} */ ($Casts.$to(obj, Map));\n    if (this.size() !\x3d otherMap.size()) {\n      return false;\n    }\n    for (let $iterator \x3d otherMap.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      if (!this.m_containsEntry__java_util_Map_Entry_$pp_java_util(entry)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  get(key) {\n    return AbstractMap.m_getEntryValueOrNull__java_util_Map_Entry_$pp_java_util(this.m_implFindEntry__java_lang_Object__boolean_$p_java_util_AbstractMap(key, false));\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Collections.m_hashCode__java_lang_Iterable_$pp_java_util(this.m_entrySet__());\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.size() \x3d\x3d 0;\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cC_K\x3e}\n   * @public\n   */\n  keySet() {\n    return /**@type {!$1\x3cC_K, C_V\x3e} */ ($1.$create__java_util_AbstractMap(this));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__java_lang_String(\"Put not supported on this map\"));\n  }\n  \n  /**\n   * @override\n   * @param {Map\x3c?, ?\x3e} map\n   * @return {void}\n   * @public\n   */\n  putAll(map) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    for (let $iterator \x3d map.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      this.put(e.m_getKey__(), e.m_getValue__());\n    }\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  remove(key) {\n    return AbstractMap.m_getEntryValueOrNull__java_util_Map_Entry_$pp_java_util(this.m_implFindEntry__java_lang_Object__boolean_$p_java_util_AbstractMap(key, true));\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.m_entrySet__().size();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"{\", \"}\");\n    for (let $iterator \x3d this.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      joiner.m_add__java_lang_CharSequence(this.m_toString__java_util_Map_Entry_$p_java_util_AbstractMap(entry));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {?string}\n   * @public\n   */\n  m_toString__java_util_Map_Entry_$p_java_util_AbstractMap(entry) {\n    return j_l_String.m_valueOf__java_lang_Object(this.m_toString__java_lang_Object_$p_java_util_AbstractMap(entry.m_getKey__())) + \"\x3d\" + j_l_String.m_valueOf__java_lang_Object(this.m_toString__java_lang_Object_$p_java_util_AbstractMap(entry.m_getValue__()));\n  }\n  \n  /**\n   * @param {*} o\n   * @return {?string}\n   * @public\n   */\n  m_toString__java_lang_Object_$p_java_util_AbstractMap(o) {\n    return $Equality.$same(o, this) ? \"(this Map)\" : j_l_String.m_valueOf__java_lang_Object(o);\n  }\n  \n  /**\n   * @override\n   * @return {Collection\x3cC_V\x3e}\n   * @public\n   */\n  values() {\n    return /**@type {!$2\x3cC_K, C_V\x3e} */ ($2.$create__java_util_AbstractMap(this));\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {Entry\x3cM_K, M_V\x3e} entry\n   * @return {M_K}\n   * @public\n   */\n  static m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(entry) {\n    AbstractMap.$clinit();\n    return $Equality.$same(entry, null) ? null : entry.m_getKey__();\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {Entry\x3cM_K, M_V\x3e} entry\n   * @return {M_V}\n   * @public\n   */\n  static m_getEntryValueOrNull__java_util_Map_Entry_$pp_java_util(entry) {\n    AbstractMap.$clinit();\n    return $Equality.$same(entry, null) ? null : entry.m_getValue__();\n  }\n  \n  /**\n   * @param {*} key\n   * @param {boolean} remove\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_implFindEntry__java_lang_Object__boolean_$p_java_util_AbstractMap(key, remove) {\n    for (let iter \x3d this.m_entrySet__().m_iterator__(); iter.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(iter.m_next__(), Entry));\n      let k \x3d entry.m_getKey__();\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(key, k)) {\n        if (remove) {\n          entry \x3d /**@type {!SimpleEntry\x3cC_K, C_V\x3e} */ (SimpleEntry.$create__java_lang_Object__java_lang_Object(entry.m_getKey__(), entry.m_getValue__()));\n          iter.m_remove__();\n        }\n        return entry;\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {C_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractMap.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    $1 \x3d goog.module.get('java.util.AbstractMap.$1$impl');\n    $2 \x3d goog.module.get('java.util.AbstractMap.$2$impl');\n    SimpleEntry \x3d goog.module.get('java.util.AbstractMap.SimpleEntry$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    StringJoiner \x3d goog.module.get('java.util.StringJoiner$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractMap, $Util.$makeClassName('java.util.AbstractMap'));\n\n\nMap.$markImplementor(AbstractMap);\n\n\nexports \x3d AbstractMap; \n//# sourceMappingURL\x3dAbstractMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Map \x3d goog.require('java.util.Map');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _$1 \x3d goog.require('java.util.AbstractMap.$1');\nconst _$2 \x3d goog.require('java.util.AbstractMap.$2');\nconst _SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Set \x3d goog.require('java.util.Set');\nconst _StringJoiner \x3d goog.require('java.util.StringJoiner');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar AbstractMap \x3d goog.require('java.util.AbstractMap$impl');\nexports \x3d AbstractMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptyMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptyMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.EmptyMap$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractMap \x3d goog.require('java.util.AbstractMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\n\n\n/**\n * @implements {Serializable}\n  */\nclass EmptyMap extends AbstractMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EmptyMap()'.\n   * @return {!EmptyMap}\n   * @public\n   */\n  static $create__() {\n    EmptyMap.$clinit();\n    let $instance \x3d new EmptyMap();\n    $instance.$ctor__java_util_Collections_EmptyMap__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EmptyMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_EmptyMap__() {\n    this.$ctor__java_util_AbstractMap__();\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  containsKey(key) {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  containsValue(value) {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Set}\n   * @public\n   */\n  m_entrySet__() {\n    return Collections.f_EMPTY_SET__java_util_Collections;\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {*}\n   * @public\n   */\n  get(key) {\n    return null;\n  }\n  \n  /**\n   * @override\n   * @return {Set}\n   * @public\n   */\n  keySet() {\n    return Collections.f_EMPTY_SET__java_util_Collections;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return 0;\n  }\n  \n  /**\n   * @override\n   * @return {Collection}\n   * @public\n   */\n  values() {\n    return Collections.f_EMPTY_LIST__java_util_Collections;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {*}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {*}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {*}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {*}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {*}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {*}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {*}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {*}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {*}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {*}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @param {*} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptyMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptyMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptyMap.$clinit \x3d function() {};\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    AbstractMap.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptyMap, $Util.$makeClassName('java.util.Collections$EmptyMap'));\n\n\nSerializable.$markImplementor(EmptyMap);\n\n\nexports \x3d EmptyMap; \n//# sourceMappingURL\x3dCollections$EmptyMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptyMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptyMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.EmptyMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractMap \x3d goog.require('java.util.AbstractMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Set \x3d goog.require('java.util.Set');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\n\n\n// Re-exports the implementation.\nvar EmptyMap \x3d goog.require('java.util.Collections.EmptyMap$impl');\nexports \x3d EmptyMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.EmptySet$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @implements {Serializable}\n  */\nclass EmptySet extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EmptySet()'.\n   * @return {!EmptySet}\n   * @public\n   */\n  static $create__() {\n    EmptySet.$clinit();\n    let $instance \x3d new EmptySet();\n    $instance.$ctor__java_util_Collections_EmptySet__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EmptySet()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_EmptySet__() {\n    this.$ctor__java_util_AbstractSet__();\n  }\n  \n  /**\n   * @override\n   * @param {*} object\n   * @return {boolean}\n   * @public\n   */\n  contains(object) {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {Iterator\x3c*\x3e} */ (Collections.m_emptyIterator__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return 0;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3c*\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3c*\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3c*\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3c*\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3c*\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3c*\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmptySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmptySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmptySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    AbstractSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmptySet, $Util.$makeClassName('java.util.Collections$EmptySet'));\n\n\nSerializable.$markImplementor(EmptySet);\n\n\nexports \x3d EmptySet; \n//# sourceMappingURL\x3dCollections$EmptySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$EmptySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$EmptySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.EmptySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar EmptySet \x3d goog.require('java.util.Collections.EmptySet$impl');\nexports \x3d EmptySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Queue.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Queue.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Queue$impl');\n\n\nconst Collection \x3d goog.require('java.util.Collection$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Collection\x3cC_E\x3e}\n */\nclass Queue {\n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_element__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} o\n   * @return {boolean}\n   * @public\n   */\n  m_offer__java_lang_Object(o) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_peek__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_poll__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_remove__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Collection.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Queue \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Queue;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Queue;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Queue.$clinit \x3d function() {};\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Queue, $Util.$makeClassName('java.util.Queue'));\n\n\nQueue.$markImplementor(/** @type {Function} */ (Queue));\n\n\nexports \x3d Queue; \n//# sourceMappingURL\x3dQueue.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Queue.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Queue.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Queue');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Queue \x3d goog.require('java.util.Queue$impl');\nexports \x3d Queue;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractQueue.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractQueue.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractQueue$impl');\n\n\nconst AbstractCollection \x3d goog.require('java.util.AbstractCollection$impl');\nconst Queue \x3d goog.require('java.util.Queue$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\n/**\n * @abstract\n * @template C_E\n * @extends {AbstractCollection\x3cC_E\x3e}\n * @implements {Queue\x3cC_E\x3e}\n  */\nclass AbstractQueue extends AbstractCollection {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractQueue()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractQueue__() {\n    this.$ctor__java_util_AbstractCollection__();\n  }\n  \n  /**\n   * @override\n   * @param {C_E} o\n   * @return {boolean}\n   * @public\n   */\n  add(o) {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(this.m_offer__java_lang_Object(o), \"Unable to add element to queue\");\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAll(c) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(c);\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_Object(!$Equality.$same(c, this), \"Can't add a queue to itself\");\n    return super.addAll(c);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    while (!$Equality.$same(this.m_poll__(), null)) {\n    }\n  }\n  \n  /**\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_element__() {\n    let e \x3d this.m_peek__();\n    $InternalPreconditions.m_checkElement__boolean__java_lang_Object(!$Equality.$same(e, null), \"Queue is empty\");\n    return e;\n  }\n  \n  /**\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_remove__() {\n    let e \x3d this.m_poll__();\n    $InternalPreconditions.m_checkElement__boolean__java_lang_Object(!$Equality.$same(e, null), \"Queue is empty\");\n    return e;\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_E} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_offer__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_peek__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_poll__() {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractQueue;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractQueue);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractQueue.$clinit \x3d function() {};\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    AbstractCollection.$clinit();\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractQueue, $Util.$makeClassName('java.util.AbstractQueue'));\n\n\nQueue.$markImplementor(AbstractQueue);\n\n\nexports \x3d AbstractQueue; \n//# sourceMappingURL\x3dAbstractQueue.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractQueue.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractQueue.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractQueue');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractCollection \x3d goog.require('java.util.AbstractCollection');\nconst _Queue \x3d goog.require('java.util.Queue');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar AbstractQueue \x3d goog.require('java.util.AbstractQueue$impl');\nexports \x3d AbstractQueue;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Deque.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Deque.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Deque$impl');\n\n\nconst Queue \x3d goog.require('java.util.Queue$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Queue\x3cC_E\x3e}\n */\nclass Deque {\n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {void}\n   * @public\n   */\n  m_addFirst__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {void}\n   * @public\n   */\n  m_addLast__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Iterator\x3cC_E\x3e}\n   * @public\n   */\n  m_descendingIterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_getFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_getLast__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {boolean}\n   * @public\n   */\n  m_offerFirst__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {boolean}\n   * @public\n   */\n  m_offerLast__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_peekFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_peekLast__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_pollFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_pollLast__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_pop__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {void}\n   * @public\n   */\n  m_push__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_removeFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  m_removeFirstOccurrence__java_lang_Object(o) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_removeLast__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  m_removeLastOccurrence__java_lang_Object(o) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Queue.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_Deque \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_Deque;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_Deque;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Deque.$clinit \x3d function() {};\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Deque, $Util.$makeClassName('java.util.Deque'));\n\n\nDeque.$markImplementor(/** @type {Function} */ (Deque));\n\n\nexports \x3d Deque; \n//# sourceMappingURL\x3dDeque.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Deque.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Deque.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Deque');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Queue \x3d goog.require('java.util.Queue');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\n\n\n// Re-exports the implementation.\nvar Deque \x3d goog.require('java.util.Deque$impl');\nexports \x3d Deque;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$LifoQueue.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$LifoQueue.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.LifoQueue$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractQueue \x3d goog.require('java.util.AbstractQueue$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Deque \x3d goog.forwardDeclare('java.util.Deque$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_LifoQueue_E\n * @extends {AbstractQueue\x3cC_LifoQueue_E\x3e}\n * @implements {Serializable}\n  */\nclass LifoQueue extends AbstractQueue {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Deque\x3cC_LifoQueue_E\x3e} */\n    this.f_deque__java_util_Collections_LifoQueue_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LifoQueue(Deque)'.\n   * @template C_LifoQueue_E\n   * @param {Deque\x3cC_LifoQueue_E\x3e} deque\n   * @return {!LifoQueue\x3cC_LifoQueue_E\x3e}\n   * @public\n   */\n  static $create__java_util_Deque(deque) {\n    LifoQueue.$clinit();\n    let $instance \x3d new LifoQueue();\n    $instance.$ctor__java_util_Collections_LifoQueue__java_util_Deque(deque);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LifoQueue(Deque)'.\n   * @param {Deque\x3cC_LifoQueue_E\x3e} deque\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_LifoQueue__java_util_Deque(deque) {\n    this.$ctor__java_util_AbstractQueue__();\n    this.f_deque__java_util_Collections_LifoQueue_ \x3d deque;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_LifoQueue_E\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return this.f_deque__java_util_Collections_LifoQueue_.m_iterator__();\n  }\n  \n  /**\n   * @override\n   * @param {C_LifoQueue_E} e\n   * @return {boolean}\n   * @public\n   */\n  m_offer__java_lang_Object(e) {\n    return this.f_deque__java_util_Collections_LifoQueue_.m_offerFirst__java_lang_Object(e);\n  }\n  \n  /**\n   * @override\n   * @return {C_LifoQueue_E}\n   * @public\n   */\n  m_peek__() {\n    return this.f_deque__java_util_Collections_LifoQueue_.m_peekFirst__();\n  }\n  \n  /**\n   * @override\n   * @return {C_LifoQueue_E}\n   * @public\n   */\n  m_poll__() {\n    return this.f_deque__java_util_Collections_LifoQueue_.m_pollFirst__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_deque__java_util_Collections_LifoQueue_.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_LifoQueue_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_LifoQueue_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_LifoQueue_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_LifoQueue_E\x3e} */ (Collection.m_spliterator__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_LifoQueue_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_LifoQueue_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LifoQueue;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LifoQueue);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LifoQueue.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    AbstractQueue.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LifoQueue, $Util.$makeClassName('java.util.Collections$LifoQueue'));\n\n\nSerializable.$markImplementor(LifoQueue);\n\n\nexports \x3d LifoQueue; \n//# sourceMappingURL\x3dCollections$LifoQueue.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$LifoQueue.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$LifoQueue.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.LifoQueue');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractQueue \x3d goog.require('java.util.AbstractQueue');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Deque \x3d goog.require('java.util.Deque');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar LifoQueue \x3d goog.require('java.util.Collections.LifoQueue$impl');\nexports \x3d LifoQueue;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Random.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Random.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Random$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\nclass Random extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {boolean} */\n    this.f_haveNextNextGaussian__java_util_Random_ \x3d false;\n    /** @public {number} */\n    this.f_nextNextGaussian__java_util_Random_ \x3d 0.0;\n    /** @public {number} */\n    this.f_seedhi__java_util_Random_ \x3d 0.0;\n    /** @public {number} */\n    this.f_seedlo__java_util_Random_ \x3d 0.0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Random()'.\n   * @return {!Random}\n   * @public\n   */\n  static $create__() {\n    Random.$clinit();\n    let $instance \x3d new Random();\n    $instance.$ctor__java_util_Random__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Random()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Random__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_Random();\n    let seed \x3d Random.$f_uniqueSeed__java_util_Random_++ + Date.now();\n    let hi \x3d $Primitives.$narrowDoubleToInt(Math.floor(seed * Random.f_twoToTheMinus24__java_util_Random_)) \x26 16777215;\n    let lo \x3d $Primitives.$narrowDoubleToInt((seed - (hi * Random.f_twoToThe24__java_util_Random_)));\n    this.m_setSeed__int__int_$p_java_util_Random(hi, lo);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Random(long)'.\n   * @param {!$Long} seed\n   * @return {!Random}\n   * @public\n   */\n  static $create__long(seed) {\n    Random.$clinit();\n    let $instance \x3d new Random();\n    $instance.$ctor__java_util_Random__long(seed);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Random(long)'.\n   * @param {!$Long} seed\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Random__long(seed) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_Random();\n    this.m_setSeed__long(seed);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_nextBoolean__() {\n    return this.m_nextInternal__int_$p_java_util_Random(1) !\x3d 0;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} buf\n   * @return {void}\n   * @public\n   */\n  m_nextBytes__arrayOf_byte(buf) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(buf);\n    let rand \x3d 0, count \x3d 0, loop \x3d 0;\n    while (count \x3c buf.length) {\n      if (loop \x3d\x3d 0) {\n        rand \x3d $Primitives.$narrowDoubleToInt(this.m_nextInternal__int_$p_java_util_Random(32));\n        loop \x3d 3;\n      } else {\n        loop--;\n      }\n      $Arrays.$set(buf, count++, $Primitives.$narrowIntToByte(rand));\n      rand \x3e\x3e\x3d 8;\n    }\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_nextDouble__() {\n    return this.m_nextInternal__int_$p_java_util_Random(26) * Random.f_twoToTheMinus26__java_util_Random_ + this.m_nextInternal__int_$p_java_util_Random(27) * Random.f_twoToTheMinus53__java_util_Random_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_nextFloat__() {\n    return (this.m_nextInternal__int_$p_java_util_Random(24) * Random.f_twoToTheMinus24__java_util_Random_);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_nextGaussian__() {\n    if (this.f_haveNextNextGaussian__java_util_Random_) {\n      this.f_haveNextNextGaussian__java_util_Random_ \x3d false;\n      return this.f_nextNextGaussian__java_util_Random_;\n    }\n    let /** number */ v1, /** number */ v2, /** number */ s;\n    do {\n      v1 \x3d 2 * this.m_nextDouble__() - 1;\n      v2 \x3d 2 * this.m_nextDouble__() - 1;\n      s \x3d v1 * v1 + v2 * v2;\n    }while (s \x3e\x3d 1);\n    let norm \x3d (s \x3d\x3d 0) ? 0.0 : Math.sqrt(-2.0 * Math.log(s) / s);\n    this.f_nextNextGaussian__java_util_Random_ \x3d v2 * norm;\n    this.f_haveNextNextGaussian__java_util_Random_ \x3d true;\n    return v1 * norm;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_nextInt__() {\n    return $Primitives.$narrowDoubleToInt(this.m_nextInternal__int_$p_java_util_Random(32));\n  }\n  \n  /**\n   * @param {number} n\n   * @return {number}\n   * @public\n   */\n  m_nextInt__int(n) {\n    $InternalPreconditions.m_checkCriticalArgument__boolean(n \x3e 0);\n    if ((n \x26 -n) \x3d\x3d n) {\n      return $Primitives.$narrowDoubleToInt(((n * this.m_nextInternal__int_$p_java_util_Random(31)) * Random.f_twoToTheMinus31__java_util_Random_));\n    }\n    let /** number */ bits, /** number */ val;\n    do {\n      bits \x3d this.m_nextInternal__int_$p_java_util_Random(31);\n      val \x3d bits % n;\n    }while (bits - val + (n - 1) \x3c 0);\n    return $Primitives.$narrowDoubleToInt(val);\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_nextLong__() {\n    return $LongUtils.$plus($LongUtils.$leftShift($Primitives.$narrowDoubleToLong(this.m_nextInternal__int_$p_java_util_Random(32)), 32), $Primitives.$narrowDoubleToLong(this.m_nextInternal__int_$p_java_util_Random(32)));\n  }\n  \n  /**\n   * @param {!$Long} seed\n   * @return {void}\n   * @public\n   */\n  m_setSeed__long(seed) {\n    this.m_setSeed__int__int_$p_java_util_Random($Primitives.$narrowLongToInt($LongUtils.$and($LongUtils.$rightShiftSigned(seed, 24), $Primitives.$widenIntToLong(16777215))), $Primitives.$narrowLongToInt($LongUtils.$and(seed, $Primitives.$widenIntToLong(16777215))));\n  }\n  \n  /**\n   * @param {number} bits\n   * @return {number}\n   * @public\n   */\n  m_next__int(bits) {\n    return $Primitives.$narrowDoubleToInt(this.m_nextInternal__int_$p_java_util_Random(bits));\n  }\n  \n  /**\n   * @param {number} bits\n   * @return {number}\n   * @public\n   */\n  m_nextInternal__int_$p_java_util_Random(bits) {\n    let hi \x3d this.f_seedhi__java_util_Random_ * Random.f_multiplierLo__java_util_Random_ + this.f_seedlo__java_util_Random_ * Random.f_multiplierHi__java_util_Random_;\n    let lo \x3d this.f_seedlo__java_util_Random_ * Random.f_multiplierLo__java_util_Random_ + 11;\n    let carry \x3d Math.floor(lo * Random.f_twoToTheMinus24__java_util_Random_);\n    hi +\x3d carry;\n    lo -\x3d carry * Random.f_twoToThe24__java_util_Random_;\n    hi %\x3d Random.f_twoToThe24__java_util_Random_;\n    this.f_seedhi__java_util_Random_ \x3d hi;\n    this.f_seedlo__java_util_Random_ \x3d lo;\n    if (bits \x3c\x3d 24) {\n      return Math.floor(this.f_seedhi__java_util_Random_ * Random.$f_twoToTheXMinus24__java_util_Random_[bits]);\n    } else {\n      let h \x3d this.f_seedhi__java_util_Random_ * (1 \x3c\x3c (bits - 24));\n      let l \x3d Math.floor(this.f_seedlo__java_util_Random_ * Random.$f_twoToTheXMinus48__java_util_Random_[bits]);\n      let dval \x3d h + l;\n      if (dval \x3e\x3d Random.f_twoToThe31__java_util_Random_) {\n        dval -\x3d Random.f_twoToThe32__java_util_Random_;\n      }\n      return dval;\n    }\n  }\n  \n  /**\n   * @param {number} seedhi\n   * @param {number} seedlo\n   * @return {void}\n   * @public\n   */\n  m_setSeed__int__int_$p_java_util_Random(seedhi, seedlo) {\n    this.f_seedhi__java_util_Random_ \x3d seedhi ^ 1502;\n    this.f_seedlo__java_util_Random_ \x3d seedlo ^ 15525485;\n    this.f_haveNextNextGaussian__java_util_Random_ \x3d false;\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_Random() {\n    this.f_haveNextNextGaussian__java_util_Random_ \x3d false;\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_twoToTheXMinus24__java_util_Random_() {\n    return (Random.$clinit(), Random.$f_twoToTheXMinus24__java_util_Random_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_twoToTheXMinus24__java_util_Random_(value) {\n    (Random.$clinit(), Random.$f_twoToTheXMinus24__java_util_Random_ \x3d value);\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_twoToTheXMinus48__java_util_Random_() {\n    return (Random.$clinit(), Random.$f_twoToTheXMinus48__java_util_Random_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_twoToTheXMinus48__java_util_Random_(value) {\n    (Random.$clinit(), Random.$f_twoToTheXMinus48__java_util_Random_ \x3d value);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_uniqueSeed__java_util_Random_() {\n    return (Random.$clinit(), Random.$f_uniqueSeed__java_util_Random_);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_uniqueSeed__java_util_Random_(value) {\n    (Random.$clinit(), Random.$f_uniqueSeed__java_util_Random_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Random;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Random);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Random.$clinit \x3d function() {};\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    j_l_Object.$clinit();\n    Random.$f_twoToTheXMinus24__java_util_Random_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([25], $double));\n    Random.$f_twoToTheXMinus48__java_util_Random_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([33], $double));\n    Random.$f_uniqueSeed__java_util_Random_ \x3d 0;\n    let twoToTheXMinus48Tmp \x3d 1.52587890625E-5;\n    for (let i \x3d 32; i \x3e\x3d 0; i--) {\n      $Arrays.$set(Random.$f_twoToTheXMinus48__java_util_Random_, i, twoToTheXMinus48Tmp);\n      twoToTheXMinus48Tmp *\x3d 0.5;\n    }\n    let twoToTheXMinus24Tmp \x3d 1.0;\n    for (let i$1$ \x3d 24; i$1$ \x3e\x3d 0; i$1$--) {\n      $Arrays.$set(Random.$f_twoToTheXMinus24__java_util_Random_, i$1$, twoToTheXMinus24Tmp);\n      twoToTheXMinus24Tmp *\x3d 0.5;\n    }\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Random, $Util.$makeClassName('java.util.Random'));\n\n\n/** @public {number} @const */\nRandom.f_multiplierHi__java_util_Random_ \x3d 1502.0;\n\n\n/** @public {number} @const */\nRandom.f_multiplierLo__java_util_Random_ \x3d 1.5525485E7;\n\n\n/** @public {number} @const */\nRandom.f_twoToThe24__java_util_Random_ \x3d 1.6777216E7;\n\n\n/** @public {number} @const */\nRandom.f_twoToThe31__java_util_Random_ \x3d 2.147483648E9;\n\n\n/** @public {number} @const */\nRandom.f_twoToThe32__java_util_Random_ \x3d 4.294967296E9;\n\n\n/** @public {number} @const */\nRandom.f_twoToTheMinus24__java_util_Random_ \x3d 5.9604644775390625E-8;\n\n\n/** @public {number} @const */\nRandom.f_twoToTheMinus26__java_util_Random_ \x3d 1.4901161193847656E-8;\n\n\n/** @public {number} @const */\nRandom.f_twoToTheMinus31__java_util_Random_ \x3d 4.6566128730773926E-10;\n\n\n/** @public {number} @const */\nRandom.f_twoToTheMinus53__java_util_Random_ \x3d 1.1102230246251565E-16;\n\n\n/** @private {Array\x3cnumber\x3e} */\nRandom.$f_twoToTheXMinus24__java_util_Random_;\n\n\n/** @private {Array\x3cnumber\x3e} */\nRandom.$f_twoToTheXMinus48__java_util_Random_;\n\n\n/** @private {number} */\nRandom.$f_uniqueSeed__java_util_Random_ \x3d 0;\n\n\n\n\nexports \x3d Random; \n//# sourceMappingURL\x3dRandom.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Random.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Random.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Random');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar Random \x3d goog.require('java.util.Random$impl');\nexports \x3d Random;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$RandomHolder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$RandomHolder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.RandomHolder$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Random \x3d goog.forwardDeclare('java.util.Random$impl');\n\n\nclass RandomHolder extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'RandomHolder()'.\n   * @return {!RandomHolder}\n   * @public\n   */\n  static $create__() {\n    RandomHolder.$clinit();\n    let $instance \x3d new RandomHolder();\n    $instance.$ctor__java_util_Collections_RandomHolder__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'RandomHolder()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_RandomHolder__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Random}\n   * @public\n   */\n  static get f_rnd__java_util_Collections_RandomHolder_() {\n    return (RandomHolder.$clinit(), RandomHolder.$f_rnd__java_util_Collections_RandomHolder_);\n  }\n  \n  /**\n   * @param {Random} value\n   * @return {void}\n   * @public\n   */\n  static set f_rnd__java_util_Collections_RandomHolder_(value) {\n    (RandomHolder.$clinit(), RandomHolder.$f_rnd__java_util_Collections_RandomHolder_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof RandomHolder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, RandomHolder);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    RandomHolder.$clinit \x3d function() {};\n    Random \x3d goog.module.get('java.util.Random$impl');\n    j_l_Object.$clinit();\n    RandomHolder.$f_rnd__java_util_Collections_RandomHolder_ \x3d Random.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(RandomHolder, $Util.$makeClassName('java.util.Collections$RandomHolder'));\n\n\n/** @private {Random} */\nRandomHolder.$f_rnd__java_util_Collections_RandomHolder_;\n\n\n\n\nexports \x3d RandomHolder; \n//# sourceMappingURL\x3dCollections$RandomHolder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$RandomHolder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$RandomHolder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.RandomHolder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Random \x3d goog.require('java.util.Random');\n\n\n// Re-exports the implementation.\nvar RandomHolder \x3d goog.require('java.util.Collections.RandomHolder$impl');\nexports \x3d RandomHolder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$SetFromMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$SetFromMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.SetFromMap$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_SetFromMap_E\n * @extends {AbstractSet\x3cC_SetFromMap_E\x3e}\n * @implements {Serializable}\n  */\nclass SetFromMap extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Map\x3cC_SetFromMap_E, ?boolean\x3e} */\n    this.f_backingMap__java_util_Collections_SetFromMap_;\n    /** @public {Set\x3cC_SetFromMap_E\x3e} */\n    this.f_keySet__java_util_Collections_SetFromMap_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SetFromMap(Map)'.\n   * @template C_SetFromMap_E\n   * @param {Map\x3cC_SetFromMap_E, ?boolean\x3e} map\n   * @return {!SetFromMap\x3cC_SetFromMap_E\x3e}\n   * @public\n   */\n  static $create__java_util_Map(map) {\n    SetFromMap.$clinit();\n    let $instance \x3d new SetFromMap();\n    $instance.$ctor__java_util_Collections_SetFromMap__java_util_Map(map);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SetFromMap(Map)'.\n   * @param {Map\x3cC_SetFromMap_E, ?boolean\x3e} map\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_SetFromMap__java_util_Map(map) {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_backingMap__java_util_Collections_SetFromMap_ \x3d map;\n  }\n  \n  /**\n   * @override\n   * @param {C_SetFromMap_E} e\n   * @return {boolean}\n   * @public\n   */\n  add(e) {\n    return $Equality.$same(this.f_backingMap__java_util_Collections_SetFromMap_.put(e, Boolean.f_TRUE__java_lang_Boolean), null);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_backingMap__java_util_Collections_SetFromMap_.clear();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return this.f_backingMap__java_util_Collections_SetFromMap_.containsKey(o);\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return $Equality.$same(o, this) || $Objects.m_equals__java_lang_Object__java_lang_Object(this.m_keySet___$p_java_util_Collections_SetFromMap(), o);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return $Objects.m_hashCode__java_lang_Object(this.m_keySet___$p_java_util_Collections_SetFromMap());\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_SetFromMap_E\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return this.m_keySet___$p_java_util_Collections_SetFromMap().m_iterator__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    return !$Equality.$same(this.f_backingMap__java_util_Collections_SetFromMap_.remove(o), null);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.m_keySet___$p_java_util_Collections_SetFromMap().size();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return $Objects.m_toString__java_lang_Object(this.m_keySet___$p_java_util_Collections_SetFromMap());\n  }\n  \n  /**\n   * @return {Set\x3cC_SetFromMap_E\x3e}\n   * @public\n   */\n  m_keySet___$p_java_util_Collections_SetFromMap() {\n    if ($Equality.$same(this.f_keySet__java_util_Collections_SetFromMap_, null)) {\n      this.f_keySet__java_util_Collections_SetFromMap_ \x3d this.f_backingMap__java_util_Collections_SetFromMap_.keySet();\n    }\n    return this.f_keySet__java_util_Collections_SetFromMap_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_SetFromMap_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_SetFromMap_E\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_SetFromMap_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_SetFromMap_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_SetFromMap_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_SetFromMap_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SetFromMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SetFromMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SetFromMap.$clinit \x3d function() {};\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    AbstractSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SetFromMap, $Util.$makeClassName('java.util.Collections$SetFromMap'));\n\n\nSerializable.$markImplementor(SetFromMap);\n\n\nexports \x3d SetFromMap; \n//# sourceMappingURL\x3dCollections$SetFromMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$SetFromMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$SetFromMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.SetFromMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar SetFromMap \x3d goog.require('java.util.Collections.SetFromMap$impl');\nexports \x3d SetFromMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$SingletonList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$SingletonList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.SingletonList$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractList \x3d goog.require('java.util.AbstractList$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @template C_SingletonList_E\n * @extends {AbstractList\x3cC_SingletonList_E\x3e}\n * @implements {Serializable}\n  */\nclass SingletonList extends AbstractList {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {C_SingletonList_E} */\n    this.f_element__java_util_Collections_SingletonList_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SingletonList(Object)'.\n   * @template C_SingletonList_E\n   * @param {C_SingletonList_E} element\n   * @return {!SingletonList\x3cC_SingletonList_E\x3e}\n   * @public\n   */\n  static $create__java_lang_Object(element) {\n    SingletonList.$clinit();\n    let $instance \x3d new SingletonList();\n    $instance.$ctor__java_util_Collections_SingletonList__java_lang_Object(element);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SingletonList(Object)'.\n   * @param {C_SingletonList_E} element\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_SingletonList__java_lang_Object(element) {\n    this.$ctor__java_util_AbstractList__();\n    this.f_element__java_util_Collections_SingletonList_ \x3d element;\n  }\n  \n  /**\n   * @override\n   * @param {*} item\n   * @return {boolean}\n   * @public\n   */\n  contains(item) {\n    return Objects.m_equals__java_lang_Object__java_lang_Object(this.f_element__java_util_Collections_SingletonList_, item);\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_SingletonList_E}\n   * @public\n   */\n  getAtIndex(index) {\n    $InternalPreconditions.m_checkElementIndex__int__int(index, 1);\n    return this.f_element__java_util_Collections_SingletonList_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return 1;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {UnaryOperator\x3cC_SingletonList_E\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(arg0) {\n    List.m_replaceAll__$default__java_util_List__java_util_function_UnaryOperator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(arg0) {\n    List.m_sort__$default__java_util_List__java_util_Comparator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_SingletonList_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_SingletonList_E\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_SingletonList_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_SingletonList_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_SingletonList_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_SingletonList_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SingletonList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SingletonList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SingletonList.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractList.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SingletonList, $Util.$makeClassName('java.util.Collections$SingletonList'));\n\n\nSerializable.$markImplementor(SingletonList);\n\n\nexports \x3d SingletonList; \n//# sourceMappingURL\x3dCollections$SingletonList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$SingletonList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$SingletonList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.SingletonList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _List \x3d goog.require('java.util.List');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar SingletonList \x3d goog.require('java.util.Collections.SingletonList$impl');\nexports \x3d SingletonList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableCollectionIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableCollectionIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableCollectionIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_UnmodifiableCollectionIterator_T\n * @implements {Iterator\x3cC_UnmodifiableCollectionIterator_T\x3e}\n  */\nclass UnmodifiableCollectionIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Iterator\x3c?\x3e} */\n    this.f_it__java_util_Collections_UnmodifiableCollectionIterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableCollectionIterator(Iterator)'.\n   * @template C_UnmodifiableCollectionIterator_T\n   * @param {Iterator\x3c?\x3e} it\n   * @return {!UnmodifiableCollectionIterator\x3cC_UnmodifiableCollectionIterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_Iterator(it) {\n    UnmodifiableCollectionIterator.$clinit();\n    let $instance \x3d new UnmodifiableCollectionIterator();\n    $instance.$ctor__java_util_Collections_UnmodifiableCollectionIterator__java_util_Iterator(it);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableCollectionIterator(Iterator)'.\n   * @param {Iterator\x3c?\x3e} it\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableCollectionIterator__java_util_Iterator(it) {\n    this.$ctor__java_lang_Object__();\n    this.f_it__java_util_Collections_UnmodifiableCollectionIterator_ \x3d it;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_it__java_util_Collections_UnmodifiableCollectionIterator_.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableCollectionIterator_T}\n   * @public\n   */\n  m_next__() {\n    return this.f_it__java_util_Collections_UnmodifiableCollectionIterator_.m_next__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableCollectionIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableCollectionIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableCollectionIterator.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableCollectionIterator, $Util.$makeClassName('java.util.Collections$UnmodifiableCollectionIterator'));\n\n\nIterator.$markImplementor(UnmodifiableCollectionIterator);\n\n\nexports \x3d UnmodifiableCollectionIterator; \n//# sourceMappingURL\x3dCollections$UnmodifiableCollectionIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableCollectionIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableCollectionIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableCollectionIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar UnmodifiableCollectionIterator \x3d goog.require('java.util.Collections.UnmodifiableCollectionIterator$impl');\nexports \x3d UnmodifiableCollectionIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableCollection.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableCollection.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableCollection$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Collection \x3d goog.require('java.util.Collection$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet UnmodifiableCollectionIterator \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableCollectionIterator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableCollection_T\n * @implements {Collection\x3cC_UnmodifiableCollection_T\x3e}\n  */\nclass UnmodifiableCollection extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Collection\x3c?\x3e} */\n    this.f_coll__java_util_Collections_UnmodifiableCollection;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableCollection(Collection)'.\n   * @template C_UnmodifiableCollection_T\n   * @param {Collection\x3c?\x3e} coll\n   * @return {!UnmodifiableCollection\x3cC_UnmodifiableCollection_T\x3e}\n   * @public\n   */\n  static $create__java_util_Collection(coll) {\n    UnmodifiableCollection.$clinit();\n    let $instance \x3d new UnmodifiableCollection();\n    $instance.$ctor__java_util_Collections_UnmodifiableCollection__java_util_Collection(coll);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableCollection(Collection)'.\n   * @param {Collection\x3c?\x3e} coll\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableCollection__java_util_Collection(coll) {\n    this.$ctor__java_lang_Object__();\n    this.f_coll__java_util_Collections_UnmodifiableCollection \x3d coll;\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableCollection_T} o\n   * @return {boolean}\n   * @public\n   */\n  add(o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAll(c) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.contains(o);\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  containsAll(c) {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.containsAll(c);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.isEmpty();\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_UnmodifiableCollection_T\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!UnmodifiableCollectionIterator\x3cC_UnmodifiableCollection_T\x3e} */ (UnmodifiableCollectionIterator.$create__java_util_Iterator(this.f_coll__java_util_Collections_UnmodifiableCollection.m_iterator__()));\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  removeAll(c) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  retainAll(c) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} p\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(p) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.size();\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  toArray() {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.toArray();\n  }\n  \n  /**\n   * @override\n   * @template M_UnmodifiableCollection_toArray_E\n   * @param {Array\x3cM_UnmodifiableCollection_toArray_E\x3e} a\n   * @return {Array\x3cM_UnmodifiableCollection_toArray_E\x3e}\n   * @public\n   */\n  m_toArray__arrayOf_java_lang_Object(a) {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.m_toArray__arrayOf_java_lang_Object(a);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return $Objects.m_toString__java_lang_Object(this.f_coll__java_util_Collections_UnmodifiableCollection);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableCollection_T\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_UnmodifiableCollection_T\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_UnmodifiableCollection_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_UnmodifiableCollection_T\x3e} */ (Collection.m_spliterator__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableCollection_T\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_UnmodifiableCollection_T\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableCollection;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableCollection);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableCollection.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    UnmodifiableCollectionIterator \x3d goog.module.get('java.util.Collections.UnmodifiableCollectionIterator$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n    Collection.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableCollection, $Util.$makeClassName('java.util.Collections$UnmodifiableCollection'));\n\n\nCollection.$markImplementor(UnmodifiableCollection);\n\n\nexports \x3d UnmodifiableCollection; \n//# sourceMappingURL\x3dCollections$UnmodifiableCollection.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableCollection.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableCollection.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableCollection');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _UnmodifiableCollectionIterator \x3d goog.require('java.util.Collections.UnmodifiableCollectionIterator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection$impl');\nexports \x3d UnmodifiableCollection;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableListIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableListIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableListIterator$impl');\n\n\nconst UnmodifiableCollectionIterator \x3d goog.require('java.util.Collections.UnmodifiableCollectionIterator$impl');\nconst ListIterator \x3d goog.require('java.util.ListIterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_UnmodifiableListIterator_T\n * @extends {UnmodifiableCollectionIterator\x3cC_UnmodifiableListIterator_T\x3e}\n * @implements {ListIterator\x3cC_UnmodifiableListIterator_T\x3e}\n  */\nclass UnmodifiableListIterator extends UnmodifiableCollectionIterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ListIterator\x3c?\x3e} */\n    this.f_lit__java_util_Collections_UnmodifiableListIterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableListIterator(ListIterator)'.\n   * @template C_UnmodifiableListIterator_T\n   * @param {ListIterator\x3c?\x3e} lit\n   * @return {!UnmodifiableListIterator\x3cC_UnmodifiableListIterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_ListIterator(lit) {\n    UnmodifiableListIterator.$clinit();\n    let $instance \x3d new UnmodifiableListIterator();\n    $instance.$ctor__java_util_Collections_UnmodifiableListIterator__java_util_ListIterator(lit);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableListIterator(ListIterator)'.\n   * @param {ListIterator\x3c?\x3e} lit\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableListIterator__java_util_ListIterator(lit) {\n    this.$ctor__java_util_Collections_UnmodifiableCollectionIterator__java_util_Iterator(lit);\n    this.f_lit__java_util_Collections_UnmodifiableListIterator_ \x3d lit;\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableListIterator_T} o\n   * @return {void}\n   * @public\n   */\n  m_add__java_lang_Object(o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasPrevious__() {\n    return this.f_lit__java_util_Collections_UnmodifiableListIterator_.m_hasPrevious__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_nextIndex__() {\n    return this.f_lit__java_util_Collections_UnmodifiableListIterator_.m_nextIndex__();\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableListIterator_T}\n   * @public\n   */\n  m_previous__() {\n    return this.f_lit__java_util_Collections_UnmodifiableListIterator_.m_previous__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_previousIndex__() {\n    return this.f_lit__java_util_Collections_UnmodifiableListIterator_.m_previousIndex__();\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableListIterator_T} o\n   * @return {void}\n   * @public\n   */\n  m_set__java_lang_Object(o) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableListIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableListIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableListIterator.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    UnmodifiableCollectionIterator.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableListIterator, $Util.$makeClassName('java.util.Collections$UnmodifiableListIterator'));\n\n\nListIterator.$markImplementor(UnmodifiableListIterator);\n\n\nexports \x3d UnmodifiableListIterator; \n//# sourceMappingURL\x3dCollections$UnmodifiableListIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableListIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableListIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableListIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableCollectionIterator \x3d goog.require('java.util.Collections.UnmodifiableCollectionIterator');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar UnmodifiableListIterator \x3d goog.require('java.util.Collections.UnmodifiableListIterator$impl');\nexports \x3d UnmodifiableListIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableList$impl');\n\n\nconst UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection$impl');\nconst List \x3d goog.require('java.util.List$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet UnmodifiableListIterator \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableListIterator$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableList_T\n * @extends {UnmodifiableCollection\x3cC_UnmodifiableList_T\x3e}\n * @implements {List\x3cC_UnmodifiableList_T\x3e}\n  */\nclass UnmodifiableList extends UnmodifiableCollection {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {List\x3c?\x3e} */\n    this.f_list__java_util_Collections_UnmodifiableList_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableList(List)'.\n   * @template C_UnmodifiableList_T\n   * @param {List\x3c?\x3e} list\n   * @return {!UnmodifiableList\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  static $create__java_util_List(list) {\n    UnmodifiableList.$clinit();\n    let $instance \x3d new UnmodifiableList();\n    $instance.$ctor__java_util_Collections_UnmodifiableList__java_util_List(list);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableList(List)'.\n   * @param {List\x3c?\x3e} list\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableList__java_util_List(list) {\n    this.$ctor__java_util_Collections_UnmodifiableCollection__java_util_Collection(list);\n    this.f_list__java_util_Collections_UnmodifiableList_ \x3d list;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_UnmodifiableList_T} element\n   * @return {void}\n   * @public\n   */\n  addAtIndex(index, element) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {Collection\x3c?\x3e} c\n   * @return {boolean}\n   * @public\n   */\n  addAllAtIndex(index, c) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return $Objects.m_equals__java_lang_Object__java_lang_Object(this.f_list__java_util_Collections_UnmodifiableList_, o);\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_UnmodifiableList_T}\n   * @public\n   */\n  getAtIndex(index) {\n    return this.f_list__java_util_Collections_UnmodifiableList_.getAtIndex(index);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return $Objects.m_hashCode__java_lang_Object(this.f_list__java_util_Collections_UnmodifiableList_);\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  indexOf(o) {\n    return this.f_list__java_util_Collections_UnmodifiableList_.indexOf(o);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.f_list__java_util_Collections_UnmodifiableList_.isEmpty();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  lastIndexOf(o) {\n    return this.f_list__java_util_Collections_UnmodifiableList_.lastIndexOf(o);\n  }\n  \n  /**\n   * @override\n   * @return {ListIterator\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  m_listIterator__() {\n    return this.m_listIterator__int(0);\n  }\n  \n  /**\n   * @override\n   * @param {number} from\n   * @return {ListIterator\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  m_listIterator__int(from) {\n    return /**@type {!UnmodifiableListIterator\x3cC_UnmodifiableList_T\x3e} */ (UnmodifiableListIterator.$create__java_util_ListIterator(this.f_list__java_util_Collections_UnmodifiableList_.m_listIterator__int(from)));\n  }\n  \n  /**\n   * @override\n   * @param {UnaryOperator\x3cC_UnmodifiableList_T\x3e} operator\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(operator) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(c) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_UnmodifiableList_T}\n   * @public\n   */\n  removeAtIndex(index) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_UnmodifiableList_T} element\n   * @return {C_UnmodifiableList_T}\n   * @public\n   */\n  setAtIndex(index, element) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {List\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  subList(fromIndex, toIndex) {\n    return /**@type {!UnmodifiableList\x3cC_UnmodifiableList_T\x3e} */ (UnmodifiableList.$create__java_util_List(this.f_list__java_util_Collections_UnmodifiableList_.subList(fromIndex, toIndex)));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_UnmodifiableList_T\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_UnmodifiableList_T\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableList_T\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_UnmodifiableList_T\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableList.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    UnmodifiableListIterator \x3d goog.module.get('java.util.Collections.UnmodifiableListIterator$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    UnmodifiableCollection.$clinit();\n    List.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableList, $Util.$makeClassName('java.util.Collections$UnmodifiableList'));\n\n\nList.$markImplementor(UnmodifiableList);\n\n\nexports \x3d UnmodifiableList; \n//# sourceMappingURL\x3dCollections$UnmodifiableList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection');\nconst _List \x3d goog.require('java.util.List');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _UnmodifiableListIterator \x3d goog.require('java.util.Collections.UnmodifiableListIterator');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableList \x3d goog.require('java.util.Collections.UnmodifiableList$impl');\nexports \x3d UnmodifiableList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableSet$impl');\n\n\nconst UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection$impl');\nconst Set \x3d goog.require('java.util.Set$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableSet_T\n * @extends {UnmodifiableCollection\x3cC_UnmodifiableSet_T\x3e}\n * @implements {Set\x3cC_UnmodifiableSet_T\x3e}\n  */\nclass UnmodifiableSet extends UnmodifiableCollection {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableSet(Set)'.\n   * @template C_UnmodifiableSet_T\n   * @param {Set\x3c?\x3e} set\n   * @return {!UnmodifiableSet\x3cC_UnmodifiableSet_T\x3e}\n   * @public\n   */\n  static $create__java_util_Set(set) {\n    UnmodifiableSet.$clinit();\n    let $instance \x3d new UnmodifiableSet();\n    $instance.$ctor__java_util_Collections_UnmodifiableSet__java_util_Set(set);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableSet(Set)'.\n   * @param {Set\x3c?\x3e} set\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableSet__java_util_Set(set) {\n    this.$ctor__java_util_Collections_UnmodifiableCollection__java_util_Collection(set);\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return $Objects.m_equals__java_lang_Object__java_lang_Object(this.f_coll__java_util_Collections_UnmodifiableCollection, o);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return $Objects.m_hashCode__java_lang_Object(this.f_coll__java_util_Collections_UnmodifiableCollection);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_UnmodifiableSet_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_UnmodifiableSet_T\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableSet_T\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_UnmodifiableSet_T\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableSet_T\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_UnmodifiableSet_T\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableSet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableSet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    UnmodifiableCollection.$clinit();\n    Set.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableSet, $Util.$makeClassName('java.util.Collections$UnmodifiableSet'));\n\n\nSet.$markImplementor(UnmodifiableSet);\n\n\nexports \x3d UnmodifiableSet; \n//# sourceMappingURL\x3dCollections$UnmodifiableSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection');\nconst _Set \x3d goog.require('java.util.Set');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet$impl');\nexports \x3d UnmodifiableSet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Entry \x3d goog.require('java.util.Map.Entry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_K, C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V\n * @implements {Entry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_K, C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V\x3e}\n  */\nclass UnmodifiableEntry extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Entry\x3c?, ?\x3e} */\n    this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableEntry(Entry)'.\n   * @template C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_K, C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {!UnmodifiableEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_K, C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map_Entry(entry) {\n    UnmodifiableEntry.$clinit();\n    let $instance \x3d new UnmodifiableEntry();\n    $instance.$ctor__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry__java_util_Map_Entry(entry);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableEntry(Entry)'.\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry__java_util_Map_Entry(entry) {\n    this.$ctor__java_lang_Object__();\n    this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_ \x3d entry;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_.equals(o);\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_K}\n   * @public\n   */\n  m_getKey__() {\n    return this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_.m_getKey__();\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V}\n   * @public\n   */\n  m_getValue__() {\n    return this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_.m_getValue__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_.hashCode();\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V} value\n   * @return {C_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_V}\n   * @public\n   */\n  m_setValue__java_lang_Object(value) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return $Objects.m_toString__java_lang_Object(this.f_entry__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry_);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableEntry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableEntry);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableEntry.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableEntry, $Util.$makeClassName('java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry'));\n\n\nEntry.$markImplementor(UnmodifiableEntry);\n\n\nexports \x3d UnmodifiableEntry; \n//# sourceMappingURL\x3dCollections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableEntry \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry$impl');\nexports \x3d UnmodifiableEntry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet UnmodifiableEntrySet \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet$impl');\nlet UnmodifiableEntry \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\n * @implements {Iterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {UnmodifiableEntrySet\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} */\n    this.f_$outer_this__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_1;\n    /** @public {Iterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} */\n    this.$c_it;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(UnmodifiableEntrySet, Iterator)'.\n   * @template C_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\n   * @param {UnmodifiableEntrySet\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} $c_it\n   * @return {!$1\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e}\n   * @public\n   */\n  static $create__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet__java_util_Iterator($outer_this, $c_it) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_1__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet__java_util_Iterator($outer_this, $c_it);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(UnmodifiableEntrySet, Iterator)'.\n   * @param {UnmodifiableEntrySet\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} $c_it\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_1__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet__java_util_Iterator($outer_this, $c_it) {\n    this.f_$outer_this__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet_1 \x3d $outer_this;\n    this.$c_it \x3d $c_it;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.$c_it.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e}\n   * @public\n   */\n  m_next__() {\n    return /**@type {!UnmodifiableEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} */ (UnmodifiableEntry.$create__java_util_Map_Entry(/**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(this.$c_it.m_next__(), Entry))));\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    UnmodifiableEntry \x3d goog.module.get('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1'));\n\n\nIterator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dCollections$UnmodifiableMap$UnmodifiableEntrySet$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _UnmodifiableEntrySet \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet');\nconst _UnmodifiableEntry \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet$impl');\n\n\nconst UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$1$impl');\nlet UnmodifiableEntry \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\n * @extends {UnmodifiableSet\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e}\n  */\nclass UnmodifiableEntrySet extends UnmodifiableSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableEntrySet(Set)'.\n   * @template C_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\n   * @param {Set\x3c?\x3e} s\n   * @return {!UnmodifiableEntrySet\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e}\n   * @public\n   */\n  static $create__java_util_Set(s) {\n    UnmodifiableEntrySet.$clinit();\n    let $instance \x3d new UnmodifiableEntrySet();\n    $instance.$ctor__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet__java_util_Set(s);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableEntrySet(Set)'.\n   * @param {Set\x3c?\x3e} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet__java_util_Set(s) {\n    this.$ctor__java_util_Collections_UnmodifiableSet__java_util_Set(/**@type {Set\x3cEntry\x3e} */ ($Casts.$to(s, Set)));\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.contains(o);\n  }\n  \n  /**\n   * @override\n   * @param {Collection\x3c?\x3e} o\n   * @return {boolean}\n   * @public\n   */\n  containsAll(o) {\n    return this.f_coll__java_util_Collections_UnmodifiableCollection.containsAll(o);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e}\n   * @public\n   */\n  m_iterator__() {\n    let it \x3d /**@type {Iterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} */ ($Casts.$to(this.f_coll__java_util_Collections_UnmodifiableCollection.m_iterator__(), Iterator));\n    return /**@type {!$1\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} */ ($1.$create__java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet__java_util_Iterator(this, it));\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  toArray() {\n    let array \x3d super.toArray();\n    this.m_wrap__arrayOf_java_lang_Object__int_$p_java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet(array, array.length);\n    return array;\n  }\n  \n  /**\n   * @override\n   * @template M_UnmodifiableMap_UnmodifiableEntrySet_toArray_T\n   * @param {Array\x3cM_UnmodifiableMap_UnmodifiableEntrySet_toArray_T\x3e} a\n   * @return {Array\x3cM_UnmodifiableMap_UnmodifiableEntrySet_toArray_T\x3e}\n   * @public\n   */\n  m_toArray__arrayOf_java_lang_Object(a) {\n    let result \x3d super.m_toArray__arrayOf_java_lang_Object(a);\n    this.m_wrap__arrayOf_java_lang_Object__int_$p_java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet(result, this.f_coll__java_util_Collections_UnmodifiableCollection.size());\n    return /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(result, j_l_Object, 1));\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  m_wrap__arrayOf_java_lang_Object__int_$p_java_util_Collections_UnmodifiableMap_UnmodifiableEntrySet(array, size) {\n    for (let i \x3d 0; i \x3c size; ++i) {\n      $Arrays.$set(array, i, /**@type {!UnmodifiableEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} */ (UnmodifiableEntry.$create__java_util_Map_Entry(/**@type {Entry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e} */ ($Casts.$to(array[i], Entry)))));\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cEntry\x3cC_UnmodifiableMap_UnmodifiableEntrySet_K, C_UnmodifiableMap_UnmodifiableEntrySet_V\x3e\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableEntrySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableEntrySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableEntrySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    $1 \x3d goog.module.get('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$1$impl');\n    UnmodifiableEntry \x3d goog.module.get('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    UnmodifiableSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableEntrySet, $Util.$makeClassName('java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet'));\n\n\n\n\nexports \x3d UnmodifiableEntrySet; \n//# sourceMappingURL\x3dCollections$UnmodifiableMap$UnmodifiableEntrySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$1 \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.$1');\nconst _UnmodifiableEntry \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar UnmodifiableEntrySet \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet$impl');\nexports \x3d UnmodifiableEntrySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableMap$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Map \x3d goog.require('java.util.Map$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet UnmodifiableCollection \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableCollection$impl');\nlet UnmodifiableEntrySet \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet$impl');\nlet UnmodifiableSet \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableSet$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableMap_K, C_UnmodifiableMap_V\n * @implements {Map\x3cC_UnmodifiableMap_K, C_UnmodifiableMap_V\x3e}\n  */\nclass UnmodifiableMap extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {UnmodifiableSet\x3cEntry\x3cC_UnmodifiableMap_K, C_UnmodifiableMap_V\x3e\x3e} */\n    this.f_entrySet__java_util_Collections_UnmodifiableMap_;\n    /** @public {UnmodifiableSet\x3cC_UnmodifiableMap_K\x3e} */\n    this.f_keySet__java_util_Collections_UnmodifiableMap_;\n    /** @public {Map\x3c?, ?\x3e} */\n    this.f_map__java_util_Collections_UnmodifiableMap_;\n    /** @public {UnmodifiableCollection\x3cC_UnmodifiableMap_V\x3e} */\n    this.f_values__java_util_Collections_UnmodifiableMap_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableMap(Map)'.\n   * @template C_UnmodifiableMap_K, C_UnmodifiableMap_V\n   * @param {Map\x3c?, ?\x3e} map\n   * @return {!UnmodifiableMap\x3cC_UnmodifiableMap_K, C_UnmodifiableMap_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map(map) {\n    UnmodifiableMap.$clinit();\n    let $instance \x3d new UnmodifiableMap();\n    $instance.$ctor__java_util_Collections_UnmodifiableMap__java_util_Map(map);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableMap(Map)'.\n   * @param {Map\x3c?, ?\x3e} map\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableMap__java_util_Map(map) {\n    this.$ctor__java_lang_Object__();\n    this.f_map__java_util_Collections_UnmodifiableMap_ \x3d map;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  containsKey(key) {\n    return this.f_map__java_util_Collections_UnmodifiableMap_.containsKey(key);\n  }\n  \n  /**\n   * @override\n   * @param {*} val\n   * @return {boolean}\n   * @public\n   */\n  containsValue(val) {\n    return this.f_map__java_util_Collections_UnmodifiableMap_.containsValue(val);\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cEntry\x3cC_UnmodifiableMap_K, C_UnmodifiableMap_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n    if ($Equality.$same(this.f_entrySet__java_util_Collections_UnmodifiableMap_, null)) {\n      this.f_entrySet__java_util_Collections_UnmodifiableMap_ \x3d /**@type {!UnmodifiableEntrySet\x3cC_UnmodifiableMap_K, C_UnmodifiableMap_V\x3e} */ (UnmodifiableEntrySet.$create__java_util_Set(this.f_map__java_util_Collections_UnmodifiableMap_.m_entrySet__()));\n    }\n    return this.f_entrySet__java_util_Collections_UnmodifiableMap_;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return $Objects.m_equals__java_lang_Object__java_lang_Object(this.f_map__java_util_Collections_UnmodifiableMap_, o);\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  get(key) {\n    return this.f_map__java_util_Collections_UnmodifiableMap_.get(key);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return $Objects.m_hashCode__java_lang_Object(this.f_map__java_util_Collections_UnmodifiableMap_);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.f_map__java_util_Collections_UnmodifiableMap_.isEmpty();\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cC_UnmodifiableMap_K\x3e}\n   * @public\n   */\n  keySet() {\n    if ($Equality.$same(this.f_keySet__java_util_Collections_UnmodifiableMap_, null)) {\n      this.f_keySet__java_util_Collections_UnmodifiableMap_ \x3d /**@type {!UnmodifiableSet\x3cC_UnmodifiableMap_K\x3e} */ (UnmodifiableSet.$create__java_util_Set(this.f_map__java_util_Collections_UnmodifiableMap_.keySet()));\n    }\n    return this.f_keySet__java_util_Collections_UnmodifiableMap_;\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableMap_K} key\n   * @param {C_UnmodifiableMap_V} value\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  put(key, value) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {Map\x3c?, ?\x3e} t\n   * @return {void}\n   * @public\n   */\n  putAll(t) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  remove(key) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_map__java_util_Collections_UnmodifiableMap_.size();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return $Objects.m_toString__java_lang_Object(this.f_map__java_util_Collections_UnmodifiableMap_);\n  }\n  \n  /**\n   * @override\n   * @return {Collection\x3cC_UnmodifiableMap_V\x3e}\n   * @public\n   */\n  values() {\n    if ($Equality.$same(this.f_values__java_util_Collections_UnmodifiableMap_, null)) {\n      this.f_values__java_util_Collections_UnmodifiableMap_ \x3d /**@type {!UnmodifiableCollection\x3cC_UnmodifiableMap_V\x3e} */ (UnmodifiableCollection.$create__java_util_Collection(this.f_map__java_util_Collections_UnmodifiableMap_.values()));\n    }\n    return this.f_values__java_util_Collections_UnmodifiableMap_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @return {C_UnmodifiableMap_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableMap_K} arg0\n   * @param {C_UnmodifiableMap_V} arg1\n   * @param {C_UnmodifiableMap_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableMap.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    UnmodifiableCollection \x3d goog.module.get('java.util.Collections.UnmodifiableCollection$impl');\n    UnmodifiableEntrySet \x3d goog.module.get('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet$impl');\n    UnmodifiableSet \x3d goog.module.get('java.util.Collections.UnmodifiableSet$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableMap, $Util.$makeClassName('java.util.Collections$UnmodifiableMap'));\n\n\nMap.$markImplementor(UnmodifiableMap);\n\n\nexports \x3d UnmodifiableMap; \n//# sourceMappingURL\x3dCollections$UnmodifiableMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Map \x3d goog.require('java.util.Map');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection');\nconst _UnmodifiableEntrySet \x3d goog.require('java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet');\nconst _UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableMap \x3d goog.require('java.util.Collections.UnmodifiableMap$impl');\nexports \x3d UnmodifiableMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableRandomAccessList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableRandomAccessList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableRandomAccessList$impl');\n\n\nconst UnmodifiableList \x3d goog.require('java.util.Collections.UnmodifiableList$impl');\nconst RandomAccess \x3d goog.require('java.util.RandomAccess$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_UnmodifiableRandomAccessList_T\n * @extends {UnmodifiableList\x3cC_UnmodifiableRandomAccessList_T\x3e}\n * @implements {RandomAccess}\n  */\nclass UnmodifiableRandomAccessList extends UnmodifiableList {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableRandomAccessList(List)'.\n   * @template C_UnmodifiableRandomAccessList_T\n   * @param {List\x3c?\x3e} list\n   * @return {!UnmodifiableRandomAccessList\x3cC_UnmodifiableRandomAccessList_T\x3e}\n   * @public\n   */\n  static $create__java_util_List(list) {\n    UnmodifiableRandomAccessList.$clinit();\n    let $instance \x3d new UnmodifiableRandomAccessList();\n    $instance.$ctor__java_util_Collections_UnmodifiableRandomAccessList__java_util_List(list);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableRandomAccessList(List)'.\n   * @param {List\x3c?\x3e} list\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableRandomAccessList__java_util_List(list) {\n    this.$ctor__java_util_Collections_UnmodifiableList__java_util_List(list);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_UnmodifiableRandomAccessList_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_UnmodifiableRandomAccessList_T\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableRandomAccessList_T\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_UnmodifiableRandomAccessList_T\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableRandomAccessList_T\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_UnmodifiableRandomAccessList_T\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableRandomAccessList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableRandomAccessList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableRandomAccessList.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    UnmodifiableList.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableRandomAccessList, $Util.$makeClassName('java.util.Collections$UnmodifiableRandomAccessList'));\n\n\nRandomAccess.$markImplementor(UnmodifiableRandomAccessList);\n\n\nexports \x3d UnmodifiableRandomAccessList; \n//# sourceMappingURL\x3dCollections$UnmodifiableRandomAccessList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableRandomAccessList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableRandomAccessList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableRandomAccessList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableList \x3d goog.require('java.util.Collections.UnmodifiableList');\nconst _RandomAccess \x3d goog.require('java.util.RandomAccess');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _List \x3d goog.require('java.util.List');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar UnmodifiableRandomAccessList \x3d goog.require('java.util.Collections.UnmodifiableRandomAccessList$impl');\nexports \x3d UnmodifiableRandomAccessList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/SortedMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.SortedMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.SortedMap$impl');\n\n\nconst Map \x3d goog.require('java.util.Map$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\n\n\n/**\n * @interface\n * @template C_K, C_V\n * @extends {Map\x3cC_K, C_V\x3e}\n */\nclass SortedMap {\n  /**\n   * @abstract\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_K}\n   * @public\n   */\n  m_firstKey__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} toKey\n   * @return {SortedMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object(toKey) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_K}\n   * @public\n   */\n  m_lastKey__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} fromKey\n   * @param {C_K} toKey\n   * @return {SortedMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__java_lang_Object(fromKey, toKey) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} fromKey\n   * @return {SortedMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object(fromKey) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Map.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_SortedMap \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_SortedMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_SortedMap;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SortedMap.$clinit \x3d function() {};\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(SortedMap, $Util.$makeClassName('java.util.SortedMap'));\n\n\nSortedMap.$markImplementor(/** @type {Function} */ (SortedMap));\n\n\nexports \x3d SortedMap; \n//# sourceMappingURL\x3dSortedMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/SortedMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.SortedMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.SortedMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Map \x3d goog.require('java.util.Map');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\n\n\n// Re-exports the implementation.\nvar SortedMap \x3d goog.require('java.util.SortedMap$impl');\nexports \x3d SortedMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableSortedMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableSortedMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableSortedMap$impl');\n\n\nconst UnmodifiableMap \x3d goog.require('java.util.Collections.UnmodifiableMap$impl');\nconst SortedMap \x3d goog.require('java.util.SortedMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\n * @extends {UnmodifiableMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e}\n * @implements {SortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e}\n  */\nclass UnmodifiableSortedMap extends UnmodifiableMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {SortedMap\x3cC_UnmodifiableSortedMap_K, ?\x3e} */\n    this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableSortedMap(SortedMap)'.\n   * @template C_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\n   * @param {SortedMap\x3cC_UnmodifiableSortedMap_K, ?\x3e} sortedMap\n   * @return {!UnmodifiableSortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e}\n   * @public\n   */\n  static $create__java_util_SortedMap(sortedMap) {\n    UnmodifiableSortedMap.$clinit();\n    let $instance \x3d new UnmodifiableSortedMap();\n    $instance.$ctor__java_util_Collections_UnmodifiableSortedMap__java_util_SortedMap(sortedMap);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableSortedMap(SortedMap)'.\n   * @param {SortedMap\x3cC_UnmodifiableSortedMap_K, ?\x3e} sortedMap\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableSortedMap__java_util_SortedMap(sortedMap) {\n    this.$ctor__java_util_Collections_UnmodifiableMap__java_util_Map(sortedMap);\n    this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_ \x3d sortedMap;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n    return this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_.m_comparator__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return $Objects.m_equals__java_lang_Object__java_lang_Object(this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_, o);\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableSortedMap_K}\n   * @public\n   */\n  m_firstKey__() {\n    return this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_.m_firstKey__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return $Objects.m_hashCode__java_lang_Object(this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_);\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} toKey\n   * @return {SortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object(toKey) {\n    return /**@type {!UnmodifiableSortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e} */ (UnmodifiableSortedMap.$create__java_util_SortedMap(this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_.m_headMap__java_lang_Object(toKey)));\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableSortedMap_K}\n   * @public\n   */\n  m_lastKey__() {\n    return this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_.m_lastKey__();\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} fromKey\n   * @param {C_UnmodifiableSortedMap_K} toKey\n   * @return {SortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__java_lang_Object(fromKey, toKey) {\n    return /**@type {!UnmodifiableSortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e} */ (UnmodifiableSortedMap.$create__java_util_SortedMap(this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_.m_subMap__java_lang_Object__java_lang_Object(fromKey, toKey)));\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} fromKey\n   * @return {SortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object(fromKey) {\n    return /**@type {!UnmodifiableSortedMap\x3cC_UnmodifiableSortedMap_K, C_UnmodifiableSortedMap_V\x3e} */ (UnmodifiableSortedMap.$create__java_util_SortedMap(this.f_sortedMap__java_util_Collections_UnmodifiableSortedMap_.m_tailMap__java_lang_Object(fromKey)));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @return {C_UnmodifiableSortedMap_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_UnmodifiableSortedMap_K} arg0\n   * @param {C_UnmodifiableSortedMap_V} arg1\n   * @param {C_UnmodifiableSortedMap_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableSortedMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableSortedMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableSortedMap.$clinit \x3d function() {};\n    Map \x3d goog.module.get('java.util.Map$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    UnmodifiableMap.$clinit();\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableSortedMap, $Util.$makeClassName('java.util.Collections$UnmodifiableSortedMap'));\n\n\nSortedMap.$markImplementor(UnmodifiableSortedMap);\n\n\nexports \x3d UnmodifiableSortedMap; \n//# sourceMappingURL\x3dCollections$UnmodifiableSortedMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableSortedMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableSortedMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableSortedMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableMap \x3d goog.require('java.util.Collections.UnmodifiableMap');\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Map \x3d goog.require('java.util.Map');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableSortedMap \x3d goog.require('java.util.Collections.UnmodifiableSortedMap$impl');\nexports \x3d UnmodifiableSortedMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/SortedSet$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.SortedSet$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.SortedSet.$1$impl');\n\n\nconst IteratorSpliterator \x3d goog.require('java.util.Spliterators.IteratorSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet SortedSet \x3d goog.forwardDeclare('java.util.SortedSet$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_E\n * @extends {IteratorSpliterator\x3cC_E\x3e}\n  */\nclass $1 extends IteratorSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {SortedSet\x3cC_E\x3e} */\n    this.f_$outer_this__java_util_SortedSet_1;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new IteratorSpliterator(SortedSet, Collection, int)'.\n   * @template C_E\n   * @param {SortedSet\x3cC_E\x3e} $outer_this\n   * @param {Collection\x3c?\x3e} $_0\n   * @param {number} $_1\n   * @return {!$1\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_SortedSet__java_util_Collection__int($outer_this, $_0, $_1) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_SortedSet_1__java_util_SortedSet__java_util_Collection__int($outer_this, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new IteratorSpliterator(SortedSet, Collection, int)'.\n   * @param {SortedSet\x3cC_E\x3e} $outer_this\n   * @param {Collection\x3c?\x3e} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_SortedSet_1__java_util_SortedSet__java_util_Collection__int($outer_this, $_0, $_1) {\n    this.f_$outer_this__java_util_SortedSet_1 \x3d $outer_this;\n    this.$ctor__java_util_Spliterators_IteratorSpliterator__java_util_Collection__int($_0, $_1);\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_$outer_this__java_util_SortedSet_1.m_comparator__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    IteratorSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.SortedSet$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dSortedSet$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/SortedSet$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.SortedSet$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.SortedSet.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IteratorSpliterator \x3d goog.require('java.util.Spliterators.IteratorSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _SortedSet \x3d goog.require('java.util.SortedSet');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.SortedSet.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/SortedSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.SortedSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.SortedSet$impl');\n\n\nconst Set \x3d goog.require('java.util.Set$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.SortedSet.$1$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {Set\x3cC_E\x3e}\n */\nclass SortedSet {\n  /**\n   * @abstract\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_first__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} toElement\n   * @return {SortedSet\x3cC_E\x3e}\n   * @public\n   */\n  m_headSet__java_lang_Object(toElement) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_last__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} fromElement\n   * @param {C_E} toElement\n   * @return {SortedSet\x3cC_E\x3e}\n   * @public\n   */\n  m_subSet__java_lang_Object__java_lang_Object(fromElement, toElement) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} fromElement\n   * @return {SortedSet\x3cC_E\x3e}\n   * @public\n   */\n  m_tailSet__java_lang_Object(fromElement) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @template C_E\n   * @param {SortedSet\x3cC_E\x3e} $thisArg\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  static m_spliterator__$default__java_util_SortedSet($thisArg) {\n    SortedSet.$clinit();\n    return /**@type {!$1\x3c*\x3e} */ ($1.$create__java_util_SortedSet__java_util_Collection__int($thisArg, $thisArg, Spliterator.f_DISTINCT__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator | Spliterator.f_SORTED__java_util_Spliterator));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Set.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_SortedSet \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_SortedSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_SortedSet;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SortedSet.$clinit \x3d function() {};\n    $1 \x3d goog.module.get('java.util.SortedSet.$1$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Set.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(SortedSet, $Util.$makeClassName('java.util.SortedSet'));\n\n\nSortedSet.$markImplementor(/** @type {Function} */ (SortedSet));\n\n\nexports \x3d SortedSet; \n//# sourceMappingURL\x3dSortedSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/SortedSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.SortedSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.SortedSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Set \x3d goog.require('java.util.Set');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$1 \x3d goog.require('java.util.SortedSet.$1');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\n\n\n// Re-exports the implementation.\nvar SortedSet \x3d goog.require('java.util.SortedSet$impl');\nexports \x3d SortedSet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableSortedSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableSortedSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections.UnmodifiableSortedSet$impl');\n\n\nconst UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet$impl');\nconst SortedSet \x3d goog.require('java.util.SortedSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_UnmodifiableSortedSet_E\n * @extends {UnmodifiableSet\x3cC_UnmodifiableSortedSet_E\x3e}\n * @implements {SortedSet\x3cC_UnmodifiableSortedSet_E\x3e}\n  */\nclass UnmodifiableSortedSet extends UnmodifiableSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {SortedSet\x3cC_UnmodifiableSortedSet_E\x3e} */\n    this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnmodifiableSortedSet(SortedSet)'.\n   * @template C_UnmodifiableSortedSet_E\n   * @param {SortedSet\x3c?\x3e} sortedSet\n   * @return {!UnmodifiableSortedSet\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  static $create__java_util_SortedSet(sortedSet) {\n    UnmodifiableSortedSet.$clinit();\n    let $instance \x3d new UnmodifiableSortedSet();\n    $instance.$ctor__java_util_Collections_UnmodifiableSortedSet__java_util_SortedSet(sortedSet);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnmodifiableSortedSet(SortedSet)'.\n   * @param {SortedSet\x3c?\x3e} sortedSet\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections_UnmodifiableSortedSet__java_util_SortedSet(sortedSet) {\n    this.$ctor__java_util_Collections_UnmodifiableSet__java_util_Set(sortedSet);\n    this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_ \x3d /**@type {SortedSet\x3cC_UnmodifiableSortedSet_E\x3e} */ ($Casts.$to(sortedSet, SortedSet));\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n    return this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_.m_comparator__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return $Objects.m_equals__java_lang_Object__java_lang_Object(this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_, o);\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableSortedSet_E}\n   * @public\n   */\n  m_first__() {\n    return this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_.m_first__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return $Objects.m_hashCode__java_lang_Object(this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_);\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableSortedSet_E} toElement\n   * @return {SortedSet\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  m_headSet__java_lang_Object(toElement) {\n    return /**@type {!UnmodifiableSortedSet\x3cC_UnmodifiableSortedSet_E\x3e} */ (UnmodifiableSortedSet.$create__java_util_SortedSet(this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_.m_headSet__java_lang_Object(toElement)));\n  }\n  \n  /**\n   * @override\n   * @return {C_UnmodifiableSortedSet_E}\n   * @public\n   */\n  m_last__() {\n    return this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_.m_last__();\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableSortedSet_E} fromElement\n   * @param {C_UnmodifiableSortedSet_E} toElement\n   * @return {SortedSet\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  m_subSet__java_lang_Object__java_lang_Object(fromElement, toElement) {\n    return /**@type {!UnmodifiableSortedSet\x3cC_UnmodifiableSortedSet_E\x3e} */ (UnmodifiableSortedSet.$create__java_util_SortedSet(this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_.m_subSet__java_lang_Object__java_lang_Object(fromElement, toElement)));\n  }\n  \n  /**\n   * @override\n   * @param {C_UnmodifiableSortedSet_E} fromElement\n   * @return {SortedSet\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  m_tailSet__java_lang_Object(fromElement) {\n    return /**@type {!UnmodifiableSortedSet\x3cC_UnmodifiableSortedSet_E\x3e} */ (UnmodifiableSortedSet.$create__java_util_SortedSet(this.f_sortedSet__java_util_Collections_UnmodifiableSortedSet_.m_tailSet__java_lang_Object(fromElement)));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_UnmodifiableSortedSet_E\x3e} */ (SortedSet.m_spliterator__$default__java_util_SortedSet(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_UnmodifiableSortedSet_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_UnmodifiableSortedSet_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_UnmodifiableSortedSet_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnmodifiableSortedSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnmodifiableSortedSet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnmodifiableSortedSet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    UnmodifiableSet.$clinit();\n    SortedSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnmodifiableSortedSet, $Util.$makeClassName('java.util.Collections$UnmodifiableSortedSet'));\n\n\nSortedSet.$markImplementor(UnmodifiableSortedSet);\n\n\nexports \x3d UnmodifiableSortedSet; \n//# sourceMappingURL\x3dCollections$UnmodifiableSortedSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections$UnmodifiableSortedSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections$UnmodifiableSortedSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections.UnmodifiableSortedSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet');\nconst _SortedSet \x3d goog.require('java.util.SortedSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar UnmodifiableSortedSet \x3d goog.require('java.util.Collections.UnmodifiableSortedSet$impl');\nexports \x3d UnmodifiableSortedSet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ConcurrentModificationDetector$ModCountable$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ConcurrentModificationDetector$ModCountable$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.ConcurrentModificationDetector.ModCountable.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('*'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dConcurrentModificationDetector$ModCountable$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ConcurrentModificationDetector$ModCountable$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ConcurrentModificationDetector$ModCountable$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.ConcurrentModificationDetector.ModCountable.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.util.ConcurrentModificationDetector.ModCountable.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ConcurrentModificationException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ConcurrentModificationException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.ConcurrentModificationException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\n\n\nclass ConcurrentModificationException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConcurrentModificationException()'.\n   * @return {!ConcurrentModificationException}\n   * @public\n   */\n  static $create__() {\n    ConcurrentModificationException.$clinit();\n    let $instance \x3d new ConcurrentModificationException();\n    $instance.$ctor__java_util_ConcurrentModificationException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConcurrentModificationException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ConcurrentModificationException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConcurrentModificationException(String)'.\n   * @param {?string} message\n   * @return {!ConcurrentModificationException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    ConcurrentModificationException.$clinit();\n    let $instance \x3d new ConcurrentModificationException();\n    $instance.$ctor__java_util_ConcurrentModificationException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConcurrentModificationException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ConcurrentModificationException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConcurrentModificationException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!ConcurrentModificationException}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    ConcurrentModificationException.$clinit();\n    let $instance \x3d new ConcurrentModificationException();\n    $instance.$ctor__java_util_ConcurrentModificationException__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConcurrentModificationException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ConcurrentModificationException__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConcurrentModificationException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!ConcurrentModificationException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    ConcurrentModificationException.$clinit();\n    let $instance \x3d new ConcurrentModificationException();\n    $instance.$ctor__java_util_ConcurrentModificationException__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConcurrentModificationException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ConcurrentModificationException__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ConcurrentModificationException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ConcurrentModificationException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ConcurrentModificationException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ConcurrentModificationException, $Util.$makeClassName('java.util.ConcurrentModificationException'));\n\n\n\n\nexports \x3d ConcurrentModificationException; \n//# sourceMappingURL\x3dConcurrentModificationException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ConcurrentModificationException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ConcurrentModificationException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.ConcurrentModificationException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\n\n\n// Re-exports the implementation.\nvar ConcurrentModificationException \x3d goog.require('java.util.ConcurrentModificationException$impl');\nexports \x3d ConcurrentModificationException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ConcurrentModificationDetector.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ConcurrentModificationDetector.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.ConcurrentModificationDetector$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('java.util.ConcurrentModificationDetector.ModCountable.$Overlay$impl');\nlet ConcurrentModificationException \x3d goog.forwardDeclare('java.util.ConcurrentModificationException$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass ConcurrentModificationDetector extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConcurrentModificationDetector()'.\n   * @return {!ConcurrentModificationDetector}\n   * @public\n   */\n  static $create__() {\n    ConcurrentModificationDetector.$clinit();\n    let $instance \x3d new ConcurrentModificationDetector();\n    $instance.$ctor__java_util_ConcurrentModificationDetector__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConcurrentModificationDetector()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_ConcurrentModificationDetector__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {*} host\n   * @return {void}\n   * @public\n   */\n  static m_structureChanged__java_lang_Object(host) {\n    ConcurrentModificationDetector.$clinit();\n    if (!ConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_) {\n      return;\n    }\n    let modCountable \x3d /**@type {*} */ ($Casts.$to(host, $Overlay));\n    let modCount \x3d modCountable.$modCount | 0;\n    modCountable.$modCount \x3d modCount + 1;\n  }\n  \n  /**\n   * @param {*} host\n   * @param {Iterator\x3c?\x3e} iterator\n   * @return {void}\n   * @public\n   */\n  static m_recordLastKnownStructure__java_lang_Object__java_util_Iterator(host, iterator) {\n    ConcurrentModificationDetector.$clinit();\n    if (!ConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_) {\n      return;\n    }\n    (/**@type {*} */ ($Casts.$to(iterator, $Overlay))).$modCount \x3d (/**@type {*} */ ($Casts.$to(host, $Overlay))).$modCount;\n  }\n  \n  /**\n   * @param {*} host\n   * @param {Iterator\x3c?\x3e} iterator\n   * @return {void}\n   * @public\n   */\n  static m_checkStructuralChange__java_lang_Object__java_util_Iterator(host, iterator) {\n    ConcurrentModificationDetector.$clinit();\n    if (!ConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_) {\n      return;\n    }\n    if ((/**@type {*} */ ($Casts.$to(iterator, $Overlay))).$modCount !\x3d (/**@type {*} */ ($Casts.$to(host, $Overlay))).$modCount) {\n      throw $Exceptions.toJs(ConcurrentModificationException.$create__());\n    }\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_API_CHECK__java_util_ConcurrentModificationDetector_() {\n    return (ConcurrentModificationDetector.$clinit(), ConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_API_CHECK__java_util_ConcurrentModificationDetector_(value) {\n    (ConcurrentModificationDetector.$clinit(), ConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ConcurrentModificationDetector;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ConcurrentModificationDetector);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ConcurrentModificationDetector.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('java.util.ConcurrentModificationDetector.ModCountable.$Overlay$impl');\n    ConcurrentModificationException \x3d goog.module.get('java.util.ConcurrentModificationException$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    ConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_ \x3d $InternalPreconditions.m_isApiChecked__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ConcurrentModificationDetector, $Util.$makeClassName('java.util.ConcurrentModificationDetector'));\n\n\n/** @private {boolean} */\nConcurrentModificationDetector.$f_API_CHECK__java_util_ConcurrentModificationDetector_ \x3d false;\n\n\n\n\nexports \x3d ConcurrentModificationDetector; \n//# sourceMappingURL\x3dConcurrentModificationDetector.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/ConcurrentModificationDetector.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.ConcurrentModificationDetector.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.ConcurrentModificationDetector');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('java.util.ConcurrentModificationDetector.ModCountable.$Overlay');\nconst _ConcurrentModificationException \x3d goog.require('java.util.ConcurrentModificationException');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar ConcurrentModificationDetector \x3d goog.require('java.util.ConcurrentModificationDetector$impl');\nexports \x3d ConcurrentModificationDetector;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractHashMap$EntrySetIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractHashMap$EntrySetIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractHashMap.EntrySetIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AbstractHashMap \x3d goog.forwardDeclare('java.util.AbstractHashMap$impl');\nlet ConcurrentModificationDetector \x3d goog.forwardDeclare('java.util.ConcurrentModificationDetector$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass EntrySetIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractHashMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator;\n    /** @public {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_stringMapEntries__java_util_AbstractHashMap_EntrySetIterator_;\n    /** @public {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_current__java_util_AbstractHashMap_EntrySetIterator_;\n    /** @public {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_last__java_util_AbstractHashMap_EntrySetIterator_;\n    /** @public {boolean} */\n    this.f_hasNext__java_util_AbstractHashMap_EntrySetIterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntrySetIterator(AbstractHashMap)'.\n   * @template C_K, C_V\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!EntrySetIterator\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractHashMap($outer_this) {\n    EntrySetIterator.$clinit();\n    let $instance \x3d new EntrySetIterator();\n    $instance.$ctor__java_util_AbstractHashMap_EntrySetIterator__java_util_AbstractHashMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntrySetIterator(AbstractHashMap)'.\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractHashMap_EntrySetIterator__java_util_AbstractHashMap($outer_this) {\n    this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_AbstractHashMap_EntrySetIterator();\n    ConcurrentModificationDetector.m_recordLastKnownStructure__java_lang_Object__java_util_Iterator($outer_this, this);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_hasNext__java_util_AbstractHashMap_EntrySetIterator_;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_computeHasNext___$p_java_util_AbstractHashMap_EntrySetIterator() {\n    if (this.f_current__java_util_AbstractHashMap_EntrySetIterator_.m_hasNext__()) {\n      return true;\n    }\n    if (!$Equality.$same(this.f_current__java_util_AbstractHashMap_EntrySetIterator_, this.f_stringMapEntries__java_util_AbstractHashMap_EntrySetIterator_)) {\n      return false;\n    }\n    this.f_current__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator.f_hashCodeMap__java_util_AbstractHashMap_.m_iterator__();\n    return this.f_current__java_util_AbstractHashMap_EntrySetIterator_.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_next__() {\n    ConcurrentModificationDetector.m_checkStructuralChange__java_lang_Object__java_util_Iterator(this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator, this);\n    $InternalPreconditions.m_checkElement__boolean(this.m_hasNext__());\n    this.f_last__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.f_current__java_util_AbstractHashMap_EntrySetIterator_;\n    let rv \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.f_current__java_util_AbstractHashMap_EntrySetIterator_.m_next__(), Entry));\n    this.f_hasNext__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.m_computeHasNext___$p_java_util_AbstractHashMap_EntrySetIterator();\n    return rv;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    $InternalPreconditions.m_checkState__boolean(!$Equality.$same(this.f_last__java_util_AbstractHashMap_EntrySetIterator_, null));\n    ConcurrentModificationDetector.m_checkStructuralChange__java_lang_Object__java_util_Iterator(this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator, this);\n    this.f_last__java_util_AbstractHashMap_EntrySetIterator_.m_remove__();\n    this.f_last__java_util_AbstractHashMap_EntrySetIterator_ \x3d null;\n    this.f_hasNext__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.m_computeHasNext___$p_java_util_AbstractHashMap_EntrySetIterator();\n    ConcurrentModificationDetector.m_recordLastKnownStructure__java_lang_Object__java_util_Iterator(this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator, this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_AbstractHashMap_EntrySetIterator() {\n    this.f_stringMapEntries__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.f_$outer_this__java_util_AbstractHashMap_EntrySetIterator.f_stringMap__java_util_AbstractHashMap_.m_iterator__();\n    this.f_current__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.f_stringMapEntries__java_util_AbstractHashMap_EntrySetIterator_;\n    this.f_hasNext__java_util_AbstractHashMap_EntrySetIterator_ \x3d this.m_computeHasNext___$p_java_util_AbstractHashMap_EntrySetIterator();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EntrySetIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EntrySetIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntrySetIterator.$clinit \x3d function() {};\n    ConcurrentModificationDetector \x3d goog.module.get('java.util.ConcurrentModificationDetector$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EntrySetIterator, $Util.$makeClassName('java.util.AbstractHashMap$EntrySetIterator'));\n\n\nIterator.$markImplementor(EntrySetIterator);\n\n\nexports \x3d EntrySetIterator; \n//# sourceMappingURL\x3dAbstractHashMap$EntrySetIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractHashMap$EntrySetIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractHashMap$EntrySetIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractHashMap.EntrySetIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AbstractHashMap \x3d goog.require('java.util.AbstractHashMap');\nconst _ConcurrentModificationDetector \x3d goog.require('java.util.ConcurrentModificationDetector');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar EntrySetIterator \x3d goog.require('java.util.AbstractHashMap.EntrySetIterator$impl');\nexports \x3d EntrySetIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractHashMap$EntrySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractHashMap$EntrySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractHashMap.EntrySet$impl');\n\n\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet AbstractHashMap \x3d goog.forwardDeclare('java.util.AbstractHashMap$impl');\nlet EntrySetIterator \x3d goog.forwardDeclare('java.util.AbstractHashMap.EntrySetIterator$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractSet\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass EntrySet extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractHashMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractHashMap_EntrySet;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntrySet(AbstractHashMap)'.\n   * @template C_K, C_V\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!EntrySet\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractHashMap($outer_this) {\n    EntrySet.$clinit();\n    let $instance \x3d new EntrySet();\n    $instance.$ctor__java_util_AbstractHashMap_EntrySet__java_util_AbstractHashMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntrySet(AbstractHashMap)'.\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractHashMap_EntrySet__java_util_AbstractHashMap($outer_this) {\n    this.f_$outer_this__java_util_AbstractHashMap_EntrySet \x3d $outer_this;\n    this.$ctor__java_util_AbstractSet__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_$outer_this__java_util_AbstractHashMap_EntrySet.clear();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    if (Entry.$isInstance(o)) {\n      return this.f_$outer_this__java_util_AbstractHashMap_EntrySet.m_containsEntry__java_util_Map_Entry_$pp_java_util(/**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(o, Entry)));\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!EntrySetIterator\x3cC_K, C_V\x3e} */ (EntrySetIterator.$create__java_util_AbstractHashMap(this.f_$outer_this__java_util_AbstractHashMap_EntrySet));\n  }\n  \n  /**\n   * @override\n   * @param {*} entry\n   * @return {boolean}\n   * @public\n   */\n  remove(entry) {\n    if (this.contains(entry)) {\n      let key \x3d (/**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(entry, Entry))).m_getKey__();\n      this.f_$outer_this__java_util_AbstractHashMap_EntrySet.remove(key);\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_$outer_this__java_util_AbstractHashMap_EntrySet.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EntrySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EntrySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntrySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    EntrySetIterator \x3d goog.module.get('java.util.AbstractHashMap.EntrySetIterator$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EntrySet, $Util.$makeClassName('java.util.AbstractHashMap$EntrySet'));\n\n\n\n\nexports \x3d EntrySet; \n//# sourceMappingURL\x3dAbstractHashMap$EntrySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractHashMap$EntrySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractHashMap$EntrySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractHashMap.EntrySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _AbstractHashMap \x3d goog.require('java.util.AbstractHashMap');\nconst _EntrySetIterator \x3d goog.require('java.util.AbstractHashMap.EntrySetIterator');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar EntrySet \x3d goog.require('java.util.AbstractHashMap.EntrySet$impl');\nexports \x3d EntrySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$Iterator$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$Iterator$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalJsMap.Iterator.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('IteratorIterable'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dInternalJsMap$Iterator$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$Iterator$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$Iterator$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalJsMap.Iterator.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.util.InternalJsMap.Iterator.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$IteratorEntry$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$IteratorEntry$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\n\n\nclass $Overlay {\n  /**\n   * @template C_IteratorEntry_V\n   * @param {IIterableResult\x3cC_IteratorEntry_V\x3e} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_getKey__java_util_InternalJsMap_IteratorEntry($thisArg) {\n    $Overlay.$clinit();\n    return /**@type {?string} */ (JsUtils.m_uncheckedCast__java_lang_Object($thisArg.value[0]));\n  }\n  \n  /**\n   * @template C_IteratorEntry_V\n   * @param {IIterableResult\x3cC_IteratorEntry_V\x3e} $thisArg\n   * @return {C_IteratorEntry_V}\n   * @public\n   */\n  static m_getValue__java_util_InternalJsMap_IteratorEntry($thisArg) {\n    $Overlay.$clinit();\n    return /**@type {*} */ (JsUtils.m_uncheckedCast__java_lang_Object($thisArg.value[1]));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('IIterableResult'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dInternalJsMap$IteratorEntry$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$IteratorEntry$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$IteratorEntry$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalJsMap.IteratorEntry.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalHashCodeMap$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalHashCodeMap$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalHashCodeMap.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet InternalHashCodeMap \x3d goog.forwardDeclare('java.util.InternalHashCodeMap$impl');\nlet Iterator_$Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.Iterator.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {InternalHashCodeMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_InternalHashCodeMap_1;\n    /** @public {IteratorIterable\x3c?\x3e} */\n    this.f_chains__java_util_InternalHashCodeMap_1;\n    /** @public {number} */\n    this.f_itemIndex__java_util_InternalHashCodeMap_1 \x3d 0;\n    /** @public {Array\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_chain__java_util_InternalHashCodeMap_1;\n    /** @public {Entry\x3cC_K, C_V\x3e} */\n    this.f_lastEntry__java_util_InternalHashCodeMap_1;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(InternalHashCodeMap)'.\n   * @template C_K, C_V\n   * @param {InternalHashCodeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!$1\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_InternalHashCodeMap($outer_this) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_InternalHashCodeMap_1__java_util_InternalHashCodeMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(InternalHashCodeMap)'.\n   * @param {InternalHashCodeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_InternalHashCodeMap_1__java_util_InternalHashCodeMap($outer_this) {\n    this.f_$outer_this__java_util_InternalHashCodeMap_1 \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_InternalHashCodeMap_1();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    if (this.f_itemIndex__java_util_InternalHashCodeMap_1 \x3c this.f_chain__java_util_InternalHashCodeMap_1.length) {\n      return true;\n    }\n    let current \x3d this.f_chains__java_util_InternalHashCodeMap_1.next();\n    if (!current.done) {\n      this.f_chain__java_util_InternalHashCodeMap_1 \x3d /**@type {Array\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (JsUtils.m_uncheckedCast__java_lang_Object($Overlay.m_getValue__java_util_InternalJsMap_IteratorEntry(current)));\n      this.f_itemIndex__java_util_InternalHashCodeMap_1 \x3d 0;\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_next__() {\n    this.f_lastEntry__java_util_InternalHashCodeMap_1 \x3d this.f_chain__java_util_InternalHashCodeMap_1[this.f_itemIndex__java_util_InternalHashCodeMap_1++];\n    return this.f_lastEntry__java_util_InternalHashCodeMap_1;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.f_$outer_this__java_util_InternalHashCodeMap_1.m_remove__java_lang_Object(this.f_lastEntry__java_util_InternalHashCodeMap_1.m_getKey__());\n    if (this.f_itemIndex__java_util_InternalHashCodeMap_1 !\x3d 0) {\n      this.f_itemIndex__java_util_InternalHashCodeMap_1--;\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_InternalHashCodeMap_1() {\n    this.f_chains__java_util_InternalHashCodeMap_1 \x3d this.f_$outer_this__java_util_InternalHashCodeMap_1.f_backingMap__java_util_InternalHashCodeMap_.entries();\n    this.f_itemIndex__java_util_InternalHashCodeMap_1 \x3d 0;\n    this.f_chain__java_util_InternalHashCodeMap_1 \x3d this.f_$outer_this__java_util_InternalHashCodeMap_1.m_newEntryChain___$p_java_util_InternalHashCodeMap();\n    this.f_lastEntry__java_util_InternalHashCodeMap_1 \x3d null;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.InternalHashCodeMap$1'));\n\n\nIterator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dInternalHashCodeMap$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalHashCodeMap$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalHashCodeMap$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalHashCodeMap.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _InternalHashCodeMap \x3d goog.require('java.util.InternalHashCodeMap');\nconst _Iterator_$Overlay \x3d goog.require('java.util.InternalJsMap.Iterator.$Overlay');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMap.IteratorEntry.$Overlay');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.InternalHashCodeMap.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$DeleteFunction$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$DeleteFunction$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalJsMap.DeleteFunction.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('Function'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dInternalJsMap$DeleteFunction$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$DeleteFunction$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$DeleteFunction$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalJsMap.DeleteFunction.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.util.InternalJsMap.DeleteFunction.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalJsMap.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.DeleteFunction.$Overlay$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\n\n\nclass InternalJsMap_$Overlay {\n  /**\n   * @template C_V\n   * @param {Map\x3cC_V\x3e} $thisArg\n   * @param {number} key\n   * @return {void}\n   * @public\n   */\n  static m_delete__java_util_InternalJsMap__int($thisArg, key) {\n    InternalJsMap_$Overlay.$clinit();\n    let fn \x3d /**@type {Function} */ (JsUtils.m_getProperty__java_lang_Object__java_lang_String($thisArg, \"delete\"));\n    fn.call($thisArg, key);\n  }\n  \n  /**\n   * @template C_V\n   * @param {Map\x3cC_V\x3e} $thisArg\n   * @param {?string} key\n   * @return {void}\n   * @public\n   */\n  static m_delete__java_util_InternalJsMap__java_lang_String($thisArg, key) {\n    InternalJsMap_$Overlay.$clinit();\n    let fn \x3d /**@type {Function} */ (JsUtils.m_getProperty__java_lang_Object__java_lang_String($thisArg, \"delete\"));\n    fn.call($thisArg, key);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    InternalJsMap_$Overlay.$clinit \x3d function() {};\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(InternalJsMap_$Overlay, $Util.$makeClassName('Map'));\n\n\nexports \x3d InternalJsMap_$Overlay; \n//# sourceMappingURL\x3dInternalJsMap$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMap$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMap$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalJsMap.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMap.DeleteFunction.$Overlay');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\n\n\n// Re-exports the implementation.\nvar InternalJsMap_$Overlay \x3d goog.require('java.util.InternalJsMap.$Overlay$impl');\nexports \x3d InternalJsMap_$Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMapFactory$NativeMap$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMapFactory$NativeMap$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalJsMapFactory.NativeMap.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Map;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Map'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dInternalJsMapFactory$NativeMap$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMapFactory$NativeMap$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMapFactory$NativeMap$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalJsMapFactory.NativeMap.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.util.InternalJsMapFactory.NativeMap.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMapFactory.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMapFactory.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalJsMapFactory$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet InternalJsMap_$Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMapFactory.NativeMap.$Overlay$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\n\n\nclass InternalJsMapFactory extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'InternalJsMapFactory()'.\n   * @return {!InternalJsMapFactory}\n   * @public\n   */\n  static $create__() {\n    InternalJsMapFactory.$clinit();\n    let $instance \x3d new InternalJsMapFactory();\n    $instance.$ctor__java_util_InternalJsMapFactory__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'InternalJsMapFactory()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_InternalJsMapFactory__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @template M_V\n   * @return {Map\x3cM_V\x3e}\n   * @public\n   */\n  static m_newJsMap__() {\n    InternalJsMapFactory.$clinit();\n    return /**@type {Map\x3c*\x3e} */ (JsUtils.m_uncheckedCast__java_lang_Object(/**@type {!Map\x3c*\x3e} */ (new Map())));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof InternalJsMapFactory;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, InternalJsMapFactory);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    InternalJsMapFactory.$clinit \x3d function() {};\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(InternalJsMapFactory, $Util.$makeClassName('java.util.InternalJsMapFactory'));\n\n\n\n\nexports \x3d InternalJsMapFactory; \n//# sourceMappingURL\x3dInternalJsMapFactory.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalJsMapFactory.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalJsMapFactory.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalJsMapFactory');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _InternalJsMap_$Overlay \x3d goog.require('java.util.InternalJsMap.$Overlay');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMapFactory.NativeMap.$Overlay');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\n\n\n// Re-exports the implementation.\nvar InternalJsMapFactory \x3d goog.require('java.util.InternalJsMapFactory$impl');\nexports \x3d InternalJsMapFactory;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalHashCodeMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalHashCodeMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalHashCodeMap$impl');\n\n\nconst Iterable \x3d goog.require('java.lang.Iterable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AbstractHashMap \x3d goog.forwardDeclare('java.util.AbstractHashMap$impl');\nlet SimpleEntry \x3d goog.forwardDeclare('java.util.AbstractMap.SimpleEntry$impl');\nlet ConcurrentModificationDetector \x3d goog.forwardDeclare('java.util.ConcurrentModificationDetector$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.InternalHashCodeMap.$1$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.$Overlay$impl');\nlet InternalJsMapFactory \x3d goog.forwardDeclare('java.util.InternalJsMapFactory$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterable\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass InternalHashCodeMap extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Map\x3c*\x3e} */\n    this.f_backingMap__java_util_InternalHashCodeMap_;\n    /** @public {AbstractHashMap\x3cC_K, C_V\x3e} */\n    this.f_host__java_util_InternalHashCodeMap_;\n    /** @public {number} */\n    this.f_size__java_util_InternalHashCodeMap_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'InternalHashCodeMap(AbstractHashMap)'.\n   * @template C_K, C_V\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} host\n   * @return {!InternalHashCodeMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractHashMap(host) {\n    InternalHashCodeMap.$clinit();\n    let $instance \x3d new InternalHashCodeMap();\n    $instance.$ctor__java_util_InternalHashCodeMap__java_util_AbstractHashMap(host);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'InternalHashCodeMap(AbstractHashMap)'.\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} host\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_InternalHashCodeMap__java_util_AbstractHashMap(host) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_InternalHashCodeMap();\n    this.f_host__java_util_InternalHashCodeMap_ \x3d host;\n  }\n  \n  /**\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  m_put__java_lang_Object__java_lang_Object(key, value) {\n    let hashCode \x3d this.m_hash__java_lang_Object_$p_java_util_InternalHashCodeMap(key);\n    let chain \x3d this.m_getChainOrEmpty__int_$p_java_util_InternalHashCodeMap(hashCode);\n    if (chain.length \x3d\x3d 0) {\n      this.f_backingMap__java_util_InternalHashCodeMap_.set(hashCode, chain);\n    } else {\n      let entry \x3d this.m_findEntryInChain__java_lang_Object__arrayOf_java_util_Map_Entry_$p_java_util_InternalHashCodeMap(key, chain);\n      if (!$Equality.$same(entry, null)) {\n        return entry.m_setValue__java_lang_Object(value);\n      }\n    }\n    $Arrays.$set(chain, chain.length, /**@type {!SimpleEntry\x3cC_K, C_V\x3e} */ (SimpleEntry.$create__java_lang_Object__java_lang_Object(key, value)));\n    this.f_size__java_util_InternalHashCodeMap_++;\n    ConcurrentModificationDetector.m_structureChanged__java_lang_Object(this.f_host__java_util_InternalHashCodeMap_);\n    return null;\n  }\n  \n  /**\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  m_remove__java_lang_Object(key) {\n    let hashCode \x3d this.m_hash__java_lang_Object_$p_java_util_InternalHashCodeMap(key);\n    let chain \x3d this.m_getChainOrEmpty__int_$p_java_util_InternalHashCodeMap(hashCode);\n    for (let i \x3d 0; i \x3c chain.length; i++) {\n      let entry \x3d chain[i];\n      if (this.f_host__java_util_InternalHashCodeMap_.m_equals__java_lang_Object__java_lang_Object_$pp_java_util(key, entry.m_getKey__())) {\n        if (chain.length \x3d\x3d 1) {\n          ArrayHelper.m_setLength__java_lang_Object__int(chain, 0);\n          $Overlay.m_delete__java_util_InternalJsMap__int(this.f_backingMap__java_util_InternalHashCodeMap_, hashCode);\n        } else {\n          ArrayHelper.m_removeFrom__java_lang_Object__int__int(chain, i, 1);\n        }\n        this.f_size__java_util_InternalHashCodeMap_--;\n        ConcurrentModificationDetector.m_structureChanged__java_lang_Object(this.f_host__java_util_InternalHashCodeMap_);\n        return entry.m_getValue__();\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * @param {*} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getEntry__java_lang_Object(key) {\n    return this.m_findEntryInChain__java_lang_Object__arrayOf_java_util_Map_Entry_$p_java_util_InternalHashCodeMap(key, this.m_getChainOrEmpty__int_$p_java_util_InternalHashCodeMap(this.m_hash__java_lang_Object_$p_java_util_InternalHashCodeMap(key)));\n  }\n  \n  /**\n   * @param {*} key\n   * @param {Array\x3cEntry\x3cC_K, C_V\x3e\x3e} chain\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_findEntryInChain__java_lang_Object__arrayOf_java_util_Map_Entry_$p_java_util_InternalHashCodeMap(key, chain) {\n    for (let $array \x3d chain, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let entry \x3d $array[$index];\n      if (this.f_host__java_util_InternalHashCodeMap_.m_equals__java_lang_Object__java_lang_Object_$pp_java_util(key, entry.m_getKey__())) {\n        return entry;\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_size__() {\n    return this.f_size__java_util_InternalHashCodeMap_;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!$1\x3cC_K, C_V\x3e} */ ($1.$create__java_util_InternalHashCodeMap(this));\n  }\n  \n  /**\n   * @param {number} hashCode\n   * @return {Array\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_getChainOrEmpty__int_$p_java_util_InternalHashCodeMap(hashCode) {\n    let chain \x3d /**@type {Array\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (JsUtils.m_uncheckedCast__java_lang_Object(this.f_backingMap__java_util_InternalHashCodeMap_.get(hashCode)));\n    return $Equality.$same(chain, null) ? this.m_newEntryChain___$p_java_util_InternalHashCodeMap() : chain;\n  }\n  \n  /**\n   * @return {Array\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_newEntryChain___$p_java_util_InternalHashCodeMap() {\n    return /**@type {Array\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (JsUtils.m_uncheckedCast__java_lang_Object(new Array()));\n  }\n  \n  /**\n   * @param {*} key\n   * @return {number}\n   * @public\n   */\n  m_hash__java_lang_Object_$p_java_util_InternalHashCodeMap(key) {\n    return $Equality.$same(key, null) ? 0 : this.f_host__java_util_InternalHashCodeMap_.m_getHashCode__java_lang_Object_$pp_java_util(key);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Iterable.m_spliterator__$default__java_lang_Iterable(this));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_InternalHashCodeMap() {\n    this.f_backingMap__java_util_InternalHashCodeMap_ \x3d /**@type {Map\x3c*\x3e} */ (InternalJsMapFactory.m_newJsMap__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof InternalHashCodeMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, InternalHashCodeMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    InternalHashCodeMap.$clinit \x3d function() {};\n    SimpleEntry \x3d goog.module.get('java.util.AbstractMap.SimpleEntry$impl');\n    ConcurrentModificationDetector \x3d goog.module.get('java.util.ConcurrentModificationDetector$impl');\n    $1 \x3d goog.module.get('java.util.InternalHashCodeMap.$1$impl');\n    $Overlay \x3d goog.module.get('java.util.InternalJsMap.$Overlay$impl');\n    InternalJsMapFactory \x3d goog.module.get('java.util.InternalJsMapFactory$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    j_l_Object.$clinit();\n    Iterable.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(InternalHashCodeMap, $Util.$makeClassName('java.util.InternalHashCodeMap'));\n\n\nIterable.$markImplementor(InternalHashCodeMap);\n\n\nexports \x3d InternalHashCodeMap; \n//# sourceMappingURL\x3dInternalHashCodeMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalHashCodeMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalHashCodeMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalHashCodeMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AbstractHashMap \x3d goog.require('java.util.AbstractHashMap');\nconst _SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry');\nconst _ConcurrentModificationDetector \x3d goog.require('java.util.ConcurrentModificationDetector');\nconst _$1 \x3d goog.require('java.util.InternalHashCodeMap.$1');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMap.$Overlay');\nconst _InternalJsMapFactory \x3d goog.require('java.util.InternalJsMapFactory');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar InternalHashCodeMap \x3d goog.require('java.util.InternalHashCodeMap$impl');\nexports \x3d InternalHashCodeMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalStringMap$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalStringMap$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalStringMap.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterator_$Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.Iterator.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\nlet InternalStringMap \x3d goog.forwardDeclare('java.util.InternalStringMap$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {InternalStringMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_InternalStringMap_1;\n    /** @public {IteratorIterable\x3cC_V\x3e} */\n    this.f_entries__java_util_InternalStringMap_1;\n    /** @public {IIterableResult\x3cC_V\x3e} */\n    this.f_current__java_util_InternalStringMap_1;\n    /** @public {IIterableResult\x3cC_V\x3e} */\n    this.f_last__java_util_InternalStringMap_1;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(InternalStringMap)'.\n   * @template C_K, C_V\n   * @param {InternalStringMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!$1\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_InternalStringMap($outer_this) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_InternalStringMap_1__java_util_InternalStringMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(InternalStringMap)'.\n   * @param {InternalStringMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_InternalStringMap_1__java_util_InternalStringMap($outer_this) {\n    this.f_$outer_this__java_util_InternalStringMap_1 \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_InternalStringMap_1();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return !this.f_current__java_util_InternalStringMap_1.done;\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_next__() {\n    this.f_last__java_util_InternalStringMap_1 \x3d this.f_current__java_util_InternalStringMap_1;\n    this.f_current__java_util_InternalStringMap_1 \x3d this.f_entries__java_util_InternalStringMap_1.next();\n    return this.f_$outer_this__java_util_InternalStringMap_1.m_newMapEntry__java_util_InternalJsMap_IteratorEntry__int_$p_java_util_InternalStringMap(this.f_last__java_util_InternalStringMap_1, this.f_$outer_this__java_util_InternalStringMap_1.f_valueMod__java_util_InternalStringMap_);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.f_$outer_this__java_util_InternalStringMap_1.m_remove__java_lang_String($Overlay.m_getKey__java_util_InternalJsMap_IteratorEntry(this.f_last__java_util_InternalStringMap_1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_InternalStringMap_1() {\n    this.f_entries__java_util_InternalStringMap_1 \x3d this.f_$outer_this__java_util_InternalStringMap_1.f_backingMap__java_util_InternalStringMap_.entries();\n    this.f_current__java_util_InternalStringMap_1 \x3d this.f_entries__java_util_InternalStringMap_1.next();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.InternalStringMap$1'));\n\n\nIterator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dInternalStringMap$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalStringMap$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalStringMap$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalStringMap.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterator_$Overlay \x3d goog.require('java.util.InternalJsMap.Iterator.$Overlay');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMap.IteratorEntry.$Overlay');\nconst _InternalStringMap \x3d goog.require('java.util.InternalStringMap');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.InternalStringMap.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMapEntry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMapEntry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMapEntry$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Entry \x3d goog.require('java.util.Map.Entry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @abstract\n * @template C_K, C_V\n * @implements {Entry\x3cC_K, C_V\x3e}\n  */\nclass AbstractMapEntry extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractMapEntry()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMapEntry__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  equals(other) {\n    if (!Entry.$isInstance(other)) {\n      return false;\n    }\n    let entry \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(other, Entry));\n    return Objects.m_equals__java_lang_Object__java_lang_Object(this.m_getKey__(), entry.m_getKey__()) \x26\x26 Objects.m_equals__java_lang_Object__java_lang_Object(this.m_getValue__(), entry.m_getValue__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Objects.m_hashCode__java_lang_Object(this.m_getKey__()) ^ Objects.m_hashCode__java_lang_Object(this.m_getValue__());\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return j_l_String.m_valueOf__java_lang_Object(this.m_getKey__()) + \"\x3d\" + j_l_String.m_valueOf__java_lang_Object(this.m_getValue__());\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {C_K}\n   * @public\n   */\n  m_getKey__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {C_V}\n   * @public\n   */\n  m_getValue__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_V} arg0\n   * @return {C_V}\n   * @public\n   */\n  m_setValue__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractMapEntry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractMapEntry);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractMapEntry.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractMapEntry, $Util.$makeClassName('java.util.AbstractMapEntry'));\n\n\nEntry.$markImplementor(AbstractMapEntry);\n\n\nexports \x3d AbstractMapEntry; \n//# sourceMappingURL\x3dAbstractMapEntry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMapEntry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMapEntry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMapEntry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AbstractMapEntry \x3d goog.require('java.util.AbstractMapEntry$impl');\nexports \x3d AbstractMapEntry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalStringMap$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalStringMap$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalStringMap.$2$impl');\n\n\nconst AbstractMapEntry \x3d goog.require('java.util.AbstractMapEntry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\nlet InternalStringMap \x3d goog.forwardDeclare('java.util.InternalStringMap$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractMapEntry\x3cC_K, C_V\x3e}\n  */\nclass $2 extends AbstractMapEntry {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {InternalStringMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_InternalStringMap_2;\n    /** @public {IIterableResult\x3cC_V\x3e} */\n    this.$c_entry;\n    /** @public {number} */\n    this.$c_lastValueMod \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractMapEntry(InternalStringMap, IteratorEntry, int)'.\n   * @template C_K, C_V\n   * @param {InternalStringMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {IIterableResult\x3cC_V\x3e} $c_entry\n   * @param {number} $c_lastValueMod\n   * @return {!$2\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_InternalStringMap__java_util_InternalJsMap_IteratorEntry__int($outer_this, $c_entry, $c_lastValueMod) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_InternalStringMap_2__java_util_InternalStringMap__java_util_InternalJsMap_IteratorEntry__int($outer_this, $c_entry, $c_lastValueMod);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractMapEntry(InternalStringMap, IteratorEntry, int)'.\n   * @param {InternalStringMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {IIterableResult\x3cC_V\x3e} $c_entry\n   * @param {number} $c_lastValueMod\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_InternalStringMap_2__java_util_InternalStringMap__java_util_InternalJsMap_IteratorEntry__int($outer_this, $c_entry, $c_lastValueMod) {\n    this.f_$outer_this__java_util_InternalStringMap_2 \x3d $outer_this;\n    this.$c_entry \x3d $c_entry;\n    this.$c_lastValueMod \x3d $c_lastValueMod;\n    this.$ctor__java_util_AbstractMapEntry__();\n  }\n  \n  /**\n   * @override\n   * @return {C_K}\n   * @public\n   */\n  m_getKey__() {\n    return /**@type {C_K} */ ($Casts.$to($Overlay.m_getKey__java_util_InternalJsMap_IteratorEntry(this.$c_entry), j_l_Object));\n  }\n  \n  /**\n   * @override\n   * @return {C_V}\n   * @public\n   */\n  m_getValue__() {\n    if (this.f_$outer_this__java_util_InternalStringMap_2.f_valueMod__java_util_InternalStringMap_ !\x3d this.$c_lastValueMod) {\n      return this.f_$outer_this__java_util_InternalStringMap_2.m_get__java_lang_String($Overlay.m_getKey__java_util_InternalJsMap_IteratorEntry(this.$c_entry));\n    }\n    return $Overlay.m_getValue__java_util_InternalJsMap_IteratorEntry(this.$c_entry);\n  }\n  \n  /**\n   * @override\n   * @param {C_V} object\n   * @return {C_V}\n   * @public\n   */\n  m_setValue__java_lang_Object(object) {\n    return this.f_$outer_this__java_util_InternalStringMap_2.m_put__java_lang_String__java_lang_Object($Overlay.m_getKey__java_util_InternalJsMap_IteratorEntry(this.$c_entry), object);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    $Overlay \x3d goog.module.get('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractMapEntry.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.InternalStringMap$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dInternalStringMap$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalStringMap$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalStringMap$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalStringMap.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractMapEntry \x3d goog.require('java.util.AbstractMapEntry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMap.IteratorEntry.$Overlay');\nconst _InternalStringMap \x3d goog.require('java.util.InternalStringMap');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.InternalStringMap.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalStringMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalStringMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.InternalStringMap$impl');\n\n\nconst Iterable \x3d goog.require('java.lang.Iterable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AbstractHashMap \x3d goog.forwardDeclare('java.util.AbstractHashMap$impl');\nlet ConcurrentModificationDetector \x3d goog.forwardDeclare('java.util.ConcurrentModificationDetector$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.$Overlay$impl');\nlet IteratorEntry_$Overlay \x3d goog.forwardDeclare('java.util.InternalJsMap.IteratorEntry.$Overlay$impl');\nlet InternalJsMapFactory \x3d goog.forwardDeclare('java.util.InternalJsMapFactory$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.InternalStringMap.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.InternalStringMap.$2$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterable\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass InternalStringMap extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Map\x3cC_V\x3e} */\n    this.f_backingMap__java_util_InternalStringMap_;\n    /** @public {AbstractHashMap\x3cC_K, C_V\x3e} */\n    this.f_host__java_util_InternalStringMap_;\n    /** @public {number} */\n    this.f_size__java_util_InternalStringMap_ \x3d 0;\n    /** @public {number} */\n    this.f_valueMod__java_util_InternalStringMap_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'InternalStringMap(AbstractHashMap)'.\n   * @template C_K, C_V\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} host\n   * @return {!InternalStringMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractHashMap(host) {\n    InternalStringMap.$clinit();\n    let $instance \x3d new InternalStringMap();\n    $instance.$ctor__java_util_InternalStringMap__java_util_AbstractHashMap(host);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'InternalStringMap(AbstractHashMap)'.\n   * @param {AbstractHashMap\x3cC_K, C_V\x3e} host\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_InternalStringMap__java_util_AbstractHashMap(host) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_InternalStringMap();\n    this.f_host__java_util_InternalStringMap_ \x3d host;\n  }\n  \n  /**\n   * @param {?string} key\n   * @return {boolean}\n   * @public\n   */\n  m_contains__java_lang_String(key) {\n    return !JsUtils.m_isUndefined__java_lang_Object(this.f_backingMap__java_util_InternalStringMap_.get(key));\n  }\n  \n  /**\n   * @param {?string} key\n   * @return {C_V}\n   * @public\n   */\n  m_get__java_lang_String(key) {\n    return this.f_backingMap__java_util_InternalStringMap_.get(key);\n  }\n  \n  /**\n   * @param {?string} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  m_put__java_lang_String__java_lang_Object(key, value) {\n    let oldValue \x3d this.f_backingMap__java_util_InternalStringMap_.get(key);\n    this.f_backingMap__java_util_InternalStringMap_.set(key, InternalStringMap.m_toNullIfUndefined__java_lang_Object_$p_java_util_InternalStringMap(value));\n    if (JsUtils.m_isUndefined__java_lang_Object(oldValue)) {\n      this.f_size__java_util_InternalStringMap_++;\n      ConcurrentModificationDetector.m_structureChanged__java_lang_Object(this.f_host__java_util_InternalStringMap_);\n    } else {\n      this.f_valueMod__java_util_InternalStringMap_++;\n    }\n    return oldValue;\n  }\n  \n  /**\n   * @param {?string} key\n   * @return {C_V}\n   * @public\n   */\n  m_remove__java_lang_String(key) {\n    let value \x3d this.f_backingMap__java_util_InternalStringMap_.get(key);\n    if (!JsUtils.m_isUndefined__java_lang_Object(value)) {\n      $Overlay.m_delete__java_util_InternalJsMap__java_lang_String(this.f_backingMap__java_util_InternalStringMap_, key);\n      this.f_size__java_util_InternalStringMap_--;\n      ConcurrentModificationDetector.m_structureChanged__java_lang_Object(this.f_host__java_util_InternalStringMap_);\n    } else {\n      this.f_valueMod__java_util_InternalStringMap_++;\n    }\n    return value;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_size__() {\n    return this.f_size__java_util_InternalStringMap_;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!$1\x3cC_K, C_V\x3e} */ ($1.$create__java_util_InternalStringMap(this));\n  }\n  \n  /**\n   * @param {IIterableResult\x3cC_V\x3e} entry\n   * @param {number} lastValueMod\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_newMapEntry__java_util_InternalJsMap_IteratorEntry__int_$p_java_util_InternalStringMap(entry, lastValueMod) {\n    return /**@type {!$2\x3cC_K, C_V\x3e} */ ($2.$create__java_util_InternalStringMap__java_util_InternalJsMap_IteratorEntry__int(this, entry, lastValueMod));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} value\n   * @return {M_T}\n   * @public\n   */\n  static m_toNullIfUndefined__java_lang_Object_$p_java_util_InternalStringMap(value) {\n    InternalStringMap.$clinit();\n    return JsUtils.m_isUndefined__java_lang_Object(value) ? null : value;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Iterable.m_spliterator__$default__java_lang_Iterable(this));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_InternalStringMap() {\n    this.f_backingMap__java_util_InternalStringMap_ \x3d /**@type {Map\x3cC_V\x3e} */ (InternalJsMapFactory.m_newJsMap__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof InternalStringMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, InternalStringMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    InternalStringMap.$clinit \x3d function() {};\n    ConcurrentModificationDetector \x3d goog.module.get('java.util.ConcurrentModificationDetector$impl');\n    $Overlay \x3d goog.module.get('java.util.InternalJsMap.$Overlay$impl');\n    InternalJsMapFactory \x3d goog.module.get('java.util.InternalJsMapFactory$impl');\n    $1 \x3d goog.module.get('java.util.InternalStringMap.$1$impl');\n    $2 \x3d goog.module.get('java.util.InternalStringMap.$2$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    j_l_Object.$clinit();\n    Iterable.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(InternalStringMap, $Util.$makeClassName('java.util.InternalStringMap'));\n\n\nIterable.$markImplementor(InternalStringMap);\n\n\nexports \x3d InternalStringMap; \n//# sourceMappingURL\x3dInternalStringMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/InternalStringMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.InternalStringMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.InternalStringMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AbstractHashMap \x3d goog.require('java.util.AbstractHashMap');\nconst _ConcurrentModificationDetector \x3d goog.require('java.util.ConcurrentModificationDetector');\nconst _$Overlay \x3d goog.require('java.util.InternalJsMap.$Overlay');\nconst _IteratorEntry_$Overlay \x3d goog.require('java.util.InternalJsMap.IteratorEntry.$Overlay');\nconst _InternalJsMapFactory \x3d goog.require('java.util.InternalJsMapFactory');\nconst _$1 \x3d goog.require('java.util.InternalStringMap.$1');\nconst _$2 \x3d goog.require('java.util.InternalStringMap.$2');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\n\n\n// Re-exports the implementation.\nvar InternalStringMap \x3d goog.require('java.util.InternalStringMap$impl');\nexports \x3d InternalStringMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractHashMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractHashMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractHashMap$impl');\n\n\nconst AbstractMap \x3d goog.require('java.util.AbstractMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet EntrySet \x3d goog.forwardDeclare('java.util.AbstractHashMap.EntrySet$impl');\nlet ConcurrentModificationDetector \x3d goog.forwardDeclare('java.util.ConcurrentModificationDetector$impl');\nlet InternalHashCodeMap \x3d goog.forwardDeclare('java.util.InternalHashCodeMap$impl');\nlet InternalStringMap \x3d goog.forwardDeclare('java.util.InternalStringMap$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @abstract\n * @template C_K, C_V\n * @extends {AbstractMap\x3cC_K, C_V\x3e}\n  */\nclass AbstractHashMap extends AbstractMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {InternalHashCodeMap\x3cC_K, C_V\x3e} */\n    this.f_hashCodeMap__java_util_AbstractHashMap_;\n    /** @public {InternalStringMap\x3cC_K, C_V\x3e} */\n    this.f_stringMap__java_util_AbstractHashMap_;\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractHashMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractHashMap__() {\n    this.$ctor__java_util_AbstractMap__();\n    this.m_reset___$p_java_util_AbstractHashMap();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractHashMap(int)'.\n   * @param {number} ignored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractHashMap__int(ignored) {\n    this.$ctor__java_util_AbstractHashMap__int__float(ignored, 0);\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractHashMap(int, float)'.\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractHashMap__int__float(ignored, alsoIgnored) {\n    this.$ctor__java_util_AbstractMap__();\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_Object(ignored \x3e\x3d 0, \"Negative initial capacity\");\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_Object(alsoIgnored \x3e\x3d 0, \"Non-positive load factor\");\n    this.m_reset___$p_java_util_AbstractHashMap();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractHashMap(Map)'.\n   * @param {Map\x3c?, ?\x3e} toBeCopied\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractHashMap__java_util_Map(toBeCopied) {\n    this.$ctor__java_util_AbstractMap__();\n    this.m_reset___$p_java_util_AbstractHashMap();\n    this.putAll(toBeCopied);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.m_reset___$p_java_util_AbstractHashMap();\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_reset___$p_java_util_AbstractHashMap() {\n    this.f_hashCodeMap__java_util_AbstractHashMap_ \x3d /**@type {!InternalHashCodeMap\x3cC_K, C_V\x3e} */ (InternalHashCodeMap.$create__java_util_AbstractHashMap(this));\n    this.f_stringMap__java_util_AbstractHashMap_ \x3d /**@type {!InternalStringMap\x3cC_K, C_V\x3e} */ (InternalStringMap.$create__java_util_AbstractHashMap(this));\n    ConcurrentModificationDetector.m_structureChanged__java_lang_Object(this);\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  containsKey(key) {\n    return j_l_String.$isInstance(key) ? this.m_hasStringValue__java_lang_String_$p_java_util_AbstractHashMap(/**@type {?string} */ (JsUtils.m_uncheckedCast__java_lang_Object(key))) : this.m_hasHashValue__java_lang_Object_$p_java_util_AbstractHashMap(key);\n  }\n  \n  /**\n   * @override\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  containsValue(value) {\n    return this.m_containsValue__java_lang_Object__java_lang_Iterable_$p_java_util_AbstractHashMap(value, this.f_stringMap__java_util_AbstractHashMap_) || this.m_containsValue__java_lang_Object__java_lang_Iterable_$p_java_util_AbstractHashMap(value, this.f_hashCodeMap__java_util_AbstractHashMap_);\n  }\n  \n  /**\n   * @param {*} value\n   * @param {Iterable\x3cEntry\x3cC_K, C_V\x3e\x3e} entries\n   * @return {boolean}\n   * @public\n   */\n  m_containsValue__java_lang_Object__java_lang_Iterable_$p_java_util_AbstractHashMap(value, entries) {\n    for (let $iterator \x3d entries.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      if (this.m_equals__java_lang_Object__java_lang_Object_$pp_java_util(value, entry.m_getValue__())) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n    return /**@type {!EntrySet\x3cC_K, C_V\x3e} */ (EntrySet.$create__java_util_AbstractHashMap(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  get(key) {\n    return j_l_String.$isInstance(key) ? this.m_getStringValue__java_lang_String_$p_java_util_AbstractHashMap(/**@type {?string} */ (JsUtils.m_uncheckedCast__java_lang_Object(key))) : this.m_getHashValue__java_lang_Object_$p_java_util_AbstractHashMap(key);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n    return j_l_String.$isInstance(key) ? this.m_putStringValue__java_lang_String__java_lang_Object_$p_java_util_AbstractHashMap(/**@type {?string} */ (JsUtils.m_uncheckedCast__java_lang_Object(key)), value) : this.m_putHashValue__java_lang_Object__java_lang_Object_$p_java_util_AbstractHashMap(key, value);\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  remove(key) {\n    return j_l_String.$isInstance(key) ? this.m_removeStringValue__java_lang_String_$p_java_util_AbstractHashMap(/**@type {?string} */ (JsUtils.m_uncheckedCast__java_lang_Object(key))) : this.m_removeHashValue__java_lang_Object_$p_java_util_AbstractHashMap(key);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_hashCodeMap__java_util_AbstractHashMap_.m_size__() + this.f_stringMap__java_util_AbstractHashMap_.m_size__();\n  }\n  \n  /**\n   * @abstract\n   * @param {*} value1\n   * @param {*} value2\n   * @return {boolean}\n   * @public\n   */\n  m_equals__java_lang_Object__java_lang_Object_$pp_java_util(value1, value2) {\n  }\n  \n  /**\n   * @abstract\n   * @param {*} key\n   * @return {number}\n   * @public\n   */\n  m_getHashCode__java_lang_Object_$pp_java_util(key) {\n  }\n  \n  /**\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  m_getHashValue__java_lang_Object_$p_java_util_AbstractHashMap(key) {\n    return AbstractMap.m_getEntryValueOrNull__java_util_Map_Entry_$pp_java_util(this.f_hashCodeMap__java_util_AbstractHashMap_.m_getEntry__java_lang_Object(key));\n  }\n  \n  /**\n   * @param {?string} key\n   * @return {C_V}\n   * @public\n   */\n  m_getStringValue__java_lang_String_$p_java_util_AbstractHashMap(key) {\n    return $Equality.$same(key, null) ? this.m_getHashValue__java_lang_Object_$p_java_util_AbstractHashMap(null) : this.f_stringMap__java_util_AbstractHashMap_.m_get__java_lang_String(key);\n  }\n  \n  /**\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  m_hasHashValue__java_lang_Object_$p_java_util_AbstractHashMap(key) {\n    return !$Equality.$same(this.f_hashCodeMap__java_util_AbstractHashMap_.m_getEntry__java_lang_Object(key), null);\n  }\n  \n  /**\n   * @param {?string} key\n   * @return {boolean}\n   * @public\n   */\n  m_hasStringValue__java_lang_String_$p_java_util_AbstractHashMap(key) {\n    return $Equality.$same(key, null) ? this.m_hasHashValue__java_lang_Object_$p_java_util_AbstractHashMap(null) : this.f_stringMap__java_util_AbstractHashMap_.m_contains__java_lang_String(key);\n  }\n  \n  /**\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  m_putHashValue__java_lang_Object__java_lang_Object_$p_java_util_AbstractHashMap(key, value) {\n    return this.f_hashCodeMap__java_util_AbstractHashMap_.m_put__java_lang_Object__java_lang_Object(key, value);\n  }\n  \n  /**\n   * @param {?string} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  m_putStringValue__java_lang_String__java_lang_Object_$p_java_util_AbstractHashMap(key, value) {\n    return $Equality.$same(key, null) ? this.m_putHashValue__java_lang_Object__java_lang_Object_$p_java_util_AbstractHashMap(null, value) : this.f_stringMap__java_util_AbstractHashMap_.m_put__java_lang_String__java_lang_Object(key, value);\n  }\n  \n  /**\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  m_removeHashValue__java_lang_Object_$p_java_util_AbstractHashMap(key) {\n    return this.f_hashCodeMap__java_util_AbstractHashMap_.m_remove__java_lang_Object(key);\n  }\n  \n  /**\n   * @param {?string} key\n   * @return {C_V}\n   * @public\n   */\n  m_removeStringValue__java_lang_String_$p_java_util_AbstractHashMap(key) {\n    return $Equality.$same(key, null) ? this.m_removeHashValue__java_lang_Object_$p_java_util_AbstractHashMap(null) : this.f_stringMap__java_util_AbstractHashMap_.m_remove__java_lang_String(key);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractHashMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractHashMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractHashMap.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    EntrySet \x3d goog.module.get('java.util.AbstractHashMap.EntrySet$impl');\n    ConcurrentModificationDetector \x3d goog.module.get('java.util.ConcurrentModificationDetector$impl');\n    InternalHashCodeMap \x3d goog.module.get('java.util.InternalHashCodeMap$impl');\n    InternalStringMap \x3d goog.module.get('java.util.InternalStringMap$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractMap.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractHashMap, $Util.$makeClassName('java.util.AbstractHashMap'));\n\n\n\n\nexports \x3d AbstractHashMap; \n//# sourceMappingURL\x3dAbstractHashMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractHashMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractHashMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractHashMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractMap \x3d goog.require('java.util.AbstractMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _EntrySet \x3d goog.require('java.util.AbstractHashMap.EntrySet');\nconst _ConcurrentModificationDetector \x3d goog.require('java.util.ConcurrentModificationDetector');\nconst _InternalHashCodeMap \x3d goog.require('java.util.InternalHashCodeMap');\nconst _InternalStringMap \x3d goog.require('java.util.InternalStringMap');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AbstractHashMap \x3d goog.require('java.util.AbstractHashMap$impl');\nexports \x3d AbstractHashMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Coercions.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Coercions.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.Coercions$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass Coercions extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  static m_ensureInt__int(value) {\n    Coercions.$clinit();\n    return value | 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Coercions()'.\n   * @return {!Coercions}\n   * @public\n   */\n  static $create__() {\n    Coercions.$clinit();\n    let $instance \x3d new Coercions();\n    $instance.$ctor__javaemul_internal_Coercions__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Coercions()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_Coercions__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Coercions;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Coercions);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Coercions.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Coercions, $Util.$makeClassName('javaemul.internal.Coercions'));\n\n\n\n\nexports \x3d Coercions; \n//# sourceMappingURL\x3dCoercions.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Coercions.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Coercions.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.Coercions');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Coercions \x3d goog.require('javaemul.internal.Coercions$impl');\nexports \x3d Coercions;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/HashMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.HashMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.HashMap$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Cloneable \x3d goog.require('java.lang.Cloneable$impl');\nconst AbstractHashMap \x3d goog.require('java.util.AbstractHashMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Coercions \x3d goog.forwardDeclare('javaemul.internal.Coercions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractHashMap\x3cC_K, C_V\x3e}\n * @implements {Cloneable}\n * @implements {Serializable}\n  */\nclass HashMap extends AbstractHashMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {C_K} */\n    this.f_exposeKey__java_util_HashMap_;\n    /** @public {C_V} */\n    this.f_exposeValue__java_util_HashMap_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashMap()'.\n   * @template C_K, C_V\n   * @return {!HashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__() {\n    HashMap.$clinit();\n    let $instance \x3d new HashMap();\n    $instance.$ctor__java_util_HashMap__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashMap__() {\n    this.$ctor__java_util_AbstractHashMap__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashMap(int)'.\n   * @template C_K, C_V\n   * @param {number} ignored\n   * @return {!HashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__int(ignored) {\n    HashMap.$clinit();\n    let $instance \x3d new HashMap();\n    $instance.$ctor__java_util_HashMap__int(ignored);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashMap(int)'.\n   * @param {number} ignored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashMap__int(ignored) {\n    this.$ctor__java_util_AbstractHashMap__int(ignored);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashMap(int, float)'.\n   * @template C_K, C_V\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {!HashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__int__float(ignored, alsoIgnored) {\n    HashMap.$clinit();\n    let $instance \x3d new HashMap();\n    $instance.$ctor__java_util_HashMap__int__float(ignored, alsoIgnored);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashMap(int, float)'.\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashMap__int__float(ignored, alsoIgnored) {\n    this.$ctor__java_util_AbstractHashMap__int__float(ignored, alsoIgnored);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashMap(Map)'.\n   * @template C_K, C_V\n   * @param {Map\x3c?, ?\x3e} toBeCopied\n   * @return {!HashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map(toBeCopied) {\n    HashMap.$clinit();\n    let $instance \x3d new HashMap();\n    $instance.$ctor__java_util_HashMap__java_util_Map(toBeCopied);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashMap(Map)'.\n   * @param {Map\x3c?, ?\x3e} toBeCopied\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashMap__java_util_Map(toBeCopied) {\n    this.$ctor__java_util_AbstractHashMap__java_util_Map(toBeCopied);\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  m_clone__() {\n    return /**@type {!HashMap\x3cC_K, C_V\x3e} */ (HashMap.$create__java_util_Map(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} value1\n   * @param {*} value2\n   * @return {boolean}\n   * @public\n   */\n  m_equals__java_lang_Object__java_lang_Object_$pp_java_util(value1, value2) {\n    return Objects.m_equals__java_lang_Object__java_lang_Object(value1, value2);\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {number}\n   * @public\n   */\n  m_getHashCode__java_lang_Object_$pp_java_util(key) {\n    let hashCode \x3d $Objects.m_hashCode__java_lang_Object(key);\n    return Coercions.m_ensureInt__int(hashCode);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {C_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HashMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, HashMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HashMap.$clinit \x3d function() {};\n    Map \x3d goog.module.get('java.util.Map$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    Coercions \x3d goog.module.get('javaemul.internal.Coercions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    AbstractHashMap.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(HashMap, $Util.$makeClassName('java.util.HashMap'));\n\n\nCloneable.$markImplementor(HashMap);\nSerializable.$markImplementor(HashMap);\n\n\nexports \x3d HashMap; \n//# sourceMappingURL\x3dHashMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/HashMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.HashMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.HashMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Cloneable \x3d goog.require('java.lang.Cloneable');\nconst _AbstractHashMap \x3d goog.require('java.util.AbstractHashMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Coercions \x3d goog.require('javaemul.internal.Coercions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar HashMap \x3d goog.require('java.util.HashMap$impl');\nexports \x3d HashMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/HashSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.HashSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.HashSet$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Cloneable \x3d goog.require('java.lang.Cloneable$impl');\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst Set \x3d goog.require('java.util.Set$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet HashMap \x3d goog.forwardDeclare('java.util.HashMap$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\n/**\n * @template C_E\n * @extends {AbstractSet\x3cC_E\x3e}\n * @implements {Set\x3cC_E\x3e}\n * @implements {Cloneable}\n * @implements {Serializable}\n  */\nclass HashSet extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {HashMap\x3cC_E, *\x3e} */\n    this.f_map__java_util_HashSet_;\n    /** @public {C_E} */\n    this.f_exposeElement__java_util_HashSet_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashSet()'.\n   * @template C_E\n   * @return {!HashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__() {\n    HashSet.$clinit();\n    let $instance \x3d new HashSet();\n    $instance.$ctor__java_util_HashSet__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashSet()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashSet__() {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_map__java_util_HashSet_ \x3d /**@type {!HashMap\x3cC_E, *\x3e} */ (HashMap.$create__());\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashSet(Collection)'.\n   * @template C_E\n   * @param {Collection\x3c?\x3e} c\n   * @return {!HashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_Collection(c) {\n    HashSet.$clinit();\n    let $instance \x3d new HashSet();\n    $instance.$ctor__java_util_HashSet__java_util_Collection(c);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashSet(Collection)'.\n   * @param {Collection\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashSet__java_util_Collection(c) {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_map__java_util_HashSet_ \x3d /**@type {!HashMap\x3cC_E, *\x3e} */ (HashMap.$create__int(c.size()));\n    this.addAll(c);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashSet(int)'.\n   * @template C_E\n   * @param {number} initialCapacity\n   * @return {!HashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__int(initialCapacity) {\n    HashSet.$clinit();\n    let $instance \x3d new HashSet();\n    $instance.$ctor__java_util_HashSet__int(initialCapacity);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashSet(int)'.\n   * @param {number} initialCapacity\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashSet__int(initialCapacity) {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_map__java_util_HashSet_ \x3d /**@type {!HashMap\x3cC_E, *\x3e} */ (HashMap.$create__int(initialCapacity));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashSet(int, float)'.\n   * @template C_E\n   * @param {number} initialCapacity\n   * @param {number} loadFactor\n   * @return {!HashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__int__float(initialCapacity, loadFactor) {\n    HashSet.$clinit();\n    let $instance \x3d new HashSet();\n    $instance.$ctor__java_util_HashSet__int__float(initialCapacity, loadFactor);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashSet(int, float)'.\n   * @param {number} initialCapacity\n   * @param {number} loadFactor\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashSet__int__float(initialCapacity, loadFactor) {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_map__java_util_HashSet_ \x3d /**@type {!HashMap\x3cC_E, *\x3e} */ (HashMap.$create__int__float(initialCapacity, loadFactor));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashSet(HashMap)'.\n   * @template C_E\n   * @param {HashMap\x3cC_E, *\x3e} map\n   * @return {!HashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_HashMap(map) {\n    HashSet.$clinit();\n    let $instance \x3d new HashSet();\n    $instance.$ctor__java_util_HashSet__java_util_HashMap(map);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashSet(HashMap)'.\n   * @param {HashMap\x3cC_E, *\x3e} map\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_HashSet__java_util_HashMap(map) {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_map__java_util_HashSet_ \x3d map;\n  }\n  \n  /**\n   * @override\n   * @param {C_E} o\n   * @return {boolean}\n   * @public\n   */\n  add(o) {\n    let old \x3d this.f_map__java_util_HashSet_.put(o, this);\n    return $Equality.$same(old, null);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_map__java_util_HashSet_.clear();\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  m_clone__() {\n    return /**@type {!HashSet\x3cC_E\x3e} */ (HashSet.$create__java_util_Collection(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return this.f_map__java_util_HashSet_.containsKey(o);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  isEmpty() {\n    return this.f_map__java_util_HashSet_.isEmpty();\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_E\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return this.f_map__java_util_HashSet_.keySet().m_iterator__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    return (!$Equality.$same(this.f_map__java_util_HashSet_.remove(o), null));\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_map__java_util_HashSet_.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_E\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HashSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, HashSet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HashSet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    HashMap \x3d goog.module.get('java.util.HashMap$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    AbstractSet.$clinit();\n    Set.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(HashSet, $Util.$makeClassName('java.util.HashSet'));\n\n\nSet.$markImplementor(HashSet);\nCloneable.$markImplementor(HashSet);\nSerializable.$markImplementor(HashSet);\n\n\nexports \x3d HashSet; \n//# sourceMappingURL\x3dHashSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/HashSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.HashSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.HashSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Cloneable \x3d goog.require('java.lang.Cloneable');\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _Set \x3d goog.require('java.util.Set');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _HashMap \x3d goog.require('java.util.HashMap');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar HashSet \x3d goog.require('java.util.HashSet$impl');\nexports \x3d HashSet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Collections$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet IndexOutOfBoundsException \x3d goog.forwardDeclare('java.lang.IndexOutOfBoundsException$impl');\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.Collections.$1$impl');\nlet EmptyList \x3d goog.forwardDeclare('java.util.Collections.EmptyList$impl');\nlet EmptyListIterator \x3d goog.forwardDeclare('java.util.Collections.EmptyListIterator$impl');\nlet EmptyMap \x3d goog.forwardDeclare('java.util.Collections.EmptyMap$impl');\nlet EmptySet \x3d goog.forwardDeclare('java.util.Collections.EmptySet$impl');\nlet LifoQueue \x3d goog.forwardDeclare('java.util.Collections.LifoQueue$impl');\nlet RandomHolder \x3d goog.forwardDeclare('java.util.Collections.RandomHolder$impl');\nlet SetFromMap \x3d goog.forwardDeclare('java.util.Collections.SetFromMap$impl');\nlet SingletonList \x3d goog.forwardDeclare('java.util.Collections.SingletonList$impl');\nlet UnmodifiableCollection \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableCollection$impl');\nlet UnmodifiableList \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableList$impl');\nlet UnmodifiableMap \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableMap$impl');\nlet UnmodifiableRandomAccessList \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableRandomAccessList$impl');\nlet UnmodifiableSet \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableSet$impl');\nlet UnmodifiableSortedMap \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableSortedMap$impl');\nlet UnmodifiableSortedSet \x3d goog.forwardDeclare('java.util.Collections.UnmodifiableSortedSet$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Comparators \x3d goog.forwardDeclare('java.util.Comparators$impl');\nlet Deque \x3d goog.forwardDeclare('java.util.Deque$impl');\nlet Enumeration \x3d goog.forwardDeclare('java.util.Enumeration$impl');\nlet HashMap \x3d goog.forwardDeclare('java.util.HashMap$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Queue \x3d goog.forwardDeclare('java.util.Queue$impl');\nlet Random \x3d goog.forwardDeclare('java.util.Random$impl');\nlet RandomAccess \x3d goog.forwardDeclare('java.util.RandomAccess$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet SortedMap \x3d goog.forwardDeclare('java.util.SortedMap$impl');\nlet SortedSet \x3d goog.forwardDeclare('java.util.SortedSet$impl');\nlet Coercions \x3d goog.forwardDeclare('javaemul.internal.Coercions$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass Collections extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} c\n   * @param {Array\x3cM_T\x3e} a\n   * @return {boolean}\n   * @public\n   */\n  static m_addAll__java_util_Collection__arrayOf_java_lang_Object(c, a) {\n    Collections.$clinit();\n    let result \x3d false;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      result \x3d !!(+result | +c.add(e));\n    }\n    return result;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Deque\x3cM_T\x3e} deque\n   * @return {Queue\x3cM_T\x3e}\n   * @public\n   */\n  static m_asLifoQueue__java_util_Deque(deque) {\n    Collections.$clinit();\n    return /**@type {!LifoQueue\x3c*\x3e} */ (LifoQueue.$create__java_util_Deque(deque));\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3c?\x3e} sortedList\n   * @param {M_T} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__java_util_List__java_lang_Object(sortedList, key) {\n    Collections.$clinit();\n    return Collections.m_binarySearch__java_util_List__java_lang_Object__java_util_Comparator(sortedList, key, null);\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3c?\x3e} sortedList\n   * @param {M_T} key\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__java_util_List__java_lang_Object__java_util_Comparator(sortedList, key, comparator) {\n    Collections.$clinit();\n    comparator \x3d /**@type {Comparator\x3c?\x3e} */ (Comparators.m_nullToNaturalOrder__java_util_Comparator_$pp_java_util(comparator));\n    let low \x3d 0;\n    let high \x3d sortedList.size() - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedList.getAtIndex(mid);\n      let compareResult \x3d comparator.m_compare__java_lang_Object__java_lang_Object(midVal, key);\n      if (compareResult \x3c 0) {\n        low \x3d mid + 1;\n      } else if (compareResult \x3e 0) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3c?\x3e} dest\n   * @param {List\x3c?\x3e} src\n   * @return {void}\n   * @public\n   */\n  static m_copy__java_util_List__java_util_List(dest, src) {\n    Collections.$clinit();\n    if (src.size() \x3e dest.size()) {\n      throw $Exceptions.toJs(IndexOutOfBoundsException.$create__java_lang_String(\"src does not fit in dest\"));\n    }\n    let destIt \x3d dest.m_listIterator__();\n    for (let $iterator \x3d src.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      destIt.m_next__();\n      destIt.m_set__java_lang_Object(e);\n    }\n  }\n  \n  /**\n   * @param {Collection\x3c?\x3e} c1\n   * @param {Collection\x3c?\x3e} c2\n   * @return {boolean}\n   * @public\n   */\n  static m_disjoint__java_util_Collection__java_util_Collection(c1, c2) {\n    Collections.$clinit();\n    let iterating \x3d c1;\n    let testing \x3d c2;\n    if (Set.$isInstance(c1) \x26\x26 !Set.$isInstance(c2)) {\n      iterating \x3d c2;\n      testing \x3d c1;\n    }\n    for (let $iterator \x3d iterating.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let o \x3d $iterator.m_next__();\n      if (testing.contains(o)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @template M_T\n   * @return {Iterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_emptyIterator__() {\n    Collections.$clinit();\n    return /**@type {Iterator\x3c*\x3e} */ ($Casts.$to(EmptyListIterator.f_INSTANCE__java_util_Collections_EmptyListIterator, Iterator));\n  }\n  \n  /**\n   * @template M_T\n   * @return {List\x3cM_T\x3e}\n   * @public\n   */\n  static m_emptyList__() {\n    Collections.$clinit();\n    return /**@type {List\x3c*\x3e} */ ($Casts.$to(Collections.$f_EMPTY_LIST__java_util_Collections, List));\n  }\n  \n  /**\n   * @template M_T\n   * @return {ListIterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_emptyListIterator__() {\n    Collections.$clinit();\n    return /**@type {ListIterator\x3c*\x3e} */ ($Casts.$to(EmptyListIterator.f_INSTANCE__java_util_Collections_EmptyListIterator, ListIterator));\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @return {Map\x3cM_K, M_V\x3e}\n   * @public\n   */\n  static m_emptyMap__() {\n    Collections.$clinit();\n    return /**@type {Map\x3c*, *\x3e} */ ($Casts.$to(Collections.$f_EMPTY_MAP__java_util_Collections, Map));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Set\x3cM_T\x3e}\n   * @public\n   */\n  static m_emptySet__() {\n    Collections.$clinit();\n    return /**@type {Set\x3c*\x3e} */ ($Casts.$to(Collections.$f_EMPTY_SET__java_util_Collections, Set));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3cM_T\x3e} c\n   * @return {Enumeration\x3cM_T\x3e}\n   * @public\n   */\n  static m_enumeration__java_util_Collection(c) {\n    Collections.$clinit();\n    let it \x3d c.m_iterator__();\n    return /**@type {!$1\x3c*\x3e} */ ($1.$create__java_util_Iterator(it));\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3c?\x3e} list\n   * @param {M_T} obj\n   * @return {void}\n   * @public\n   */\n  static m_fill__java_util_List__java_lang_Object(list, obj) {\n    Collections.$clinit();\n    for (let it \x3d list.m_listIterator__(); it.m_hasNext__(); ) {\n      it.m_next__();\n      it.m_set__java_lang_Object(obj);\n    }\n  }\n  \n  /**\n   * @param {Collection\x3c?\x3e} c\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  static m_frequency__java_util_Collection__java_lang_Object(c, o) {\n    Collections.$clinit();\n    let count \x3d 0;\n    for (let $iterator \x3d c.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(o, e)) {\n        ++count;\n      }\n    }\n    return count;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Enumeration\x3cM_T\x3e} e\n   * @return {ArrayList\x3cM_T\x3e}\n   * @public\n   */\n  static m_list__java_util_Enumeration(e) {\n    Collections.$clinit();\n    let arrayList \x3d /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__());\n    while (e.m_hasMoreElements__()) {\n      arrayList.add(e.m_nextElement__());\n    }\n    return arrayList;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} coll\n   * @return {M_T}\n   * @public\n   */\n  static m_max__java_util_Collection(coll) {\n    Collections.$clinit();\n    return /**@type {(Comparable|boolean|number|string)} */ ($Casts.$to(Collections.m_max__java_util_Collection__java_util_Comparator(coll, null), Comparable));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} coll\n   * @param {Comparator\x3c?\x3e} comp\n   * @return {M_T}\n   * @public\n   */\n  static m_max__java_util_Collection__java_util_Comparator(coll, comp) {\n    Collections.$clinit();\n    comp \x3d /**@type {Comparator\x3c?\x3e} */ (Comparators.m_nullToNaturalOrder__java_util_Comparator_$pp_java_util(comp));\n    let it \x3d coll.m_iterator__();\n    let max \x3d it.m_next__();\n    while (it.m_hasNext__()) {\n      let t \x3d it.m_next__();\n      if (comp.m_compare__java_lang_Object__java_lang_Object(t, max) \x3e 0) {\n        max \x3d t;\n      }\n    }\n    return max;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} coll\n   * @return {M_T}\n   * @public\n   */\n  static m_min__java_util_Collection(coll) {\n    Collections.$clinit();\n    return /**@type {(Comparable|boolean|number|string)} */ ($Casts.$to(Collections.m_min__java_util_Collection__java_util_Comparator(coll, null), Comparable));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} coll\n   * @param {Comparator\x3c?\x3e} comp\n   * @return {M_T}\n   * @public\n   */\n  static m_min__java_util_Collection__java_util_Comparator(coll, comp) {\n    Collections.$clinit();\n    return Collections.m_max__java_util_Collection__java_util_Comparator(coll, /**@type {Comparator\x3c?\x3e} */ (Collections.m_reverseOrder__java_util_Comparator(comp)));\n  }\n  \n  /**\n   * @template M_E\n   * @param {Map\x3cM_E, ?boolean\x3e} map\n   * @return {Set\x3cM_E\x3e}\n   * @public\n   */\n  static m_newSetFromMap__java_util_Map(map) {\n    Collections.$clinit();\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_Object(map.isEmpty(), \"map is not empty\");\n    return /**@type {!SetFromMap\x3c*\x3e} */ (SetFromMap.$create__java_util_Map(map));\n  }\n  \n  /**\n   * @template M_T\n   * @param {number} n\n   * @param {M_T} o\n   * @return {List\x3cM_T\x3e}\n   * @public\n   */\n  static m_nCopies__int__java_lang_Object(n, o) {\n    Collections.$clinit();\n    let list \x3d /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__());\n    for (let i \x3d 0; i \x3c n; ++i) {\n      list.add(o);\n    }\n    return /**@type {List\x3c*\x3e} */ (Collections.m_unmodifiableList__java_util_List(list));\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3cM_T\x3e} list\n   * @param {M_T} oldVal\n   * @param {M_T} newVal\n   * @return {boolean}\n   * @public\n   */\n  static m_replaceAll__java_util_List__java_lang_Object__java_lang_Object(list, oldVal, newVal) {\n    Collections.$clinit();\n    let modified \x3d false;\n    for (let it \x3d list.m_listIterator__(); it.m_hasNext__(); ) {\n      let t \x3d it.m_next__();\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(t, oldVal)) {\n        it.m_set__java_lang_Object(newVal);\n        modified \x3d true;\n      }\n    }\n    return modified;\n  }\n  \n  /**\n   * @param {List\x3c?\x3e} l\n   * @return {void}\n   * @public\n   */\n  static m_reverse__java_util_List(l) {\n    Collections.$clinit();\n    if (RandomAccess.$isInstance(l)) {\n      for (let iFront \x3d 0, iBack \x3d l.size() - 1; iFront \x3c iBack; ++iFront, --iBack) {\n        Collections.m_swap__java_util_List__int__int(l, iFront, iBack);\n      }\n    } else {\n      let head \x3d l.m_listIterator__();\n      let tail \x3d l.m_listIterator__int(l.size());\n      while (head.m_nextIndex__() \x3c tail.m_previousIndex__()) {\n        let headElem \x3d head.m_next__();\n        let tailElem \x3d tail.m_previous__();\n        head.m_set__java_lang_Object(tailElem);\n        tail.m_set__java_lang_Object(headElem);\n      }\n    }\n  }\n  \n  /**\n   * @template M_T\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_reverseOrder__() {\n    Collections.$clinit();\n    return /**@type {Comparator\x3c*\x3e} */ ($Casts.$to(Comparator.m_reverseOrder__(), Comparator));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3cM_T\x3e} cmp\n   * @return {Comparator\x3cM_T\x3e}\n   * @public\n   */\n  static m_reverseOrder__java_util_Comparator(cmp) {\n    Collections.$clinit();\n    return $Equality.$same(cmp, null) ? /**@type {Comparator\x3c*\x3e} */ (Collections.m_reverseOrder__()) : cmp.m_reversed__();\n  }\n  \n  /**\n   * @param {List\x3c?\x3e} lst\n   * @param {number} dist\n   * @return {void}\n   * @public\n   */\n  static m_rotate__java_util_List__int(lst, dist) {\n    Collections.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(lst);\n    let size \x3d lst.size();\n    if (size \x3d\x3d 0) {\n      return;\n    }\n    let normdist \x3d $Primitives.$coerceDivision(dist % size);\n    if (normdist \x3d\x3d 0) {\n      return;\n    }\n    if (normdist \x3c 0) {\n      normdist +\x3d size;\n    }\n    if (RandomAccess.$isInstance(lst)) {\n      let list \x3d /**@type {List\x3c*\x3e} */ ($Casts.$to(lst, List));\n      let temp \x3d list.getAtIndex(0);\n      let index \x3d 0, beginIndex \x3d 0;\n      for (let i \x3d 0; i \x3c size; i++) {\n        index \x3d $Primitives.$coerceDivision((index + normdist) % size);\n        temp \x3d list.setAtIndex(index, temp);\n        if (index \x3d\x3d beginIndex) {\n          index \x3d ++beginIndex;\n          temp \x3d list.getAtIndex(beginIndex);\n        }\n      }\n    } else {\n      let divideIndex \x3d size - normdist;\n      let sublist1 \x3d lst.subList(0, divideIndex);\n      let sublist2 \x3d lst.subList(divideIndex, size);\n      Collections.m_reverse__java_util_List(sublist1);\n      Collections.m_reverse__java_util_List(sublist2);\n      Collections.m_reverse__java_util_List(lst);\n    }\n  }\n  \n  /**\n   * @param {List\x3c?\x3e} list\n   * @return {void}\n   * @public\n   */\n  static m_shuffle__java_util_List(list) {\n    Collections.$clinit();\n    Collections.m_shuffle__java_util_List__java_util_Random(list, RandomHolder.f_rnd__java_util_Collections_RandomHolder_);\n  }\n  \n  /**\n   * @param {List\x3c?\x3e} list\n   * @param {Random} rnd\n   * @return {void}\n   * @public\n   */\n  static m_shuffle__java_util_List__java_util_Random(list, rnd) {\n    Collections.$clinit();\n    if (RandomAccess.$isInstance(list)) {\n      for (let i \x3d list.size() - 1; i \x3e\x3d 1; i--) {\n        Collections.m_swapImpl__java_util_List__int__int_$p_java_util_Collections(list, i, rnd.m_nextInt__int(i + 1));\n      }\n    } else {\n      let arr \x3d list.toArray();\n      for (let i$1$ \x3d arr.length - 1; i$1$ \x3e\x3d 1; i$1$--) {\n        Collections.m_swapImpl__arrayOf_java_lang_Object__int__int_$p_java_util_Collections(arr, i$1$, rnd.m_nextInt__int(i$1$ + 1));\n      }\n      let it \x3d list.m_listIterator__();\n      for (let $array \x3d arr, $index \x3d 0; $index \x3c $array.length; $index++) {\n        let e \x3d $array[$index];\n        it.m_next__();\n        it.m_set__java_lang_Object(e);\n      }\n    }\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} o\n   * @return {Set\x3cM_T\x3e}\n   * @public\n   */\n  static m_singleton__java_lang_Object(o) {\n    Collections.$clinit();\n    let set \x3d /**@type {!HashSet\x3c*\x3e} */ (HashSet.$create__int(1));\n    set.add(o);\n    return /**@type {Set\x3c*\x3e} */ (Collections.m_unmodifiableSet__java_util_Set(set));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} o\n   * @return {List\x3cM_T\x3e}\n   * @public\n   */\n  static m_singletonList__java_lang_Object(o) {\n    Collections.$clinit();\n    return /**@type {!SingletonList\x3c*\x3e} */ (SingletonList.$create__java_lang_Object(o));\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {M_K} key\n   * @param {M_V} value\n   * @return {Map\x3cM_K, M_V\x3e}\n   * @public\n   */\n  static m_singletonMap__java_lang_Object__java_lang_Object(key, value) {\n    Collections.$clinit();\n    let map \x3d /**@type {!HashMap\x3c*, *\x3e} */ (HashMap.$create__int(1));\n    map.put(key, value);\n    return /**@type {Map\x3c*, *\x3e} */ (Collections.m_unmodifiableMap__java_util_Map(map));\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3cM_T\x3e} target\n   * @return {void}\n   * @public\n   */\n  static m_sort__java_util_List(target) {\n    Collections.$clinit();\n    target.m_sort__java_util_Comparator(null);\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3cM_T\x3e} target\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  static m_sort__java_util_List__java_util_Comparator(target, c) {\n    Collections.$clinit();\n    target.m_sort__java_util_Comparator(c);\n  }\n  \n  /**\n   * @param {List\x3c?\x3e} list\n   * @param {number} i\n   * @param {number} j\n   * @return {void}\n   * @public\n   */\n  static m_swap__java_util_List__int__int(list, i, j) {\n    Collections.$clinit();\n    Collections.m_swapImpl__java_util_List__int__int_$p_java_util_Collections(list, i, j);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Collection\x3c?\x3e} coll\n   * @return {Collection\x3cM_T\x3e}\n   * @public\n   */\n  static m_unmodifiableCollection__java_util_Collection(coll) {\n    Collections.$clinit();\n    return /**@type {!UnmodifiableCollection\x3c*\x3e} */ (UnmodifiableCollection.$create__java_util_Collection(coll));\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3c?\x3e} list\n   * @return {List\x3cM_T\x3e}\n   * @public\n   */\n  static m_unmodifiableList__java_util_List(list) {\n    Collections.$clinit();\n    return RandomAccess.$isInstance(list) ? /**@type {!UnmodifiableRandomAccessList\x3c*\x3e} */ (UnmodifiableRandomAccessList.$create__java_util_List(list)) : /**@type {!UnmodifiableList\x3c*\x3e} */ (UnmodifiableList.$create__java_util_List(list));\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {Map\x3c?, ?\x3e} map\n   * @return {Map\x3cM_K, M_V\x3e}\n   * @public\n   */\n  static m_unmodifiableMap__java_util_Map(map) {\n    Collections.$clinit();\n    return /**@type {!UnmodifiableMap\x3c*, *\x3e} */ (UnmodifiableMap.$create__java_util_Map(map));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Set\x3c?\x3e} set\n   * @return {Set\x3cM_T\x3e}\n   * @public\n   */\n  static m_unmodifiableSet__java_util_Set(set) {\n    Collections.$clinit();\n    return /**@type {!UnmodifiableSet\x3c*\x3e} */ (UnmodifiableSet.$create__java_util_Set(set));\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {SortedMap\x3cM_K, ?\x3e} map\n   * @return {SortedMap\x3cM_K, M_V\x3e}\n   * @public\n   */\n  static m_unmodifiableSortedMap__java_util_SortedMap(map) {\n    Collections.$clinit();\n    return /**@type {!UnmodifiableSortedMap\x3c*, *\x3e} */ (UnmodifiableSortedMap.$create__java_util_SortedMap(map));\n  }\n  \n  /**\n   * @template M_T\n   * @param {SortedSet\x3cM_T\x3e} set\n   * @return {SortedSet\x3cM_T\x3e}\n   * @public\n   */\n  static m_unmodifiableSortedSet__java_util_SortedSet(set) {\n    Collections.$clinit();\n    return /**@type {!UnmodifiableSortedSet\x3c*\x3e} */ (UnmodifiableSortedSet.$create__java_util_SortedSet(set));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Iterable\x3cM_T\x3e} collection\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_lang_Iterable_$pp_java_util(collection) {\n    Collections.$clinit();\n    let hashCode \x3d 0;\n    for (let $iterator \x3d collection.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      hashCode \x3d hashCode + Objects.m_hashCode__java_lang_Object(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3cM_T\x3e} list\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_util_List_$pp_java_util(list) {\n    Collections.$clinit();\n    let hashCode \x3d 1;\n    for (let $iterator \x3d list.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d $iterator.m_next__();\n      hashCode \x3d 31 * hashCode + Objects.m_hashCode__java_lang_Object(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @template M_T\n   * @param {List\x3cM_T\x3e} list\n   * @param {number} i\n   * @param {number} j\n   * @return {void}\n   * @public\n   */\n  static m_swapImpl__java_util_List__int__int_$p_java_util_Collections(list, i, j) {\n    Collections.$clinit();\n    let t \x3d list.getAtIndex(i);\n    list.setAtIndex(i, list.getAtIndex(j));\n    list.setAtIndex(j, t);\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @param {number} i\n   * @param {number} j\n   * @return {void}\n   * @public\n   */\n  static m_swapImpl__arrayOf_java_lang_Object__int__int_$p_java_util_Collections(a, i, j) {\n    Collections.$clinit();\n    let obj \x3d a[i];\n    $Arrays.$set(a, i, a[j]);\n    $Arrays.$set(a, j, obj);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Collections()'.\n   * @return {!Collections}\n   * @public\n   */\n  static $create__() {\n    Collections.$clinit();\n    let $instance \x3d new Collections();\n    $instance.$ctor__java_util_Collections__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Collections()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Collections__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {List}\n   * @public\n   */\n  static get f_EMPTY_LIST__java_util_Collections() {\n    return (Collections.$clinit(), Collections.$f_EMPTY_LIST__java_util_Collections);\n  }\n  \n  /**\n   * @param {List} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY_LIST__java_util_Collections(value) {\n    (Collections.$clinit(), Collections.$f_EMPTY_LIST__java_util_Collections \x3d value);\n  }\n  \n  /**\n   * @return {Map}\n   * @public\n   */\n  static get f_EMPTY_MAP__java_util_Collections() {\n    return (Collections.$clinit(), Collections.$f_EMPTY_MAP__java_util_Collections);\n  }\n  \n  /**\n   * @param {Map} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY_MAP__java_util_Collections(value) {\n    (Collections.$clinit(), Collections.$f_EMPTY_MAP__java_util_Collections \x3d value);\n  }\n  \n  /**\n   * @return {Set}\n   * @public\n   */\n  static get f_EMPTY_SET__java_util_Collections() {\n    return (Collections.$clinit(), Collections.$f_EMPTY_SET__java_util_Collections);\n  }\n  \n  /**\n   * @param {Set} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY_SET__java_util_Collections(value) {\n    (Collections.$clinit(), Collections.$f_EMPTY_SET__java_util_Collections \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Collections;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Collections);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Collections.$clinit \x3d function() {};\n    Comparable \x3d goog.module.get('java.lang.Comparable$impl');\n    IndexOutOfBoundsException \x3d goog.module.get('java.lang.IndexOutOfBoundsException$impl');\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    $1 \x3d goog.module.get('java.util.Collections.$1$impl');\n    EmptyList \x3d goog.module.get('java.util.Collections.EmptyList$impl');\n    EmptyListIterator \x3d goog.module.get('java.util.Collections.EmptyListIterator$impl');\n    EmptyMap \x3d goog.module.get('java.util.Collections.EmptyMap$impl');\n    EmptySet \x3d goog.module.get('java.util.Collections.EmptySet$impl');\n    LifoQueue \x3d goog.module.get('java.util.Collections.LifoQueue$impl');\n    RandomHolder \x3d goog.module.get('java.util.Collections.RandomHolder$impl');\n    SetFromMap \x3d goog.module.get('java.util.Collections.SetFromMap$impl');\n    SingletonList \x3d goog.module.get('java.util.Collections.SingletonList$impl');\n    UnmodifiableCollection \x3d goog.module.get('java.util.Collections.UnmodifiableCollection$impl');\n    UnmodifiableList \x3d goog.module.get('java.util.Collections.UnmodifiableList$impl');\n    UnmodifiableMap \x3d goog.module.get('java.util.Collections.UnmodifiableMap$impl');\n    UnmodifiableRandomAccessList \x3d goog.module.get('java.util.Collections.UnmodifiableRandomAccessList$impl');\n    UnmodifiableSet \x3d goog.module.get('java.util.Collections.UnmodifiableSet$impl');\n    UnmodifiableSortedMap \x3d goog.module.get('java.util.Collections.UnmodifiableSortedMap$impl');\n    UnmodifiableSortedSet \x3d goog.module.get('java.util.Collections.UnmodifiableSortedSet$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    Comparators \x3d goog.module.get('java.util.Comparators$impl');\n    HashMap \x3d goog.module.get('java.util.HashMap$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    ListIterator \x3d goog.module.get('java.util.ListIterator$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    RandomAccess \x3d goog.module.get('java.util.RandomAccess$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    Coercions \x3d goog.module.get('javaemul.internal.Coercions$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    Collections.$f_EMPTY_LIST__java_util_Collections \x3d EmptyList.$create__();\n    Collections.$f_EMPTY_MAP__java_util_Collections \x3d EmptyMap.$create__();\n    Collections.$f_EMPTY_SET__java_util_Collections \x3d EmptySet.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Collections, $Util.$makeClassName('java.util.Collections'));\n\n\n/** @private {List} */\nCollections.$f_EMPTY_LIST__java_util_Collections;\n\n\n/** @private {Map} */\nCollections.$f_EMPTY_MAP__java_util_Collections;\n\n\n/** @private {Set} */\nCollections.$f_EMPTY_SET__java_util_Collections;\n\n\n\n\nexports \x3d Collections; \n//# sourceMappingURL\x3dCollections.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collections.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collections.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collections');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$1 \x3d goog.require('java.util.Collections.$1');\nconst _EmptyList \x3d goog.require('java.util.Collections.EmptyList');\nconst _EmptyListIterator \x3d goog.require('java.util.Collections.EmptyListIterator');\nconst _EmptyMap \x3d goog.require('java.util.Collections.EmptyMap');\nconst _EmptySet \x3d goog.require('java.util.Collections.EmptySet');\nconst _LifoQueue \x3d goog.require('java.util.Collections.LifoQueue');\nconst _RandomHolder \x3d goog.require('java.util.Collections.RandomHolder');\nconst _SetFromMap \x3d goog.require('java.util.Collections.SetFromMap');\nconst _SingletonList \x3d goog.require('java.util.Collections.SingletonList');\nconst _UnmodifiableCollection \x3d goog.require('java.util.Collections.UnmodifiableCollection');\nconst _UnmodifiableList \x3d goog.require('java.util.Collections.UnmodifiableList');\nconst _UnmodifiableMap \x3d goog.require('java.util.Collections.UnmodifiableMap');\nconst _UnmodifiableRandomAccessList \x3d goog.require('java.util.Collections.UnmodifiableRandomAccessList');\nconst _UnmodifiableSet \x3d goog.require('java.util.Collections.UnmodifiableSet');\nconst _UnmodifiableSortedMap \x3d goog.require('java.util.Collections.UnmodifiableSortedMap');\nconst _UnmodifiableSortedSet \x3d goog.require('java.util.Collections.UnmodifiableSortedSet');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Comparators \x3d goog.require('java.util.Comparators');\nconst _Deque \x3d goog.require('java.util.Deque');\nconst _Enumeration \x3d goog.require('java.util.Enumeration');\nconst _HashMap \x3d goog.require('java.util.HashMap');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _List \x3d goog.require('java.util.List');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Queue \x3d goog.require('java.util.Queue');\nconst _Random \x3d goog.require('java.util.Random');\nconst _RandomAccess \x3d goog.require('java.util.RandomAccess');\nconst _Set \x3d goog.require('java.util.Set');\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _SortedSet \x3d goog.require('java.util.SortedSet');\nconst _Coercions \x3d goog.require('javaemul.internal.Coercions');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar Collections \x3d goog.require('java.util.Collections$impl');\nexports \x3d Collections;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Optional.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Optional.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Optional$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_T\n  */\nclass Optional extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {C_T} */\n    this.f_ref__java_util_Optional_;\n  }\n  \n  /**\n   * @template M_T\n   * @return {Optional\x3cM_T\x3e}\n   * @public\n   */\n  static m_empty__() {\n    Optional.$clinit();\n    return /**@type {Optional\x3c*\x3e} */ ($Casts.$to(Optional.$f_EMPTY__java_util_Optional_, Optional));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} value\n   * @return {Optional\x3cM_T\x3e}\n   * @public\n   */\n  static m_of__java_lang_Object(value) {\n    Optional.$clinit();\n    return /**@type {!Optional\x3c*\x3e} */ (Optional.$create__java_lang_Object($InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(value)));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} value\n   * @return {Optional\x3cM_T\x3e}\n   * @public\n   */\n  static m_ofNullable__java_lang_Object(value) {\n    Optional.$clinit();\n    return $Equality.$same(value, null) ? /**@type {Optional\x3c*\x3e} */ (Optional.m_empty__()) : /**@type {Optional\x3c*\x3e} */ (Optional.m_of__java_lang_Object(value));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Optional(Object)'.\n   * @template C_T\n   * @param {C_T} ref\n   * @return {!Optional\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_lang_Object(ref) {\n    Optional.$clinit();\n    let $instance \x3d new Optional();\n    $instance.$ctor__java_util_Optional__java_lang_Object(ref);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Optional(Object)'.\n   * @param {C_T} ref\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Optional__java_lang_Object(ref) {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_Optional_ \x3d ref;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isPresent__() {\n    return !$Equality.$same(this.f_ref__java_util_Optional_, null);\n  }\n  \n  /**\n   * @return {C_T}\n   * @public\n   */\n  m_get__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.m_isPresent__());\n    return this.f_ref__java_util_Optional_;\n  }\n  \n  /**\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_ifPresent__java_util_function_Consumer(consumer) {\n    if (this.m_isPresent__()) {\n      consumer.m_accept__java_lang_Object(this.f_ref__java_util_Optional_);\n    }\n  }\n  \n  /**\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_filter__java_util_function_Predicate(predicate) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(predicate);\n    if (!this.m_isPresent__() || predicate.m_test__java_lang_Object(this.f_ref__java_util_Optional_)) {\n      return this;\n    }\n    return /**@type {Optional\x3cC_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Optional\x3cM_U\x3e}\n   * @public\n   */\n  m_map__java_util_function_Function(mapper) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(mapper);\n    if (this.m_isPresent__()) {\n      return /**@type {Optional\x3c*\x3e} */ (Optional.m_ofNullable__java_lang_Object(mapper.m_apply__java_lang_Object(this.f_ref__java_util_Optional_)));\n    }\n    return /**@type {Optional\x3c*\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, Optional\x3cM_U\x3e\x3e} mapper\n   * @return {Optional\x3cM_U\x3e}\n   * @public\n   */\n  m_flatMap__java_util_function_Function(mapper) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(mapper);\n    if (this.m_isPresent__()) {\n      return /**@type {Optional\x3c*\x3e} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(/**@type {Optional\x3c*\x3e} */ ($Casts.$to(mapper.m_apply__java_lang_Object(this.f_ref__java_util_Optional_), Optional))), Optional));\n    }\n    return /**@type {Optional\x3c*\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @param {C_T} other\n   * @return {C_T}\n   * @public\n   */\n  m_orElse__java_lang_Object(other) {\n    return this.m_isPresent__() ? this.f_ref__java_util_Optional_ : other;\n  }\n  \n  /**\n   * @param {Supplier\x3c?\x3e} other\n   * @return {C_T}\n   * @public\n   */\n  m_orElseGet__java_util_function_Supplier(other) {\n    return this.m_isPresent__() ? this.f_ref__java_util_Optional_ : other.m_get__();\n  }\n  \n  /**\n   * @template M_X\n   * @param {Supplier\x3c?\x3e} exceptionSupplier\n   * @return {C_T}\n   * @public\n   */\n  m_orElseThrow__java_util_function_Supplier(exceptionSupplier) {\n    if (this.m_isPresent__()) {\n      return this.f_ref__java_util_Optional_;\n    }\n    throw $Exceptions.toJs(exceptionSupplier.m_get__());\n  }\n  \n  /**\n   * @override\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  equals(obj) {\n    if ($Equality.$same(obj, this)) {\n      return true;\n    }\n    if (!Optional.$isInstance(obj)) {\n      return false;\n    }\n    let other \x3d /**@type {Optional\x3c*\x3e} */ ($Casts.$to(obj, Optional));\n    return Objects.m_equals__java_lang_Object__java_lang_Object(this.f_ref__java_util_Optional_, other.f_ref__java_util_Optional_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Objects.m_hashCode__java_lang_Object(this.f_ref__java_util_Optional_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.m_isPresent__() ? \"Optional.of(\" + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__java_lang_Object(this.f_ref__java_util_Optional_)) + \")\" : \"Optional.empty()\";\n  }\n  \n  /**\n   * @return {Optional\x3c?\x3e}\n   * @public\n   */\n  static get f_EMPTY__java_util_Optional_() {\n    return (Optional.$clinit(), Optional.$f_EMPTY__java_util_Optional_);\n  }\n  \n  /**\n   * @param {Optional\x3c?\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY__java_util_Optional_(value) {\n    (Optional.$clinit(), Optional.$f_EMPTY__java_util_Optional_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Optional;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Optional);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Optional.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    Optional.$f_EMPTY__java_util_Optional_ \x3d /**@type {!Optional\x3c*\x3e} */ (Optional.$create__java_lang_Object(null));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Optional, $Util.$makeClassName('java.util.Optional'));\n\n\n/** @private {Optional\x3c?\x3e} */\nOptional.$f_EMPTY__java_util_Optional_;\n\n\n\n\nexports \x3d Optional; \n//# sourceMappingURL\x3dOptional.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Optional.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Optional.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Optional');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Optional \x3d goog.require('java.util.Optional$impl');\nexports \x3d Optional;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BinaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BinaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.BinaryOperator$impl');\n\n\nconst BiFunction \x3d goog.require('java.util.function.BiFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.BinaryOperator.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T\n * @extends {BiFunction\x3cC_T, C_T, C_T\x3e}\n */\nclass BinaryOperator {\n  /**\n   * @template M_T\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {BinaryOperator\x3cM_T\x3e}\n   * @public\n   */\n  static m_maxBy__java_util_Comparator(comparator) {\n    BinaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(comparator);\n    return /**@type {BinaryOperator\x3c*\x3e} */ (BinaryOperator.$adapt(((/** * */ t, /** * */ u) \x3d\x3e{\n      return comparator.m_compare__java_lang_Object__java_lang_Object(t, u) \x3c\x3d 0 ? u : t;\n    })));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {BinaryOperator\x3cM_T\x3e}\n   * @public\n   */\n  static m_minBy__java_util_Comparator(comparator) {\n    BinaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(comparator);\n    return /**@type {BinaryOperator\x3c*\x3e} */ (BinaryOperator.$adapt(((/** * */ t, /** * */ u) \x3d\x3e{\n      return comparator.m_compare__java_lang_Object__java_lang_Object(t, u) \x3c\x3d 0 ? t : u;\n    })));\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T, C_T):C_T} fn\n   * @return {BinaryOperator\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    BinaryOperator.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    BiFunction.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_BinaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_BinaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_BinaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BinaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.BinaryOperator.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    BiFunction.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(BinaryOperator, $Util.$makeClassName('java.util.function.BinaryOperator'));\n\n\nBinaryOperator.$markImplementor(/** @type {Function} */ (BinaryOperator));\n\n\nexports \x3d BinaryOperator; \n//# sourceMappingURL\x3dBinaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BinaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BinaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.BinaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst BinaryOperator \x3d goog.require('java.util.function.BinaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\n\n\n/**\n * @template C_T\n * @implements {BinaryOperator\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_T):C_T} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, C_T):C_T} */\n    this.f_$$fn__java_util_function_BinaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_BinaryOperator_$LambdaAdaptor__java_util_function_BinaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, C_T):C_T} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_BinaryOperator_$LambdaAdaptor__java_util_function_BinaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_BinaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {C_T} arg1\n   * @return {C_T}\n   * @public\n   */\n  m_apply__java_lang_Object__java_lang_Object(arg0, arg1) {\n    let /** ?function(C_T, C_T):C_T */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_BinaryOperator_$LambdaAdaptor, $function(arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_V\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {BiFunction\x3cC_T, C_T, M_V\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Function(arg0) {\n    return /**@type {BiFunction\x3cC_T, C_T, *\x3e} */ (BiFunction.m_andThen__$default__java_util_function_BiFunction__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    BiFunction \x3d goog.module.get('java.util.function.BiFunction$impl');\n    j_l_Object.$clinit();\n    BiFunction.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.BinaryOperator$$LambdaAdaptor'));\n\n\nBinaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dBinaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BinaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BinaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.BinaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.BinaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/BinaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.BinaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.BinaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.BinaryOperator.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar BinaryOperator \x3d goog.require('java.util.function.BinaryOperator$impl');\nexports \x3d BinaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntFunction.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_R\n */\nclass IntFunction {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {C_R}\n   * @public\n   */\n  m_apply__int(value) {\n  }\n  \n  /**\n   * @template C_R\n   * @param {?function(number):C_R} fn\n   * @return {IntFunction\x3cC_R\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    IntFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntFunction, $Util.$makeClassName('java.util.function.IntFunction'));\n\n\nIntFunction.$markImplementor(/** @type {Function} */ (IntFunction));\n\n\nexports \x3d IntFunction; \n//# sourceMappingURL\x3dIntFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntFunction \x3d goog.require('java.util.function.IntFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_R\n * @implements {IntFunction\x3cC_R\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):C_R} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):C_R} */\n    this.f_$$fn__java_util_function_IntFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntFunction_$LambdaAdaptor__java_util_function_IntFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):C_R} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntFunction_$LambdaAdaptor__java_util_function_IntFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {C_R}\n   * @public\n   */\n  m_apply__int(arg0) {\n    let /** ?function(number):C_R */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntFunction$$LambdaAdaptor'));\n\n\nIntFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntFunction.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar IntFunction \x3d goog.require('java.util.function.IntFunction$impl');\nexports \x3d IntFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Enum.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Enum.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Enum$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AssertionError \x3d goog.forwardDeclare('java.lang.AssertionError$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @abstract\n * @template C_E\n * @implements {Comparable\x3cC_E\x3e}\n * @implements {Serializable}\n  */\nclass Enum extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_name__java_lang_Enum_;\n    /** @public {number} */\n    this.f_ordinal__java_lang_Enum_ \x3d 0;\n  }\n  \n  /**\n   * Initialization from constructor 'Enum(String, int)'.\n   * @param {?string} name\n   * @param {number} ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Enum__java_lang_String__int(name, ordinal) {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Class\x3cC_E\x3e}\n   * @public\n   */\n  getDeclaringClass() {\n    return null;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  name() {\n    return !$Equality.$same(this.f_name__java_lang_Enum_, null) ? this.f_name__java_lang_Enum_ : \"\" + this.f_ordinal__java_lang_Enum_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  ordinal() {\n    return this.f_ordinal__java_lang_Enum_;\n  }\n  \n  /**\n   * @param {C_E} other\n   * @return {number}\n   * @public\n   */\n  compareTo(other) {\n    return this.f_ordinal__java_lang_Enum_ - (/**@type {Enum} */ ($Casts.$to(other, Enum))).f_ordinal__java_lang_Enum_;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Class\x3cM_T\x3e} enumType\n   * @param {?string} name\n   * @return {M_T}\n   * @public\n   */\n  static m_valueOf__java_lang_Class__java_lang_String(enumType, name) {\n    Enum.$clinit();\n    throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(\"not supported\"));\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.name();\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_E} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Enum;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Enum);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Enum.$clinit \x3d function() {};\n    AssertionError \x3d goog.module.get('java.lang.AssertionError$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Enum, $Util.$makeClassName('java.lang.Enum'));\n\n\nComparable.$markImplementor(Enum);\nSerializable.$markImplementor(Enum);\n\n\nexports \x3d Enum; \n//# sourceMappingURL\x3dEnum.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Enum.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Enum.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Enum');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AssertionError \x3d goog.require('java.lang.AssertionError');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Enum \x3d goog.require('java.lang.Enum$impl');\nexports \x3d Enum;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/IllegalArgumentException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.IllegalArgumentException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.IllegalArgumentException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\n\n\nclass IllegalArgumentException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalArgumentException()'.\n   * @return {!IllegalArgumentException}\n   * @public\n   */\n  static $create__() {\n    IllegalArgumentException.$clinit();\n    let $instance \x3d new IllegalArgumentException();\n    $instance.$ctor__java_lang_IllegalArgumentException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalArgumentException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalArgumentException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalArgumentException(String)'.\n   * @param {?string} message\n   * @return {!IllegalArgumentException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    IllegalArgumentException.$clinit();\n    let $instance \x3d new IllegalArgumentException();\n    $instance.$ctor__java_lang_IllegalArgumentException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalArgumentException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalArgumentException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalArgumentException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!IllegalArgumentException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    IllegalArgumentException.$clinit();\n    let $instance \x3d new IllegalArgumentException();\n    $instance.$ctor__java_lang_IllegalArgumentException__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalArgumentException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalArgumentException__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalArgumentException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!IllegalArgumentException}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    IllegalArgumentException.$clinit();\n    let $instance \x3d new IllegalArgumentException();\n    $instance.$ctor__java_lang_IllegalArgumentException__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalArgumentException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_IllegalArgumentException__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IllegalArgumentException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IllegalArgumentException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IllegalArgumentException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IllegalArgumentException, $Util.$makeClassName('java.lang.IllegalArgumentException'));\n\n\n\n\nexports \x3d IllegalArgumentException; \n//# sourceMappingURL\x3dIllegalArgumentException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/IllegalArgumentException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.IllegalArgumentException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.IllegalArgumentException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\n\n\n// Re-exports the implementation.\nvar IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException$impl');\nexports \x3d IllegalArgumentException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Enums$NativeMap$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Enums$NativeMap$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.Enums.NativeMap.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Map;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Map'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dEnums$NativeMap$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Enums$NativeMap$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Enums$NativeMap$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.Enums.NativeMap.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.Enums.NativeMap.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Enums.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Enums.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('vmbootstrap.Enums$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Enum \x3d goog.forwardDeclare('java.lang.Enum$impl');\nlet IllegalArgumentException \x3d goog.forwardDeclare('java.lang.IllegalArgumentException$impl');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.Enums.NativeMap.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass Enums extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Enums()'.\n   * @return {!Enums}\n   * @public\n   */\n  static $create__() {\n    Enums.$clinit();\n    let $instance \x3d new Enums();\n    $instance.$ctor__javaemul_internal_Enums__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Enums()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_Enums__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} values\n   * @return {Map\x3c?string, M_T\x3e}\n   * @public\n   */\n  static createMapFromValues(values) {\n    Enums.$clinit();\n    let map \x3d /**@type {!Map\x3c?string, Enum\x3e} */ (new Map());\n    for (let i \x3d 0; i \x3c values.length; i++) {\n      let name \x3d /**@type {Enum} */ (values[i]).name();\n      map.set(name, values[i]);\n    }\n    return map;\n  }\n  \n  /**\n   * @template M_V\n   * @param {?string} name\n   * @param {Map\x3c?string, M_V\x3e} map\n   * @return {M_V}\n   * @public\n   */\n  static getValueFromNameAndMap(name, map) {\n    Enums.$clinit();\n    if ($Equality.$same(name, null)) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__());\n    }\n    let enumValue \x3d map.get(name);\n    if ($Equality.$same(enumValue, null)) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__());\n    }\n    return enumValue;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Enums;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Enums);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Enums.$clinit \x3d function() {};\n    IllegalArgumentException \x3d goog.module.get('java.lang.IllegalArgumentException$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Enums, $Util.$makeClassName('javaemul.internal.Enums'));\n\n\n\n\nexports \x3d Enums; \n//# sourceMappingURL\x3dEnums.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Enums.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Enums.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('vmbootstrap.Enums');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Enum \x3d goog.require('java.lang.Enum');\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _$Overlay \x3d goog.require('javaemul.internal.Enums.NativeMap.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Enums \x3d goog.require('vmbootstrap.Enums$impl');\nexports \x3d Enums;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Collector$Characteristics.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Collector$Characteristics.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Collector.Characteristics$impl');\n\n\nconst Enum \x3d goog.require('java.lang.Enum$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Enums \x3d goog.forwardDeclare('vmbootstrap.Enums$impl');\n\n\n/**\n * @extends {Enum\x3cCharacteristics\x3e}\n  */\nclass Characteristics extends Enum {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Characteristics(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!Characteristics}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    let $instance \x3d new Characteristics();\n    $instance.$ctor__java_util_stream_Collector_Characteristics__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Characteristics(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_Collector_Characteristics__java_lang_String__int($name, $ordinal) {\n    this.f_name__java_lang_Enum_ \x3d $name;\n    this.f_ordinal__java_lang_Enum_ \x3d $ordinal;\n    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @param {string} name\n   * @return {!Characteristics}\n   * @public\n   */\n  static m_valueOf__java_lang_String(name) {\n    Characteristics.$clinit();\n    if ($Equality.$same(Characteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_, null)) {\n      Characteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_ \x3d $Enums.createMapFromValues(Characteristics.m_values__());\n    }\n    return $Enums.getValueFromNameAndMap(name, Characteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_);\n  }\n  \n  /**\n   * @return {!Array\x3c!Characteristics\x3e}\n   * @public\n   */\n  static m_values__() {\n    Characteristics.$clinit();\n    return /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.$f_CONCURRENT__java_util_stream_Collector_Characteristics, Characteristics.$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics, Characteristics.$f_UNORDERED__java_util_stream_Collector_Characteristics], Characteristics));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {Characteristics} */ ($Casts.$to(arg0, Characteristics)));\n  }\n  \n  /**\n   * @return {!Characteristics}\n   * @public\n   */\n  static get f_CONCURRENT__java_util_stream_Collector_Characteristics() {\n    return (Characteristics.$clinit(), Characteristics.$f_CONCURRENT__java_util_stream_Collector_Characteristics);\n  }\n  \n  /**\n   * @param {!Characteristics} value\n   * @return {void}\n   * @public\n   */\n  static set f_CONCURRENT__java_util_stream_Collector_Characteristics(value) {\n    (Characteristics.$clinit(), Characteristics.$f_CONCURRENT__java_util_stream_Collector_Characteristics \x3d value);\n  }\n  \n  /**\n   * @return {!Characteristics}\n   * @public\n   */\n  static get f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics() {\n    return (Characteristics.$clinit(), Characteristics.$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics);\n  }\n  \n  /**\n   * @param {!Characteristics} value\n   * @return {void}\n   * @public\n   */\n  static set f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics(value) {\n    (Characteristics.$clinit(), Characteristics.$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics \x3d value);\n  }\n  \n  /**\n   * @return {!Characteristics}\n   * @public\n   */\n  static get f_UNORDERED__java_util_stream_Collector_Characteristics() {\n    return (Characteristics.$clinit(), Characteristics.$f_UNORDERED__java_util_stream_Collector_Characteristics);\n  }\n  \n  /**\n   * @param {!Characteristics} value\n   * @return {void}\n   * @public\n   */\n  static set f_UNORDERED__java_util_stream_Collector_Characteristics(value) {\n    (Characteristics.$clinit(), Characteristics.$f_UNORDERED__java_util_stream_Collector_Characteristics \x3d value);\n  }\n  \n  /**\n   * @return {Map\x3c?string, !Characteristics\x3e}\n   * @public\n   */\n  static get f_namesToValuesMap__java_util_stream_Collector_Characteristics_() {\n    return (Characteristics.$clinit(), Characteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_);\n  }\n  \n  /**\n   * @param {Map\x3c?string, !Characteristics\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_namesToValuesMap__java_util_stream_Collector_Characteristics_(value) {\n    (Characteristics.$clinit(), Characteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Characteristics;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Characteristics);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Characteristics.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Enums \x3d goog.module.get('vmbootstrap.Enums$impl');\n    Enum.$clinit();\n    Characteristics.$f_CONCURRENT__java_util_stream_Collector_Characteristics \x3d Characteristics.$create__java_lang_String__int($Util.$makeEnumName(\"CONCURRENT\"), Characteristics.$ordinal$f_CONCURRENT__java_util_stream_Collector_Characteristics);\n    Characteristics.$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics \x3d Characteristics.$create__java_lang_String__int($Util.$makeEnumName(\"IDENTITY_FINISH\"), Characteristics.$ordinal$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics);\n    Characteristics.$f_UNORDERED__java_util_stream_Collector_Characteristics \x3d Characteristics.$create__java_lang_String__int($Util.$makeEnumName(\"UNORDERED\"), Characteristics.$ordinal$f_UNORDERED__java_util_stream_Collector_Characteristics);\n    Characteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_ \x3d null;\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForEnum(Characteristics, $Util.$makeClassName('java.util.stream.Collector$Characteristics'));\n\n\n/** @private {!Characteristics} */\nCharacteristics.$f_CONCURRENT__java_util_stream_Collector_Characteristics;\n\n\n/** @private {!Characteristics} */\nCharacteristics.$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics;\n\n\n/** @private {!Characteristics} */\nCharacteristics.$f_UNORDERED__java_util_stream_Collector_Characteristics;\n\n\n/** @private {Map\x3c?string, !Characteristics\x3e} */\nCharacteristics.$f_namesToValuesMap__java_util_stream_Collector_Characteristics_;\n\n\n/** @public {number} @const */\nCharacteristics.$ordinal$f_CONCURRENT__java_util_stream_Collector_Characteristics \x3d 0;\n\n\n/** @public {number} @const */\nCharacteristics.$ordinal$f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics \x3d 1;\n\n\n/** @public {number} @const */\nCharacteristics.$ordinal$f_UNORDERED__java_util_stream_Collector_Characteristics \x3d 2;\n\n\n\n\nexports \x3d Characteristics; \n//# sourceMappingURL\x3dCollector$Characteristics.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Collector$Characteristics.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Collector$Characteristics.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Collector.Characteristics');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Enum \x3d goog.require('java.lang.Enum');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Enums \x3d goog.require('vmbootstrap.Enums');\n\n\n// Re-exports the implementation.\nvar Characteristics \x3d goog.require('java.util.stream.Collector.Characteristics$impl');\nexports \x3d Characteristics;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Collector.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Collector.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Collector$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet Characteristics \x3d goog.forwardDeclare('java.util.stream.Collector.Characteristics$impl');\nlet CollectorImpl \x3d goog.forwardDeclare('java.util.stream.CollectorImpl$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n * @template C_T, C_A, C_R\n */\nclass Collector {\n  /**\n   * @template M_T, M_A, M_R\n   * @param {Supplier\x3cM_A\x3e} supplier\n   * @param {BiConsumer\x3cM_A, M_T\x3e} accumulator\n   * @param {BinaryOperator\x3cM_A\x3e} combiner\n   * @param {j_u_function_Function\x3cM_A, M_R\x3e} finisher\n   * @param {Array\x3cCharacteristics\x3e} characteristics\n   * @return {Collector\x3cM_T, M_A, M_R\x3e}\n   * @public\n   */\n  static m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, finisher, characteristics) {\n    Collector.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(supplier);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(accumulator);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(combiner);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(finisher);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(characteristics);\n    return /**@type {!CollectorImpl\x3c*, *, *\x3e} */ (CollectorImpl.$create__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, finisher, characteristics));\n  }\n  \n  /**\n   * @template M_T, M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {BiConsumer\x3cM_R, M_T\x3e} accumulator\n   * @param {BinaryOperator\x3cM_R\x3e} combiner\n   * @param {Array\x3cCharacteristics\x3e} characteristics\n   * @return {Collector\x3cM_T, M_R, M_R\x3e}\n   * @public\n   */\n  static m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, characteristics) {\n    Collector.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(supplier);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(accumulator);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(combiner);\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(characteristics);\n    return /**@type {!CollectorImpl\x3c*, *, *\x3e} */ (CollectorImpl.$create__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, j_u_function_Function.m_identity__(), characteristics));\n  }\n  \n  /**\n   * @abstract\n   * @return {Supplier\x3cC_A\x3e}\n   * @public\n   */\n  m_supplier__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {BiConsumer\x3cC_A, C_T\x3e}\n   * @public\n   */\n  m_accumulator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Set\x3cCharacteristics\x3e}\n   * @public\n   */\n  m_characteristics__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {BinaryOperator\x3cC_A\x3e}\n   * @public\n   */\n  m_combiner__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {j_u_function_Function\x3cC_A, C_R\x3e}\n   * @public\n   */\n  m_finisher__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_Collector \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_Collector;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_Collector;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Collector.$clinit \x3d function() {};\n    j_u_function_Function \x3d goog.module.get('java.util.function.Function$impl');\n    CollectorImpl \x3d goog.module.get('java.util.stream.CollectorImpl$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Collector, $Util.$makeClassName('java.util.stream.Collector'));\n\n\nCollector.$markImplementor(/** @type {Function} */ (Collector));\n\n\nexports \x3d Collector; \n//# sourceMappingURL\x3dCollector.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/CollectorImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.CollectorImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.CollectorImpl$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Collector \x3d goog.require('java.util.stream.Collector$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet Characteristics \x3d goog.forwardDeclare('java.util.stream.Collector.Characteristics$impl');\n\n\n/**\n * @template C_T, C_A, C_R\n * @implements {Collector\x3cC_T, C_A, C_R\x3e}\n  */\nclass CollectorImpl extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Supplier\x3cC_A\x3e} */\n    this.f_supplier__java_util_stream_CollectorImpl_;\n    /** @public {BiConsumer\x3cC_A, C_T\x3e} */\n    this.f_accumulator__java_util_stream_CollectorImpl_;\n    /** @public {Set\x3cCharacteristics\x3e} */\n    this.f_characteristics__java_util_stream_CollectorImpl_;\n    /** @public {BinaryOperator\x3cC_A\x3e} */\n    this.f_combiner__java_util_stream_CollectorImpl_;\n    /** @public {j_u_function_Function\x3cC_A, C_R\x3e} */\n    this.f_finisher__java_util_stream_CollectorImpl_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'CollectorImpl(Supplier, BiConsumer, BinaryOperator, Function, Characteristics...)'.\n   * @template C_T, C_A, C_R\n   * @param {Supplier\x3cC_A\x3e} supplier\n   * @param {BiConsumer\x3cC_A, C_T\x3e} accumulator\n   * @param {BinaryOperator\x3cC_A\x3e} combiner\n   * @param {j_u_function_Function\x3cC_A, C_R\x3e} finisher\n   * @param {Array\x3cCharacteristics\x3e} characteristics\n   * @return {!CollectorImpl\x3cC_T, C_A, C_R\x3e}\n   * @public\n   */\n  static $create__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, finisher, characteristics) {\n    CollectorImpl.$clinit();\n    let $instance \x3d new CollectorImpl();\n    $instance.$ctor__java_util_stream_CollectorImpl__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, finisher, characteristics);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'CollectorImpl(Supplier, BiConsumer, BinaryOperator, Function, Characteristics...)'.\n   * @param {Supplier\x3cC_A\x3e} supplier\n   * @param {BiConsumer\x3cC_A, C_T\x3e} accumulator\n   * @param {BinaryOperator\x3cC_A\x3e} combiner\n   * @param {j_u_function_Function\x3cC_A, C_R\x3e} finisher\n   * @param {Array\x3cCharacteristics\x3e} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_CollectorImpl__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, combiner, finisher, characteristics) {\n    this.$ctor__java_lang_Object__();\n    this.f_supplier__java_util_stream_CollectorImpl_ \x3d supplier;\n    this.f_accumulator__java_util_stream_CollectorImpl_ \x3d accumulator;\n    this.f_characteristics__java_util_stream_CollectorImpl_ \x3d /**@type {Set\x3cCharacteristics\x3e} */ (Collections.m_emptySet__());\n    this.f_combiner__java_util_stream_CollectorImpl_ \x3d combiner;\n    this.f_finisher__java_util_stream_CollectorImpl_ \x3d finisher;\n  }\n  \n  /**\n   * @override\n   * @return {Supplier\x3cC_A\x3e}\n   * @public\n   */\n  m_supplier__() {\n    return this.f_supplier__java_util_stream_CollectorImpl_;\n  }\n  \n  /**\n   * @override\n   * @return {BiConsumer\x3cC_A, C_T\x3e}\n   * @public\n   */\n  m_accumulator__() {\n    return this.f_accumulator__java_util_stream_CollectorImpl_;\n  }\n  \n  /**\n   * @override\n   * @return {BinaryOperator\x3cC_A\x3e}\n   * @public\n   */\n  m_combiner__() {\n    return this.f_combiner__java_util_stream_CollectorImpl_;\n  }\n  \n  /**\n   * @override\n   * @return {j_u_function_Function\x3cC_A, C_R\x3e}\n   * @public\n   */\n  m_finisher__() {\n    return this.f_finisher__java_util_stream_CollectorImpl_;\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cCharacteristics\x3e}\n   * @public\n   */\n  m_characteristics__() {\n    return this.f_characteristics__java_util_stream_CollectorImpl_;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof CollectorImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, CollectorImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    CollectorImpl.$clinit \x3d function() {};\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(CollectorImpl, $Util.$makeClassName('java.util.stream.CollectorImpl'));\n\n\nCollector.$markImplementor(CollectorImpl);\n\n\nexports \x3d CollectorImpl; \n//# sourceMappingURL\x3dCollectorImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/CollectorImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.CollectorImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.CollectorImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Collector \x3d goog.require('java.util.stream.Collector');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Set \x3d goog.require('java.util.Set');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _Characteristics \x3d goog.require('java.util.stream.Collector.Characteristics');\n\n\n// Re-exports the implementation.\nvar CollectorImpl \x3d goog.require('java.util.stream.CollectorImpl$impl');\nexports \x3d CollectorImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Collector.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Collector.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Collector');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Set \x3d goog.require('java.util.Set');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _Characteristics \x3d goog.require('java.util.stream.Collector.Characteristics');\nconst _CollectorImpl \x3d goog.require('java.util.stream.CollectorImpl');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar Collector \x3d goog.require('java.util.stream.Collector$impl');\nexports \x3d Collector;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/DoubleSummaryStatistics.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.DoubleSummaryStatistics.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.DoubleSummaryStatistics$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @implements {DoubleConsumer}\n  */\nclass DoubleSummaryStatistics extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_count__java_util_DoubleSummaryStatistics_ \x3d $Long.fromInt(0);\n    /** @public {number} */\n    this.f_min__java_util_DoubleSummaryStatistics_ \x3d 0.0;\n    /** @public {number} */\n    this.f_max__java_util_DoubleSummaryStatistics_ \x3d 0.0;\n    /** @public {number} */\n    this.f_sum__java_util_DoubleSummaryStatistics_ \x3d 0.0;\n    /** @public {number} */\n    this.f_sumError__java_util_DoubleSummaryStatistics_ \x3d 0.0;\n    /** @public {number} */\n    this.f_naiveSum__java_util_DoubleSummaryStatistics_ \x3d 0.0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleSummaryStatistics()'.\n   * @return {!DoubleSummaryStatistics}\n   * @public\n   */\n  static $create__() {\n    DoubleSummaryStatistics.$clinit();\n    let $instance \x3d new DoubleSummaryStatistics();\n    $instance.$ctor__java_util_DoubleSummaryStatistics__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleSummaryStatistics()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_DoubleSummaryStatistics__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_DoubleSummaryStatistics();\n  }\n  \n  /**\n   * @override\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__double(value) {\n    this.f_count__java_util_DoubleSummaryStatistics_ \x3d $LongUtils.$plus(this.f_count__java_util_DoubleSummaryStatistics_, $Long.fromInt(1));\n    this.f_min__java_util_DoubleSummaryStatistics_ \x3d Math.min(this.f_min__java_util_DoubleSummaryStatistics_, value);\n    this.f_max__java_util_DoubleSummaryStatistics_ \x3d Math.max(this.f_max__java_util_DoubleSummaryStatistics_, value);\n    this.f_naiveSum__java_util_DoubleSummaryStatistics_ +\x3d value;\n    this.m_sum__double_$p_java_util_DoubleSummaryStatistics(value);\n  }\n  \n  /**\n   * @param {DoubleSummaryStatistics} other\n   * @return {void}\n   * @public\n   */\n  m_combine__java_util_DoubleSummaryStatistics(other) {\n    this.f_count__java_util_DoubleSummaryStatistics_ \x3d $LongUtils.$plus(this.f_count__java_util_DoubleSummaryStatistics_, other.f_count__java_util_DoubleSummaryStatistics_);\n    this.f_min__java_util_DoubleSummaryStatistics_ \x3d Math.min(this.f_min__java_util_DoubleSummaryStatistics_, other.f_min__java_util_DoubleSummaryStatistics_);\n    this.f_max__java_util_DoubleSummaryStatistics_ \x3d Math.max(this.f_max__java_util_DoubleSummaryStatistics_, other.f_max__java_util_DoubleSummaryStatistics_);\n    this.f_naiveSum__java_util_DoubleSummaryStatistics_ +\x3d other.f_naiveSum__java_util_DoubleSummaryStatistics_;\n    this.m_sum__double_$p_java_util_DoubleSummaryStatistics(other.f_sum__java_util_DoubleSummaryStatistics_);\n    this.m_sum__double_$p_java_util_DoubleSummaryStatistics(other.f_sumError__java_util_DoubleSummaryStatistics_);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAverage__() {\n    return $LongUtils.$greater(this.f_count__java_util_DoubleSummaryStatistics_, $Primitives.$widenIntToLong(0)) ? this.m_getSum__() / $Primitives.$widenLongToDouble(this.f_count__java_util_DoubleSummaryStatistics_) : 0.0;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getCount__() {\n    return this.f_count__java_util_DoubleSummaryStatistics_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getMin__() {\n    return this.f_min__java_util_DoubleSummaryStatistics_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getMax__() {\n    return this.f_max__java_util_DoubleSummaryStatistics_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getSum__() {\n    let compensatedSum \x3d this.f_sum__java_util_DoubleSummaryStatistics_ + this.f_sumError__java_util_DoubleSummaryStatistics_;\n    if (isNaN(compensatedSum) \x26\x26 Double.m_isInfinite__double(this.f_naiveSum__java_util_DoubleSummaryStatistics_)) {\n      return this.f_naiveSum__java_util_DoubleSummaryStatistics_;\n    }\n    return compensatedSum;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"DoubleSummaryStatistics[\" + \"count \x3d \" + this.f_count__java_util_DoubleSummaryStatistics_ + \", avg \x3d \" + this.m_getAverage__() + \", min \x3d \" + this.f_min__java_util_DoubleSummaryStatistics_ + \", max \x3d \" + this.f_max__java_util_DoubleSummaryStatistics_ + \", sum \x3d \" + this.m_getSum__() + \"]\";\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_sum__double_$p_java_util_DoubleSummaryStatistics(value) {\n    let compensatedValue \x3d value - this.f_sumError__java_util_DoubleSummaryStatistics_;\n    let newSum \x3d this.f_sum__java_util_DoubleSummaryStatistics_ + compensatedValue;\n    this.f_sumError__java_util_DoubleSummaryStatistics_ \x3d (newSum - this.f_sum__java_util_DoubleSummaryStatistics_) - compensatedValue;\n    this.f_sum__java_util_DoubleSummaryStatistics_ \x3d newSum;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {DoubleConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleConsumer(arg0) {\n    return DoubleConsumer.m_andThen__$default__java_util_function_DoubleConsumer__java_util_function_DoubleConsumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_DoubleSummaryStatistics() {\n    this.f_min__java_util_DoubleSummaryStatistics_ \x3d Double.f_POSITIVE_INFINITY__java_lang_Double;\n    this.f_max__java_util_DoubleSummaryStatistics_ \x3d Double.f_NEGATIVE_INFINITY__java_lang_Double;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DoubleSummaryStatistics;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DoubleSummaryStatistics);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleSummaryStatistics.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    DoubleConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DoubleSummaryStatistics, $Util.$makeClassName('java.util.DoubleSummaryStatistics'));\n\n\nDoubleConsumer.$markImplementor(DoubleSummaryStatistics);\n\n\nexports \x3d DoubleSummaryStatistics; \n//# sourceMappingURL\x3dDoubleSummaryStatistics.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/DoubleSummaryStatistics.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.DoubleSummaryStatistics.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.DoubleSummaryStatistics');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar DoubleSummaryStatistics \x3d goog.require('java.util.DoubleSummaryStatistics$impl');\nexports \x3d DoubleSummaryStatistics;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleSupplier.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleSupplier.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleSupplier$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleSupplier.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass DoubleSupplier {\n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_getAsDouble__() {\n  }\n  \n  /**\n   * @param {?function():number} fn\n   * @return {DoubleSupplier}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleSupplier.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleSupplier \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleSupplier;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleSupplier;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleSupplier.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleSupplier.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleSupplier, $Util.$makeClassName('java.util.function.DoubleSupplier'));\n\n\nDoubleSupplier.$markImplementor(/** @type {Function} */ (DoubleSupplier));\n\n\nexports \x3d DoubleSupplier; \n//# sourceMappingURL\x3dDoubleSupplier.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleSupplier$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleSupplier$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleSupplier.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleSupplier \x3d goog.require('java.util.function.DoubleSupplier$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoubleSupplier}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():number} */\n    this.f_$$fn__java_util_function_DoubleSupplier_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleSupplier_$LambdaAdaptor__java_util_function_DoubleSupplier_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleSupplier_$LambdaAdaptor__java_util_function_DoubleSupplier_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleSupplier_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAsDouble__() {\n    let /** ?function():number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoubleSupplier_$LambdaAdaptor, $function());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleSupplier$$LambdaAdaptor'));\n\n\nDoubleSupplier.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleSupplier$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleSupplier$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleSupplier$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleSupplier.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleSupplier \x3d goog.require('java.util.function.DoubleSupplier');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleSupplier.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleSupplier.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleSupplier.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleSupplier');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleSupplier.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar DoubleSupplier \x3d goog.require('java.util.function.DoubleSupplier$impl');\nexports \x3d DoubleSupplier;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/OptionalDouble.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.OptionalDouble.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.OptionalDouble$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleSupplier \x3d goog.forwardDeclare('java.util.function.DoubleSupplier$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass OptionalDouble extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_ref__java_util_OptionalDouble_ \x3d 0.0;\n    /** @public {boolean} */\n    this.f_present__java_util_OptionalDouble_ \x3d false;\n  }\n  \n  /**\n   * @return {OptionalDouble}\n   * @public\n   */\n  static m_empty__() {\n    OptionalDouble.$clinit();\n    return OptionalDouble.$f_EMPTY__java_util_OptionalDouble_;\n  }\n  \n  /**\n   * @param {number} value\n   * @return {OptionalDouble}\n   * @public\n   */\n  static m_of__double(value) {\n    OptionalDouble.$clinit();\n    return OptionalDouble.$create__double(value);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OptionalDouble()'.\n   * @return {!OptionalDouble}\n   * @public\n   */\n  static $create__() {\n    OptionalDouble.$clinit();\n    let $instance \x3d new OptionalDouble();\n    $instance.$ctor__java_util_OptionalDouble__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OptionalDouble()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_OptionalDouble__() {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_OptionalDouble_ \x3d 0.0;\n    this.f_present__java_util_OptionalDouble_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OptionalDouble(double)'.\n   * @param {number} value\n   * @return {!OptionalDouble}\n   * @public\n   */\n  static $create__double(value) {\n    OptionalDouble.$clinit();\n    let $instance \x3d new OptionalDouble();\n    $instance.$ctor__java_util_OptionalDouble__double(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OptionalDouble(double)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_OptionalDouble__double(value) {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_OptionalDouble_ \x3d value;\n    this.f_present__java_util_OptionalDouble_ \x3d true;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isPresent__() {\n    return this.f_present__java_util_OptionalDouble_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAsDouble__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.f_present__java_util_OptionalDouble_);\n    return this.f_ref__java_util_OptionalDouble_;\n  }\n  \n  /**\n   * @param {DoubleConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_ifPresent__java_util_function_DoubleConsumer(consumer) {\n    if (this.f_present__java_util_OptionalDouble_) {\n      consumer.m_accept__double(this.f_ref__java_util_OptionalDouble_);\n    }\n  }\n  \n  /**\n   * @param {number} other\n   * @return {number}\n   * @public\n   */\n  m_orElse__double(other) {\n    return this.f_present__java_util_OptionalDouble_ ? this.f_ref__java_util_OptionalDouble_ : other;\n  }\n  \n  /**\n   * @param {DoubleSupplier} other\n   * @return {number}\n   * @public\n   */\n  m_orElseGet__java_util_function_DoubleSupplier(other) {\n    return this.f_present__java_util_OptionalDouble_ ? this.f_ref__java_util_OptionalDouble_ : other.m_getAsDouble__();\n  }\n  \n  /**\n   * @template M_X\n   * @param {Supplier\x3cM_X\x3e} exceptionSupplier\n   * @return {number}\n   * @public\n   */\n  m_orElseThrow__java_util_function_Supplier(exceptionSupplier) {\n    if (this.f_present__java_util_OptionalDouble_) {\n      return this.f_ref__java_util_OptionalDouble_;\n    }\n    throw $Exceptions.toJs(exceptionSupplier.m_get__());\n  }\n  \n  /**\n   * @override\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  equals(obj) {\n    if ($Equality.$same(obj, this)) {\n      return true;\n    }\n    if (!OptionalDouble.$isInstance(obj)) {\n      return false;\n    }\n    let other \x3d /**@type {OptionalDouble} */ ($Casts.$to(obj, OptionalDouble));\n    return this.f_present__java_util_OptionalDouble_ \x3d\x3d other.f_present__java_util_OptionalDouble_ \x26\x26 Double.m_compare__double__double(this.f_ref__java_util_OptionalDouble_, other.f_ref__java_util_OptionalDouble_) \x3d\x3d 0;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return this.f_present__java_util_OptionalDouble_ ? Double.m_hashCode__double(this.f_ref__java_util_OptionalDouble_) : 0;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.f_present__java_util_OptionalDouble_ ? \"OptionalDouble.of(\" + j_l_String.m_valueOf__java_lang_Object(Double.m_toString__double(this.f_ref__java_util_OptionalDouble_)) + \")\" : \"OptionalDouble.empty()\";\n  }\n  \n  /**\n   * @return {OptionalDouble}\n   * @public\n   */\n  static get f_EMPTY__java_util_OptionalDouble_() {\n    return (OptionalDouble.$clinit(), OptionalDouble.$f_EMPTY__java_util_OptionalDouble_);\n  }\n  \n  /**\n   * @param {OptionalDouble} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY__java_util_OptionalDouble_(value) {\n    (OptionalDouble.$clinit(), OptionalDouble.$f_EMPTY__java_util_OptionalDouble_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof OptionalDouble;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, OptionalDouble);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OptionalDouble.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    OptionalDouble.$f_EMPTY__java_util_OptionalDouble_ \x3d OptionalDouble.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(OptionalDouble, $Util.$makeClassName('java.util.OptionalDouble'));\n\n\n/** @private {OptionalDouble} */\nOptionalDouble.$f_EMPTY__java_util_OptionalDouble_;\n\n\n\n\nexports \x3d OptionalDouble; \n//# sourceMappingURL\x3dOptionalDouble.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/OptionalDouble.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.OptionalDouble.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.OptionalDouble');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleSupplier \x3d goog.require('java.util.function.DoubleSupplier');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar OptionalDouble \x3d goog.require('java.util.OptionalDouble$impl');\nexports \x3d OptionalDouble;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleBinaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleBinaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleBinaryOperator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleBinaryOperator.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass DoubleBinaryOperator {\n  /**\n   * @abstract\n   * @param {number} left\n   * @param {number} right\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__double__double(left, right) {\n  }\n  \n  /**\n   * @param {?function(number, number):number} fn\n   * @return {DoubleBinaryOperator}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleBinaryOperator.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleBinaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleBinaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleBinaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleBinaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleBinaryOperator.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleBinaryOperator, $Util.$makeClassName('java.util.function.DoubleBinaryOperator'));\n\n\nDoubleBinaryOperator.$markImplementor(/** @type {Function} */ (DoubleBinaryOperator));\n\n\nexports \x3d DoubleBinaryOperator; \n//# sourceMappingURL\x3dDoubleBinaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleBinaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleBinaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleBinaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoubleBinaryOperator}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number, number):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number, number):number} */\n    this.f_$$fn__java_util_function_DoubleBinaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleBinaryOperator_$LambdaAdaptor__java_util_function_DoubleBinaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number, number):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleBinaryOperator_$LambdaAdaptor__java_util_function_DoubleBinaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleBinaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @param {number} arg1\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__double__double(arg0, arg1) {\n    let /** ?function(number, number):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoubleBinaryOperator_$LambdaAdaptor, $function(arg0, arg1));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleBinaryOperator$$LambdaAdaptor'));\n\n\nDoubleBinaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleBinaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleBinaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleBinaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleBinaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleBinaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleBinaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleBinaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleBinaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleBinaryOperator.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator$impl');\nexports \x3d DoubleBinaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleFunction.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_R\n */\nclass DoubleFunction {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {C_R}\n   * @public\n   */\n  m_apply__double(value) {\n  }\n  \n  /**\n   * @template C_R\n   * @param {?function(number):C_R} fn\n   * @return {DoubleFunction\x3cC_R\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleFunction, $Util.$makeClassName('java.util.function.DoubleFunction'));\n\n\nDoubleFunction.$markImplementor(/** @type {Function} */ (DoubleFunction));\n\n\nexports \x3d DoubleFunction; \n//# sourceMappingURL\x3dDoubleFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleFunction \x3d goog.require('java.util.function.DoubleFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_R\n * @implements {DoubleFunction\x3cC_R\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):C_R} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):C_R} */\n    this.f_$$fn__java_util_function_DoubleFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleFunction_$LambdaAdaptor__java_util_function_DoubleFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):C_R} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleFunction_$LambdaAdaptor__java_util_function_DoubleFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {C_R}\n   * @public\n   */\n  m_apply__double(arg0) {\n    let /** ?function(number):C_R */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoubleFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleFunction$$LambdaAdaptor'));\n\n\nDoubleFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleFunction \x3d goog.require('java.util.function.DoubleFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleFunction.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar DoubleFunction \x3d goog.require('java.util.function.DoubleFunction$impl');\nexports \x3d DoubleFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoublePredicate.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoublePredicate.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoublePredicate$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoublePredicate.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n */\nclass DoublePredicate {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {boolean}\n   * @public\n   */\n  m_test__double(value) {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoublePredicate}\n   * @public\n   */\n  m_negate__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoublePredicate} other\n   * @return {DoublePredicate}\n   * @public\n   */\n  m_and__java_util_function_DoublePredicate(other) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoublePredicate} other\n   * @return {DoublePredicate}\n   * @public\n   */\n  m_or__java_util_function_DoublePredicate(other) {\n  }\n  \n  /**\n   * @param {?function(number):boolean} fn\n   * @return {DoublePredicate}\n   * @public\n   */\n  static $adapt(fn) {\n    DoublePredicate.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {DoublePredicate} $thisArg\n   * @return {DoublePredicate}\n   * @public\n   */\n  static m_negate__$default__java_util_function_DoublePredicate($thisArg) {\n    DoublePredicate.$clinit();\n    return DoublePredicate.$adapt(((/** number */ value) \x3d\x3e{\n      return !$thisArg.m_test__double(value);\n    }));\n  }\n  \n  /**\n   * @param {DoublePredicate} $thisArg\n   * @param {DoublePredicate} other\n   * @return {DoublePredicate}\n   * @public\n   */\n  static m_and__$default__java_util_function_DoublePredicate__java_util_function_DoublePredicate($thisArg, other) {\n    DoublePredicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return DoublePredicate.$adapt(((/** number */ value) \x3d\x3e{\n      return $thisArg.m_test__double(value) \x26\x26 other.m_test__double(value);\n    }));\n  }\n  \n  /**\n   * @param {DoublePredicate} $thisArg\n   * @param {DoublePredicate} other\n   * @return {DoublePredicate}\n   * @public\n   */\n  static m_or__$default__java_util_function_DoublePredicate__java_util_function_DoublePredicate($thisArg, other) {\n    DoublePredicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return DoublePredicate.$adapt(((/** number */ value) \x3d\x3e{\n      return $thisArg.m_test__double(value) || other.m_test__double(value);\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoublePredicate \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoublePredicate;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoublePredicate;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoublePredicate.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoublePredicate.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoublePredicate, $Util.$makeClassName('java.util.function.DoublePredicate'));\n\n\nDoublePredicate.$markImplementor(/** @type {Function} */ (DoublePredicate));\n\n\nexports \x3d DoublePredicate; \n//# sourceMappingURL\x3dDoublePredicate.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoublePredicate$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoublePredicate$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoublePredicate.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoublePredicate \x3d goog.require('java.util.function.DoublePredicate$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoublePredicate}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):boolean} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):boolean} */\n    this.f_$$fn__java_util_function_DoublePredicate_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoublePredicate_$LambdaAdaptor__java_util_function_DoublePredicate_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):boolean} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoublePredicate_$LambdaAdaptor__java_util_function_DoublePredicate_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoublePredicate_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_test__double(arg0) {\n    let /** ?function(number):boolean */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoublePredicate_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoublePredicate} arg0\n   * @return {DoublePredicate}\n   * @public\n   */\n  m_and__java_util_function_DoublePredicate(arg0) {\n    return DoublePredicate.m_and__$default__java_util_function_DoublePredicate__java_util_function_DoublePredicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {DoublePredicate}\n   * @public\n   */\n  m_negate__() {\n    return DoublePredicate.m_negate__$default__java_util_function_DoublePredicate(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoublePredicate} arg0\n   * @return {DoublePredicate}\n   * @public\n   */\n  m_or__java_util_function_DoublePredicate(arg0) {\n    return DoublePredicate.m_or__$default__java_util_function_DoublePredicate__java_util_function_DoublePredicate(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    DoublePredicate.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoublePredicate$$LambdaAdaptor'));\n\n\nDoublePredicate.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoublePredicate$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoublePredicate$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoublePredicate$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoublePredicate.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoublePredicate \x3d goog.require('java.util.function.DoublePredicate');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoublePredicate.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoublePredicate.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoublePredicate.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoublePredicate');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoublePredicate.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar DoublePredicate \x3d goog.require('java.util.function.DoublePredicate$impl');\nexports \x3d DoublePredicate;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToIntFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToIntFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleToIntFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleToIntFunction.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass DoubleToIntFunction {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__double(value) {\n  }\n  \n  /**\n   * @param {?function(number):number} fn\n   * @return {DoubleToIntFunction}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleToIntFunction.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleToIntFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleToIntFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleToIntFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleToIntFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleToIntFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleToIntFunction, $Util.$makeClassName('java.util.function.DoubleToIntFunction'));\n\n\nDoubleToIntFunction.$markImplementor(/** @type {Function} */ (DoubleToIntFunction));\n\n\nexports \x3d DoubleToIntFunction; \n//# sourceMappingURL\x3dDoubleToIntFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToIntFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToIntFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleToIntFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoubleToIntFunction}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):number} */\n    this.f_$$fn__java_util_function_DoubleToIntFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleToIntFunction_$LambdaAdaptor__java_util_function_DoubleToIntFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleToIntFunction_$LambdaAdaptor__java_util_function_DoubleToIntFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleToIntFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__double(arg0) {\n    let /** ?function(number):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoubleToIntFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleToIntFunction$$LambdaAdaptor'));\n\n\nDoubleToIntFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleToIntFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToIntFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToIntFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleToIntFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleToIntFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToIntFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToIntFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleToIntFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleToIntFunction.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction$impl');\nexports \x3d DoubleToIntFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToLongFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToLongFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleToLongFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleToLongFunction.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass DoubleToLongFunction {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__double(value) {\n  }\n  \n  /**\n   * @param {?function(number):!$Long} fn\n   * @return {DoubleToLongFunction}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleToLongFunction.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleToLongFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleToLongFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleToLongFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleToLongFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleToLongFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleToLongFunction, $Util.$makeClassName('java.util.function.DoubleToLongFunction'));\n\n\nDoubleToLongFunction.$markImplementor(/** @type {Function} */ (DoubleToLongFunction));\n\n\nexports \x3d DoubleToLongFunction; \n//# sourceMappingURL\x3dDoubleToLongFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToLongFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToLongFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleToLongFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {DoubleToLongFunction}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):!$Long} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):!$Long} */\n    this.f_$$fn__java_util_function_DoubleToLongFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleToLongFunction_$LambdaAdaptor__java_util_function_DoubleToLongFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):!$Long} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleToLongFunction_$LambdaAdaptor__java_util_function_DoubleToLongFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleToLongFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__double(arg0) {\n    let /** ?function(number):!$Long */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoubleToLongFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleToLongFunction$$LambdaAdaptor'));\n\n\nDoubleToLongFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleToLongFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToLongFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToLongFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleToLongFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleToLongFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleToLongFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleToLongFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleToLongFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleToLongFunction.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction$impl');\nexports \x3d DoubleToLongFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleUnaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleUnaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleUnaryOperator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.DoubleUnaryOperator.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n */\nclass DoubleUnaryOperator {\n  /**\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  static m_identity__() {\n    DoubleUnaryOperator.$clinit();\n    return DoubleUnaryOperator.$adapt(((/** number */ operand) \x3d\x3e{\n      return operand;\n    }));\n  }\n  \n  /**\n   * @abstract\n   * @param {number} operand\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__double(operand) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleUnaryOperator} after\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleUnaryOperator(after) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleUnaryOperator} before\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  m_compose__java_util_function_DoubleUnaryOperator(before) {\n  }\n  \n  /**\n   * @param {?function(number):number} fn\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  static $adapt(fn) {\n    DoubleUnaryOperator.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {DoubleUnaryOperator} $thisArg\n   * @param {DoubleUnaryOperator} after\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_DoubleUnaryOperator__java_util_function_DoubleUnaryOperator($thisArg, after) {\n    DoubleUnaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return DoubleUnaryOperator.$adapt(((/** number */ operand) \x3d\x3e{\n      return after.m_applyAsDouble__double($thisArg.m_applyAsDouble__double(operand));\n    }));\n  }\n  \n  /**\n   * @param {DoubleUnaryOperator} $thisArg\n   * @param {DoubleUnaryOperator} before\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  static m_compose__$default__java_util_function_DoubleUnaryOperator__java_util_function_DoubleUnaryOperator($thisArg, before) {\n    DoubleUnaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(before);\n    return DoubleUnaryOperator.$adapt(((/** number */ operand) \x3d\x3e{\n      return $thisArg.m_applyAsDouble__double(before.m_applyAsDouble__double(operand));\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_DoubleUnaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_DoubleUnaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_DoubleUnaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleUnaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.DoubleUnaryOperator.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleUnaryOperator, $Util.$makeClassName('java.util.function.DoubleUnaryOperator'));\n\n\nDoubleUnaryOperator.$markImplementor(/** @type {Function} */ (DoubleUnaryOperator));\n\n\nexports \x3d DoubleUnaryOperator; \n//# sourceMappingURL\x3dDoubleUnaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleUnaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleUnaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.DoubleUnaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoubleUnaryOperator}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):number} */\n    this.f_$$fn__java_util_function_DoubleUnaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_DoubleUnaryOperator_$LambdaAdaptor__java_util_function_DoubleUnaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_DoubleUnaryOperator_$LambdaAdaptor__java_util_function_DoubleUnaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_DoubleUnaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__double(arg0) {\n    let /** ?function(number):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_DoubleUnaryOperator_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleUnaryOperator} arg0\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleUnaryOperator(arg0) {\n    return DoubleUnaryOperator.m_andThen__$default__java_util_function_DoubleUnaryOperator__java_util_function_DoubleUnaryOperator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleUnaryOperator} arg0\n   * @return {DoubleUnaryOperator}\n   * @public\n   */\n  m_compose__java_util_function_DoubleUnaryOperator(arg0) {\n    return DoubleUnaryOperator.m_compose__$default__java_util_function_DoubleUnaryOperator__java_util_function_DoubleUnaryOperator(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    DoubleUnaryOperator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.DoubleUnaryOperator$$LambdaAdaptor'));\n\n\nDoubleUnaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dDoubleUnaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleUnaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleUnaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleUnaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.DoubleUnaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/DoubleUnaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.DoubleUnaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.DoubleUnaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.DoubleUnaryOperator.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator$impl');\nexports \x3d DoubleUnaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjDoubleConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjDoubleConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ObjDoubleConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.ObjDoubleConsumer.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass ObjDoubleConsumer {\n  /**\n   * @abstract\n   * @param {C_T} t\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__double(t, value) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T, number):void} fn\n   * @return {ObjDoubleConsumer\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    ObjDoubleConsumer.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_ObjDoubleConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_ObjDoubleConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_ObjDoubleConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ObjDoubleConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.ObjDoubleConsumer.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ObjDoubleConsumer, $Util.$makeClassName('java.util.function.ObjDoubleConsumer'));\n\n\nObjDoubleConsumer.$markImplementor(/** @type {Function} */ (ObjDoubleConsumer));\n\n\nexports \x3d ObjDoubleConsumer; \n//# sourceMappingURL\x3dObjDoubleConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjDoubleConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjDoubleConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ObjDoubleConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ObjDoubleConsumer \x3d goog.require('java.util.function.ObjDoubleConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {ObjDoubleConsumer\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, number):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, number):void} */\n    this.f_$$fn__java_util_function_ObjDoubleConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_ObjDoubleConsumer_$LambdaAdaptor__java_util_function_ObjDoubleConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, number):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_ObjDoubleConsumer_$LambdaAdaptor__java_util_function_ObjDoubleConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_ObjDoubleConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {number} arg1\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__double(arg0, arg1) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_ObjDoubleConsumer_$LambdaAdaptor;\n      $function(arg0, arg1);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.ObjDoubleConsumer$$LambdaAdaptor'));\n\n\nObjDoubleConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dObjDoubleConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjDoubleConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjDoubleConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ObjDoubleConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ObjDoubleConsumer \x3d goog.require('java.util.function.ObjDoubleConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.ObjDoubleConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjDoubleConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjDoubleConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ObjDoubleConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.ObjDoubleConsumer.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar ObjDoubleConsumer \x3d goog.require('java.util.function.ObjDoubleConsumer$impl');\nexports \x3d ObjDoubleConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$Builder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$Builder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStream.Builder$impl');\n\n\nconst DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\n\n\n/**\n * @interface\n * @extends {DoubleConsumer}\n */\nclass Builder {\n  /**\n   * @abstract\n   * @override\n   * @param {number} t\n   * @return {void}\n   * @public\n   */\n  m_accept__double(t) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} t\n   * @return {Builder}\n   * @public\n   */\n  m_add__double(t) {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoubleStream}\n   * @public\n   */\n  m_build__() {\n  }\n  \n  /**\n   * @param {Builder} $thisArg\n   * @param {number} t\n   * @return {Builder}\n   * @public\n   */\n  static m_add__$default__java_util_stream_DoubleStream_Builder__double($thisArg, t) {\n    Builder.$clinit();\n    $thisArg.m_accept__double(t);\n    return $thisArg;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    DoubleConsumer.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_DoubleStream_Builder \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_DoubleStream_Builder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_DoubleStream_Builder;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Builder.$clinit \x3d function() {};\n    DoubleConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Builder, $Util.$makeClassName('java.util.stream.DoubleStream$Builder'));\n\n\nBuilder.$markImplementor(/** @type {Function} */ (Builder));\n\n\nexports \x3d Builder; \n//# sourceMappingURL\x3dDoubleStream$Builder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$Builder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$Builder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStream.Builder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\n\n\n// Re-exports the implementation.\nvar Builder \x3d goog.require('java.util.stream.DoubleStream.Builder$impl');\nexports \x3d Builder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStream.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Builder \x3d goog.require('java.util.stream.DoubleStream.Builder$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * @implements {Builder}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cnumber\x3e} */\n    this.f_items__java_util_stream_DoubleStream_1_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Builder()'.\n   * @return {!$1}\n   * @public\n   */\n  static $create__() {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_DoubleStream_1__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Builder()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStream_1__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_stream_DoubleStream_1();\n  }\n  \n  /**\n   * @override\n   * @param {number} t\n   * @return {void}\n   * @public\n   */\n  m_accept__double(t) {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_DoubleStream_1_, null), \"Builder already built\");\n    $Arrays.$set(this.f_items__java_util_stream_DoubleStream_1_, this.f_items__java_util_stream_DoubleStream_1_.length, t);\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_build__() {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_DoubleStream_1_, null), \"Builder already built\");\n    let stream \x3d Arrays.m_stream__arrayOf_double(this.f_items__java_util_stream_DoubleStream_1_);\n    this.f_items__java_util_stream_DoubleStream_1_ \x3d null;\n    return stream;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {Builder}\n   * @public\n   */\n  m_add__double(arg0) {\n    return Builder.m_add__$default__java_util_stream_DoubleStream_Builder__double(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {DoubleConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleConsumer(arg0) {\n    return DoubleConsumer.m_andThen__$default__java_util_function_DoubleConsumer__java_util_function_DoubleConsumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_DoubleStream_1() {\n    this.f_items__java_util_stream_DoubleStream_1_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $double));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    j_l_Object.$clinit();\n    Builder.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.DoubleStream$1'));\n\n\nBuilder.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dDoubleStream$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStream.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Builder \x3d goog.require('java.util.stream.DoubleStream.Builder');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.DoubleStream.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStream.$2$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $2 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfDouble} */\n    this.f_next__java_util_stream_DoubleStream_2;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_DoubleStream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_DoubleStream_2()) {\n      if (this.f_next__java_util_stream_DoubleStream_2.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_next__java_util_stream_DoubleStream_2 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_DoubleStream_2() {\n    while ($Equality.$same(this.f_next__java_util_stream_DoubleStream_2, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** DoubleStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_next__java_util_stream_DoubleStream_2 \x3d /**@type {DoubleStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.DoubleStream$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dDoubleStream$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStream.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.DoubleStream.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStream.$3$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleSupplier \x3d goog.forwardDeclare('java.util.function.DoubleSupplier$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleSupplier} */\n    this.$c_s;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(DoubleSupplier, long, int)'.\n   * @param {DoubleSupplier} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_util_function_DoubleSupplier__long__int($c_s, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_DoubleStream_3__java_util_function_DoubleSupplier__long__int($c_s, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(DoubleSupplier, long, int)'.\n   * @param {DoubleSupplier} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStream_3__java_util_function_DoubleSupplier__long__int($c_s, $_0, $_1) {\n    this.$c_s \x3d $c_s;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    action.m_accept__double(this.$c_s.m_getAsDouble__());\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.DoubleStream$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dDoubleStream$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStream.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleSupplier \x3d goog.require('java.util.function.DoubleSupplier');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.DoubleStream.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStream.$4$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleUnaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleUnaryOperator$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $4 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_next__java_util_stream_DoubleStream_4_ \x3d 0.0;\n    /** @public {number} */\n    this.$c_seed \x3d 0.0;\n    /** @public {DoubleUnaryOperator} */\n    this.$c_f;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(double, DoubleUnaryOperator, long, int)'.\n   * @param {number} $c_seed\n   * @param {DoubleUnaryOperator} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$4}\n   * @public\n   */\n  static $create__double__java_util_function_DoubleUnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    $4.$clinit();\n    let $instance \x3d new $4();\n    $instance.$ctor__java_util_stream_DoubleStream_4__double__java_util_function_DoubleUnaryOperator__long__int($c_seed, $c_f, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(double, DoubleUnaryOperator, long, int)'.\n   * @param {number} $c_seed\n   * @param {DoubleUnaryOperator} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStream_4__double__java_util_function_DoubleUnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    this.$c_seed \x3d $c_seed;\n    this.$c_f \x3d $c_f;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_DoubleStream_4();\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    action.m_accept__double(this.f_next__java_util_stream_DoubleStream_4_);\n    this.f_next__java_util_stream_DoubleStream_4_ \x3d this.$c_f.m_applyAsDouble__double(this.f_next__java_util_stream_DoubleStream_4_);\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_DoubleStream_4() {\n    this.f_next__java_util_stream_DoubleStream_4_ \x3d this.$c_seed;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $4.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($4, $Util.$makeClassName('java.util.stream.DoubleStream$4'));\n\n\n\n\nexports \x3d $4; \n//# sourceMappingURL\x3dDoubleStream$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStream.$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $4 \x3d goog.require('java.util.stream.DoubleStream.$4$impl');\nexports \x3d $4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Asserts.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Asserts.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('vmbootstrap.Asserts$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AssertionError \x3d goog.forwardDeclare('java.lang.AssertionError$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass Asserts extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Asserts()'.\n   * @return {!Asserts}\n   * @public\n   */\n  static $create__() {\n    Asserts.$clinit();\n    let $instance \x3d new Asserts();\n    $instance.$ctor__javaemul_internal_Asserts__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Asserts()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_Asserts__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {boolean} condition\n   * @return {void}\n   * @public\n   */\n  static $assert(condition) {\n    Asserts.$clinit();\n    if (!condition) {\n      throw $Exceptions.toJs(AssertionError.$create__());\n    }\n  }\n  \n  /**\n   * @param {boolean} condition\n   * @param {*} message\n   * @return {void}\n   * @public\n   */\n  static $assertWithMessage(condition, message) {\n    Asserts.$clinit();\n    if (!condition) {\n      throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(message));\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Asserts;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Asserts);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Asserts.$clinit \x3d function() {};\n    AssertionError \x3d goog.module.get('java.lang.AssertionError$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Asserts, $Util.$makeClassName('javaemul.internal.Asserts'));\n\n\n\n\nexports \x3d Asserts; \n//# sourceMappingURL\x3dAsserts.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Asserts.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Asserts.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('vmbootstrap.Asserts');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AssertionError \x3d goog.require('java.lang.AssertionError');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Asserts \x3d goog.require('vmbootstrap.Asserts$impl');\nexports \x3d Asserts;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/TerminatableStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.TerminatableStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.TerminatableStream$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Error \x3d goog.forwardDeclare('java.lang.Error$impl');\nlet IllegalStateException \x3d goog.forwardDeclare('java.lang.IllegalStateException$impl');\nlet Runnable \x3d goog.forwardDeclare('java.lang.Runnable$impl');\nlet RuntimeException \x3d goog.forwardDeclare('java.lang.RuntimeException$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_T\n  */\nclass TerminatableStream extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {boolean} */\n    this.f_terminated__java_util_stream_TerminatableStream_ \x3d false;\n    /** @public {List\x3cRunnable\x3e} */\n    this.f_onClose__java_util_stream_TerminatableStream_;\n    /** @public {TerminatableStream\x3c?\x3e} */\n    this.f_root__java_util_stream_TerminatableStream_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'TerminatableStream(TerminatableStream)'.\n   * @template C_T\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {!TerminatableStream\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream(previous) {\n    TerminatableStream.$clinit();\n    let $instance \x3d new TerminatableStream();\n    $instance.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'TerminatableStream(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous) {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_stream_TerminatableStream();\n    if ($Equality.$same(previous, null)) {\n      this.f_root__java_util_stream_TerminatableStream_ \x3d null;\n      this.f_onClose__java_util_stream_TerminatableStream_ \x3d /**@type {!ArrayList\x3cRunnable\x3e} */ (ArrayList.$create__());\n    } else {\n      this.f_root__java_util_stream_TerminatableStream_ \x3d previous;\n      this.f_onClose__java_util_stream_TerminatableStream_ \x3d null;\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_throwIfTerminated___$pp_java_util_stream() {\n    if (!$Equality.$same(this.f_root__java_util_stream_TerminatableStream_, null)) {\n      this.f_root__java_util_stream_TerminatableStream_.m_throwIfTerminated___$pp_java_util_stream();\n    } else if (this.f_terminated__java_util_stream_TerminatableStream_) {\n      throw $Exceptions.toJs(IllegalStateException.$create__java_lang_String(\"Stream already terminated, can't be modified or used\"));\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_terminate___$pp_java_util_stream() {\n    if ($Equality.$same(this.f_root__java_util_stream_TerminatableStream_, null)) {\n      this.m_throwIfTerminated___$pp_java_util_stream();\n      this.f_terminated__java_util_stream_TerminatableStream_ \x3d true;\n    } else {\n      this.f_root__java_util_stream_TerminatableStream_.m_terminate___$pp_java_util_stream();\n    }\n  }\n  \n  /**\n   * @param {Runnable} closeHandler\n   * @return {C_T}\n   * @public\n   */\n  m_onClose__java_lang_Runnable(closeHandler) {\n    if ($Equality.$same(this.f_root__java_util_stream_TerminatableStream_, null)) {\n      this.f_onClose__java_util_stream_TerminatableStream_.add(closeHandler);\n    } else {\n      this.f_root__java_util_stream_TerminatableStream_.m_onClose__java_lang_Runnable(closeHandler);\n    }\n    return /**@type {C_T} */ ($Casts.$to(this, TerminatableStream));\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n    if ($Equality.$same(this.f_root__java_util_stream_TerminatableStream_, null)) {\n      this.f_terminated__java_util_stream_TerminatableStream_ \x3d true;\n      this.m_runClosers___$p_java_util_stream_TerminatableStream();\n    } else {\n      this.f_root__java_util_stream_TerminatableStream_.m_close__();\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_runClosers___$p_java_util_stream_TerminatableStream() {\n    let throwables \x3d /**@type {!ArrayList\x3cThrowable\x3e} */ (ArrayList.$create__());\n    this.f_onClose__java_util_stream_TerminatableStream_.m_forEach__java_util_function_Consumer(Consumer.$adapt(((/** Runnable */ runnable) \x3d\x3e{\n      try {\n        runnable.m_run__();\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Throwable.$isInstance(__$exc)) {\n          let e \x3d /**@type {Throwable} */ (__$exc);\n          throwables.add(e);\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    })));\n    this.f_onClose__java_util_stream_TerminatableStream_.clear();\n    if (!throwables.isEmpty()) {\n      let e$1$ \x3d /**@type {Throwable} */ ($Casts.$to(throwables.getAtIndex(0), Throwable));\n      for (let i \x3d 1, size \x3d throwables.size(); i \x3c size; ++i) {\n        let suppressed \x3d /**@type {Throwable} */ ($Casts.$to(throwables.getAtIndex(i), Throwable));\n        if (!$Equality.$same(suppressed, e$1$)) {\n          e$1$.m_addSuppressed__java_lang_Throwable(suppressed);\n        }\n      }\n      if (RuntimeException.$isInstance(e$1$)) {\n        throw $Exceptions.toJs(/**@type {RuntimeException} */ ($Casts.$to(e$1$, RuntimeException)));\n      }\n      if (Error.$isInstance(e$1$)) {\n        throw $Exceptions.toJs(/**@type {Error} */ ($Casts.$to(e$1$, Error)));\n      }\n      $Asserts.$assertWithMessage(false, \"Couldn't have caught this exception from a Runnable! \" + j_l_String.m_valueOf__java_lang_Object(e$1$));\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_TerminatableStream() {\n    this.f_terminated__java_util_stream_TerminatableStream_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof TerminatableStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, TerminatableStream);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    TerminatableStream.$clinit \x3d function() {};\n    Error \x3d goog.module.get('java.lang.Error$impl');\n    IllegalStateException \x3d goog.module.get('java.lang.IllegalStateException$impl');\n    RuntimeException \x3d goog.module.get('java.lang.RuntimeException$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Throwable \x3d goog.module.get('java.lang.Throwable$impl');\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(TerminatableStream, $Util.$makeClassName('java.util.stream.TerminatableStream'));\n\n\n\n\nexports \x3d TerminatableStream; \n//# sourceMappingURL\x3dTerminatableStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/TerminatableStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.TerminatableStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.TerminatableStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Error \x3d goog.require('java.lang.Error');\nconst _IllegalStateException \x3d goog.require('java.lang.IllegalStateException');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _List \x3d goog.require('java.util.List');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nexports \x3d TerminatableStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.$1$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $1 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleStreamImpl} */\n    this.f_$outer_this__java_util_stream_DoubleStreamImpl_1;\n    /** @public {DoubleStream} */\n    this.f_nextStream__java_util_stream_DoubleStreamImpl_1;\n    /** @public {OfDouble} */\n    this.f_next__java_util_stream_DoubleStreamImpl_1;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(DoubleStreamImpl, Spliterator, long, int)'.\n   * @param {DoubleStreamImpl} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$1}\n   * @public\n   */\n  static $create__java_util_stream_DoubleStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_1__java_util_stream_DoubleStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(DoubleStreamImpl, Spliterator, long, int)'.\n   * @param {DoubleStreamImpl} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_1__java_util_stream_DoubleStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_DoubleStreamImpl_1 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_DoubleStreamImpl_1()) {\n      if (this.f_next__java_util_stream_DoubleStreamImpl_1.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_DoubleStreamImpl_1.m_close__();\n        this.f_nextStream__java_util_stream_DoubleStreamImpl_1 \x3d null;\n        this.f_next__java_util_stream_DoubleStreamImpl_1 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_DoubleStreamImpl_1() {\n    while ($Equality.$same(this.f_next__java_util_stream_DoubleStreamImpl_1, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** DoubleStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_DoubleStreamImpl_1 \x3d n;\n          this.f_next__java_util_stream_DoubleStreamImpl_1 \x3d /**@type {DoubleStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dDoubleStreamImpl$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.DoubleStreamImpl.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.$2$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\nclass $2 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleStreamImpl} */\n    this.f_$outer_this__java_util_stream_DoubleStreamImpl_2;\n    /** @public {OfDouble} */\n    this.f_ordered__java_util_stream_DoubleStreamImpl_2;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(DoubleStreamImpl, long, int)'.\n   * @param {DoubleStreamImpl} $outer_this\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_util_stream_DoubleStreamImpl__long__int($outer_this, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_2__java_util_stream_DoubleStreamImpl__long__int($outer_this, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(DoubleStreamImpl, long, int)'.\n   * @param {DoubleStreamImpl} $outer_this\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_2__java_util_stream_DoubleStreamImpl__long__int($outer_this, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_DoubleStreamImpl_2 \x3d $outer_this;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_DoubleStreamImpl_2();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return null;\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    if ($Equality.$same(this.f_ordered__java_util_stream_DoubleStreamImpl_2, null)) {\n      let list \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $double));\n      this.f_$outer_this__java_util_stream_DoubleStreamImpl_2.f_spliterator__java_util_stream_DoubleStreamImpl_.m_forEachRemaining__java_lang_Object(DoubleConsumer.$adapt(((/** number */ item) \x3d\x3e{\n        $Arrays.$set(list, list.length, item);\n      })));\n      Arrays.m_sort__arrayOf_double(list);\n      this.f_ordered__java_util_stream_DoubleStreamImpl_2 \x3d Spliterators.m_spliterator__arrayOf_double__int(list, this.m_characteristics__());\n    }\n    return this.f_ordered__java_util_stream_DoubleStreamImpl_2.m_tryAdvance__java_lang_Object(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_DoubleStreamImpl_2() {\n    this.f_ordered__java_util_stream_DoubleStreamImpl_2 \x3d null;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dDoubleStreamImpl$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.DoubleStreamImpl.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.$3$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleStreamImpl} */\n    this.f_$outer_this__java_util_stream_DoubleStreamImpl_3;\n    /** @public {DoubleConsumer} */\n    this.$c_action;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(DoubleStreamImpl, DoubleConsumer, long, int)'.\n   * @param {DoubleStreamImpl} $outer_this\n   * @param {DoubleConsumer} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_util_stream_DoubleStreamImpl__java_util_function_DoubleConsumer__long__int($outer_this, $c_action, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_3__java_util_stream_DoubleStreamImpl__java_util_function_DoubleConsumer__long__int($outer_this, $c_action, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(DoubleStreamImpl, DoubleConsumer, long, int)'.\n   * @param {DoubleStreamImpl} $outer_this\n   * @param {DoubleConsumer} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_3__java_util_stream_DoubleStreamImpl__java_util_function_DoubleConsumer__long__int($outer_this, $c_action, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_DoubleStreamImpl_3 \x3d $outer_this;\n    this.$c_action \x3d $c_action;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {DoubleConsumer} innerAction\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(innerAction) {\n    return this.f_$outer_this__java_util_stream_DoubleStreamImpl_3.f_spliterator__java_util_stream_DoubleStreamImpl_.m_tryAdvance__java_lang_Object(this.$c_action.m_andThen__java_util_function_DoubleConsumer(innerAction));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dDoubleStreamImpl$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.DoubleStreamImpl.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$FilterSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$FilterSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.FilterSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoublePredicate \x3d goog.forwardDeclare('java.util.function.DoublePredicate$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FilterSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoublePredicate} */\n    this.f_filter__java_util_stream_DoubleStreamImpl_FilterSpliterator_;\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_FilterSpliterator_;\n    /** @public {boolean} */\n    this.f_found__java_util_stream_DoubleStreamImpl_FilterSpliterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'FilterSpliterator(DoublePredicate, OfDouble)'.\n   * @param {DoublePredicate} filter\n   * @param {OfDouble} original\n   * @return {!FilterSpliterator}\n   * @public\n   */\n  static $create__java_util_function_DoublePredicate__java_util_Spliterator_OfDouble(filter, original) {\n    FilterSpliterator.$clinit();\n    let $instance \x3d new FilterSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_FilterSpliterator__java_util_function_DoublePredicate__java_util_Spliterator_OfDouble(filter, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'FilterSpliterator(DoublePredicate, OfDouble)'.\n   * @param {DoublePredicate} filter\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_FilterSpliterator__java_util_function_DoublePredicate__java_util_Spliterator_OfDouble(filter, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(filter);\n    this.f_filter__java_util_stream_DoubleStreamImpl_FilterSpliterator_ \x3d filter;\n    this.f_original__java_util_stream_DoubleStreamImpl_FilterSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_DoubleStreamImpl_FilterSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    this.f_found__java_util_stream_DoubleStreamImpl_FilterSpliterator_ \x3d false;\n    while (!this.f_found__java_util_stream_DoubleStreamImpl_FilterSpliterator_ \x26\x26 this.f_original__java_util_stream_DoubleStreamImpl_FilterSpliterator_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ item) \x3d\x3e{\n      if (this.f_filter__java_util_stream_DoubleStreamImpl_FilterSpliterator_.m_test__double(item)) {\n        this.f_found__java_util_stream_DoubleStreamImpl_FilterSpliterator_ \x3d true;\n        action.m_accept__double(item);\n      }\n    })))) {\n    }\n    return this.f_found__java_util_stream_DoubleStreamImpl_FilterSpliterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FilterSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, FilterSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FilterSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FilterSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$FilterSpliterator'));\n\n\n\n\nexports \x3d FilterSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$FilterSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$FilterSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$FilterSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.FilterSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoublePredicate \x3d goog.require('java.util.function.DoublePredicate');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FilterSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.FilterSpliterator$impl');\nexports \x3d FilterSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$LimitSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$LimitSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.LimitSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass LimitSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_limit__java_util_stream_DoubleStreamImpl_LimitSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_LimitSpliterator_;\n    /** @public {number} */\n    this.f_position__java_util_stream_DoubleStreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LimitSpliterator(long, OfDouble)'.\n   * @param {!$Long} limit\n   * @param {OfDouble} original\n   * @return {!LimitSpliterator}\n   * @public\n   */\n  static $create__long__java_util_Spliterator_OfDouble(limit, original) {\n    LimitSpliterator.$clinit();\n    let $instance \x3d new LimitSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_LimitSpliterator__long__java_util_Spliterator_OfDouble(limit, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LimitSpliterator(long, OfDouble)'.\n   * @param {!$Long} limit\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_LimitSpliterator__long__java_util_Spliterator_OfDouble(limit, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_min__long__long(original.m_estimateSize__(), limit) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.$init__java_util_stream_DoubleStreamImpl_LimitSpliterator();\n    this.f_limit__java_util_stream_DoubleStreamImpl_LimitSpliterator_ \x3d limit;\n    this.f_original__java_util_stream_DoubleStreamImpl_LimitSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_DoubleStreamImpl_LimitSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    if ($LongUtils.$greaterEquals($Primitives.$widenIntToLong(this.f_position__java_util_stream_DoubleStreamImpl_LimitSpliterator_), this.f_limit__java_util_stream_DoubleStreamImpl_LimitSpliterator_)) {\n      return false;\n    }\n    let result \x3d this.f_original__java_util_stream_DoubleStreamImpl_LimitSpliterator_.m_tryAdvance__java_lang_Object(action);\n    this.f_position__java_util_stream_DoubleStreamImpl_LimitSpliterator_++;\n    return result;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_DoubleStreamImpl_LimitSpliterator() {\n    this.f_position__java_util_stream_DoubleStreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LimitSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LimitSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LimitSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LimitSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$LimitSpliterator'));\n\n\n\n\nexports \x3d LimitSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$LimitSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$LimitSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$LimitSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.LimitSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar LimitSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.LimitSpliterator$impl');\nexports \x3d LimitSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToDoubleSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToDoubleSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleUnaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleUnaryOperator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToDoubleSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleUnaryOperator} */\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator_;\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToDoubleSpliterator(DoubleUnaryOperator, OfDouble)'.\n   * @param {DoubleUnaryOperator} map\n   * @param {OfDouble} original\n   * @return {!MapToDoubleSpliterator}\n   * @public\n   */\n  static $create__java_util_function_DoubleUnaryOperator__java_util_Spliterator_OfDouble(map, original) {\n    MapToDoubleSpliterator.$clinit();\n    let $instance \x3d new MapToDoubleSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator__java_util_function_DoubleUnaryOperator__java_util_Spliterator_OfDouble(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToDoubleSpliterator(DoubleUnaryOperator, OfDouble)'.\n   * @param {DoubleUnaryOperator} map\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator__java_util_function_DoubleUnaryOperator__java_util_Spliterator_OfDouble(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator_ \x3d map;\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    return this.f_original__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__double(this.f_map__java_util_stream_DoubleStreamImpl_MapToDoubleSpliterator_.m_applyAsDouble__double(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToDoubleSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToDoubleSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToDoubleSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToDoubleSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$MapToDoubleSpliterator'));\n\n\n\n\nexports \x3d MapToDoubleSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$MapToDoubleSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToDoubleSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToDoubleSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToDoubleSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToDoubleSpliterator$impl');\nexports \x3d MapToDoubleSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToIntSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToIntSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToIntSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleToIntFunction \x3d goog.forwardDeclare('java.util.function.DoubleToIntFunction$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToIntSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleToIntFunction} */\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToIntSpliterator_;\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToIntSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToIntSpliterator(DoubleToIntFunction, OfDouble)'.\n   * @param {DoubleToIntFunction} map\n   * @param {OfDouble} original\n   * @return {!MapToIntSpliterator}\n   * @public\n   */\n  static $create__java_util_function_DoubleToIntFunction__java_util_Spliterator_OfDouble(map, original) {\n    MapToIntSpliterator.$clinit();\n    let $instance \x3d new MapToIntSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_MapToIntSpliterator__java_util_function_DoubleToIntFunction__java_util_Spliterator_OfDouble(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToIntSpliterator(DoubleToIntFunction, OfDouble)'.\n   * @param {DoubleToIntFunction} map\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_MapToIntSpliterator__java_util_function_DoubleToIntFunction__java_util_Spliterator_OfDouble(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToIntSpliterator_ \x3d map;\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToIntSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    return this.f_original__java_util_stream_DoubleStreamImpl_MapToIntSpliterator_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__int(this.f_map__java_util_stream_DoubleStreamImpl_MapToIntSpliterator_.m_applyAsInt__double(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToIntSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToIntSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToIntSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToIntSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$MapToIntSpliterator'));\n\n\n\n\nexports \x3d MapToIntSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$MapToIntSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToIntSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToIntSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToIntSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToIntSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToIntSpliterator$impl');\nexports \x3d MapToIntSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToLongSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToLongSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToLongSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleToLongFunction \x3d goog.forwardDeclare('java.util.function.DoubleToLongFunction$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToLongSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleToLongFunction} */\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToLongSpliterator_;\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToLongSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToLongSpliterator(DoubleToLongFunction, OfDouble)'.\n   * @param {DoubleToLongFunction} map\n   * @param {OfDouble} original\n   * @return {!MapToLongSpliterator}\n   * @public\n   */\n  static $create__java_util_function_DoubleToLongFunction__java_util_Spliterator_OfDouble(map, original) {\n    MapToLongSpliterator.$clinit();\n    let $instance \x3d new MapToLongSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_MapToLongSpliterator__java_util_function_DoubleToLongFunction__java_util_Spliterator_OfDouble(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToLongSpliterator(DoubleToLongFunction, OfDouble)'.\n   * @param {DoubleToLongFunction} map\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_MapToLongSpliterator__java_util_function_DoubleToLongFunction__java_util_Spliterator_OfDouble(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToLongSpliterator_ \x3d map;\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToLongSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    return this.f_original__java_util_stream_DoubleStreamImpl_MapToLongSpliterator_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__long(this.f_map__java_util_stream_DoubleStreamImpl_MapToLongSpliterator_.m_applyAsLong__double(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToLongSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToLongSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToLongSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToLongSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$MapToLongSpliterator'));\n\n\n\n\nexports \x3d MapToLongSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$MapToLongSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToLongSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToLongSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToLongSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToLongSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToLongSpliterator$impl');\nexports \x3d MapToLongSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Spliterators.AbstractSpliterator$impl');\n\n\nconst Spliterator \x3d goog.require('java.util.Spliterator$impl');\nconst BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @abstract\n * @template C_AbstractSpliterator_T\n * @extends {BaseSpliterator\x3cC_AbstractSpliterator_T, Spliterator\x3cC_AbstractSpliterator_T\x3e\x3e}\n * @implements {Spliterator\x3cC_AbstractSpliterator_T\x3e}\n  */\nclass AbstractSpliterator extends BaseSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractSpliterator(long, int)'.\n   * @param {!$Long} size\n   * @param {number} characteristics\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Spliterators_AbstractSpliterator__long__int(size, characteristics) {\n    this.$ctor__java_util_Spliterators_BaseSpliterator__long__int(size, characteristics);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractSpliterator.$clinit \x3d function() {};\n    BaseSpliterator.$clinit();\n    Spliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractSpliterator, $Util.$makeClassName('java.util.Spliterators$AbstractSpliterator'));\n\n\nSpliterator.$markImplementor(AbstractSpliterator);\n\n\nexports \x3d AbstractSpliterator; \n//# sourceMappingURL\x3dSpliterators$AbstractSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Spliterators$AbstractSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Spliterators$AbstractSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Spliterators.AbstractSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _BaseSpliterator \x3d goog.require('java.util.Spliterators.BaseSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nexports \x3d AbstractSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToObjSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToObjSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToObjSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleFunction \x3d goog.forwardDeclare('java.util.function.DoubleFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_MapToObjSpliterator_T\n * @extends {AbstractSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n  */\nclass MapToObjSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {DoubleFunction\x3c?\x3e} */\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToObjSpliterator_;\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToObjSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToObjSpliterator(DoubleFunction, OfDouble)'.\n   * @template C_MapToObjSpliterator_T\n   * @param {DoubleFunction\x3c?\x3e} map\n   * @param {OfDouble} original\n   * @return {!MapToObjSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_DoubleFunction__java_util_Spliterator_OfDouble(map, original) {\n    MapToObjSpliterator.$clinit();\n    let $instance \x3d new MapToObjSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_MapToObjSpliterator__java_util_function_DoubleFunction__java_util_Spliterator_OfDouble(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToObjSpliterator(DoubleFunction, OfDouble)'.\n   * @param {DoubleFunction\x3c?\x3e} map\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_MapToObjSpliterator__java_util_function_DoubleFunction__java_util_Spliterator_OfDouble(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_DoubleStreamImpl_MapToObjSpliterator_ \x3d map;\n    this.f_original__java_util_stream_DoubleStreamImpl_MapToObjSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    return this.f_original__java_util_stream_DoubleStreamImpl_MapToObjSpliterator_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__java_lang_Object(this.f_map__java_util_stream_DoubleStreamImpl_MapToObjSpliterator_.m_apply__double(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToObjSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToObjSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToObjSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToObjSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$MapToObjSpliterator'));\n\n\n\n\nexports \x3d MapToObjSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$MapToObjSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$MapToObjSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$MapToObjSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.MapToObjSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleFunction \x3d goog.require('java.util.function.DoubleFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar MapToObjSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToObjSpliterator$impl');\nexports \x3d MapToObjSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$SkipSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$SkipSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.SkipSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass SkipSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_skip__java_util_stream_DoubleStreamImpl_SkipSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {OfDouble} */\n    this.f_original__java_util_stream_DoubleStreamImpl_SkipSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SkipSpliterator(long, OfDouble)'.\n   * @param {!$Long} skip\n   * @param {OfDouble} original\n   * @return {!SkipSpliterator}\n   * @public\n   */\n  static $create__long__java_util_Spliterator_OfDouble(skip, original) {\n    SkipSpliterator.$clinit();\n    let $instance \x3d new SkipSpliterator();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_SkipSpliterator__long__java_util_Spliterator_OfDouble(skip, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SkipSpliterator(long, OfDouble)'.\n   * @param {!$Long} skip\n   * @param {OfDouble} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_SkipSpliterator__long__java_util_Spliterator_OfDouble(skip, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_max__long__long($Primitives.$widenIntToLong(0), $LongUtils.$minus(original.m_estimateSize__(), skip)) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.f_skip__java_util_stream_DoubleStreamImpl_SkipSpliterator_ \x3d skip;\n    this.f_original__java_util_stream_DoubleStreamImpl_SkipSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_DoubleStreamImpl_SkipSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    while ($LongUtils.$greater(this.f_skip__java_util_stream_DoubleStreamImpl_SkipSpliterator_, $Primitives.$widenIntToLong(0))) {\n      if (!this.f_original__java_util_stream_DoubleStreamImpl_SkipSpliterator_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ ignore) \x3d\x3e{\n      })))) {\n        return false;\n      }\n      this.f_skip__java_util_stream_DoubleStreamImpl_SkipSpliterator_ \x3d $LongUtils.$minus(this.f_skip__java_util_stream_DoubleStreamImpl_SkipSpliterator_, $Long.fromInt(1));\n    }\n    return this.f_original__java_util_stream_DoubleStreamImpl_SkipSpliterator_.m_tryAdvance__java_lang_Object(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SkipSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SkipSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SkipSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SkipSpliterator, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$SkipSpliterator'));\n\n\n\n\nexports \x3d SkipSpliterator; \n//# sourceMappingURL\x3dDoubleStreamImpl$SkipSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$SkipSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$SkipSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.SkipSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar SkipSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.SkipSpliterator$impl');\nexports \x3d SkipSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$ValueConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$ValueConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.ValueConsumer$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {DoubleConsumer}\n  */\nclass ValueConsumer extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer \x3d 0.0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ValueConsumer()'.\n   * @return {!ValueConsumer}\n   * @public\n   */\n  static $create__() {\n    ValueConsumer.$clinit();\n    let $instance \x3d new ValueConsumer();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_ValueConsumer__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ValueConsumer()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_ValueConsumer__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__double(value) {\n    this.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer \x3d value;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {DoubleConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_DoubleConsumer(arg0) {\n    return DoubleConsumer.m_andThen__$default__java_util_function_DoubleConsumer__java_util_function_DoubleConsumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ValueConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ValueConsumer);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ValueConsumer.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    DoubleConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ValueConsumer, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$ValueConsumer'));\n\n\nDoubleConsumer.$markImplementor(ValueConsumer);\n\n\nexports \x3d ValueConsumer; \n//# sourceMappingURL\x3dDoubleStreamImpl$ValueConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$ValueConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$ValueConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.ValueConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ValueConsumer \x3d goog.require('java.util.stream.DoubleStreamImpl.ValueConsumer$impl');\nexports \x3d ValueConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/IntSummaryStatistics.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.IntSummaryStatistics.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.IntSummaryStatistics$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @implements {IntConsumer}\n  */\nclass IntSummaryStatistics extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_count__java_util_IntSummaryStatistics_ \x3d $Long.fromInt(0);\n    /** @public {number} */\n    this.f_min__java_util_IntSummaryStatistics_ \x3d 0;\n    /** @public {number} */\n    this.f_max__java_util_IntSummaryStatistics_ \x3d 0;\n    /** @public {!$Long} */\n    this.f_sum__java_util_IntSummaryStatistics_ \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntSummaryStatistics()'.\n   * @return {!IntSummaryStatistics}\n   * @public\n   */\n  static $create__() {\n    IntSummaryStatistics.$clinit();\n    let $instance \x3d new IntSummaryStatistics();\n    $instance.$ctor__java_util_IntSummaryStatistics__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntSummaryStatistics()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_IntSummaryStatistics__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_IntSummaryStatistics();\n  }\n  \n  /**\n   * @override\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__int(value) {\n    this.f_count__java_util_IntSummaryStatistics_ \x3d $LongUtils.$plus(this.f_count__java_util_IntSummaryStatistics_, $Long.fromInt(1));\n    this.f_min__java_util_IntSummaryStatistics_ \x3d Math.min(this.f_min__java_util_IntSummaryStatistics_, value);\n    this.f_max__java_util_IntSummaryStatistics_ \x3d Math.max(this.f_max__java_util_IntSummaryStatistics_, value);\n    this.f_sum__java_util_IntSummaryStatistics_ \x3d $LongUtils.$plus(this.f_sum__java_util_IntSummaryStatistics_, $Primitives.$widenIntToLong(value));\n  }\n  \n  /**\n   * @param {IntSummaryStatistics} other\n   * @return {void}\n   * @public\n   */\n  m_combine__java_util_IntSummaryStatistics(other) {\n    this.f_count__java_util_IntSummaryStatistics_ \x3d $LongUtils.$plus(this.f_count__java_util_IntSummaryStatistics_, other.f_count__java_util_IntSummaryStatistics_);\n    this.f_min__java_util_IntSummaryStatistics_ \x3d Math.min(this.f_min__java_util_IntSummaryStatistics_, other.f_min__java_util_IntSummaryStatistics_);\n    this.f_max__java_util_IntSummaryStatistics_ \x3d Math.max(this.f_max__java_util_IntSummaryStatistics_, other.f_max__java_util_IntSummaryStatistics_);\n    this.f_sum__java_util_IntSummaryStatistics_ \x3d $LongUtils.$plus(this.f_sum__java_util_IntSummaryStatistics_, other.f_sum__java_util_IntSummaryStatistics_);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAverage__() {\n    return $LongUtils.$greater(this.f_count__java_util_IntSummaryStatistics_, $Primitives.$widenIntToLong(0)) ? $Primitives.$widenLongToDouble(this.f_sum__java_util_IntSummaryStatistics_) / $Primitives.$widenLongToDouble(this.f_count__java_util_IntSummaryStatistics_) : 0.0;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getCount__() {\n    return this.f_count__java_util_IntSummaryStatistics_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getMin__() {\n    return this.f_min__java_util_IntSummaryStatistics_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getMax__() {\n    return this.f_max__java_util_IntSummaryStatistics_;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getSum__() {\n    return this.f_sum__java_util_IntSummaryStatistics_;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"IntSummaryStatistics[\" + \"count \x3d \" + this.f_count__java_util_IntSummaryStatistics_ + \", avg \x3d \" + this.m_getAverage__() + \", min \x3d \" + this.f_min__java_util_IntSummaryStatistics_ + \", max \x3d \" + this.f_max__java_util_IntSummaryStatistics_ + \", sum \x3d \" + this.f_sum__java_util_IntSummaryStatistics_ + \"]\";\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(arg0) {\n    return IntConsumer.m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_IntSummaryStatistics() {\n    this.f_min__java_util_IntSummaryStatistics_ \x3d Integer.f_MAX_VALUE__java_lang_Integer;\n    this.f_max__java_util_IntSummaryStatistics_ \x3d Integer.f_MIN_VALUE__java_lang_Integer;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IntSummaryStatistics;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IntSummaryStatistics);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntSummaryStatistics.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    IntConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IntSummaryStatistics, $Util.$makeClassName('java.util.IntSummaryStatistics'));\n\n\nIntConsumer.$markImplementor(IntSummaryStatistics);\n\n\nexports \x3d IntSummaryStatistics; \n//# sourceMappingURL\x3dIntSummaryStatistics.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/IntSummaryStatistics.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.IntSummaryStatistics.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.IntSummaryStatistics');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar IntSummaryStatistics \x3d goog.require('java.util.IntSummaryStatistics$impl');\nexports \x3d IntSummaryStatistics;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntSupplier.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntSupplier.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntSupplier$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntSupplier.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass IntSupplier {\n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_getAsInt__() {\n  }\n  \n  /**\n   * @param {?function():number} fn\n   * @return {IntSupplier}\n   * @public\n   */\n  static $adapt(fn) {\n    IntSupplier.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntSupplier \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntSupplier;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntSupplier;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntSupplier.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntSupplier.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntSupplier, $Util.$makeClassName('java.util.function.IntSupplier'));\n\n\nIntSupplier.$markImplementor(/** @type {Function} */ (IntSupplier));\n\n\nexports \x3d IntSupplier; \n//# sourceMappingURL\x3dIntSupplier.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntSupplier$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntSupplier$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntSupplier.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntSupplier \x3d goog.require('java.util.function.IntSupplier$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntSupplier}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():number} */\n    this.f_$$fn__java_util_function_IntSupplier_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntSupplier_$LambdaAdaptor__java_util_function_IntSupplier_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntSupplier_$LambdaAdaptor__java_util_function_IntSupplier_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntSupplier_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAsInt__() {\n    let /** ?function():number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntSupplier_$LambdaAdaptor, $function());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntSupplier$$LambdaAdaptor'));\n\n\nIntSupplier.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntSupplier$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntSupplier$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntSupplier$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntSupplier.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntSupplier \x3d goog.require('java.util.function.IntSupplier');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntSupplier.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntSupplier.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntSupplier.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntSupplier');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntSupplier.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar IntSupplier \x3d goog.require('java.util.function.IntSupplier$impl');\nexports \x3d IntSupplier;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/OptionalInt.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.OptionalInt.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.OptionalInt$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntSupplier \x3d goog.forwardDeclare('java.util.function.IntSupplier$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass OptionalInt extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_ref__java_util_OptionalInt_ \x3d 0;\n    /** @public {boolean} */\n    this.f_present__java_util_OptionalInt_ \x3d false;\n  }\n  \n  /**\n   * @return {OptionalInt}\n   * @public\n   */\n  static m_empty__() {\n    OptionalInt.$clinit();\n    return OptionalInt.$f_EMPTY__java_util_OptionalInt_;\n  }\n  \n  /**\n   * @param {number} value\n   * @return {OptionalInt}\n   * @public\n   */\n  static m_of__int(value) {\n    OptionalInt.$clinit();\n    return OptionalInt.$create__int(value);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OptionalInt()'.\n   * @return {!OptionalInt}\n   * @public\n   */\n  static $create__() {\n    OptionalInt.$clinit();\n    let $instance \x3d new OptionalInt();\n    $instance.$ctor__java_util_OptionalInt__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OptionalInt()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_OptionalInt__() {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_OptionalInt_ \x3d 0;\n    this.f_present__java_util_OptionalInt_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OptionalInt(int)'.\n   * @param {number} value\n   * @return {!OptionalInt}\n   * @public\n   */\n  static $create__int(value) {\n    OptionalInt.$clinit();\n    let $instance \x3d new OptionalInt();\n    $instance.$ctor__java_util_OptionalInt__int(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OptionalInt(int)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_OptionalInt__int(value) {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_OptionalInt_ \x3d value;\n    this.f_present__java_util_OptionalInt_ \x3d true;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isPresent__() {\n    return this.f_present__java_util_OptionalInt_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAsInt__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.f_present__java_util_OptionalInt_);\n    return this.f_ref__java_util_OptionalInt_;\n  }\n  \n  /**\n   * @param {IntConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_ifPresent__java_util_function_IntConsumer(consumer) {\n    if (this.f_present__java_util_OptionalInt_) {\n      consumer.m_accept__int(this.f_ref__java_util_OptionalInt_);\n    }\n  }\n  \n  /**\n   * @param {number} other\n   * @return {number}\n   * @public\n   */\n  m_orElse__int(other) {\n    return this.f_present__java_util_OptionalInt_ ? this.f_ref__java_util_OptionalInt_ : other;\n  }\n  \n  /**\n   * @param {IntSupplier} other\n   * @return {number}\n   * @public\n   */\n  m_orElseGet__java_util_function_IntSupplier(other) {\n    return this.f_present__java_util_OptionalInt_ ? this.f_ref__java_util_OptionalInt_ : other.m_getAsInt__();\n  }\n  \n  /**\n   * @template M_X\n   * @param {Supplier\x3cM_X\x3e} exceptionSupplier\n   * @return {number}\n   * @public\n   */\n  m_orElseThrow__java_util_function_Supplier(exceptionSupplier) {\n    if (this.f_present__java_util_OptionalInt_) {\n      return this.f_ref__java_util_OptionalInt_;\n    }\n    throw $Exceptions.toJs(exceptionSupplier.m_get__());\n  }\n  \n  /**\n   * @override\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  equals(obj) {\n    if ($Equality.$same(obj, this)) {\n      return true;\n    }\n    if (!OptionalInt.$isInstance(obj)) {\n      return false;\n    }\n    let other \x3d /**@type {OptionalInt} */ ($Casts.$to(obj, OptionalInt));\n    return this.f_present__java_util_OptionalInt_ \x3d\x3d other.f_present__java_util_OptionalInt_ \x26\x26 Integer.m_compare__int__int(this.f_ref__java_util_OptionalInt_, other.f_ref__java_util_OptionalInt_) \x3d\x3d 0;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return this.f_present__java_util_OptionalInt_ ? Integer.m_hashCode__int(this.f_ref__java_util_OptionalInt_) : 0;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.f_present__java_util_OptionalInt_ ? \"OptionalInt.of(\" + j_l_String.m_valueOf__java_lang_Object(Integer.m_toString__int(this.f_ref__java_util_OptionalInt_)) + \")\" : \"OptionalInt.empty()\";\n  }\n  \n  /**\n   * @return {OptionalInt}\n   * @public\n   */\n  static get f_EMPTY__java_util_OptionalInt_() {\n    return (OptionalInt.$clinit(), OptionalInt.$f_EMPTY__java_util_OptionalInt_);\n  }\n  \n  /**\n   * @param {OptionalInt} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY__java_util_OptionalInt_(value) {\n    (OptionalInt.$clinit(), OptionalInt.$f_EMPTY__java_util_OptionalInt_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof OptionalInt;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, OptionalInt);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OptionalInt.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    OptionalInt.$f_EMPTY__java_util_OptionalInt_ \x3d OptionalInt.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(OptionalInt, $Util.$makeClassName('java.util.OptionalInt'));\n\n\n/** @private {OptionalInt} */\nOptionalInt.$f_EMPTY__java_util_OptionalInt_;\n\n\n\n\nexports \x3d OptionalInt; \n//# sourceMappingURL\x3dOptionalInt.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/OptionalInt.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.OptionalInt.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.OptionalInt');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntSupplier \x3d goog.require('java.util.function.IntSupplier');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar OptionalInt \x3d goog.require('java.util.OptionalInt$impl');\nexports \x3d OptionalInt;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntBinaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntBinaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntBinaryOperator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntBinaryOperator.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass IntBinaryOperator {\n  /**\n   * @abstract\n   * @param {number} left\n   * @param {number} right\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__int__int(left, right) {\n  }\n  \n  /**\n   * @param {?function(number, number):number} fn\n   * @return {IntBinaryOperator}\n   * @public\n   */\n  static $adapt(fn) {\n    IntBinaryOperator.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntBinaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntBinaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntBinaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntBinaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntBinaryOperator.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntBinaryOperator, $Util.$makeClassName('java.util.function.IntBinaryOperator'));\n\n\nIntBinaryOperator.$markImplementor(/** @type {Function} */ (IntBinaryOperator));\n\n\nexports \x3d IntBinaryOperator; \n//# sourceMappingURL\x3dIntBinaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntBinaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntBinaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntBinaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntBinaryOperator}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number, number):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number, number):number} */\n    this.f_$$fn__java_util_function_IntBinaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntBinaryOperator_$LambdaAdaptor__java_util_function_IntBinaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number, number):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntBinaryOperator_$LambdaAdaptor__java_util_function_IntBinaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntBinaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @param {number} arg1\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__int__int(arg0, arg1) {\n    let /** ?function(number, number):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntBinaryOperator_$LambdaAdaptor, $function(arg0, arg1));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntBinaryOperator$$LambdaAdaptor'));\n\n\nIntBinaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntBinaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntBinaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntBinaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntBinaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntBinaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntBinaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntBinaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntBinaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntBinaryOperator.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator$impl');\nexports \x3d IntBinaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntPredicate.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntPredicate.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntPredicate$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntPredicate.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n */\nclass IntPredicate {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {boolean}\n   * @public\n   */\n  m_test__int(value) {\n  }\n  \n  /**\n   * @abstract\n   * @return {IntPredicate}\n   * @public\n   */\n  m_negate__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntPredicate} other\n   * @return {IntPredicate}\n   * @public\n   */\n  m_and__java_util_function_IntPredicate(other) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntPredicate} other\n   * @return {IntPredicate}\n   * @public\n   */\n  m_or__java_util_function_IntPredicate(other) {\n  }\n  \n  /**\n   * @param {?function(number):boolean} fn\n   * @return {IntPredicate}\n   * @public\n   */\n  static $adapt(fn) {\n    IntPredicate.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {IntPredicate} $thisArg\n   * @return {IntPredicate}\n   * @public\n   */\n  static m_negate__$default__java_util_function_IntPredicate($thisArg) {\n    IntPredicate.$clinit();\n    return IntPredicate.$adapt(((/** number */ value) \x3d\x3e{\n      return !$thisArg.m_test__int(value);\n    }));\n  }\n  \n  /**\n   * @param {IntPredicate} $thisArg\n   * @param {IntPredicate} other\n   * @return {IntPredicate}\n   * @public\n   */\n  static m_and__$default__java_util_function_IntPredicate__java_util_function_IntPredicate($thisArg, other) {\n    IntPredicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return IntPredicate.$adapt(((/** number */ value) \x3d\x3e{\n      return $thisArg.m_test__int(value) \x26\x26 other.m_test__int(value);\n    }));\n  }\n  \n  /**\n   * @param {IntPredicate} $thisArg\n   * @param {IntPredicate} other\n   * @return {IntPredicate}\n   * @public\n   */\n  static m_or__$default__java_util_function_IntPredicate__java_util_function_IntPredicate($thisArg, other) {\n    IntPredicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return IntPredicate.$adapt(((/** number */ value) \x3d\x3e{\n      return $thisArg.m_test__int(value) || other.m_test__int(value);\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntPredicate \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntPredicate;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntPredicate;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntPredicate.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntPredicate.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntPredicate, $Util.$makeClassName('java.util.function.IntPredicate'));\n\n\nIntPredicate.$markImplementor(/** @type {Function} */ (IntPredicate));\n\n\nexports \x3d IntPredicate; \n//# sourceMappingURL\x3dIntPredicate.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntPredicate$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntPredicate$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntPredicate.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntPredicate \x3d goog.require('java.util.function.IntPredicate$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntPredicate}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):boolean} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):boolean} */\n    this.f_$$fn__java_util_function_IntPredicate_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntPredicate_$LambdaAdaptor__java_util_function_IntPredicate_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):boolean} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntPredicate_$LambdaAdaptor__java_util_function_IntPredicate_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntPredicate_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_test__int(arg0) {\n    let /** ?function(number):boolean */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntPredicate_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntPredicate} arg0\n   * @return {IntPredicate}\n   * @public\n   */\n  m_and__java_util_function_IntPredicate(arg0) {\n    return IntPredicate.m_and__$default__java_util_function_IntPredicate__java_util_function_IntPredicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {IntPredicate}\n   * @public\n   */\n  m_negate__() {\n    return IntPredicate.m_negate__$default__java_util_function_IntPredicate(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntPredicate} arg0\n   * @return {IntPredicate}\n   * @public\n   */\n  m_or__java_util_function_IntPredicate(arg0) {\n    return IntPredicate.m_or__$default__java_util_function_IntPredicate__java_util_function_IntPredicate(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    IntPredicate.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntPredicate$$LambdaAdaptor'));\n\n\nIntPredicate.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntPredicate$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntPredicate$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntPredicate$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntPredicate.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntPredicate \x3d goog.require('java.util.function.IntPredicate');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntPredicate.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntPredicate.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntPredicate.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntPredicate');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntPredicate.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar IntPredicate \x3d goog.require('java.util.function.IntPredicate$impl');\nexports \x3d IntPredicate;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToDoubleFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToDoubleFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntToDoubleFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntToDoubleFunction.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass IntToDoubleFunction {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__int(value) {\n  }\n  \n  /**\n   * @param {?function(number):number} fn\n   * @return {IntToDoubleFunction}\n   * @public\n   */\n  static $adapt(fn) {\n    IntToDoubleFunction.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntToDoubleFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntToDoubleFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntToDoubleFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntToDoubleFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntToDoubleFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntToDoubleFunction, $Util.$makeClassName('java.util.function.IntToDoubleFunction'));\n\n\nIntToDoubleFunction.$markImplementor(/** @type {Function} */ (IntToDoubleFunction));\n\n\nexports \x3d IntToDoubleFunction; \n//# sourceMappingURL\x3dIntToDoubleFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToDoubleFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToDoubleFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntToDoubleFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntToDoubleFunction}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):number} */\n    this.f_$$fn__java_util_function_IntToDoubleFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntToDoubleFunction_$LambdaAdaptor__java_util_function_IntToDoubleFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntToDoubleFunction_$LambdaAdaptor__java_util_function_IntToDoubleFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntToDoubleFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__int(arg0) {\n    let /** ?function(number):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntToDoubleFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntToDoubleFunction$$LambdaAdaptor'));\n\n\nIntToDoubleFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntToDoubleFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToDoubleFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToDoubleFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntToDoubleFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntToDoubleFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToDoubleFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToDoubleFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntToDoubleFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntToDoubleFunction.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction$impl');\nexports \x3d IntToDoubleFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToLongFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToLongFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntToLongFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntToLongFunction.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass IntToLongFunction {\n  /**\n   * @abstract\n   * @param {number} value\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__int(value) {\n  }\n  \n  /**\n   * @param {?function(number):!$Long} fn\n   * @return {IntToLongFunction}\n   * @public\n   */\n  static $adapt(fn) {\n    IntToLongFunction.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntToLongFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntToLongFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntToLongFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntToLongFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntToLongFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntToLongFunction, $Util.$makeClassName('java.util.function.IntToLongFunction'));\n\n\nIntToLongFunction.$markImplementor(/** @type {Function} */ (IntToLongFunction));\n\n\nexports \x3d IntToLongFunction; \n//# sourceMappingURL\x3dIntToLongFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToLongFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToLongFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntToLongFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {IntToLongFunction}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):!$Long} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):!$Long} */\n    this.f_$$fn__java_util_function_IntToLongFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntToLongFunction_$LambdaAdaptor__java_util_function_IntToLongFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):!$Long} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntToLongFunction_$LambdaAdaptor__java_util_function_IntToLongFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntToLongFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__int(arg0) {\n    let /** ?function(number):!$Long */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntToLongFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntToLongFunction$$LambdaAdaptor'));\n\n\nIntToLongFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntToLongFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToLongFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToLongFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntToLongFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntToLongFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntToLongFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntToLongFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntToLongFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntToLongFunction.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction$impl');\nexports \x3d IntToLongFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntUnaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntUnaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntUnaryOperator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @interface\n */\nclass IntUnaryOperator {\n  /**\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  static m_identity__() {\n    IntUnaryOperator.$clinit();\n    return IntUnaryOperator.$adapt(((/** number */ operand) \x3d\x3e{\n      return operand;\n    }));\n  }\n  \n  /**\n   * @abstract\n   * @param {number} operand\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__int(operand) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntUnaryOperator} after\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  m_andThen__java_util_function_IntUnaryOperator(after) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntUnaryOperator} before\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  m_compose__java_util_function_IntUnaryOperator(before) {\n  }\n  \n  /**\n   * @param {?function(number):number} fn\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  static $adapt(fn) {\n    IntUnaryOperator.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {IntUnaryOperator} $thisArg\n   * @param {IntUnaryOperator} after\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_IntUnaryOperator__java_util_function_IntUnaryOperator($thisArg, after) {\n    IntUnaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return IntUnaryOperator.$adapt(((/** number */ operand) \x3d\x3e{\n      return after.m_applyAsInt__int($thisArg.m_applyAsInt__int(operand));\n    }));\n  }\n  \n  /**\n   * @param {IntUnaryOperator} $thisArg\n   * @param {IntUnaryOperator} before\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  static m_compose__$default__java_util_function_IntUnaryOperator__java_util_function_IntUnaryOperator($thisArg, before) {\n    IntUnaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(before);\n    return IntUnaryOperator.$adapt(((/** number */ operand) \x3d\x3e{\n      return $thisArg.m_applyAsInt__int(before.m_applyAsInt__int(operand));\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_IntUnaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_IntUnaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_IntUnaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntUnaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.IntUnaryOperator.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntUnaryOperator, $Util.$makeClassName('java.util.function.IntUnaryOperator'));\n\n\nIntUnaryOperator.$markImplementor(/** @type {Function} */ (IntUnaryOperator));\n\n\nexports \x3d IntUnaryOperator; \n//# sourceMappingURL\x3dIntUnaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntUnaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntUnaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.IntUnaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntUnaryOperator}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(number):number} */\n    this.f_$$fn__java_util_function_IntUnaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_IntUnaryOperator_$LambdaAdaptor__java_util_function_IntUnaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(number):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_IntUnaryOperator_$LambdaAdaptor__java_util_function_IntUnaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_IntUnaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {number} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__int(arg0) {\n    let /** ?function(number):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_IntUnaryOperator_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntUnaryOperator} arg0\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  m_andThen__java_util_function_IntUnaryOperator(arg0) {\n    return IntUnaryOperator.m_andThen__$default__java_util_function_IntUnaryOperator__java_util_function_IntUnaryOperator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntUnaryOperator} arg0\n   * @return {IntUnaryOperator}\n   * @public\n   */\n  m_compose__java_util_function_IntUnaryOperator(arg0) {\n    return IntUnaryOperator.m_compose__$default__java_util_function_IntUnaryOperator__java_util_function_IntUnaryOperator(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    IntUnaryOperator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.IntUnaryOperator$$LambdaAdaptor'));\n\n\nIntUnaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dIntUnaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntUnaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntUnaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntUnaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.IntUnaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/IntUnaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.IntUnaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.IntUnaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.IntUnaryOperator.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator$impl');\nexports \x3d IntUnaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjIntConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjIntConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ObjIntConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.ObjIntConsumer.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass ObjIntConsumer {\n  /**\n   * @abstract\n   * @param {C_T} t\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__int(t, value) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T, number):void} fn\n   * @return {ObjIntConsumer\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    ObjIntConsumer.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_ObjIntConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_ObjIntConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_ObjIntConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ObjIntConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.ObjIntConsumer.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ObjIntConsumer, $Util.$makeClassName('java.util.function.ObjIntConsumer'));\n\n\nObjIntConsumer.$markImplementor(/** @type {Function} */ (ObjIntConsumer));\n\n\nexports \x3d ObjIntConsumer; \n//# sourceMappingURL\x3dObjIntConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjIntConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjIntConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ObjIntConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ObjIntConsumer \x3d goog.require('java.util.function.ObjIntConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_T\n * @implements {ObjIntConsumer\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, number):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, number):void} */\n    this.f_$$fn__java_util_function_ObjIntConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_ObjIntConsumer_$LambdaAdaptor__java_util_function_ObjIntConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, number):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_ObjIntConsumer_$LambdaAdaptor__java_util_function_ObjIntConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_ObjIntConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {number} arg1\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__int(arg0, arg1) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_ObjIntConsumer_$LambdaAdaptor;\n      $function(arg0, arg1);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.ObjIntConsumer$$LambdaAdaptor'));\n\n\nObjIntConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dObjIntConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjIntConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjIntConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ObjIntConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ObjIntConsumer \x3d goog.require('java.util.function.ObjIntConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.ObjIntConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjIntConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjIntConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ObjIntConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.ObjIntConsumer.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar ObjIntConsumer \x3d goog.require('java.util.function.ObjIntConsumer$impl');\nexports \x3d ObjIntConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.$1$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $1 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntStreamImpl} */\n    this.f_$outer_this__java_util_stream_IntStreamImpl_1;\n    /** @public {IntStream} */\n    this.f_nextStream__java_util_stream_IntStreamImpl_1;\n    /** @public {OfInt} */\n    this.f_next__java_util_stream_IntStreamImpl_1;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(IntStreamImpl, Spliterator, long, int)'.\n   * @param {IntStreamImpl} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$1}\n   * @public\n   */\n  static $create__java_util_stream_IntStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_IntStreamImpl_1__java_util_stream_IntStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(IntStreamImpl, Spliterator, long, int)'.\n   * @param {IntStreamImpl} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_1__java_util_stream_IntStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_IntStreamImpl_1 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_IntStreamImpl_1()) {\n      if (this.f_next__java_util_stream_IntStreamImpl_1.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_IntStreamImpl_1.m_close__();\n        this.f_nextStream__java_util_stream_IntStreamImpl_1 \x3d null;\n        this.f_next__java_util_stream_IntStreamImpl_1 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_IntStreamImpl_1() {\n    while ($Equality.$same(this.f_next__java_util_stream_IntStreamImpl_1, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** IntStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_IntStreamImpl_1 \x3d n;\n          this.f_next__java_util_stream_IntStreamImpl_1 \x3d /**@type {IntStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.IntStreamImpl$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dIntStreamImpl$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.IntStreamImpl.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.$2$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\nclass $2 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntStreamImpl} */\n    this.f_$outer_this__java_util_stream_IntStreamImpl_2;\n    /** @public {OfInt} */\n    this.f_ordered__java_util_stream_IntStreamImpl_2;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(IntStreamImpl, long, int)'.\n   * @param {IntStreamImpl} $outer_this\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_util_stream_IntStreamImpl__long__int($outer_this, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_IntStreamImpl_2__java_util_stream_IntStreamImpl__long__int($outer_this, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(IntStreamImpl, long, int)'.\n   * @param {IntStreamImpl} $outer_this\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_2__java_util_stream_IntStreamImpl__long__int($outer_this, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_IntStreamImpl_2 \x3d $outer_this;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_IntStreamImpl_2();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return null;\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    if ($Equality.$same(this.f_ordered__java_util_stream_IntStreamImpl_2, null)) {\n      let list \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $int));\n      this.f_$outer_this__java_util_stream_IntStreamImpl_2.f_spliterator__java_util_stream_IntStreamImpl_.m_forEachRemaining__java_lang_Object(IntConsumer.$adapt(((/** number */ item) \x3d\x3e{\n        $Arrays.$set(list, list.length, item);\n      })));\n      Arrays.m_sort__arrayOf_int(list);\n      this.f_ordered__java_util_stream_IntStreamImpl_2 \x3d Spliterators.m_spliterator__arrayOf_int__int(list, this.m_characteristics__());\n    }\n    return this.f_ordered__java_util_stream_IntStreamImpl_2.m_tryAdvance__java_lang_Object(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_IntStreamImpl_2() {\n    this.f_ordered__java_util_stream_IntStreamImpl_2 \x3d null;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.IntStreamImpl$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dIntStreamImpl$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.IntStreamImpl.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.$3$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntStreamImpl} */\n    this.f_$outer_this__java_util_stream_IntStreamImpl_3;\n    /** @public {IntConsumer} */\n    this.$c_action;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(IntStreamImpl, IntConsumer, long, int)'.\n   * @param {IntStreamImpl} $outer_this\n   * @param {IntConsumer} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_util_stream_IntStreamImpl__java_util_function_IntConsumer__long__int($outer_this, $c_action, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_IntStreamImpl_3__java_util_stream_IntStreamImpl__java_util_function_IntConsumer__long__int($outer_this, $c_action, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(IntStreamImpl, IntConsumer, long, int)'.\n   * @param {IntStreamImpl} $outer_this\n   * @param {IntConsumer} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_3__java_util_stream_IntStreamImpl__java_util_function_IntConsumer__long__int($outer_this, $c_action, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_IntStreamImpl_3 \x3d $outer_this;\n    this.$c_action \x3d $c_action;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {IntConsumer} innerAction\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(innerAction) {\n    return this.f_$outer_this__java_util_stream_IntStreamImpl_3.f_spliterator__java_util_stream_IntStreamImpl_.m_tryAdvance__java_lang_Object(this.$c_action.m_andThen__java_util_function_IntConsumer(innerAction));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.IntStreamImpl$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dIntStreamImpl$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.IntStreamImpl.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$FilterSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$FilterSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.FilterSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntPredicate \x3d goog.forwardDeclare('java.util.function.IntPredicate$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FilterSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntPredicate} */\n    this.f_filter__java_util_stream_IntStreamImpl_FilterSpliterator_;\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_FilterSpliterator_;\n    /** @public {boolean} */\n    this.f_found__java_util_stream_IntStreamImpl_FilterSpliterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'FilterSpliterator(IntPredicate, OfInt)'.\n   * @param {IntPredicate} filter\n   * @param {OfInt} original\n   * @return {!FilterSpliterator}\n   * @public\n   */\n  static $create__java_util_function_IntPredicate__java_util_Spliterator_OfInt(filter, original) {\n    FilterSpliterator.$clinit();\n    let $instance \x3d new FilterSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_FilterSpliterator__java_util_function_IntPredicate__java_util_Spliterator_OfInt(filter, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'FilterSpliterator(IntPredicate, OfInt)'.\n   * @param {IntPredicate} filter\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_FilterSpliterator__java_util_function_IntPredicate__java_util_Spliterator_OfInt(filter, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(filter);\n    this.f_filter__java_util_stream_IntStreamImpl_FilterSpliterator_ \x3d filter;\n    this.f_original__java_util_stream_IntStreamImpl_FilterSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_IntStreamImpl_FilterSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    this.f_found__java_util_stream_IntStreamImpl_FilterSpliterator_ \x3d false;\n    while (!this.f_found__java_util_stream_IntStreamImpl_FilterSpliterator_ \x26\x26 this.f_original__java_util_stream_IntStreamImpl_FilterSpliterator_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ item) \x3d\x3e{\n      if (this.f_filter__java_util_stream_IntStreamImpl_FilterSpliterator_.m_test__int(item)) {\n        this.f_found__java_util_stream_IntStreamImpl_FilterSpliterator_ \x3d true;\n        action.m_accept__int(item);\n      }\n    })))) {\n    }\n    return this.f_found__java_util_stream_IntStreamImpl_FilterSpliterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FilterSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, FilterSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FilterSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FilterSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$FilterSpliterator'));\n\n\n\n\nexports \x3d FilterSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$FilterSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$FilterSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$FilterSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.FilterSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntPredicate \x3d goog.require('java.util.function.IntPredicate');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FilterSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.FilterSpliterator$impl');\nexports \x3d FilterSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$LimitSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$LimitSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.LimitSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass LimitSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_limit__java_util_stream_IntStreamImpl_LimitSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_LimitSpliterator_;\n    /** @public {number} */\n    this.f_position__java_util_stream_IntStreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LimitSpliterator(long, OfInt)'.\n   * @param {!$Long} limit\n   * @param {OfInt} original\n   * @return {!LimitSpliterator}\n   * @public\n   */\n  static $create__long__java_util_Spliterator_OfInt(limit, original) {\n    LimitSpliterator.$clinit();\n    let $instance \x3d new LimitSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_LimitSpliterator__long__java_util_Spliterator_OfInt(limit, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LimitSpliterator(long, OfInt)'.\n   * @param {!$Long} limit\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_LimitSpliterator__long__java_util_Spliterator_OfInt(limit, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_min__long__long(original.m_estimateSize__(), limit) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.$init__java_util_stream_IntStreamImpl_LimitSpliterator();\n    this.f_limit__java_util_stream_IntStreamImpl_LimitSpliterator_ \x3d limit;\n    this.f_original__java_util_stream_IntStreamImpl_LimitSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_IntStreamImpl_LimitSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    if ($LongUtils.$greaterEquals($Primitives.$widenIntToLong(this.f_position__java_util_stream_IntStreamImpl_LimitSpliterator_), this.f_limit__java_util_stream_IntStreamImpl_LimitSpliterator_)) {\n      return false;\n    }\n    let result \x3d this.f_original__java_util_stream_IntStreamImpl_LimitSpliterator_.m_tryAdvance__java_lang_Object(action);\n    this.f_position__java_util_stream_IntStreamImpl_LimitSpliterator_++;\n    return result;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_IntStreamImpl_LimitSpliterator() {\n    this.f_position__java_util_stream_IntStreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LimitSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LimitSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LimitSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LimitSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$LimitSpliterator'));\n\n\n\n\nexports \x3d LimitSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$LimitSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$LimitSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$LimitSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.LimitSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar LimitSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.LimitSpliterator$impl');\nexports \x3d LimitSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToDoubleSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToDoubleSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntToDoubleFunction \x3d goog.forwardDeclare('java.util.function.IntToDoubleFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToDoubleSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntToDoubleFunction} */\n    this.f_map__java_util_stream_IntStreamImpl_MapToDoubleSpliterator_;\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_MapToDoubleSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToDoubleSpliterator(IntToDoubleFunction, OfInt)'.\n   * @param {IntToDoubleFunction} map\n   * @param {OfInt} original\n   * @return {!MapToDoubleSpliterator}\n   * @public\n   */\n  static $create__java_util_function_IntToDoubleFunction__java_util_Spliterator_OfInt(map, original) {\n    MapToDoubleSpliterator.$clinit();\n    let $instance \x3d new MapToDoubleSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_MapToDoubleSpliterator__java_util_function_IntToDoubleFunction__java_util_Spliterator_OfInt(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToDoubleSpliterator(IntToDoubleFunction, OfInt)'.\n   * @param {IntToDoubleFunction} map\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_MapToDoubleSpliterator__java_util_function_IntToDoubleFunction__java_util_Spliterator_OfInt(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_IntStreamImpl_MapToDoubleSpliterator_ \x3d map;\n    this.f_original__java_util_stream_IntStreamImpl_MapToDoubleSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    return this.f_original__java_util_stream_IntStreamImpl_MapToDoubleSpliterator_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__double(this.f_map__java_util_stream_IntStreamImpl_MapToDoubleSpliterator_.m_applyAsDouble__int(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToDoubleSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToDoubleSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToDoubleSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToDoubleSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$MapToDoubleSpliterator'));\n\n\n\n\nexports \x3d MapToDoubleSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$MapToDoubleSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToDoubleSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToDoubleSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToDoubleSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToDoubleSpliterator$impl');\nexports \x3d MapToDoubleSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToIntSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToIntSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToIntSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntUnaryOperator \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToIntSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntUnaryOperator} */\n    this.f_map__java_util_stream_IntStreamImpl_MapToIntSpliterator_;\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_MapToIntSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToIntSpliterator(IntUnaryOperator, OfInt)'.\n   * @param {IntUnaryOperator} map\n   * @param {OfInt} original\n   * @return {!MapToIntSpliterator}\n   * @public\n   */\n  static $create__java_util_function_IntUnaryOperator__java_util_Spliterator_OfInt(map, original) {\n    MapToIntSpliterator.$clinit();\n    let $instance \x3d new MapToIntSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_MapToIntSpliterator__java_util_function_IntUnaryOperator__java_util_Spliterator_OfInt(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToIntSpliterator(IntUnaryOperator, OfInt)'.\n   * @param {IntUnaryOperator} map\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_MapToIntSpliterator__java_util_function_IntUnaryOperator__java_util_Spliterator_OfInt(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_IntStreamImpl_MapToIntSpliterator_ \x3d map;\n    this.f_original__java_util_stream_IntStreamImpl_MapToIntSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    return this.f_original__java_util_stream_IntStreamImpl_MapToIntSpliterator_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__int(this.f_map__java_util_stream_IntStreamImpl_MapToIntSpliterator_.m_applyAsInt__int(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToIntSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToIntSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToIntSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToIntSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$MapToIntSpliterator'));\n\n\n\n\nexports \x3d MapToIntSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$MapToIntSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToIntSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToIntSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToIntSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToIntSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToIntSpliterator$impl');\nexports \x3d MapToIntSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToLongSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToLongSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToLongSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntToLongFunction \x3d goog.forwardDeclare('java.util.function.IntToLongFunction$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToLongSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntToLongFunction} */\n    this.f_map__java_util_stream_IntStreamImpl_MapToLongSpliterator_;\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_MapToLongSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToLongSpliterator(IntToLongFunction, OfInt)'.\n   * @param {IntToLongFunction} map\n   * @param {OfInt} original\n   * @return {!MapToLongSpliterator}\n   * @public\n   */\n  static $create__java_util_function_IntToLongFunction__java_util_Spliterator_OfInt(map, original) {\n    MapToLongSpliterator.$clinit();\n    let $instance \x3d new MapToLongSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_MapToLongSpliterator__java_util_function_IntToLongFunction__java_util_Spliterator_OfInt(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToLongSpliterator(IntToLongFunction, OfInt)'.\n   * @param {IntToLongFunction} map\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_MapToLongSpliterator__java_util_function_IntToLongFunction__java_util_Spliterator_OfInt(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_IntStreamImpl_MapToLongSpliterator_ \x3d map;\n    this.f_original__java_util_stream_IntStreamImpl_MapToLongSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    return this.f_original__java_util_stream_IntStreamImpl_MapToLongSpliterator_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__long(this.f_map__java_util_stream_IntStreamImpl_MapToLongSpliterator_.m_applyAsLong__int(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToLongSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToLongSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToLongSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToLongSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$MapToLongSpliterator'));\n\n\n\n\nexports \x3d MapToLongSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$MapToLongSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToLongSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToLongSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToLongSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToLongSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToLongSpliterator$impl');\nexports \x3d MapToLongSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToObjSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToObjSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToObjSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_MapToObjSpliterator_T\n * @extends {AbstractSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n  */\nclass MapToObjSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntFunction\x3c?\x3e} */\n    this.f_map__java_util_stream_IntStreamImpl_MapToObjSpliterator_;\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_MapToObjSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToObjSpliterator(IntFunction, OfInt)'.\n   * @template C_MapToObjSpliterator_T\n   * @param {IntFunction\x3c?\x3e} map\n   * @param {OfInt} original\n   * @return {!MapToObjSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_IntFunction__java_util_Spliterator_OfInt(map, original) {\n    MapToObjSpliterator.$clinit();\n    let $instance \x3d new MapToObjSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_MapToObjSpliterator__java_util_function_IntFunction__java_util_Spliterator_OfInt(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToObjSpliterator(IntFunction, OfInt)'.\n   * @param {IntFunction\x3c?\x3e} map\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_MapToObjSpliterator__java_util_function_IntFunction__java_util_Spliterator_OfInt(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_IntStreamImpl_MapToObjSpliterator_ \x3d map;\n    this.f_original__java_util_stream_IntStreamImpl_MapToObjSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    return this.f_original__java_util_stream_IntStreamImpl_MapToObjSpliterator_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ u) \x3d\x3e{\n      action.m_accept__java_lang_Object(this.f_map__java_util_stream_IntStreamImpl_MapToObjSpliterator_.m_apply__int(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToObjSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToObjSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToObjSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToObjSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$MapToObjSpliterator'));\n\n\n\n\nexports \x3d MapToObjSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$MapToObjSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$MapToObjSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$MapToObjSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.MapToObjSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar MapToObjSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToObjSpliterator$impl');\nexports \x3d MapToObjSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$SkipSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$SkipSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.SkipSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass SkipSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_skip__java_util_stream_IntStreamImpl_SkipSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {OfInt} */\n    this.f_original__java_util_stream_IntStreamImpl_SkipSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SkipSpliterator(long, OfInt)'.\n   * @param {!$Long} skip\n   * @param {OfInt} original\n   * @return {!SkipSpliterator}\n   * @public\n   */\n  static $create__long__java_util_Spliterator_OfInt(skip, original) {\n    SkipSpliterator.$clinit();\n    let $instance \x3d new SkipSpliterator();\n    $instance.$ctor__java_util_stream_IntStreamImpl_SkipSpliterator__long__java_util_Spliterator_OfInt(skip, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SkipSpliterator(long, OfInt)'.\n   * @param {!$Long} skip\n   * @param {OfInt} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_SkipSpliterator__long__java_util_Spliterator_OfInt(skip, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_max__long__long($Primitives.$widenIntToLong(0), $LongUtils.$minus(original.m_estimateSize__(), skip)) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.f_skip__java_util_stream_IntStreamImpl_SkipSpliterator_ \x3d skip;\n    this.f_original__java_util_stream_IntStreamImpl_SkipSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_IntStreamImpl_SkipSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    while ($LongUtils.$greater(this.f_skip__java_util_stream_IntStreamImpl_SkipSpliterator_, $Primitives.$widenIntToLong(0))) {\n      if (!this.f_original__java_util_stream_IntStreamImpl_SkipSpliterator_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ ignore) \x3d\x3e{\n      })))) {\n        return false;\n      }\n      this.f_skip__java_util_stream_IntStreamImpl_SkipSpliterator_ \x3d $LongUtils.$minus(this.f_skip__java_util_stream_IntStreamImpl_SkipSpliterator_, $Long.fromInt(1));\n    }\n    return this.f_original__java_util_stream_IntStreamImpl_SkipSpliterator_.m_tryAdvance__java_lang_Object(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SkipSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SkipSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SkipSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SkipSpliterator, $Util.$makeClassName('java.util.stream.IntStreamImpl$SkipSpliterator'));\n\n\n\n\nexports \x3d SkipSpliterator; \n//# sourceMappingURL\x3dIntStreamImpl$SkipSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$SkipSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$SkipSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.SkipSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar SkipSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.SkipSpliterator$impl');\nexports \x3d SkipSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$ValueConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$ValueConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.ValueConsumer$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {IntConsumer}\n  */\nclass ValueConsumer extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_util_stream_IntStreamImpl_ValueConsumer \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ValueConsumer()'.\n   * @return {!ValueConsumer}\n   * @public\n   */\n  static $create__() {\n    ValueConsumer.$clinit();\n    let $instance \x3d new ValueConsumer();\n    $instance.$ctor__java_util_stream_IntStreamImpl_ValueConsumer__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ValueConsumer()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_ValueConsumer__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__int(value) {\n    this.f_value__java_util_stream_IntStreamImpl_ValueConsumer \x3d value;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(arg0) {\n    return IntConsumer.m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ValueConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ValueConsumer);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ValueConsumer.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    IntConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ValueConsumer, $Util.$makeClassName('java.util.stream.IntStreamImpl$ValueConsumer'));\n\n\nIntConsumer.$markImplementor(ValueConsumer);\n\n\nexports \x3d ValueConsumer; \n//# sourceMappingURL\x3dIntStreamImpl$ValueConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$ValueConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$ValueConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.ValueConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ValueConsumer \x3d goog.require('java.util.stream.IntStreamImpl.ValueConsumer$impl');\nexports \x3d ValueConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LongSummaryStatistics.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LongSummaryStatistics.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.LongSummaryStatistics$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nconst LongConsumer \x3d goog.require('java.util.function.LongConsumer$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @implements {LongConsumer}\n * @implements {IntConsumer}\n  */\nclass LongSummaryStatistics extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_count__java_util_LongSummaryStatistics_ \x3d $Long.fromInt(0);\n    /** @public {!$Long} */\n    this.f_min__java_util_LongSummaryStatistics_ \x3d $Long.fromInt(0);\n    /** @public {!$Long} */\n    this.f_max__java_util_LongSummaryStatistics_ \x3d $Long.fromInt(0);\n    /** @public {!$Long} */\n    this.f_sum__java_util_LongSummaryStatistics_ \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongSummaryStatistics()'.\n   * @return {!LongSummaryStatistics}\n   * @public\n   */\n  static $create__() {\n    LongSummaryStatistics.$clinit();\n    let $instance \x3d new LongSummaryStatistics();\n    $instance.$ctor__java_util_LongSummaryStatistics__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongSummaryStatistics()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LongSummaryStatistics__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_LongSummaryStatistics();\n  }\n  \n  /**\n   * @override\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  m_accept__int(value) {\n    this.m_accept__long($Primitives.$widenIntToLong(value));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} value\n   * @return {void}\n   * @public\n   */\n  m_accept__long(value) {\n    this.f_count__java_util_LongSummaryStatistics_ \x3d $LongUtils.$plus(this.f_count__java_util_LongSummaryStatistics_, $Long.fromInt(1));\n    this.f_min__java_util_LongSummaryStatistics_ \x3d Math.m_min__long__long(this.f_min__java_util_LongSummaryStatistics_, value);\n    this.f_max__java_util_LongSummaryStatistics_ \x3d Math.m_max__long__long(this.f_max__java_util_LongSummaryStatistics_, value);\n    this.f_sum__java_util_LongSummaryStatistics_ \x3d $LongUtils.$plus(this.f_sum__java_util_LongSummaryStatistics_, value);\n  }\n  \n  /**\n   * @param {LongSummaryStatistics} other\n   * @return {void}\n   * @public\n   */\n  m_combine__java_util_LongSummaryStatistics(other) {\n    this.f_count__java_util_LongSummaryStatistics_ \x3d $LongUtils.$plus(this.f_count__java_util_LongSummaryStatistics_, other.f_count__java_util_LongSummaryStatistics_);\n    this.f_min__java_util_LongSummaryStatistics_ \x3d Math.m_min__long__long(this.f_min__java_util_LongSummaryStatistics_, other.f_min__java_util_LongSummaryStatistics_);\n    this.f_max__java_util_LongSummaryStatistics_ \x3d Math.m_max__long__long(this.f_max__java_util_LongSummaryStatistics_, other.f_max__java_util_LongSummaryStatistics_);\n    this.f_sum__java_util_LongSummaryStatistics_ \x3d $LongUtils.$plus(this.f_sum__java_util_LongSummaryStatistics_, other.f_sum__java_util_LongSummaryStatistics_);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getAverage__() {\n    return $LongUtils.$greater(this.f_count__java_util_LongSummaryStatistics_, $Primitives.$widenIntToLong(0)) ? $Primitives.$widenLongToDouble(this.f_sum__java_util_LongSummaryStatistics_) / $Primitives.$widenLongToDouble(this.f_count__java_util_LongSummaryStatistics_) : 0.0;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getCount__() {\n    return this.f_count__java_util_LongSummaryStatistics_;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getMin__() {\n    return this.f_min__java_util_LongSummaryStatistics_;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getMax__() {\n    return this.f_max__java_util_LongSummaryStatistics_;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getSum__() {\n    return this.f_sum__java_util_LongSummaryStatistics_;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"LongSummaryStatistics[\" + \"count \x3d \" + this.f_count__java_util_LongSummaryStatistics_ + \", avg \x3d \" + this.m_getAverage__() + \", min \x3d \" + this.f_min__java_util_LongSummaryStatistics_ + \", max \x3d \" + this.f_max__java_util_LongSummaryStatistics_ + \", sum \x3d \" + this.f_sum__java_util_LongSummaryStatistics_ + \"]\";\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {LongConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_LongConsumer(arg0) {\n    return LongConsumer.m_andThen__$default__java_util_function_LongConsumer__java_util_function_LongConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(arg0) {\n    return IntConsumer.m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_LongSummaryStatistics() {\n    this.f_min__java_util_LongSummaryStatistics_ \x3d Long.f_MAX_VALUE__java_lang_Long;\n    this.f_max__java_util_LongSummaryStatistics_ \x3d Long.f_MIN_VALUE__java_lang_Long;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongSummaryStatistics;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongSummaryStatistics);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongSummaryStatistics.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    LongConsumer.$clinit();\n    IntConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongSummaryStatistics, $Util.$makeClassName('java.util.LongSummaryStatistics'));\n\n\nLongConsumer.$markImplementor(LongSummaryStatistics);\nIntConsumer.$markImplementor(LongSummaryStatistics);\n\n\nexports \x3d LongSummaryStatistics; \n//# sourceMappingURL\x3dLongSummaryStatistics.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LongSummaryStatistics.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LongSummaryStatistics.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.LongSummaryStatistics');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar LongSummaryStatistics \x3d goog.require('java.util.LongSummaryStatistics$impl');\nexports \x3d LongSummaryStatistics;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongSupplier.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongSupplier.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongSupplier$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongSupplier.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongSupplier {\n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_getAsLong__() {\n  }\n  \n  /**\n   * @param {?function():!$Long} fn\n   * @return {LongSupplier}\n   * @public\n   */\n  static $adapt(fn) {\n    LongSupplier.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongSupplier \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongSupplier;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongSupplier;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongSupplier.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongSupplier.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongSupplier, $Util.$makeClassName('java.util.function.LongSupplier'));\n\n\nLongSupplier.$markImplementor(/** @type {Function} */ (LongSupplier));\n\n\nexports \x3d LongSupplier; \n//# sourceMappingURL\x3dLongSupplier.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongSupplier$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongSupplier$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongSupplier.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongSupplier \x3d goog.require('java.util.function.LongSupplier$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongSupplier}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():!$Long} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():!$Long} */\n    this.f_$$fn__java_util_function_LongSupplier_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongSupplier_$LambdaAdaptor__java_util_function_LongSupplier_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():!$Long} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongSupplier_$LambdaAdaptor__java_util_function_LongSupplier_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongSupplier_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getAsLong__() {\n    let /** ?function():!$Long */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongSupplier_$LambdaAdaptor, $function());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongSupplier$$LambdaAdaptor'));\n\n\nLongSupplier.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongSupplier$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongSupplier$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongSupplier$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongSupplier.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongSupplier \x3d goog.require('java.util.function.LongSupplier');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongSupplier.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongSupplier.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongSupplier.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongSupplier');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongSupplier.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongSupplier \x3d goog.require('java.util.function.LongSupplier$impl');\nexports \x3d LongSupplier;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/OptionalLong.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.OptionalLong.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.OptionalLong$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongSupplier \x3d goog.forwardDeclare('java.util.function.LongSupplier$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass OptionalLong extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_ref__java_util_OptionalLong_ \x3d $Long.fromInt(0);\n    /** @public {boolean} */\n    this.f_present__java_util_OptionalLong_ \x3d false;\n  }\n  \n  /**\n   * @return {OptionalLong}\n   * @public\n   */\n  static m_empty__() {\n    OptionalLong.$clinit();\n    return OptionalLong.$f_EMPTY__java_util_OptionalLong_;\n  }\n  \n  /**\n   * @param {!$Long} value\n   * @return {OptionalLong}\n   * @public\n   */\n  static m_of__long(value) {\n    OptionalLong.$clinit();\n    return OptionalLong.$create__long(value);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OptionalLong()'.\n   * @return {!OptionalLong}\n   * @public\n   */\n  static $create__() {\n    OptionalLong.$clinit();\n    let $instance \x3d new OptionalLong();\n    $instance.$ctor__java_util_OptionalLong__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OptionalLong()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_OptionalLong__() {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_OptionalLong_ \x3d $Long.fromInt(0);\n    this.f_present__java_util_OptionalLong_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'OptionalLong(long)'.\n   * @param {!$Long} value\n   * @return {!OptionalLong}\n   * @public\n   */\n  static $create__long(value) {\n    OptionalLong.$clinit();\n    let $instance \x3d new OptionalLong();\n    $instance.$ctor__java_util_OptionalLong__long(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'OptionalLong(long)'.\n   * @param {!$Long} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_OptionalLong__long(value) {\n    this.$ctor__java_lang_Object__();\n    this.f_ref__java_util_OptionalLong_ \x3d value;\n    this.f_present__java_util_OptionalLong_ \x3d true;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isPresent__() {\n    return this.f_present__java_util_OptionalLong_;\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getAsLong__() {\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.f_present__java_util_OptionalLong_);\n    return this.f_ref__java_util_OptionalLong_;\n  }\n  \n  /**\n   * @param {LongConsumer} consumer\n   * @return {void}\n   * @public\n   */\n  m_ifPresent__java_util_function_LongConsumer(consumer) {\n    if (this.f_present__java_util_OptionalLong_) {\n      consumer.m_accept__long(this.f_ref__java_util_OptionalLong_);\n    }\n  }\n  \n  /**\n   * @param {!$Long} other\n   * @return {!$Long}\n   * @public\n   */\n  m_orElse__long(other) {\n    return this.f_present__java_util_OptionalLong_ ? this.f_ref__java_util_OptionalLong_ : other;\n  }\n  \n  /**\n   * @param {LongSupplier} other\n   * @return {!$Long}\n   * @public\n   */\n  m_orElseGet__java_util_function_LongSupplier(other) {\n    return this.f_present__java_util_OptionalLong_ ? this.f_ref__java_util_OptionalLong_ : other.m_getAsLong__();\n  }\n  \n  /**\n   * @template M_X\n   * @param {Supplier\x3cM_X\x3e} exceptionSupplier\n   * @return {!$Long}\n   * @public\n   */\n  m_orElseThrow__java_util_function_Supplier(exceptionSupplier) {\n    if (this.f_present__java_util_OptionalLong_) {\n      return this.f_ref__java_util_OptionalLong_;\n    }\n    throw $Exceptions.toJs(exceptionSupplier.m_get__());\n  }\n  \n  /**\n   * @override\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  equals(obj) {\n    if ($Equality.$same(obj, this)) {\n      return true;\n    }\n    if (!OptionalLong.$isInstance(obj)) {\n      return false;\n    }\n    let other \x3d /**@type {OptionalLong} */ ($Casts.$to(obj, OptionalLong));\n    return this.f_present__java_util_OptionalLong_ \x3d\x3d other.f_present__java_util_OptionalLong_ \x26\x26 Long.m_compare__long__long(this.f_ref__java_util_OptionalLong_, other.f_ref__java_util_OptionalLong_) \x3d\x3d 0;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return this.f_present__java_util_OptionalLong_ ? Long.m_hashCode__long(this.f_ref__java_util_OptionalLong_) : 0;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.f_present__java_util_OptionalLong_ ? \"OptionalLong.of(\" + j_l_String.m_valueOf__java_lang_Object(Long.m_toString__long(this.f_ref__java_util_OptionalLong_)) + \")\" : \"OptionalLong.empty()\";\n  }\n  \n  /**\n   * @return {OptionalLong}\n   * @public\n   */\n  static get f_EMPTY__java_util_OptionalLong_() {\n    return (OptionalLong.$clinit(), OptionalLong.$f_EMPTY__java_util_OptionalLong_);\n  }\n  \n  /**\n   * @param {OptionalLong} value\n   * @return {void}\n   * @public\n   */\n  static set f_EMPTY__java_util_OptionalLong_(value) {\n    (OptionalLong.$clinit(), OptionalLong.$f_EMPTY__java_util_OptionalLong_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof OptionalLong;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, OptionalLong);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OptionalLong.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    OptionalLong.$f_EMPTY__java_util_OptionalLong_ \x3d OptionalLong.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(OptionalLong, $Util.$makeClassName('java.util.OptionalLong'));\n\n\n/** @private {OptionalLong} */\nOptionalLong.$f_EMPTY__java_util_OptionalLong_;\n\n\n\n\nexports \x3d OptionalLong; \n//# sourceMappingURL\x3dOptionalLong.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/OptionalLong.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.OptionalLong.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.OptionalLong');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongSupplier \x3d goog.require('java.util.function.LongSupplier');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar OptionalLong \x3d goog.require('java.util.OptionalLong$impl');\nexports \x3d OptionalLong;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongBinaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongBinaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongBinaryOperator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongBinaryOperator.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongBinaryOperator {\n  /**\n   * @abstract\n   * @param {!$Long} left\n   * @param {!$Long} right\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__long__long(left, right) {\n  }\n  \n  /**\n   * @param {?function(!$Long, !$Long):!$Long} fn\n   * @return {LongBinaryOperator}\n   * @public\n   */\n  static $adapt(fn) {\n    LongBinaryOperator.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongBinaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongBinaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongBinaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongBinaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongBinaryOperator.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongBinaryOperator, $Util.$makeClassName('java.util.function.LongBinaryOperator'));\n\n\nLongBinaryOperator.$markImplementor(/** @type {Function} */ (LongBinaryOperator));\n\n\nexports \x3d LongBinaryOperator; \n//# sourceMappingURL\x3dLongBinaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongBinaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongBinaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongBinaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongBinaryOperator}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long, !$Long):!$Long} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long, !$Long):!$Long} */\n    this.f_$$fn__java_util_function_LongBinaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongBinaryOperator_$LambdaAdaptor__java_util_function_LongBinaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long, !$Long):!$Long} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongBinaryOperator_$LambdaAdaptor__java_util_function_LongBinaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongBinaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @param {!$Long} arg1\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__long__long(arg0, arg1) {\n    let /** ?function(!$Long, !$Long):!$Long */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongBinaryOperator_$LambdaAdaptor, $function(arg0, arg1));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongBinaryOperator$$LambdaAdaptor'));\n\n\nLongBinaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongBinaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongBinaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongBinaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongBinaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongBinaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongBinaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongBinaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongBinaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongBinaryOperator.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator$impl');\nexports \x3d LongBinaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongFunction.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n * @template C_R\n */\nclass LongFunction {\n  /**\n   * @abstract\n   * @param {!$Long} value\n   * @return {C_R}\n   * @public\n   */\n  m_apply__long(value) {\n  }\n  \n  /**\n   * @template C_R\n   * @param {?function(!$Long):C_R} fn\n   * @return {LongFunction\x3cC_R\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    LongFunction.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongFunction, $Util.$makeClassName('java.util.function.LongFunction'));\n\n\nLongFunction.$markImplementor(/** @type {Function} */ (LongFunction));\n\n\nexports \x3d LongFunction; \n//# sourceMappingURL\x3dLongFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongFunction \x3d goog.require('java.util.function.LongFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_R\n * @implements {LongFunction\x3cC_R\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):C_R} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long):C_R} */\n    this.f_$$fn__java_util_function_LongFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongFunction_$LambdaAdaptor__java_util_function_LongFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):C_R} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongFunction_$LambdaAdaptor__java_util_function_LongFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @return {C_R}\n   * @public\n   */\n  m_apply__long(arg0) {\n    let /** ?function(!$Long):C_R */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongFunction$$LambdaAdaptor'));\n\n\nLongFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongFunction \x3d goog.require('java.util.function.LongFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongFunction.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongFunction \x3d goog.require('java.util.function.LongFunction$impl');\nexports \x3d LongFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongPredicate.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongPredicate.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongPredicate$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongPredicate.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongPredicate {\n  /**\n   * @abstract\n   * @param {!$Long} value\n   * @return {boolean}\n   * @public\n   */\n  m_test__long(value) {\n  }\n  \n  /**\n   * @abstract\n   * @return {LongPredicate}\n   * @public\n   */\n  m_negate__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongPredicate} other\n   * @return {LongPredicate}\n   * @public\n   */\n  m_and__java_util_function_LongPredicate(other) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongPredicate} other\n   * @return {LongPredicate}\n   * @public\n   */\n  m_or__java_util_function_LongPredicate(other) {\n  }\n  \n  /**\n   * @param {?function(!$Long):boolean} fn\n   * @return {LongPredicate}\n   * @public\n   */\n  static $adapt(fn) {\n    LongPredicate.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {LongPredicate} $thisArg\n   * @return {LongPredicate}\n   * @public\n   */\n  static m_negate__$default__java_util_function_LongPredicate($thisArg) {\n    LongPredicate.$clinit();\n    return LongPredicate.$adapt(((/** !$Long */ value) \x3d\x3e{\n      return !$thisArg.m_test__long(value);\n    }));\n  }\n  \n  /**\n   * @param {LongPredicate} $thisArg\n   * @param {LongPredicate} other\n   * @return {LongPredicate}\n   * @public\n   */\n  static m_and__$default__java_util_function_LongPredicate__java_util_function_LongPredicate($thisArg, other) {\n    LongPredicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return LongPredicate.$adapt(((/** !$Long */ value) \x3d\x3e{\n      return $thisArg.m_test__long(value) \x26\x26 other.m_test__long(value);\n    }));\n  }\n  \n  /**\n   * @param {LongPredicate} $thisArg\n   * @param {LongPredicate} other\n   * @return {LongPredicate}\n   * @public\n   */\n  static m_or__$default__java_util_function_LongPredicate__java_util_function_LongPredicate($thisArg, other) {\n    LongPredicate.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(other);\n    return LongPredicate.$adapt(((/** !$Long */ value) \x3d\x3e{\n      return $thisArg.m_test__long(value) || other.m_test__long(value);\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongPredicate \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongPredicate;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongPredicate;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongPredicate.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongPredicate.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongPredicate, $Util.$makeClassName('java.util.function.LongPredicate'));\n\n\nLongPredicate.$markImplementor(/** @type {Function} */ (LongPredicate));\n\n\nexports \x3d LongPredicate; \n//# sourceMappingURL\x3dLongPredicate.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongPredicate$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongPredicate$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongPredicate.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongPredicate \x3d goog.require('java.util.function.LongPredicate$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongPredicate}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):boolean} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long):boolean} */\n    this.f_$$fn__java_util_function_LongPredicate_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongPredicate_$LambdaAdaptor__java_util_function_LongPredicate_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):boolean} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongPredicate_$LambdaAdaptor__java_util_function_LongPredicate_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongPredicate_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_test__long(arg0) {\n    let /** ?function(!$Long):boolean */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongPredicate_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongPredicate} arg0\n   * @return {LongPredicate}\n   * @public\n   */\n  m_and__java_util_function_LongPredicate(arg0) {\n    return LongPredicate.m_and__$default__java_util_function_LongPredicate__java_util_function_LongPredicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {LongPredicate}\n   * @public\n   */\n  m_negate__() {\n    return LongPredicate.m_negate__$default__java_util_function_LongPredicate(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongPredicate} arg0\n   * @return {LongPredicate}\n   * @public\n   */\n  m_or__java_util_function_LongPredicate(arg0) {\n    return LongPredicate.m_or__$default__java_util_function_LongPredicate__java_util_function_LongPredicate(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    LongPredicate.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongPredicate$$LambdaAdaptor'));\n\n\nLongPredicate.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongPredicate$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongPredicate$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongPredicate$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongPredicate.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongPredicate \x3d goog.require('java.util.function.LongPredicate');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongPredicate.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongPredicate.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongPredicate.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongPredicate');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongPredicate.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongPredicate \x3d goog.require('java.util.function.LongPredicate$impl');\nexports \x3d LongPredicate;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToDoubleFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToDoubleFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongToDoubleFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongToDoubleFunction.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongToDoubleFunction {\n  /**\n   * @abstract\n   * @param {!$Long} value\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__long(value) {\n  }\n  \n  /**\n   * @param {?function(!$Long):number} fn\n   * @return {LongToDoubleFunction}\n   * @public\n   */\n  static $adapt(fn) {\n    LongToDoubleFunction.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongToDoubleFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongToDoubleFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongToDoubleFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongToDoubleFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongToDoubleFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongToDoubleFunction, $Util.$makeClassName('java.util.function.LongToDoubleFunction'));\n\n\nLongToDoubleFunction.$markImplementor(/** @type {Function} */ (LongToDoubleFunction));\n\n\nexports \x3d LongToDoubleFunction; \n//# sourceMappingURL\x3dLongToDoubleFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToDoubleFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToDoubleFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongToDoubleFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongToDoubleFunction}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long):number} */\n    this.f_$$fn__java_util_function_LongToDoubleFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongToDoubleFunction_$LambdaAdaptor__java_util_function_LongToDoubleFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongToDoubleFunction_$LambdaAdaptor__java_util_function_LongToDoubleFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongToDoubleFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsDouble__long(arg0) {\n    let /** ?function(!$Long):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongToDoubleFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongToDoubleFunction$$LambdaAdaptor'));\n\n\nLongToDoubleFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongToDoubleFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToDoubleFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToDoubleFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongToDoubleFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongToDoubleFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToDoubleFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToDoubleFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongToDoubleFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongToDoubleFunction.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction$impl');\nexports \x3d LongToDoubleFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToIntFunction.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToIntFunction.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongToIntFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongToIntFunction.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongToIntFunction {\n  /**\n   * @abstract\n   * @param {!$Long} value\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__long(value) {\n  }\n  \n  /**\n   * @param {?function(!$Long):number} fn\n   * @return {LongToIntFunction}\n   * @public\n   */\n  static $adapt(fn) {\n    LongToIntFunction.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongToIntFunction \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongToIntFunction;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongToIntFunction;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongToIntFunction.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongToIntFunction.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongToIntFunction, $Util.$makeClassName('java.util.function.LongToIntFunction'));\n\n\nLongToIntFunction.$markImplementor(/** @type {Function} */ (LongToIntFunction));\n\n\nexports \x3d LongToIntFunction; \n//# sourceMappingURL\x3dLongToIntFunction.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToIntFunction$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToIntFunction$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongToIntFunction.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongToIntFunction}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):number} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long):number} */\n    this.f_$$fn__java_util_function_LongToIntFunction_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongToIntFunction_$LambdaAdaptor__java_util_function_LongToIntFunction_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):number} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongToIntFunction_$LambdaAdaptor__java_util_function_LongToIntFunction_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongToIntFunction_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @return {number}\n   * @public\n   */\n  m_applyAsInt__long(arg0) {\n    let /** ?function(!$Long):number */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongToIntFunction_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongToIntFunction$$LambdaAdaptor'));\n\n\nLongToIntFunction.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongToIntFunction$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToIntFunction$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToIntFunction$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongToIntFunction.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongToIntFunction.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongToIntFunction.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongToIntFunction.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongToIntFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongToIntFunction.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction$impl');\nexports \x3d LongToIntFunction;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongUnaryOperator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongUnaryOperator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongUnaryOperator$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.LongUnaryOperator.$LambdaAdaptor$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n */\nclass LongUnaryOperator {\n  /**\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  static m_identity__() {\n    LongUnaryOperator.$clinit();\n    return LongUnaryOperator.$adapt(((/** !$Long */ operand) \x3d\x3e{\n      return operand;\n    }));\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} operand\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__long(operand) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongUnaryOperator} after\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  m_andThen__java_util_function_LongUnaryOperator(after) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongUnaryOperator} before\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  m_compose__java_util_function_LongUnaryOperator(before) {\n  }\n  \n  /**\n   * @param {?function(!$Long):!$Long} fn\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  static $adapt(fn) {\n    LongUnaryOperator.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {LongUnaryOperator} $thisArg\n   * @param {LongUnaryOperator} after\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  static m_andThen__$default__java_util_function_LongUnaryOperator__java_util_function_LongUnaryOperator($thisArg, after) {\n    LongUnaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(after);\n    return LongUnaryOperator.$adapt(((/** !$Long */ operand) \x3d\x3e{\n      return after.m_applyAsLong__long($thisArg.m_applyAsLong__long(operand));\n    }));\n  }\n  \n  /**\n   * @param {LongUnaryOperator} $thisArg\n   * @param {LongUnaryOperator} before\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  static m_compose__$default__java_util_function_LongUnaryOperator__java_util_function_LongUnaryOperator($thisArg, before) {\n    LongUnaryOperator.$clinit();\n    $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(before);\n    return LongUnaryOperator.$adapt(((/** !$Long */ operand) \x3d\x3e{\n      return $thisArg.m_applyAsLong__long(before.m_applyAsLong__long(operand));\n    }));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_LongUnaryOperator \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_LongUnaryOperator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_LongUnaryOperator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongUnaryOperator.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.LongUnaryOperator.$LambdaAdaptor$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongUnaryOperator, $Util.$makeClassName('java.util.function.LongUnaryOperator'));\n\n\nLongUnaryOperator.$markImplementor(/** @type {Function} */ (LongUnaryOperator));\n\n\nexports \x3d LongUnaryOperator; \n//# sourceMappingURL\x3dLongUnaryOperator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongUnaryOperator$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongUnaryOperator$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.LongUnaryOperator.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @implements {LongUnaryOperator}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):!$Long} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(!$Long):!$Long} */\n    this.f_$$fn__java_util_function_LongUnaryOperator_$LambdaAdaptor;\n    this.$ctor__java_util_function_LongUnaryOperator_$LambdaAdaptor__java_util_function_LongUnaryOperator_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(!$Long):!$Long} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_LongUnaryOperator_$LambdaAdaptor__java_util_function_LongUnaryOperator_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_LongUnaryOperator_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {!$Long} arg0\n   * @return {!$Long}\n   * @public\n   */\n  m_applyAsLong__long(arg0) {\n    let /** ?function(!$Long):!$Long */ $function;\n    return ($function \x3d this.f_$$fn__java_util_function_LongUnaryOperator_$LambdaAdaptor, $function(arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongUnaryOperator} arg0\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  m_andThen__java_util_function_LongUnaryOperator(arg0) {\n    return LongUnaryOperator.m_andThen__$default__java_util_function_LongUnaryOperator__java_util_function_LongUnaryOperator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongUnaryOperator} arg0\n   * @return {LongUnaryOperator}\n   * @public\n   */\n  m_compose__java_util_function_LongUnaryOperator(arg0) {\n    return LongUnaryOperator.m_compose__$default__java_util_function_LongUnaryOperator__java_util_function_LongUnaryOperator(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    LongUnaryOperator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.LongUnaryOperator$$LambdaAdaptor'));\n\n\nLongUnaryOperator.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dLongUnaryOperator$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongUnaryOperator$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongUnaryOperator$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongUnaryOperator.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.LongUnaryOperator.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/LongUnaryOperator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.LongUnaryOperator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.LongUnaryOperator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.LongUnaryOperator.$LambdaAdaptor');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator$impl');\nexports \x3d LongUnaryOperator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjLongConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjLongConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ObjLongConsumer$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('java.util.function.ObjLongConsumer.$LambdaAdaptor$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n * @template C_T\n */\nclass ObjLongConsumer {\n  /**\n   * @abstract\n   * @param {C_T} t\n   * @param {!$Long} value\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__long(t, value) {\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(C_T, !$Long):void} fn\n   * @return {ObjLongConsumer\x3cC_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    ObjLongConsumer.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_function_ObjLongConsumer \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_function_ObjLongConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_function_ObjLongConsumer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ObjLongConsumer.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('java.util.function.ObjLongConsumer.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ObjLongConsumer, $Util.$makeClassName('java.util.function.ObjLongConsumer'));\n\n\nObjLongConsumer.$markImplementor(/** @type {Function} */ (ObjLongConsumer));\n\n\nexports \x3d ObjLongConsumer; \n//# sourceMappingURL\x3dObjLongConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjLongConsumer$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjLongConsumer$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.function.ObjLongConsumer.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst ObjLongConsumer \x3d goog.require('java.util.function.ObjLongConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_T\n * @implements {ObjLongConsumer\x3cC_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, !$Long):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(C_T, !$Long):void} */\n    this.f_$$fn__java_util_function_ObjLongConsumer_$LambdaAdaptor;\n    this.$ctor__java_util_function_ObjLongConsumer_$LambdaAdaptor__java_util_function_ObjLongConsumer_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(C_T, !$Long):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_function_ObjLongConsumer_$LambdaAdaptor__java_util_function_ObjLongConsumer_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__java_util_function_ObjLongConsumer_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {C_T} arg0\n   * @param {!$Long} arg1\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object__long(arg0, arg1) {\n    {\n      let $function \x3d this.f_$$fn__java_util_function_ObjLongConsumer_$LambdaAdaptor;\n      $function(arg0, arg1);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('java.util.function.ObjLongConsumer$$LambdaAdaptor'));\n\n\nObjLongConsumer.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dObjLongConsumer$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjLongConsumer$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjLongConsumer$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ObjLongConsumer.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _ObjLongConsumer \x3d goog.require('java.util.function.ObjLongConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('java.util.function.ObjLongConsumer.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/function/ObjLongConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.function.ObjLongConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.function.ObjLongConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('java.util.function.ObjLongConsumer.$LambdaAdaptor');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar ObjLongConsumer \x3d goog.require('java.util.function.ObjLongConsumer$impl');\nexports \x3d ObjLongConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$Builder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$Builder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream.Builder$impl');\n\n\nconst LongConsumer \x3d goog.require('java.util.function.LongConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @interface\n * @extends {LongConsumer}\n */\nclass Builder {\n  /**\n   * @abstract\n   * @override\n   * @param {!$Long} t\n   * @return {void}\n   * @public\n   */\n  m_accept__long(t) {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} t\n   * @return {Builder}\n   * @public\n   */\n  m_add__long(t) {\n  }\n  \n  /**\n   * @abstract\n   * @return {LongStream}\n   * @public\n   */\n  m_build__() {\n  }\n  \n  /**\n   * @param {Builder} $thisArg\n   * @param {!$Long} t\n   * @return {Builder}\n   * @public\n   */\n  static m_add__$default__java_util_stream_LongStream_Builder__long($thisArg, t) {\n    Builder.$clinit();\n    $thisArg.m_accept__long(t);\n    return $thisArg;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    LongConsumer.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_LongStream_Builder \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_LongStream_Builder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_LongStream_Builder;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Builder.$clinit \x3d function() {};\n    LongConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Builder, $Util.$makeClassName('java.util.stream.LongStream$Builder'));\n\n\nBuilder.$markImplementor(/** @type {Function} */ (Builder));\n\n\nexports \x3d Builder; \n//# sourceMappingURL\x3dLongStream$Builder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$Builder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$Builder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream.Builder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar Builder \x3d goog.require('java.util.stream.LongStream.Builder$impl');\nexports \x3d Builder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Builder \x3d goog.require('java.util.stream.LongStream.Builder$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\n/**\n * @implements {Builder}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3c!$Long\x3e} */\n    this.f_items__java_util_stream_LongStream_1_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Builder()'.\n   * @return {!$1}\n   * @public\n   */\n  static $create__() {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_LongStream_1__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Builder()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStream_1__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_stream_LongStream_1();\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} t\n   * @return {void}\n   * @public\n   */\n  m_accept__long(t) {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_LongStream_1_, null), \"Builder already built\");\n    $Arrays.$set(this.f_items__java_util_stream_LongStream_1_, this.f_items__java_util_stream_LongStream_1_.length, t);\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_build__() {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_LongStream_1_, null), \"Builder already built\");\n    let stream \x3d Arrays.m_stream__arrayOf_long(this.f_items__java_util_stream_LongStream_1_);\n    this.f_items__java_util_stream_LongStream_1_ \x3d null;\n    return stream;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {!$Long} arg0\n   * @return {Builder}\n   * @public\n   */\n  m_add__long(arg0) {\n    return Builder.m_add__$default__java_util_stream_LongStream_Builder__long(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {LongConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_LongConsumer(arg0) {\n    return LongConsumer.m_andThen__$default__java_util_function_LongConsumer__java_util_function_LongConsumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_LongStream_1() {\n    this.f_items__java_util_stream_LongStream_1_ \x3d /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([0], $long));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    j_l_Object.$clinit();\n    Builder.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.LongStream$1'));\n\n\nBuilder.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dLongStream$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Builder \x3d goog.require('java.util.stream.LongStream.Builder');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.LongStream.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream.$2$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $2 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfLong} */\n    this.f_next__java_util_stream_LongStream_2;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_LongStream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_LongStream_2()) {\n      if (this.f_next__java_util_stream_LongStream_2.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_next__java_util_stream_LongStream_2 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_LongStream_2() {\n    while ($Equality.$same(this.f_next__java_util_stream_LongStream_2, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** LongStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_next__java_util_stream_LongStream_2 \x3d /**@type {LongStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.LongStream$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dLongStream$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.LongStream.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream.$3$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongSupplier \x3d goog.forwardDeclare('java.util.function.LongSupplier$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongSupplier} */\n    this.$c_s;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(LongSupplier, long, int)'.\n   * @param {LongSupplier} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_util_function_LongSupplier__long__int($c_s, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_LongStream_3__java_util_function_LongSupplier__long__int($c_s, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(LongSupplier, long, int)'.\n   * @param {LongSupplier} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStream_3__java_util_function_LongSupplier__long__int($c_s, $_0, $_1) {\n    this.$c_s \x3d $c_s;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    action.m_accept__long(this.$c_s.m_getAsLong__());\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.LongStream$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dLongStream$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongSupplier \x3d goog.require('java.util.function.LongSupplier');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.LongStream.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream.$4$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongUnaryOperator \x3d goog.forwardDeclare('java.util.function.LongUnaryOperator$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $4 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_next__java_util_stream_LongStream_4_ \x3d $Long.fromInt(0);\n    /** @public {!$Long} */\n    this.$c_seed \x3d $Long.fromInt(0);\n    /** @public {LongUnaryOperator} */\n    this.$c_f;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(long, LongUnaryOperator, long, int)'.\n   * @param {!$Long} $c_seed\n   * @param {LongUnaryOperator} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$4}\n   * @public\n   */\n  static $create__long__java_util_function_LongUnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    $4.$clinit();\n    let $instance \x3d new $4();\n    $instance.$ctor__java_util_stream_LongStream_4__long__java_util_function_LongUnaryOperator__long__int($c_seed, $c_f, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(long, LongUnaryOperator, long, int)'.\n   * @param {!$Long} $c_seed\n   * @param {LongUnaryOperator} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStream_4__long__java_util_function_LongUnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    this.$c_seed \x3d $c_seed;\n    this.$c_f \x3d $c_f;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_LongStream_4();\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    action.m_accept__long(this.f_next__java_util_stream_LongStream_4_);\n    this.f_next__java_util_stream_LongStream_4_ \x3d this.$c_f.m_applyAsLong__long(this.f_next__java_util_stream_LongStream_4_);\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_LongStream_4() {\n    this.f_next__java_util_stream_LongStream_4_ \x3d this.$c_seed;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $4.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($4, $Util.$makeClassName('java.util.stream.LongStream$4'));\n\n\n\n\nexports \x3d $4; \n//# sourceMappingURL\x3dLongStream$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream.$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $4 \x3d goog.require('java.util.stream.LongStream.$4$impl');\nexports \x3d $4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$5.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$5.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream.$5$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\n\n\nclass $5 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_next__java_util_stream_LongStream_5_ \x3d $Long.fromInt(0);\n    /** @public {!$Long} */\n    this.$c_startInclusive \x3d $Long.fromInt(0);\n    /** @public {!$Long} */\n    this.$c_endInclusive \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(long, long, long, int)'.\n   * @param {!$Long} $c_startInclusive\n   * @param {!$Long} $c_endInclusive\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$5}\n   * @public\n   */\n  static $create__long__long__long__int($c_startInclusive, $c_endInclusive, $_0, $_1) {\n    $5.$clinit();\n    let $instance \x3d new $5();\n    $instance.$ctor__java_util_stream_LongStream_5__long__long__long__int($c_startInclusive, $c_endInclusive, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(long, long, long, int)'.\n   * @param {!$Long} $c_startInclusive\n   * @param {!$Long} $c_endInclusive\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStream_5__long__long__long__int($c_startInclusive, $c_endInclusive, $_0, $_1) {\n    this.$c_startInclusive \x3d $c_startInclusive;\n    this.$c_endInclusive \x3d $c_endInclusive;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_LongStream_5();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return null;\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    if ($LongUtils.$lessEquals(this.f_next__java_util_stream_LongStream_5_, this.$c_endInclusive)) {\n      let /** !$Long */ $value;\n      action.m_accept__long(($value \x3d this.f_next__java_util_stream_LongStream_5_, this.f_next__java_util_stream_LongStream_5_ \x3d $LongUtils.$plus(this.f_next__java_util_stream_LongStream_5_, $Long.fromInt(1)), $value));\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_LongStream_5() {\n    this.f_next__java_util_stream_LongStream_5_ \x3d this.$c_startInclusive;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $5;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $5);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $5.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($5, $Util.$makeClassName('java.util.stream.LongStream$5'));\n\n\n\n\nexports \x3d $5; \n//# sourceMappingURL\x3dLongStream$5.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream$5.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream$5.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream.$5');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\n\n\n// Re-exports the implementation.\nvar $5 \x3d goog.require('java.util.stream.LongStream.$5$impl');\nexports \x3d $5;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.$1$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $1 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongStreamImpl} */\n    this.f_$outer_this__java_util_stream_LongStreamImpl_1;\n    /** @public {LongStream} */\n    this.f_nextStream__java_util_stream_LongStreamImpl_1;\n    /** @public {OfLong} */\n    this.f_next__java_util_stream_LongStreamImpl_1;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(LongStreamImpl, Spliterator, long, int)'.\n   * @param {LongStreamImpl} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$1}\n   * @public\n   */\n  static $create__java_util_stream_LongStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_LongStreamImpl_1__java_util_stream_LongStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(LongStreamImpl, Spliterator, long, int)'.\n   * @param {LongStreamImpl} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_1__java_util_stream_LongStreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_LongStreamImpl_1 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_LongStreamImpl_1()) {\n      if (this.f_next__java_util_stream_LongStreamImpl_1.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_LongStreamImpl_1.m_close__();\n        this.f_nextStream__java_util_stream_LongStreamImpl_1 \x3d null;\n        this.f_next__java_util_stream_LongStreamImpl_1 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_LongStreamImpl_1() {\n    while ($Equality.$same(this.f_next__java_util_stream_LongStreamImpl_1, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** LongStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_LongStreamImpl_1 \x3d n;\n          this.f_next__java_util_stream_LongStreamImpl_1 \x3d /**@type {LongStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.LongStreamImpl$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dLongStreamImpl$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.LongStreamImpl.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.$2$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\nclass $2 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongStreamImpl} */\n    this.f_$outer_this__java_util_stream_LongStreamImpl_2;\n    /** @public {OfLong} */\n    this.f_ordered__java_util_stream_LongStreamImpl_2;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(LongStreamImpl, long, int)'.\n   * @param {LongStreamImpl} $outer_this\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_util_stream_LongStreamImpl__long__int($outer_this, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_LongStreamImpl_2__java_util_stream_LongStreamImpl__long__int($outer_this, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(LongStreamImpl, long, int)'.\n   * @param {LongStreamImpl} $outer_this\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_2__java_util_stream_LongStreamImpl__long__int($outer_this, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_LongStreamImpl_2 \x3d $outer_this;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_LongStreamImpl_2();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return null;\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    if ($Equality.$same(this.f_ordered__java_util_stream_LongStreamImpl_2, null)) {\n      let list \x3d /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([0], $long));\n      this.f_$outer_this__java_util_stream_LongStreamImpl_2.f_spliterator__java_util_stream_LongStreamImpl_.m_forEachRemaining__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ item) \x3d\x3e{\n        $Arrays.$set(list, list.length, item);\n      })));\n      Arrays.m_sort__arrayOf_long(list);\n      this.f_ordered__java_util_stream_LongStreamImpl_2 \x3d Spliterators.m_spliterator__arrayOf_long__int(list, this.m_characteristics__());\n    }\n    return this.f_ordered__java_util_stream_LongStreamImpl_2.m_tryAdvance__java_lang_Object(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_LongStreamImpl_2() {\n    this.f_ordered__java_util_stream_LongStreamImpl_2 \x3d null;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.LongStreamImpl$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dLongStreamImpl$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.LongStreamImpl.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.$3$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongStreamImpl} */\n    this.f_$outer_this__java_util_stream_LongStreamImpl_3;\n    /** @public {LongConsumer} */\n    this.$c_action;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(LongStreamImpl, LongConsumer, long, int)'.\n   * @param {LongStreamImpl} $outer_this\n   * @param {LongConsumer} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_util_stream_LongStreamImpl__java_util_function_LongConsumer__long__int($outer_this, $c_action, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_LongStreamImpl_3__java_util_stream_LongStreamImpl__java_util_function_LongConsumer__long__int($outer_this, $c_action, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(LongStreamImpl, LongConsumer, long, int)'.\n   * @param {LongStreamImpl} $outer_this\n   * @param {LongConsumer} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_3__java_util_stream_LongStreamImpl__java_util_function_LongConsumer__long__int($outer_this, $c_action, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_LongStreamImpl_3 \x3d $outer_this;\n    this.$c_action \x3d $c_action;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {LongConsumer} innerAction\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(innerAction) {\n    return this.f_$outer_this__java_util_stream_LongStreamImpl_3.f_spliterator__java_util_stream_LongStreamImpl_.m_tryAdvance__java_lang_Object(this.$c_action.m_andThen__java_util_function_LongConsumer(innerAction));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.LongStreamImpl$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dLongStreamImpl$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.LongStreamImpl.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$FilterSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$FilterSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.FilterSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongPredicate \x3d goog.forwardDeclare('java.util.function.LongPredicate$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FilterSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongPredicate} */\n    this.f_filter__java_util_stream_LongStreamImpl_FilterSpliterator_;\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_FilterSpliterator_;\n    /** @public {boolean} */\n    this.f_found__java_util_stream_LongStreamImpl_FilterSpliterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'FilterSpliterator(LongPredicate, OfLong)'.\n   * @param {LongPredicate} filter\n   * @param {OfLong} original\n   * @return {!FilterSpliterator}\n   * @public\n   */\n  static $create__java_util_function_LongPredicate__java_util_Spliterator_OfLong(filter, original) {\n    FilterSpliterator.$clinit();\n    let $instance \x3d new FilterSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_FilterSpliterator__java_util_function_LongPredicate__java_util_Spliterator_OfLong(filter, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'FilterSpliterator(LongPredicate, OfLong)'.\n   * @param {LongPredicate} filter\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_FilterSpliterator__java_util_function_LongPredicate__java_util_Spliterator_OfLong(filter, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(filter);\n    this.f_filter__java_util_stream_LongStreamImpl_FilterSpliterator_ \x3d filter;\n    this.f_original__java_util_stream_LongStreamImpl_FilterSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_LongStreamImpl_FilterSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    this.f_found__java_util_stream_LongStreamImpl_FilterSpliterator_ \x3d false;\n    while (!this.f_found__java_util_stream_LongStreamImpl_FilterSpliterator_ \x26\x26 this.f_original__java_util_stream_LongStreamImpl_FilterSpliterator_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ item) \x3d\x3e{\n      if (this.f_filter__java_util_stream_LongStreamImpl_FilterSpliterator_.m_test__long(item)) {\n        this.f_found__java_util_stream_LongStreamImpl_FilterSpliterator_ \x3d true;\n        action.m_accept__long(item);\n      }\n    })))) {\n    }\n    return this.f_found__java_util_stream_LongStreamImpl_FilterSpliterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FilterSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, FilterSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FilterSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FilterSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$FilterSpliterator'));\n\n\n\n\nexports \x3d FilterSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$FilterSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$FilterSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$FilterSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.FilterSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongPredicate \x3d goog.require('java.util.function.LongPredicate');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FilterSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.FilterSpliterator$impl');\nexports \x3d FilterSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$LimitSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$LimitSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.LimitSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass LimitSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_limit__java_util_stream_LongStreamImpl_LimitSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_LimitSpliterator_;\n    /** @public {number} */\n    this.f_position__java_util_stream_LongStreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LimitSpliterator(long, OfLong)'.\n   * @param {!$Long} limit\n   * @param {OfLong} original\n   * @return {!LimitSpliterator}\n   * @public\n   */\n  static $create__long__java_util_Spliterator_OfLong(limit, original) {\n    LimitSpliterator.$clinit();\n    let $instance \x3d new LimitSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_LimitSpliterator__long__java_util_Spliterator_OfLong(limit, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LimitSpliterator(long, OfLong)'.\n   * @param {!$Long} limit\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_LimitSpliterator__long__java_util_Spliterator_OfLong(limit, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_min__long__long(original.m_estimateSize__(), limit) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.$init__java_util_stream_LongStreamImpl_LimitSpliterator();\n    this.f_limit__java_util_stream_LongStreamImpl_LimitSpliterator_ \x3d limit;\n    this.f_original__java_util_stream_LongStreamImpl_LimitSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_LongStreamImpl_LimitSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    if ($LongUtils.$greaterEquals($Primitives.$widenIntToLong(this.f_position__java_util_stream_LongStreamImpl_LimitSpliterator_), this.f_limit__java_util_stream_LongStreamImpl_LimitSpliterator_)) {\n      return false;\n    }\n    let result \x3d this.f_original__java_util_stream_LongStreamImpl_LimitSpliterator_.m_tryAdvance__java_lang_Object(action);\n    this.f_position__java_util_stream_LongStreamImpl_LimitSpliterator_++;\n    return result;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_LongStreamImpl_LimitSpliterator() {\n    this.f_position__java_util_stream_LongStreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LimitSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LimitSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LimitSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LimitSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$LimitSpliterator'));\n\n\n\n\nexports \x3d LimitSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$LimitSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$LimitSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$LimitSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.LimitSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar LimitSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.LimitSpliterator$impl');\nexports \x3d LimitSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToDoubleSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToDoubleSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongToDoubleFunction \x3d goog.forwardDeclare('java.util.function.LongToDoubleFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToDoubleSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongToDoubleFunction} */\n    this.f_map__java_util_stream_LongStreamImpl_MapToDoubleSpliterator_;\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_MapToDoubleSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToDoubleSpliterator(LongToDoubleFunction, OfLong)'.\n   * @param {LongToDoubleFunction} map\n   * @param {OfLong} original\n   * @return {!MapToDoubleSpliterator}\n   * @public\n   */\n  static $create__java_util_function_LongToDoubleFunction__java_util_Spliterator_OfLong(map, original) {\n    MapToDoubleSpliterator.$clinit();\n    let $instance \x3d new MapToDoubleSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_MapToDoubleSpliterator__java_util_function_LongToDoubleFunction__java_util_Spliterator_OfLong(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToDoubleSpliterator(LongToDoubleFunction, OfLong)'.\n   * @param {LongToDoubleFunction} map\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_MapToDoubleSpliterator__java_util_function_LongToDoubleFunction__java_util_Spliterator_OfLong(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_LongStreamImpl_MapToDoubleSpliterator_ \x3d map;\n    this.f_original__java_util_stream_LongStreamImpl_MapToDoubleSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    return this.f_original__java_util_stream_LongStreamImpl_MapToDoubleSpliterator_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ u) \x3d\x3e{\n      action.m_accept__double(this.f_map__java_util_stream_LongStreamImpl_MapToDoubleSpliterator_.m_applyAsDouble__long(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToDoubleSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToDoubleSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToDoubleSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToDoubleSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$MapToDoubleSpliterator'));\n\n\n\n\nexports \x3d MapToDoubleSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$MapToDoubleSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToDoubleSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToDoubleSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToDoubleSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToDoubleSpliterator$impl');\nexports \x3d MapToDoubleSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToIntSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToIntSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToIntSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongToIntFunction \x3d goog.forwardDeclare('java.util.function.LongToIntFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToIntSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongToIntFunction} */\n    this.f_map__java_util_stream_LongStreamImpl_MapToIntSpliterator_;\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_MapToIntSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToIntSpliterator(LongToIntFunction, OfLong)'.\n   * @param {LongToIntFunction} map\n   * @param {OfLong} original\n   * @return {!MapToIntSpliterator}\n   * @public\n   */\n  static $create__java_util_function_LongToIntFunction__java_util_Spliterator_OfLong(map, original) {\n    MapToIntSpliterator.$clinit();\n    let $instance \x3d new MapToIntSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_MapToIntSpliterator__java_util_function_LongToIntFunction__java_util_Spliterator_OfLong(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToIntSpliterator(LongToIntFunction, OfLong)'.\n   * @param {LongToIntFunction} map\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_MapToIntSpliterator__java_util_function_LongToIntFunction__java_util_Spliterator_OfLong(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_LongStreamImpl_MapToIntSpliterator_ \x3d map;\n    this.f_original__java_util_stream_LongStreamImpl_MapToIntSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    return this.f_original__java_util_stream_LongStreamImpl_MapToIntSpliterator_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ u) \x3d\x3e{\n      action.m_accept__int(this.f_map__java_util_stream_LongStreamImpl_MapToIntSpliterator_.m_applyAsInt__long(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToIntSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToIntSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToIntSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToIntSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$MapToIntSpliterator'));\n\n\n\n\nexports \x3d MapToIntSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$MapToIntSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToIntSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToIntSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToIntSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToIntSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToIntSpliterator$impl');\nexports \x3d MapToIntSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToLongSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToLongSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToLongSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongUnaryOperator \x3d goog.forwardDeclare('java.util.function.LongUnaryOperator$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MapToLongSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongUnaryOperator} */\n    this.f_map__java_util_stream_LongStreamImpl_MapToLongSpliterator_;\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_MapToLongSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToLongSpliterator(LongUnaryOperator, OfLong)'.\n   * @param {LongUnaryOperator} map\n   * @param {OfLong} original\n   * @return {!MapToLongSpliterator}\n   * @public\n   */\n  static $create__java_util_function_LongUnaryOperator__java_util_Spliterator_OfLong(map, original) {\n    MapToLongSpliterator.$clinit();\n    let $instance \x3d new MapToLongSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_MapToLongSpliterator__java_util_function_LongUnaryOperator__java_util_Spliterator_OfLong(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToLongSpliterator(LongUnaryOperator, OfLong)'.\n   * @param {LongUnaryOperator} map\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_MapToLongSpliterator__java_util_function_LongUnaryOperator__java_util_Spliterator_OfLong(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_LongStreamImpl_MapToLongSpliterator_ \x3d map;\n    this.f_original__java_util_stream_LongStreamImpl_MapToLongSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    return this.f_original__java_util_stream_LongStreamImpl_MapToLongSpliterator_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ u) \x3d\x3e{\n      action.m_accept__long(this.f_map__java_util_stream_LongStreamImpl_MapToLongSpliterator_.m_applyAsLong__long(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToLongSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToLongSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToLongSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToLongSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$MapToLongSpliterator'));\n\n\n\n\nexports \x3d MapToLongSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$MapToLongSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToLongSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToLongSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToLongSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToLongSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToLongSpliterator$impl');\nexports \x3d MapToLongSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToObjSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToObjSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToObjSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongFunction \x3d goog.forwardDeclare('java.util.function.LongFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_MapToObjSpliterator_T\n * @extends {AbstractSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n  */\nclass MapToObjSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LongFunction\x3c?\x3e} */\n    this.f_map__java_util_stream_LongStreamImpl_MapToObjSpliterator_;\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_MapToObjSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToObjSpliterator(LongFunction, OfLong)'.\n   * @template C_MapToObjSpliterator_T\n   * @param {LongFunction\x3c?\x3e} map\n   * @param {OfLong} original\n   * @return {!MapToObjSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_LongFunction__java_util_Spliterator_OfLong(map, original) {\n    MapToObjSpliterator.$clinit();\n    let $instance \x3d new MapToObjSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_MapToObjSpliterator__java_util_function_LongFunction__java_util_Spliterator_OfLong(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToObjSpliterator(LongFunction, OfLong)'.\n   * @param {LongFunction\x3c?\x3e} map\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_MapToObjSpliterator__java_util_function_LongFunction__java_util_Spliterator_OfLong(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_LongStreamImpl_MapToObjSpliterator_ \x3d map;\n    this.f_original__java_util_stream_LongStreamImpl_MapToObjSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    return this.f_original__java_util_stream_LongStreamImpl_MapToObjSpliterator_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ u) \x3d\x3e{\n      action.m_accept__java_lang_Object(this.f_map__java_util_stream_LongStreamImpl_MapToObjSpliterator_.m_apply__long(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToObjSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToObjSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToObjSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToObjSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$MapToObjSpliterator'));\n\n\n\n\nexports \x3d MapToObjSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$MapToObjSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$MapToObjSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$MapToObjSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.MapToObjSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongFunction \x3d goog.require('java.util.function.LongFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar MapToObjSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToObjSpliterator$impl');\nexports \x3d MapToObjSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$SkipSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$SkipSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.SkipSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass SkipSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_skip__java_util_stream_LongStreamImpl_SkipSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {OfLong} */\n    this.f_original__java_util_stream_LongStreamImpl_SkipSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SkipSpliterator(long, OfLong)'.\n   * @param {!$Long} skip\n   * @param {OfLong} original\n   * @return {!SkipSpliterator}\n   * @public\n   */\n  static $create__long__java_util_Spliterator_OfLong(skip, original) {\n    SkipSpliterator.$clinit();\n    let $instance \x3d new SkipSpliterator();\n    $instance.$ctor__java_util_stream_LongStreamImpl_SkipSpliterator__long__java_util_Spliterator_OfLong(skip, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SkipSpliterator(long, OfLong)'.\n   * @param {!$Long} skip\n   * @param {OfLong} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_SkipSpliterator__long__java_util_Spliterator_OfLong(skip, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_max__long__long($Primitives.$widenIntToLong(0), $LongUtils.$minus(original.m_estimateSize__(), skip)) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.f_skip__java_util_stream_LongStreamImpl_SkipSpliterator_ \x3d skip;\n    this.f_original__java_util_stream_LongStreamImpl_SkipSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_LongStreamImpl_SkipSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    while ($LongUtils.$greater(this.f_skip__java_util_stream_LongStreamImpl_SkipSpliterator_, $Primitives.$widenIntToLong(0))) {\n      if (!this.f_original__java_util_stream_LongStreamImpl_SkipSpliterator_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ ignore) \x3d\x3e{\n      })))) {\n        return false;\n      }\n      this.f_skip__java_util_stream_LongStreamImpl_SkipSpliterator_ \x3d $LongUtils.$minus(this.f_skip__java_util_stream_LongStreamImpl_SkipSpliterator_, $Long.fromInt(1));\n    }\n    return this.f_original__java_util_stream_LongStreamImpl_SkipSpliterator_.m_tryAdvance__java_lang_Object(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SkipSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SkipSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SkipSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SkipSpliterator, $Util.$makeClassName('java.util.stream.LongStreamImpl$SkipSpliterator'));\n\n\n\n\nexports \x3d SkipSpliterator; \n//# sourceMappingURL\x3dLongStreamImpl$SkipSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$SkipSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$SkipSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.SkipSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar SkipSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.SkipSpliterator$impl');\nexports \x3d SkipSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$ValueConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$ValueConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.ValueConsumer$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst LongConsumer \x3d goog.require('java.util.function.LongConsumer$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {LongConsumer}\n  */\nclass ValueConsumer extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_value__java_util_stream_LongStreamImpl_ValueConsumer \x3d $Long.fromInt(0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ValueConsumer()'.\n   * @return {!ValueConsumer}\n   * @public\n   */\n  static $create__() {\n    ValueConsumer.$clinit();\n    let $instance \x3d new ValueConsumer();\n    $instance.$ctor__java_util_stream_LongStreamImpl_ValueConsumer__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ValueConsumer()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_ValueConsumer__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} value\n   * @return {void}\n   * @public\n   */\n  m_accept__long(value) {\n    this.f_value__java_util_stream_LongStreamImpl_ValueConsumer \x3d value;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {LongConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_LongConsumer(arg0) {\n    return LongConsumer.m_andThen__$default__java_util_function_LongConsumer__java_util_function_LongConsumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ValueConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ValueConsumer);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ValueConsumer.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    LongConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ValueConsumer, $Util.$makeClassName('java.util.stream.LongStreamImpl$ValueConsumer'));\n\n\nLongConsumer.$markImplementor(ValueConsumer);\n\n\nexports \x3d ValueConsumer; \n//# sourceMappingURL\x3dLongStreamImpl$ValueConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$ValueConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$ValueConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.ValueConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ValueConsumer \x3d goog.require('java.util.stream.LongStreamImpl.ValueConsumer$impl');\nexports \x3d ValueConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap$ChainEntry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap$ChainEntry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.LinkedHashMap.ChainEntry$impl');\n\n\nconst SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet LinkedHashMap \x3d goog.forwardDeclare('java.util.LinkedHashMap$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {SimpleEntry\x3cC_K, C_V\x3e}\n  */\nclass ChainEntry extends SimpleEntry {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LinkedHashMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_LinkedHashMap_ChainEntry;\n    /** @public {ChainEntry\x3cC_K, C_V\x3e} */\n    this.f_next__java_util_LinkedHashMap_ChainEntry_;\n    /** @public {ChainEntry\x3cC_K, C_V\x3e} */\n    this.f_prev__java_util_LinkedHashMap_ChainEntry_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ChainEntry(LinkedHashMap)'.\n   * @template C_K, C_V\n   * @param {LinkedHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!ChainEntry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_LinkedHashMap($outer_this) {\n    ChainEntry.$clinit();\n    let $instance \x3d new ChainEntry();\n    $instance.$ctor__java_util_LinkedHashMap_ChainEntry__java_util_LinkedHashMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ChainEntry(LinkedHashMap)'.\n   * @param {LinkedHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap_ChainEntry__java_util_LinkedHashMap($outer_this) {\n    this.$ctor__java_util_LinkedHashMap_ChainEntry__java_util_LinkedHashMap__java_lang_Object__java_lang_Object($outer_this, null, null);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ChainEntry(LinkedHashMap, Object, Object)'.\n   * @template C_K, C_V\n   * @param {LinkedHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {!ChainEntry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_LinkedHashMap__java_lang_Object__java_lang_Object($outer_this, key, value) {\n    ChainEntry.$clinit();\n    let $instance \x3d new ChainEntry();\n    $instance.$ctor__java_util_LinkedHashMap_ChainEntry__java_util_LinkedHashMap__java_lang_Object__java_lang_Object($outer_this, key, value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ChainEntry(LinkedHashMap, Object, Object)'.\n   * @param {LinkedHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap_ChainEntry__java_util_LinkedHashMap__java_lang_Object__java_lang_Object($outer_this, key, value) {\n    this.f_$outer_this__java_util_LinkedHashMap_ChainEntry \x3d $outer_this;\n    this.$ctor__java_util_AbstractMap_SimpleEntry__java_lang_Object__java_lang_Object(key, value);\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_addToEnd__() {\n    let tail \x3d this.f_$outer_this__java_util_LinkedHashMap_ChainEntry.f_head__java_util_LinkedHashMap_.f_prev__java_util_LinkedHashMap_ChainEntry_;\n    $Asserts.$assert((!$Equality.$same(this.f_$outer_this__java_util_LinkedHashMap_ChainEntry.f_head__java_util_LinkedHashMap_, null) \x26\x26 !$Equality.$same(tail, null)));\n    $Asserts.$assert($Equality.$same(this.f_next__java_util_LinkedHashMap_ChainEntry_, null) \x26\x26 $Equality.$same(this.f_prev__java_util_LinkedHashMap_ChainEntry_, null));\n    this.f_prev__java_util_LinkedHashMap_ChainEntry_ \x3d tail;\n    this.f_next__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_$outer_this__java_util_LinkedHashMap_ChainEntry.f_head__java_util_LinkedHashMap_;\n    tail.f_next__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_$outer_this__java_util_LinkedHashMap_ChainEntry.f_head__java_util_LinkedHashMap_.f_prev__java_util_LinkedHashMap_ChainEntry_ \x3d this;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.f_next__java_util_LinkedHashMap_ChainEntry_.f_prev__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_prev__java_util_LinkedHashMap_ChainEntry_;\n    this.f_prev__java_util_LinkedHashMap_ChainEntry_.f_next__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_next__java_util_LinkedHashMap_ChainEntry_;\n    this.f_next__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_prev__java_util_LinkedHashMap_ChainEntry_ \x3d null;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ChainEntry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ChainEntry);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ChainEntry.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    SimpleEntry.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ChainEntry, $Util.$makeClassName('java.util.LinkedHashMap$ChainEntry'));\n\n\n\n\nexports \x3d ChainEntry; \n//# sourceMappingURL\x3dLinkedHashMap$ChainEntry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap$ChainEntry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap$ChainEntry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.LinkedHashMap.ChainEntry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _LinkedHashMap \x3d goog.require('java.util.LinkedHashMap');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\n\n\n// Re-exports the implementation.\nvar ChainEntry \x3d goog.require('java.util.LinkedHashMap.ChainEntry$impl');\nexports \x3d ChainEntry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap$EntrySet$EntryIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap$EntrySet$EntryIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.LinkedHashMap.EntrySet.EntryIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ConcurrentModificationDetector \x3d goog.forwardDeclare('java.util.ConcurrentModificationDetector$impl');\nlet ChainEntry \x3d goog.forwardDeclare('java.util.LinkedHashMap.ChainEntry$impl');\nlet EntrySet \x3d goog.forwardDeclare('java.util.LinkedHashMap.EntrySet$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass EntryIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {EntrySet\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator;\n    /** @public {ChainEntry\x3cC_K, C_V\x3e} */\n    this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_;\n    /** @public {ChainEntry\x3cC_K, C_V\x3e} */\n    this.f_next__java_util_LinkedHashMap_EntrySet_EntryIterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntryIterator(EntrySet)'.\n   * @template C_K, C_V\n   * @param {EntrySet\x3cC_K, C_V\x3e} $outer_this\n   * @return {!EntryIterator\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_LinkedHashMap_EntrySet($outer_this) {\n    EntryIterator.$clinit();\n    let $instance \x3d new EntryIterator();\n    $instance.$ctor__java_util_LinkedHashMap_EntrySet_EntryIterator__java_util_LinkedHashMap_EntrySet($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntryIterator(EntrySet)'.\n   * @param {EntrySet\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap_EntrySet_EntryIterator__java_util_LinkedHashMap_EntrySet($outer_this) {\n    this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    this.f_next__java_util_LinkedHashMap_EntrySet_EntryIterator_ \x3d $outer_this.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_head__java_util_LinkedHashMap_.f_next__java_util_LinkedHashMap_ChainEntry_;\n    ConcurrentModificationDetector.m_recordLastKnownStructure__java_lang_Object__java_util_Iterator($outer_this.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_map__java_util_LinkedHashMap_, this);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return !$Equality.$same(this.f_next__java_util_LinkedHashMap_EntrySet_EntryIterator_, this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_head__java_util_LinkedHashMap_);\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_next__() {\n    ConcurrentModificationDetector.m_checkStructuralChange__java_lang_Object__java_util_Iterator(this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_map__java_util_LinkedHashMap_, this);\n    $InternalPreconditions.m_checkCriticalElement__boolean(this.m_hasNext__());\n    this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_ \x3d this.f_next__java_util_LinkedHashMap_EntrySet_EntryIterator_;\n    this.f_next__java_util_LinkedHashMap_EntrySet_EntryIterator_ \x3d this.f_next__java_util_LinkedHashMap_EntrySet_EntryIterator_.f_next__java_util_LinkedHashMap_ChainEntry_;\n    return this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    $InternalPreconditions.m_checkState__boolean(!$Equality.$same(this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_, null));\n    ConcurrentModificationDetector.m_checkStructuralChange__java_lang_Object__java_util_Iterator(this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_map__java_util_LinkedHashMap_, this);\n    this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_.m_remove__();\n    this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_map__java_util_LinkedHashMap_.remove(this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_.m_getKey__());\n    ConcurrentModificationDetector.m_recordLastKnownStructure__java_lang_Object__java_util_Iterator(this.f_$outer_this__java_util_LinkedHashMap_EntrySet_EntryIterator.f_$outer_this__java_util_LinkedHashMap_EntrySet.f_map__java_util_LinkedHashMap_, this);\n    this.f_last__java_util_LinkedHashMap_EntrySet_EntryIterator_ \x3d null;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EntryIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EntryIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntryIterator.$clinit \x3d function() {};\n    ConcurrentModificationDetector \x3d goog.module.get('java.util.ConcurrentModificationDetector$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EntryIterator, $Util.$makeClassName('java.util.LinkedHashMap$EntrySet$EntryIterator'));\n\n\nIterator.$markImplementor(EntryIterator);\n\n\nexports \x3d EntryIterator; \n//# sourceMappingURL\x3dLinkedHashMap$EntrySet$EntryIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap$EntrySet$EntryIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap$EntrySet$EntryIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.LinkedHashMap.EntrySet.EntryIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ConcurrentModificationDetector \x3d goog.require('java.util.ConcurrentModificationDetector');\nconst _ChainEntry \x3d goog.require('java.util.LinkedHashMap.ChainEntry');\nconst _EntrySet \x3d goog.require('java.util.LinkedHashMap.EntrySet');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar EntryIterator \x3d goog.require('java.util.LinkedHashMap.EntrySet.EntryIterator$impl');\nexports \x3d EntryIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap$EntrySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap$EntrySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.LinkedHashMap.EntrySet$impl');\n\n\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet LinkedHashMap \x3d goog.forwardDeclare('java.util.LinkedHashMap$impl');\nlet EntryIterator \x3d goog.forwardDeclare('java.util.LinkedHashMap.EntrySet.EntryIterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractSet\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass EntrySet extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {LinkedHashMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_LinkedHashMap_EntrySet;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntrySet(LinkedHashMap)'.\n   * @template C_K, C_V\n   * @param {LinkedHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!EntrySet\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_LinkedHashMap($outer_this) {\n    EntrySet.$clinit();\n    let $instance \x3d new EntrySet();\n    $instance.$ctor__java_util_LinkedHashMap_EntrySet__java_util_LinkedHashMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntrySet(LinkedHashMap)'.\n   * @param {LinkedHashMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap_EntrySet__java_util_LinkedHashMap($outer_this) {\n    this.f_$outer_this__java_util_LinkedHashMap_EntrySet \x3d $outer_this;\n    this.$ctor__java_util_AbstractSet__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_$outer_this__java_util_LinkedHashMap_EntrySet.clear();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    if (Entry.$isInstance(o)) {\n      return this.f_$outer_this__java_util_LinkedHashMap_EntrySet.m_containsEntry__java_util_Map_Entry_$pp_java_util(/**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(o, Entry)));\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {!EntryIterator\x3cC_K, C_V\x3e} */ (EntryIterator.$create__java_util_LinkedHashMap_EntrySet(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} entry\n   * @return {boolean}\n   * @public\n   */\n  remove(entry) {\n    if (this.contains(entry)) {\n      let key \x3d (/**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(entry, Entry))).m_getKey__();\n      this.f_$outer_this__java_util_LinkedHashMap_EntrySet.remove(key);\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_$outer_this__java_util_LinkedHashMap_EntrySet.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EntrySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EntrySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntrySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    EntryIterator \x3d goog.module.get('java.util.LinkedHashMap.EntrySet.EntryIterator$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EntrySet, $Util.$makeClassName('java.util.LinkedHashMap$EntrySet'));\n\n\n\n\nexports \x3d EntrySet; \n//# sourceMappingURL\x3dLinkedHashMap$EntrySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap$EntrySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap$EntrySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.LinkedHashMap.EntrySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _LinkedHashMap \x3d goog.require('java.util.LinkedHashMap');\nconst _EntryIterator \x3d goog.require('java.util.LinkedHashMap.EntrySet.EntryIterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar EntrySet \x3d goog.require('java.util.LinkedHashMap.EntrySet$impl');\nexports \x3d EntrySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.LinkedHashMap$impl');\n\n\nconst HashMap \x3d goog.require('java.util.HashMap$impl');\nconst Map \x3d goog.require('java.util.Map$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ChainEntry \x3d goog.forwardDeclare('java.util.LinkedHashMap.ChainEntry$impl');\nlet EntrySet \x3d goog.forwardDeclare('java.util.LinkedHashMap.EntrySet$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {HashMap\x3cC_K, C_V\x3e}\n * @implements {Map\x3cC_K, C_V\x3e}\n  */\nclass LinkedHashMap extends HashMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {boolean} */\n    this.f_accessOrder__java_util_LinkedHashMap_ \x3d false;\n    /** @public {ChainEntry\x3cC_K, C_V\x3e} */\n    this.f_head__java_util_LinkedHashMap_;\n    /** @public {HashMap\x3cC_K, ChainEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_map__java_util_LinkedHashMap_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashMap()'.\n   * @template C_K, C_V\n   * @return {!LinkedHashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__() {\n    LinkedHashMap.$clinit();\n    let $instance \x3d new LinkedHashMap();\n    $instance.$ctor__java_util_LinkedHashMap__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap__() {\n    this.$ctor__java_util_HashMap__();\n    this.$init__java_util_LinkedHashMap();\n    this.m_resetChainEntries___$p_java_util_LinkedHashMap();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashMap(int)'.\n   * @template C_K, C_V\n   * @param {number} ignored\n   * @return {!LinkedHashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__int(ignored) {\n    LinkedHashMap.$clinit();\n    let $instance \x3d new LinkedHashMap();\n    $instance.$ctor__java_util_LinkedHashMap__int(ignored);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashMap(int)'.\n   * @param {number} ignored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap__int(ignored) {\n    this.$ctor__java_util_LinkedHashMap__int__float(ignored, 0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashMap(int, float)'.\n   * @template C_K, C_V\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {!LinkedHashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__int__float(ignored, alsoIgnored) {\n    LinkedHashMap.$clinit();\n    let $instance \x3d new LinkedHashMap();\n    $instance.$ctor__java_util_LinkedHashMap__int__float(ignored, alsoIgnored);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashMap(int, float)'.\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap__int__float(ignored, alsoIgnored) {\n    this.$ctor__java_util_HashMap__int__float(ignored, alsoIgnored);\n    this.$init__java_util_LinkedHashMap();\n    this.m_resetChainEntries___$p_java_util_LinkedHashMap();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashMap(int, float, boolean)'.\n   * @template C_K, C_V\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @param {boolean} accessOrder\n   * @return {!LinkedHashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__int__float__boolean(ignored, alsoIgnored, accessOrder) {\n    LinkedHashMap.$clinit();\n    let $instance \x3d new LinkedHashMap();\n    $instance.$ctor__java_util_LinkedHashMap__int__float__boolean(ignored, alsoIgnored, accessOrder);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashMap(int, float, boolean)'.\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @param {boolean} accessOrder\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap__int__float__boolean(ignored, alsoIgnored, accessOrder) {\n    this.$ctor__java_util_HashMap__int__float(ignored, alsoIgnored);\n    this.$init__java_util_LinkedHashMap();\n    this.f_accessOrder__java_util_LinkedHashMap_ \x3d accessOrder;\n    this.m_resetChainEntries___$p_java_util_LinkedHashMap();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashMap(Map)'.\n   * @template C_K, C_V\n   * @param {Map\x3c?, ?\x3e} toBeCopied\n   * @return {!LinkedHashMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map(toBeCopied) {\n    LinkedHashMap.$clinit();\n    let $instance \x3d new LinkedHashMap();\n    $instance.$ctor__java_util_LinkedHashMap__java_util_Map(toBeCopied);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashMap(Map)'.\n   * @param {Map\x3c?, ?\x3e} toBeCopied\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashMap__java_util_Map(toBeCopied) {\n    this.$ctor__java_util_HashMap__();\n    this.$init__java_util_LinkedHashMap();\n    this.m_resetChainEntries___$p_java_util_LinkedHashMap();\n    this.putAll(toBeCopied);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_map__java_util_LinkedHashMap_.clear();\n    this.m_resetChainEntries___$p_java_util_LinkedHashMap();\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_resetChainEntries___$p_java_util_LinkedHashMap() {\n    this.f_head__java_util_LinkedHashMap_.f_prev__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_head__java_util_LinkedHashMap_;\n    this.f_head__java_util_LinkedHashMap_.f_next__java_util_LinkedHashMap_ChainEntry_ \x3d this.f_head__java_util_LinkedHashMap_;\n  }\n  \n  /**\n   * @override\n   * @return {*}\n   * @public\n   */\n  m_clone__() {\n    return /**@type {!LinkedHashMap\x3cC_K, C_V\x3e} */ (LinkedHashMap.$create__java_util_Map(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {boolean}\n   * @public\n   */\n  containsKey(key) {\n    return this.f_map__java_util_LinkedHashMap_.containsKey(key);\n  }\n  \n  /**\n   * @override\n   * @param {*} value\n   * @return {boolean}\n   * @public\n   */\n  containsValue(value) {\n    let node \x3d this.f_head__java_util_LinkedHashMap_.f_next__java_util_LinkedHashMap_ChainEntry_;\n    while (!$Equality.$same(node, this.f_head__java_util_LinkedHashMap_)) {\n      if (Objects.m_equals__java_lang_Object__java_lang_Object(node.m_getValue__(), value)) {\n        return true;\n      }\n      node \x3d node.f_next__java_util_LinkedHashMap_ChainEntry_;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n    return /**@type {!EntrySet\x3cC_K, C_V\x3e} */ (EntrySet.$create__java_util_LinkedHashMap(this));\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  get(key) {\n    let entry \x3d /**@type {ChainEntry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.f_map__java_util_LinkedHashMap_.get(key), ChainEntry));\n    if (!$Equality.$same(entry, null)) {\n      this.m_recordAccess__java_util_LinkedHashMap_ChainEntry_$p_java_util_LinkedHashMap(entry);\n      return entry.m_getValue__();\n    }\n    return null;\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n    let old \x3d /**@type {ChainEntry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.f_map__java_util_LinkedHashMap_.get(key), ChainEntry));\n    if ($Equality.$same(old, null)) {\n      let newEntry \x3d /**@type {!ChainEntry\x3cC_K, C_V\x3e} */ (ChainEntry.$create__java_util_LinkedHashMap__java_lang_Object__java_lang_Object(this, key, value));\n      this.f_map__java_util_LinkedHashMap_.put(key, newEntry);\n      newEntry.m_addToEnd__();\n      let eldest \x3d this.f_head__java_util_LinkedHashMap_.f_next__java_util_LinkedHashMap_ChainEntry_;\n      if (this.m_removeEldestEntry__java_util_Map_Entry(eldest)) {\n        eldest.m_remove__();\n        this.f_map__java_util_LinkedHashMap_.remove(eldest.m_getKey__());\n      }\n      return null;\n    } else {\n      let oldValue \x3d old.m_setValue__java_lang_Object(value);\n      this.m_recordAccess__java_util_LinkedHashMap_ChainEntry_$p_java_util_LinkedHashMap(old);\n      return oldValue;\n    }\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  remove(key) {\n    let entry \x3d /**@type {ChainEntry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.f_map__java_util_LinkedHashMap_.remove(key), ChainEntry));\n    if (!$Equality.$same(entry, null)) {\n      entry.m_remove__();\n      return entry.m_getValue__();\n    }\n    return null;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_map__java_util_LinkedHashMap_.size();\n  }\n  \n  /**\n   * @param {Entry\x3cC_K, C_V\x3e} eldest\n   * @return {boolean}\n   * @public\n   */\n  m_removeEldestEntry__java_util_Map_Entry(eldest) {\n    return false;\n  }\n  \n  /**\n   * @param {ChainEntry\x3cC_K, C_V\x3e} entry\n   * @return {void}\n   * @public\n   */\n  m_recordAccess__java_util_LinkedHashMap_ChainEntry_$p_java_util_LinkedHashMap(entry) {\n    if (this.f_accessOrder__java_util_LinkedHashMap_) {\n      entry.m_remove__();\n      entry.m_addToEnd__();\n    }\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {C_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_LinkedHashMap() {\n    this.f_head__java_util_LinkedHashMap_ \x3d /**@type {!ChainEntry\x3cC_K, C_V\x3e} */ (ChainEntry.$create__java_util_LinkedHashMap(this));\n    this.f_map__java_util_LinkedHashMap_ \x3d /**@type {!HashMap\x3cC_K, ChainEntry\x3cC_K, C_V\x3e\x3e} */ (HashMap.$create__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LinkedHashMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LinkedHashMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LinkedHashMap.$clinit \x3d function() {};\n    ChainEntry \x3d goog.module.get('java.util.LinkedHashMap.ChainEntry$impl');\n    EntrySet \x3d goog.module.get('java.util.LinkedHashMap.EntrySet$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    HashMap.$clinit();\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LinkedHashMap, $Util.$makeClassName('java.util.LinkedHashMap'));\n\n\nMap.$markImplementor(LinkedHashMap);\n\n\nexports \x3d LinkedHashMap; \n//# sourceMappingURL\x3dLinkedHashMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.LinkedHashMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _HashMap \x3d goog.require('java.util.HashMap');\nconst _Map \x3d goog.require('java.util.Map');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ChainEntry \x3d goog.require('java.util.LinkedHashMap.ChainEntry');\nconst _EntrySet \x3d goog.require('java.util.LinkedHashMap.EntrySet');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Set \x3d goog.require('java.util.Set');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar LinkedHashMap \x3d goog.require('java.util.LinkedHashMap$impl');\nexports \x3d LinkedHashMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Collectors.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Collectors.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Collectors$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet IllegalStateException \x3d goog.forwardDeclare('java.lang.IllegalStateException$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet StringBuilder \x3d goog.forwardDeclare('java.lang.StringBuilder$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet DoubleSummaryStatistics \x3d goog.forwardDeclare('java.util.DoubleSummaryStatistics$impl');\nlet HashMap \x3d goog.forwardDeclare('java.util.HashMap$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet IntSummaryStatistics \x3d goog.forwardDeclare('java.util.IntSummaryStatistics$impl');\nlet LinkedHashMap \x3d goog.forwardDeclare('java.util.LinkedHashMap$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet LongSummaryStatistics \x3d goog.forwardDeclare('java.util.LongSummaryStatistics$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Optional \x3d goog.forwardDeclare('java.util.Optional$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet StringJoiner \x3d goog.forwardDeclare('java.util.StringJoiner$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet Collector \x3d goog.forwardDeclare('java.util.stream.Collector$impl');\nlet Characteristics \x3d goog.forwardDeclare('java.util.stream.Collector.Characteristics$impl');\nlet CollectorImpl \x3d goog.forwardDeclare('java.util.stream.CollectorImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass Collectors extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToDoubleFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, ?number\x3e}\n   * @public\n   */\n  static m_averagingDouble__java_util_function_ToDoubleFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, *, ?number\x3e} */ (Collectors.m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(/**@type {Collector\x3c*, ?, DoubleSummaryStatistics\x3e} */ (Collectors.m_summarizingDouble__java_util_function_ToDoubleFunction(mapper)), j_u_function_Function.$adapt(((/** DoubleSummaryStatistics */ arg0) \x3d\x3e{\n      return arg0.m_getAverage__();\n    }))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToIntFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, ?number\x3e}\n   * @public\n   */\n  static m_averagingInt__java_util_function_ToIntFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, *, ?number\x3e} */ (Collectors.m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(/**@type {Collector\x3c*, ?, IntSummaryStatistics\x3e} */ (Collectors.m_summarizingInt__java_util_function_ToIntFunction(mapper)), j_u_function_Function.$adapt(((/** IntSummaryStatistics */ arg0) \x3d\x3e{\n      return arg0.m_getAverage__();\n    }))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToLongFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, ?number\x3e}\n   * @public\n   */\n  static m_averagingLong__java_util_function_ToLongFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, *, ?number\x3e} */ (Collectors.m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(/**@type {Collector\x3c*, ?, LongSummaryStatistics\x3e} */ (Collectors.m_summarizingLong__java_util_function_ToLongFunction(mapper)), j_u_function_Function.$adapt(((/** LongSummaryStatistics */ arg0) \x3d\x3e{\n      return arg0.m_getAverage__();\n    }))));\n  }\n  \n  /**\n   * @template M_T, M_A, M_R, M_RR\n   * @param {Collector\x3cM_T, M_A, M_R\x3e} downstream\n   * @param {j_u_function_Function\x3cM_R, M_RR\x3e} finisher\n   * @return {Collector\x3cM_T, M_A, M_RR\x3e}\n   * @public\n   */\n  static m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(downstream, finisher) {\n    Collectors.$clinit();\n    return /**@type {!CollectorImpl\x3c*, *, *\x3e} */ (CollectorImpl.$create__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(downstream.m_supplier__(), downstream.m_accumulator__(), downstream.m_combiner__(), downstream.m_finisher__().m_andThen__java_util_function_Function(finisher), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Collector\x3cM_T, ?, Long\x3e}\n   * @public\n   */\n  static m_counting__() {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Long\x3e} */ (Collectors.m_reducing__java_lang_Object__java_util_function_Function__java_util_function_BinaryOperator(Long.m_valueOf__long($Long.fromInt(0)), j_u_function_Function.$adapt(((/** * */ item) \x3d\x3e{\n      return Long.m_valueOf__long($Long.fromInt(1));\n    })), BinaryOperator.$adapt(((/** Long */ a, /** Long */ b) \x3d\x3e{\n      return Long.m_valueOf__long($LongUtils.$plus(Long.m_valueOf__long(a.m_longValue__()).m_longValue__(), b.m_longValue__()));\n    }))));\n  }\n  \n  /**\n   * @template M_T, M_K\n   * @param {j_u_function_Function\x3c?, ?\x3e} classifier\n   * @return {Collector\x3cM_T, ?, Map\x3cM_K, List\x3cM_T\x3e\x3e\x3e}\n   * @public\n   */\n  static m_groupingBy__java_util_function_Function(classifier) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3c*, List\x3c*\x3e\x3e\x3e} */ (Collectors.m_groupingBy__java_util_function_Function__java_util_stream_Collector(classifier, /**@type {Collector\x3c*, ?, List\x3c*\x3e\x3e} */ (Collectors.m_toList__())));\n  }\n  \n  /**\n   * @template M_T, M_K, M_A, M_D\n   * @param {j_u_function_Function\x3c?, ?\x3e} classifier\n   * @param {Collector\x3c?, M_A, M_D\x3e} downstream\n   * @return {Collector\x3cM_T, ?, Map\x3cM_K, M_D\x3e\x3e}\n   * @public\n   */\n  static m_groupingBy__java_util_function_Function__java_util_stream_Collector(classifier, downstream) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3c*, *\x3e\x3e} */ (Collectors.m_groupingBy__java_util_function_Function__java_util_function_Supplier__java_util_stream_Collector(classifier, /**@type {Supplier\x3cMap\x3c*, *\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      return /**@type {!HashMap\x3c*, *\x3e} */ (HashMap.$create__());\n    }))), downstream));\n  }\n  \n  /**\n   * @template M_T, M_K, M_D, M_A, M_M\n   * @param {j_u_function_Function\x3c?, ?\x3e} classifier\n   * @param {Supplier\x3cM_M\x3e} mapFactory\n   * @param {Collector\x3c?, M_A, M_D\x3e} downstream\n   * @return {Collector\x3cM_T, ?, M_M\x3e}\n   * @public\n   */\n  static m_groupingBy__java_util_function_Function__java_util_function_Supplier__java_util_stream_Collector(classifier, mapFactory, downstream) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3e} */ (Collectors.m_groupingBy0__java_util_function_Supplier__java_util_function_Function__java_util_function_Supplier__java_util_stream_Collector_$p_java_util_stream_Collectors(/**@type {Supplier\x3cMap\x3c*, List\x3c*\x3e\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      return /**@type {!LinkedHashMap\x3c*, List\x3c*\x3e\x3e} */ (LinkedHashMap.$create__());\n    }))), classifier, mapFactory, downstream));\n  }\n  \n  /**\n   * @template M_T, M_K, M_D, M_A, M_M\n   * @param {Supplier\x3cMap\x3cM_K, List\x3cM_T\x3e\x3e\x3e} supplier\n   * @param {j_u_function_Function\x3c?, ?\x3e} classifier\n   * @param {Supplier\x3cM_M\x3e} mapFactory\n   * @param {Collector\x3c?, M_A, M_D\x3e} downstream\n   * @return {Collector\x3cM_T, ?, M_M\x3e}\n   * @public\n   */\n  static m_groupingBy0__java_util_function_Supplier__java_util_function_Function__java_util_function_Supplier__java_util_stream_Collector_$p_java_util_stream_Collectors(supplier, classifier, mapFactory, downstream) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, Map\x3c*, List\x3c*\x3e\x3e, Map\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(supplier, /**@type {BiConsumer\x3cMap\x3c*, List\x3c*\x3e\x3e, *\x3e} */ (BiConsumer.$adapt(((/** Map\x3c*, List\x3c*\x3e\x3e */ m, /** * */ o) \x3d\x3e{\n      let k \x3d classifier.m_apply__java_lang_Object(o);\n      let l \x3d /**@type {List\x3c*\x3e} */ ($Casts.$to(m.get(k), List));\n      if ($Equality.$same(l, null)) {\n        l \x3d /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__());\n        m.put(k, l);\n      }\n      l.add(o);\n    }))), /**@type {BinaryOperator\x3cMap\x3c*, List\x3c*\x3e\x3e\x3e} */ (BinaryOperator.$adapt(((/** Map\x3c*, List\x3c*\x3e\x3e */ m1, /** Map\x3c*, List\x3c*\x3e\x3e */ m2) \x3d\x3e{\n      return Collectors.m_mergeAll__java_util_Map__java_util_Map__java_util_function_BinaryOperator_$p_java_util_stream_Collectors(m1, m2, /**@type {BinaryOperator\x3cList\x3c*\x3e\x3e} */ (BinaryOperator.$adapt(((/** List\x3c*\x3e */ arg0, /** List\x3c*\x3e */ arg1) \x3d\x3e{\n        return /**@type {List\x3c*\x3e} */ ($Casts.$to(Collectors.m_addAll__java_util_Collection__java_util_Collection_$p_java_util_stream_Collectors(arg0, arg1), List));\n      }))));\n    }))), /**@type {j_u_function_Function\x3cMap\x3c*, List\x3c*\x3e\x3e, Map\x3e} */ (j_u_function_Function.$adapt(((/** Map\x3c*, List\x3c*\x3e\x3e */ m$1$) \x3d\x3e{\n      let result \x3d /**@type {Map} */ ($Casts.$to(mapFactory.m_get__(), Map));\n      for (let $iterator \x3d m$1$.m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n        let entry \x3d /**@type {Entry\x3c*, List\x3c*\x3e\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n        /**@type {Map} */ (result).put(entry.m_getKey__(), Collectors.m_streamAndCollect__java_util_stream_Collector__java_util_List_$p_java_util_stream_Collectors(downstream, /**@type {List\x3c*\x3e} */ ($Casts.$to(entry.m_getValue__(), List))));\n      }\n      return result;\n    }))), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics))));\n  }\n  \n  /**\n   * @return {Collector\x3c(CharSequence|string), ?, ?string\x3e}\n   * @public\n   */\n  static m_joining__() {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c(CharSequence|string), StringBuilder, ?string\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(Supplier.$adapt((() \x3d\x3e{\n      return StringBuilder.$create__();\n    })), BiConsumer.$adapt(((/** StringBuilder */ arg0, /** (CharSequence|string) */ arg1) \x3d\x3e{\n      arg0.m_append__java_lang_CharSequence(arg1);\n    })), BinaryOperator.$adapt(((/** StringBuilder */ arg0$1$, /** StringBuilder */ arg1$1$) \x3d\x3e{\n      return arg0$1$.m_append__java_lang_CharSequence(arg1$1$);\n    })), j_u_function_Function.$adapt(((/** StringBuilder */ arg0$2$) \x3d\x3e{\n      return arg0$2$.toString();\n    })), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics))));\n  }\n  \n  /**\n   * @param {(CharSequence|string)} delimiter\n   * @return {Collector\x3c(CharSequence|string), ?, ?string\x3e}\n   * @public\n   */\n  static m_joining__java_lang_CharSequence(delimiter) {\n    Collectors.$clinit();\n    return Collectors.m_joining__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, \"\", \"\");\n  }\n  \n  /**\n   * @param {(CharSequence|string)} delimiter\n   * @param {(CharSequence|string)} prefix\n   * @param {(CharSequence|string)} suffix\n   * @return {Collector\x3c(CharSequence|string), ?, ?string\x3e}\n   * @public\n   */\n  static m_joining__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, prefix, suffix) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c(CharSequence|string), StringJoiner, ?string\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(Supplier.$adapt((() \x3d\x3e{\n      return StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(delimiter, prefix, suffix);\n    })), BiConsumer.$adapt(((/** StringJoiner */ arg0, /** (CharSequence|string) */ arg1) \x3d\x3e{\n      arg0.m_add__java_lang_CharSequence(arg1);\n    })), BinaryOperator.$adapt(((/** StringJoiner */ arg0$1$, /** StringJoiner */ arg1$1$) \x3d\x3e{\n      return arg0$1$.m_merge__java_util_StringJoiner(arg1$1$);\n    })), j_u_function_Function.$adapt(((/** StringJoiner */ arg0$2$) \x3d\x3e{\n      return arg0$2$.toString();\n    })), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics))));\n  }\n  \n  /**\n   * @template M_T, M_U, M_A, M_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @param {Collector\x3c?, M_A, M_R\x3e} downstream\n   * @return {Collector\x3cM_T, ?, M_R\x3e}\n   * @public\n   */\n  static m_mapping__java_util_function_Function__java_util_stream_Collector(mapper, downstream) {\n    Collectors.$clinit();\n    return /**@type {!CollectorImpl\x3c*, *, *\x3e} */ (CollectorImpl.$create__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(downstream.m_supplier__(), /**@type {BiConsumer\x3c*, *\x3e} */ ($Casts.$to(BiConsumer.$adapt(((/** * */ a, /** * */ t) \x3d\x3e{\n      downstream.m_accumulator__().m_accept__java_lang_Object__java_lang_Object(a, mapper.m_apply__java_lang_Object(t));\n    })), BiConsumer)), downstream.m_combiner__(), downstream.m_finisher__(), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Collector\x3cM_T, ?, Optional\x3cM_T\x3e\x3e}\n   * @public\n   */\n  static m_maxBy__java_util_Comparator(comparator) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Optional\x3c*\x3e\x3e} */ (Collectors.m_reducing__java_util_function_BinaryOperator(/**@type {BinaryOperator\x3c*\x3e} */ (BinaryOperator.m_maxBy__java_util_Comparator(comparator))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Collector\x3cM_T, ?, Optional\x3cM_T\x3e\x3e}\n   * @public\n   */\n  static m_minBy__java_util_Comparator(comparator) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Optional\x3c*\x3e\x3e} */ (Collectors.m_reducing__java_util_function_BinaryOperator(/**@type {BinaryOperator\x3c*\x3e} */ (BinaryOperator.m_minBy__java_util_Comparator(comparator))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {Collector\x3cM_T, ?, Map\x3c?boolean, List\x3cM_T\x3e\x3e\x3e}\n   * @public\n   */\n  static m_partitioningBy__java_util_function_Predicate(predicate) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3c?boolean, List\x3c*\x3e\x3e\x3e} */ (Collectors.m_partitioningBy__java_util_function_Predicate__java_util_stream_Collector(predicate, /**@type {Collector\x3c*, ?, List\x3c*\x3e\x3e} */ (Collectors.m_toList__())));\n  }\n  \n  /**\n   * @template M_T, M_D, M_A\n   * @param {Predicate\x3c?\x3e} predicate\n   * @param {Collector\x3c?, M_A, M_D\x3e} downstream\n   * @return {Collector\x3cM_T, ?, Map\x3c?boolean, M_D\x3e\x3e}\n   * @public\n   */\n  static m_partitioningBy__java_util_function_Predicate__java_util_stream_Collector(predicate, downstream) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3c?boolean, *\x3e\x3e} */ (Collectors.m_groupingBy0__java_util_function_Supplier__java_util_function_Function__java_util_function_Supplier__java_util_stream_Collector_$p_java_util_stream_Collectors(/**@type {Supplier\x3cMap\x3c?boolean, List\x3c*\x3e\x3e\x3e} */ (Collectors.m_partitionSupplier___$p_java_util_stream_Collectors()), j_u_function_Function.$adapt(((/** * */ arg0) \x3d\x3e{\n      return predicate.m_test__java_lang_Object(arg0);\n    })), /**@type {Supplier\x3cMap\x3c?boolean, *\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      return /**@type {!HashMap\x3c?boolean, *\x3e} */ (HashMap.$create__());\n    }))), downstream));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Supplier\x3cMap\x3c?boolean, List\x3cM_T\x3e\x3e\x3e}\n   * @public\n   */\n  static m_partitionSupplier___$p_java_util_stream_Collectors() {\n    Collectors.$clinit();\n    return /**@type {Supplier\x3cMap\x3c?boolean, List\x3c*\x3e\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      let partition \x3d /**@type {!LinkedHashMap\x3c?boolean, List\x3c*\x3e\x3e} */ (LinkedHashMap.$create__());\n      partition.put(false, /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__()));\n      partition.put(true, /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__()));\n      return partition;\n    })));\n  }\n  \n  /**\n   * @template M_T\n   * @param {BinaryOperator\x3cM_T\x3e} op\n   * @return {Collector\x3cM_T, ?, Optional\x3cM_T\x3e\x3e}\n   * @public\n   */\n  static m_reducing__java_util_function_BinaryOperator(op) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Optional\x3c*\x3e\x3e} */ (Collectors.m_reducing__java_lang_Object__java_util_function_Function__java_util_function_BinaryOperator(/**@type {Optional\x3c*\x3e} */ (Optional.m_empty__()), j_u_function_Function.$adapt(((/** * */ arg0) \x3d\x3e{\n      return /**@type {Optional\x3c*\x3e} */ (Optional.m_of__java_lang_Object(arg0));\n    })), /**@type {BinaryOperator\x3cOptional\x3c*\x3e\x3e} */ (BinaryOperator.$adapt(((/** Optional\x3c*\x3e */ a, /** Optional\x3c*\x3e */ b) \x3d\x3e{\n      if (!a.m_isPresent__()) {\n        return b;\n      }\n      if (!b.m_isPresent__()) {\n        return a;\n      }\n      return /**@type {Optional\x3c*\x3e} */ (Optional.m_of__java_lang_Object(op.m_apply__java_lang_Object__java_lang_Object(a.m_get__(), b.m_get__())));\n    })))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} identity\n   * @param {BinaryOperator\x3cM_T\x3e} op\n   * @return {Collector\x3cM_T, ?, M_T\x3e}\n   * @public\n   */\n  static m_reducing__java_lang_Object__java_util_function_BinaryOperator(identity, op) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, *\x3e} */ (Collectors.m_reducing__java_lang_Object__java_util_function_Function__java_util_function_BinaryOperator(identity, /**@type {j_u_function_Function\x3c*, *\x3e} */ (j_u_function_Function.m_identity__()), op));\n  }\n  \n  /**\n   * @template M_T, M_U\n   * @param {M_U} identity\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @param {BinaryOperator\x3cM_U\x3e} op\n   * @return {Collector\x3cM_T, ?, M_U\x3e}\n   * @public\n   */\n  static m_reducing__java_lang_Object__java_util_function_Function__java_util_function_BinaryOperator(identity, mapper, op) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, Array\x3c*\x3e, *\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(Supplier.$adapt((() \x3d\x3e{\n      return [identity];\n    })), /**@type {BiConsumer\x3cArray\x3c*\x3e, *\x3e} */ (BiConsumer.$adapt(((/** Array\x3c*\x3e */ u, /** * */ t) \x3d\x3e{\n      $Arrays.$set(u, 0, op.m_apply__java_lang_Object__java_lang_Object(/**@type {*} */ ($Casts.$to(u[0], j_l_Object)), mapper.m_apply__java_lang_Object(t)));\n    }))), BinaryOperator.$adapt(((/** Array\x3c*\x3e */ u1, /** Array\x3c*\x3e */ u2) \x3d\x3e{\n      $Arrays.$set(u1, 0, op.m_apply__java_lang_Object__java_lang_Object(/**@type {*} */ ($Casts.$to(u1[0], j_l_Object)), /**@type {*} */ ($Casts.$to(u2[0], j_l_Object))));\n      return u1;\n    })), /**@type {j_u_function_Function\x3cArray\x3c*\x3e, *\x3e} */ (j_u_function_Function.$adapt(((/** Array\x3c*\x3e */ a) \x3d\x3e{\n      return /**@type {*} */ ($Casts.$to(a[0], j_l_Object));\n    }))), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToDoubleFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, DoubleSummaryStatistics\x3e}\n   * @public\n   */\n  static m_summarizingDouble__java_util_function_ToDoubleFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, DoubleSummaryStatistics, DoubleSummaryStatistics\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(Supplier.$adapt((() \x3d\x3e{\n      return DoubleSummaryStatistics.$create__();\n    })), /**@type {BiConsumer\x3cDoubleSummaryStatistics, *\x3e} */ (BiConsumer.$adapt(((/** DoubleSummaryStatistics */ stats, /** * */ item) \x3d\x3e{\n      stats.m_accept__double(mapper.m_applyAsDouble__java_lang_Object(item));\n    }))), BinaryOperator.$adapt(((/** DoubleSummaryStatistics */ t, /** DoubleSummaryStatistics */ u) \x3d\x3e{\n      t.m_combine__java_util_DoubleSummaryStatistics(u);\n      return t;\n    })), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.f_UNORDERED__java_util_stream_Collector_Characteristics, Characteristics.f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToIntFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, IntSummaryStatistics\x3e}\n   * @public\n   */\n  static m_summarizingInt__java_util_function_ToIntFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, IntSummaryStatistics, IntSummaryStatistics\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(Supplier.$adapt((() \x3d\x3e{\n      return IntSummaryStatistics.$create__();\n    })), /**@type {BiConsumer\x3cIntSummaryStatistics, *\x3e} */ (BiConsumer.$adapt(((/** IntSummaryStatistics */ stats, /** * */ item) \x3d\x3e{\n      stats.m_accept__int(mapper.m_applyAsInt__java_lang_Object(item));\n    }))), BinaryOperator.$adapt(((/** IntSummaryStatistics */ t, /** IntSummaryStatistics */ u) \x3d\x3e{\n      t.m_combine__java_util_IntSummaryStatistics(u);\n      return t;\n    })), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.f_UNORDERED__java_util_stream_Collector_Characteristics, Characteristics.f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToLongFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, LongSummaryStatistics\x3e}\n   * @public\n   */\n  static m_summarizingLong__java_util_function_ToLongFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, LongSummaryStatistics, LongSummaryStatistics\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(Supplier.$adapt((() \x3d\x3e{\n      return LongSummaryStatistics.$create__();\n    })), /**@type {BiConsumer\x3cLongSummaryStatistics, *\x3e} */ (BiConsumer.$adapt(((/** LongSummaryStatistics */ stats, /** * */ item) \x3d\x3e{\n      stats.m_accept__long(mapper.m_applyAsLong__java_lang_Object(item));\n    }))), BinaryOperator.$adapt(((/** LongSummaryStatistics */ t, /** LongSummaryStatistics */ u) \x3d\x3e{\n      t.m_combine__java_util_LongSummaryStatistics(u);\n      return t;\n    })), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.f_UNORDERED__java_util_stream_Collector_Characteristics, Characteristics.f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToDoubleFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, ?number\x3e}\n   * @public\n   */\n  static m_summingDouble__java_util_function_ToDoubleFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, *, ?number\x3e} */ (Collectors.m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(/**@type {Collector\x3c*, ?, DoubleSummaryStatistics\x3e} */ (Collectors.m_summarizingDouble__java_util_function_ToDoubleFunction(mapper)), j_u_function_Function.$adapt(((/** DoubleSummaryStatistics */ arg0) \x3d\x3e{\n      return arg0.m_getSum__();\n    }))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToIntFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, Integer\x3e}\n   * @public\n   */\n  static m_summingInt__java_util_function_ToIntFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, *, Integer\x3e} */ (Collectors.m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(/**@type {Collector\x3c*, ?, IntSummaryStatistics\x3e} */ (Collectors.m_summarizingInt__java_util_function_ToIntFunction(mapper)), j_u_function_Function.$adapt(((/** IntSummaryStatistics */ intSummaryStatistics) \x3d\x3e{\n      return Integer.m_valueOf__int($Primitives.$narrowLongToInt(intSummaryStatistics.m_getSum__()));\n    }))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {ToLongFunction\x3c?\x3e} mapper\n   * @return {Collector\x3cM_T, ?, Long\x3e}\n   * @public\n   */\n  static m_summingLong__java_util_function_ToLongFunction(mapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, *, Long\x3e} */ (Collectors.m_collectingAndThen__java_util_stream_Collector__java_util_function_Function(/**@type {Collector\x3c*, ?, LongSummaryStatistics\x3e} */ (Collectors.m_summarizingLong__java_util_function_ToLongFunction(mapper)), j_u_function_Function.$adapt(((/** LongSummaryStatistics */ arg0) \x3d\x3e{\n      return Long.m_valueOf__long(arg0.m_getSum__());\n    }))));\n  }\n  \n  /**\n   * @template M_T, M_C\n   * @param {Supplier\x3cM_C\x3e} collectionFactory\n   * @return {Collector\x3cM_T, ?, M_C\x3e}\n   * @public\n   */\n  static m_toCollection__java_util_function_Supplier(collectionFactory) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, Collection, Collection\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(collectionFactory, /**@type {BiConsumer\x3cCollection, *\x3e} */ (BiConsumer.$adapt(((/** Collection */ arg0, /** * */ arg1) \x3d\x3e{\n      /**@type {Collection} */ (arg0).add(arg1);\n    }))), /**@type {BinaryOperator\x3cCollection\x3e} */ (BinaryOperator.$adapt(((/** Collection */ c1, /** Collection */ c2) \x3d\x3e{\n      return Collectors.m_addAll__java_util_Collection__java_util_Collection_$p_java_util_stream_Collectors(c1, c2);\n    }))), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Collector\x3cM_T, ?, List\x3cM_T\x3e\x3e}\n   * @public\n   */\n  static m_toList__() {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, List\x3c*\x3e\x3e} */ (Collectors.m_toCollection__java_util_function_Supplier(/**@type {Supplier\x3cList\x3c*\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      return /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__());\n    })))));\n  }\n  \n  /**\n   * @template M_T, M_K, M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyMapper\n   * @param {j_u_function_Function\x3c?, ?\x3e} valueMapper\n   * @return {Collector\x3cM_T, ?, Map\x3cM_K, M_U\x3e\x3e}\n   * @public\n   */\n  static m_toMap__java_util_function_Function__java_util_function_Function(keyMapper, valueMapper) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3c*, *\x3e\x3e} */ (Collectors.m_toMap__java_util_function_Function__java_util_function_Function__java_util_function_BinaryOperator(keyMapper, valueMapper, /**@type {BinaryOperator\x3c*\x3e} */ (BinaryOperator.$adapt(((/** * */ m1, /** * */ m2) \x3d\x3e{\n      throw $Exceptions.toJs(IllegalStateException.$create__java_lang_String(\"Can't assign multiple values to the same key\"));\n    })))));\n  }\n  \n  /**\n   * @template M_T, M_K, M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyMapper\n   * @param {j_u_function_Function\x3c?, ?\x3e} valueMapper\n   * @param {BinaryOperator\x3cM_U\x3e} mergeFunction\n   * @return {Collector\x3cM_T, ?, Map\x3cM_K, M_U\x3e\x3e}\n   * @public\n   */\n  static m_toMap__java_util_function_Function__java_util_function_Function__java_util_function_BinaryOperator(keyMapper, valueMapper, mergeFunction) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, ?, Map\x3c*, *\x3e\x3e} */ (Collectors.m_toMap__java_util_function_Function__java_util_function_Function__java_util_function_BinaryOperator__java_util_function_Supplier(keyMapper, valueMapper, mergeFunction, /**@type {Supplier\x3cMap\x3c*, *\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      return /**@type {!HashMap\x3c*, *\x3e} */ (HashMap.$create__());\n    })))));\n  }\n  \n  /**\n   * @template M_T, M_K, M_U, M_M\n   * @param {j_u_function_Function\x3c?, ?\x3e} keyMapper\n   * @param {j_u_function_Function\x3c?, ?\x3e} valueMapper\n   * @param {BinaryOperator\x3cM_U\x3e} mergeFunction\n   * @param {Supplier\x3cM_M\x3e} mapSupplier\n   * @return {Collector\x3cM_T, ?, M_M\x3e}\n   * @public\n   */\n  static m_toMap__java_util_function_Function__java_util_function_Function__java_util_function_BinaryOperator__java_util_function_Supplier(keyMapper, valueMapper, mergeFunction, mapSupplier) {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, Map, Map\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(mapSupplier, /**@type {BiConsumer\x3cMap, *\x3e} */ (BiConsumer.$adapt(((/** Map */ map, /** * */ item) \x3d\x3e{\n      let key \x3d keyMapper.m_apply__java_lang_Object(item);\n      let newValue \x3d valueMapper.m_apply__java_lang_Object(item);\n      if (/**@type {Map} */ (map).containsKey(key)) {\n        /**@type {Map} */ (map).put(key, mergeFunction.m_apply__java_lang_Object__java_lang_Object(/**@type {Map} */ (map).get(key), newValue));\n      } else {\n        /**@type {Map} */ (map).put(key, newValue);\n      }\n    }))), /**@type {BinaryOperator\x3cMap\x3e} */ (BinaryOperator.$adapt(((/** Map */ m1, /** Map */ m2) \x3d\x3e{\n      return Collectors.m_mergeAll__java_util_Map__java_util_Map__java_util_function_BinaryOperator_$p_java_util_stream_Collectors(m1, m2, mergeFunction);\n    }))), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics], Characteristics))));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Collector\x3cM_T, ?, Set\x3cM_T\x3e\x3e}\n   * @public\n   */\n  static m_toSet__() {\n    Collectors.$clinit();\n    return /**@type {Collector\x3c*, HashSet\x3c*\x3e, Set\x3c*\x3e\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__java_util_function_Function__arrayOf_java_util_stream_Collector_Characteristics(/**@type {Supplier\x3cHashSet\x3c*\x3e\x3e} */ (Supplier.$adapt((() \x3d\x3e{\n      return /**@type {!HashSet\x3c*\x3e} */ (HashSet.$create__());\n    }))), /**@type {BiConsumer\x3cHashSet\x3c*\x3e, *\x3e} */ (BiConsumer.$adapt(((/** HashSet\x3c*\x3e */ arg0, /** * */ arg1) \x3d\x3e{\n      arg0.add(arg1);\n    }))), /**@type {BinaryOperator\x3cHashSet\x3c*\x3e\x3e} */ (BinaryOperator.$adapt(((/** HashSet\x3c*\x3e */ c1, /** HashSet\x3c*\x3e */ c2) \x3d\x3e{\n      return /**@type {HashSet\x3c*\x3e} */ ($Casts.$to(Collectors.m_addAll__java_util_Collection__java_util_Collection_$p_java_util_stream_Collectors(c1, c2), HashSet));\n    }))), /**@type {j_u_function_Function\x3cHashSet\x3c*\x3e, Set\x3c*\x3e\x3e} */ (j_u_function_Function.$adapt(((/** HashSet\x3c*\x3e */ s) \x3d\x3e{\n      return s;\n    }))), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([Characteristics.f_UNORDERED__java_util_stream_Collector_Characteristics, Characteristics.f_IDENTITY_FINISH__java_util_stream_Collector_Characteristics], Characteristics))));\n  }\n  \n  /**\n   * @template M_T, M_D, M_A\n   * @param {Collector\x3c?, M_A, M_D\x3e} downstream\n   * @param {List\x3cM_T\x3e} list\n   * @return {M_D}\n   * @public\n   */\n  static m_streamAndCollect__java_util_stream_Collector__java_util_List_$p_java_util_stream_Collectors(downstream, list) {\n    Collectors.$clinit();\n    let a \x3d downstream.m_supplier__().m_get__();\n    for (let $iterator \x3d list.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let t \x3d $iterator.m_next__();\n      downstream.m_accumulator__().m_accept__java_lang_Object__java_lang_Object(a, t);\n    }\n    return downstream.m_finisher__().m_apply__java_lang_Object(a);\n  }\n  \n  /**\n   * @template M_K, M_V, M_M\n   * @param {M_M} m1\n   * @param {M_M} m2\n   * @param {BinaryOperator\x3cM_V\x3e} mergeFunction\n   * @return {M_M}\n   * @public\n   */\n  static m_mergeAll__java_util_Map__java_util_Map__java_util_function_BinaryOperator_$p_java_util_stream_Collectors(m1, m2, mergeFunction) {\n    Collectors.$clinit();\n    for (let $iterator \x3d /**@type {Map} */ (m2).m_entrySet__().m_iterator__(); $iterator.m_hasNext__(); ) {\n      let entry \x3d /**@type {Entry\x3c*, *\x3e} */ ($Casts.$to($iterator.m_next__(), Entry));\n      /**@type {Map} */ (m1).m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(entry.m_getKey__(), entry.m_getValue__(), mergeFunction);\n    }\n    return m1;\n  }\n  \n  /**\n   * @template M_T, M_C\n   * @param {M_C} collection\n   * @param {Collection\x3cM_T\x3e} items\n   * @return {M_C}\n   * @public\n   */\n  static m_addAll__java_util_Collection__java_util_Collection_$p_java_util_stream_Collectors(collection, items) {\n    Collectors.$clinit();\n    /**@type {Collection} */ (collection).addAll(items);\n    return collection;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Collectors()'.\n   * @return {!Collectors}\n   * @public\n   */\n  static $create__() {\n    Collectors.$clinit();\n    let $instance \x3d new Collectors();\n    $instance.$ctor__java_util_stream_Collectors__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Collectors()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_Collectors__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Collectors;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Collectors);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Collectors.$clinit \x3d function() {};\n    IllegalStateException \x3d goog.module.get('java.lang.IllegalStateException$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    StringBuilder \x3d goog.module.get('java.lang.StringBuilder$impl');\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    DoubleSummaryStatistics \x3d goog.module.get('java.util.DoubleSummaryStatistics$impl');\n    HashMap \x3d goog.module.get('java.util.HashMap$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    IntSummaryStatistics \x3d goog.module.get('java.util.IntSummaryStatistics$impl');\n    LinkedHashMap \x3d goog.module.get('java.util.LinkedHashMap$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    LongSummaryStatistics \x3d goog.module.get('java.util.LongSummaryStatistics$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Optional \x3d goog.module.get('java.util.Optional$impl');\n    StringJoiner \x3d goog.module.get('java.util.StringJoiner$impl');\n    BiConsumer \x3d goog.module.get('java.util.function.BiConsumer$impl');\n    BinaryOperator \x3d goog.module.get('java.util.function.BinaryOperator$impl');\n    j_u_function_Function \x3d goog.module.get('java.util.function.Function$impl');\n    Supplier \x3d goog.module.get('java.util.function.Supplier$impl');\n    Collector \x3d goog.module.get('java.util.stream.Collector$impl');\n    Characteristics \x3d goog.module.get('java.util.stream.Collector.Characteristics$impl');\n    CollectorImpl \x3d goog.module.get('java.util.stream.CollectorImpl$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Collectors, $Util.$makeClassName('java.util.stream.Collectors'));\n\n\n\n\nexports \x3d Collectors; \n//# sourceMappingURL\x3dCollectors.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Collectors.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Collectors.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Collectors');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _IllegalStateException \x3d goog.require('java.lang.IllegalStateException');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _StringBuilder \x3d goog.require('java.lang.StringBuilder');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _DoubleSummaryStatistics \x3d goog.require('java.util.DoubleSummaryStatistics');\nconst _HashMap \x3d goog.require('java.util.HashMap');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _IntSummaryStatistics \x3d goog.require('java.util.IntSummaryStatistics');\nconst _LinkedHashMap \x3d goog.require('java.util.LinkedHashMap');\nconst _List \x3d goog.require('java.util.List');\nconst _LongSummaryStatistics \x3d goog.require('java.util.LongSummaryStatistics');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Optional \x3d goog.require('java.util.Optional');\nconst _Set \x3d goog.require('java.util.Set');\nconst _StringJoiner \x3d goog.require('java.util.StringJoiner');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _Collector \x3d goog.require('java.util.stream.Collector');\nconst _Characteristics \x3d goog.require('java.util.stream.Collector.Characteristics');\nconst _CollectorImpl \x3d goog.require('java.util.stream.CollectorImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar Collectors \x3d goog.require('java.util.stream.Collectors$impl');\nexports \x3d Collectors;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.$1$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template M_R, C_T\n * @extends {AbstractSpliterator\x3cM_R\x3e}\n  */\nclass $1 extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {StreamImpl\x3cC_T\x3e} */\n    this.f_$outer_this__java_util_stream_StreamImpl_1;\n    /** @public {Stream\x3c?\x3e} */\n    this.f_nextStream__java_util_stream_StreamImpl_1;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.f_next__java_util_stream_StreamImpl_1;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @template M_R, C_T\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$1\x3cM_R, C_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_StreamImpl_1__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_1__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_StreamImpl_1 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_1()) {\n      if (this.f_next__java_util_stream_StreamImpl_1.m_tryAdvance__java_util_function_Consumer(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_StreamImpl_1.m_close__();\n        this.f_nextStream__java_util_stream_StreamImpl_1 \x3d null;\n        this.f_next__java_util_stream_StreamImpl_1 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_1() {\n    while ($Equality.$same(this.f_next__java_util_stream_StreamImpl_1, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** Stream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_StreamImpl_1 \x3d n;\n          this.f_next__java_util_stream_StreamImpl_1 \x3d /**@type {Stream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.StreamImpl$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dStreamImpl$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.StreamImpl.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.$2$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_T\n  */\nclass $2 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {StreamImpl\x3cC_T\x3e} */\n    this.f_$outer_this__java_util_stream_StreamImpl_2;\n    /** @public {IntStream} */\n    this.f_nextStream__java_util_stream_StreamImpl_2;\n    /** @public {OfInt} */\n    this.f_next__java_util_stream_StreamImpl_2;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @template C_T\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_StreamImpl_2__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_2__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_StreamImpl_2 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_2()) {\n      if (this.f_next__java_util_stream_StreamImpl_2.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_StreamImpl_2.m_close__();\n        this.f_nextStream__java_util_stream_StreamImpl_2 \x3d null;\n        this.f_next__java_util_stream_StreamImpl_2 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_2() {\n    while ($Equality.$same(this.f_next__java_util_stream_StreamImpl_2, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** IntStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_StreamImpl_2 \x3d n;\n          this.f_next__java_util_stream_StreamImpl_2 \x3d /**@type {IntStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.StreamImpl$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dStreamImpl$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.StreamImpl.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.$3$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_T\n  */\nclass $3 extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {StreamImpl\x3cC_T\x3e} */\n    this.f_$outer_this__java_util_stream_StreamImpl_3;\n    /** @public {LongStream} */\n    this.f_nextStream__java_util_stream_StreamImpl_3;\n    /** @public {OfLong} */\n    this.f_next__java_util_stream_StreamImpl_3;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractLongSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @template C_T\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_StreamImpl_3__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractLongSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_3__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_StreamImpl_3 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_3()) {\n      if (this.f_next__java_util_stream_StreamImpl_3.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_StreamImpl_3.m_close__();\n        this.f_nextStream__java_util_stream_StreamImpl_3 \x3d null;\n        this.f_next__java_util_stream_StreamImpl_3 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_3() {\n    while ($Equality.$same(this.f_next__java_util_stream_StreamImpl_3, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** LongStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_StreamImpl_3 \x3d n;\n          this.f_next__java_util_stream_StreamImpl_3 \x3d /**@type {LongStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.StreamImpl$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dStreamImpl$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.StreamImpl.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.$4$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_T\n  */\nclass $4 extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {StreamImpl\x3cC_T\x3e} */\n    this.f_$outer_this__java_util_stream_StreamImpl_4;\n    /** @public {DoubleStream} */\n    this.f_nextStream__java_util_stream_StreamImpl_4;\n    /** @public {OfDouble} */\n    this.f_next__java_util_stream_StreamImpl_4;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractDoubleSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @template C_T\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$4\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    $4.$clinit();\n    let $instance \x3d new $4();\n    $instance.$ctor__java_util_stream_StreamImpl_4__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractDoubleSpliterator(StreamImpl, Spliterator, long, int)'.\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_4__java_util_stream_StreamImpl__java_util_Spliterator__long__int($outer_this, $c_spliteratorOfStreams, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_StreamImpl_4 \x3d $outer_this;\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_4()) {\n      if (this.f_next__java_util_stream_StreamImpl_4.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_nextStream__java_util_stream_StreamImpl_4.m_close__();\n        this.f_nextStream__java_util_stream_StreamImpl_4 \x3d null;\n        this.f_next__java_util_stream_StreamImpl_4 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_StreamImpl_4() {\n    while ($Equality.$same(this.f_next__java_util_stream_StreamImpl_4, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** DoubleStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_nextStream__java_util_stream_StreamImpl_4 \x3d n;\n          this.f_next__java_util_stream_StreamImpl_4 \x3d /**@type {DoubleStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $4.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($4, $Util.$makeClassName('java.util.stream.StreamImpl$4'));\n\n\n\n\nexports \x3d $4; \n//# sourceMappingURL\x3dStreamImpl$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $4 \x3d goog.require('java.util.stream.StreamImpl.$4$impl');\nexports \x3d $4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$5.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$5.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.$5$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_T\n * @extends {AbstractSpliterator\x3cC_T\x3e}\n  */\nclass $5 extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {StreamImpl\x3cC_T\x3e} */\n    this.f_$outer_this__java_util_stream_StreamImpl_5;\n    /** @public {Spliterator\x3cC_T\x3e} */\n    this.f_ordered__java_util_stream_StreamImpl_5;\n    /** @public {Comparator\x3c?\x3e} */\n    this.$c_comparator;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSpliterator(StreamImpl, Comparator, long, int)'.\n   * @template C_T\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Comparator\x3c?\x3e} $c_comparator\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$5\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_StreamImpl__java_util_Comparator__long__int($outer_this, $c_comparator, $_0, $_1) {\n    $5.$clinit();\n    let $instance \x3d new $5();\n    $instance.$ctor__java_util_stream_StreamImpl_5__java_util_stream_StreamImpl__java_util_Comparator__long__int($outer_this, $c_comparator, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSpliterator(StreamImpl, Comparator, long, int)'.\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Comparator\x3c?\x3e} $c_comparator\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_5__java_util_stream_StreamImpl__java_util_Comparator__long__int($outer_this, $c_comparator, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_StreamImpl_5 \x3d $outer_this;\n    this.$c_comparator \x3d $c_comparator;\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_StreamImpl_5();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return $Equality.$same(this.$c_comparator, /**@type {Comparator\x3c?\x3e} */ (Comparator.m_naturalOrder__())) ? null : this.$c_comparator;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    if ($Equality.$same(this.f_ordered__java_util_stream_StreamImpl_5, null)) {\n      let list \x3d /**@type {!ArrayList\x3cC_T\x3e} */ (ArrayList.$create__());\n      this.f_$outer_this__java_util_stream_StreamImpl_5.f_spliterator__java_util_stream_StreamImpl_.m_forEachRemaining__java_util_function_Consumer(Consumer.$adapt(((/** * */ arg0) \x3d\x3e{\n        list.add(arg0);\n      })));\n      Collections.m_sort__java_util_List__java_util_Comparator(list, this.$c_comparator);\n      this.f_ordered__java_util_stream_StreamImpl_5 \x3d list.m_spliterator__();\n    }\n    return this.f_ordered__java_util_stream_StreamImpl_5.m_tryAdvance__java_util_function_Consumer(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_StreamImpl_5() {\n    this.f_ordered__java_util_stream_StreamImpl_5 \x3d null;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $5;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $5);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $5.$clinit \x3d function() {};\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($5, $Util.$makeClassName('java.util.stream.StreamImpl$5'));\n\n\n\n\nexports \x3d $5; \n//# sourceMappingURL\x3dStreamImpl$5.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$5.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$5.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.$5');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $5 \x3d goog.require('java.util.stream.StreamImpl.$5$impl');\nexports \x3d $5;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$6.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$6.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.$6$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_T\n * @extends {AbstractSpliterator\x3cC_T\x3e}\n  */\nclass $6 extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {StreamImpl\x3cC_T\x3e} */\n    this.f_$outer_this__java_util_stream_StreamImpl_6;\n    /** @public {Consumer\x3c?\x3e} */\n    this.$c_action;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSpliterator(StreamImpl, Consumer, long, int)'.\n   * @template C_T\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Consumer\x3c?\x3e} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$6\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_StreamImpl__java_util_function_Consumer__long__int($outer_this, $c_action, $_0, $_1) {\n    $6.$clinit();\n    let $instance \x3d new $6();\n    $instance.$ctor__java_util_stream_StreamImpl_6__java_util_stream_StreamImpl__java_util_function_Consumer__long__int($outer_this, $c_action, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSpliterator(StreamImpl, Consumer, long, int)'.\n   * @param {StreamImpl\x3cC_T\x3e} $outer_this\n   * @param {Consumer\x3c?\x3e} $c_action\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_6__java_util_stream_StreamImpl__java_util_function_Consumer__long__int($outer_this, $c_action, $_0, $_1) {\n    this.f_$outer_this__java_util_stream_StreamImpl_6 \x3d $outer_this;\n    this.$c_action \x3d $c_action;\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} innerAction\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(innerAction) {\n    return this.f_$outer_this__java_util_stream_StreamImpl_6.f_spliterator__java_util_stream_StreamImpl_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ item) \x3d\x3e{\n      this.$c_action.m_accept__java_lang_Object(item);\n      innerAction.m_accept__java_lang_Object(item);\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $6;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $6);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $6.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($6, $Util.$makeClassName('java.util.stream.StreamImpl$6'));\n\n\n\n\nexports \x3d $6; \n//# sourceMappingURL\x3dStreamImpl$6.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$6.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$6.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.$6');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $6 \x3d goog.require('java.util.stream.StreamImpl.$6$impl');\nexports \x3d $6;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$FilterSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$FilterSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.FilterSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_FilterSpliterator_T\n * @extends {AbstractSpliterator\x3cC_FilterSpliterator_T\x3e}\n  */\nclass FilterSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Predicate\x3c?\x3e} */\n    this.f_filter__java_util_stream_StreamImpl_FilterSpliterator_;\n    /** @public {Spliterator\x3cC_FilterSpliterator_T\x3e} */\n    this.f_original__java_util_stream_StreamImpl_FilterSpliterator_;\n    /** @public {boolean} */\n    this.f_found__java_util_stream_StreamImpl_FilterSpliterator_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'FilterSpliterator(Predicate, Spliterator)'.\n   * @template C_FilterSpliterator_T\n   * @param {Predicate\x3c?\x3e} filter\n   * @param {Spliterator\x3cC_FilterSpliterator_T\x3e} original\n   * @return {!FilterSpliterator\x3cC_FilterSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_Predicate__java_util_Spliterator(filter, original) {\n    FilterSpliterator.$clinit();\n    let $instance \x3d new FilterSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_FilterSpliterator__java_util_function_Predicate__java_util_Spliterator(filter, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'FilterSpliterator(Predicate, Spliterator)'.\n   * @param {Predicate\x3c?\x3e} filter\n   * @param {Spliterator\x3cC_FilterSpliterator_T\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_FilterSpliterator__java_util_function_Predicate__java_util_Spliterator(filter, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(filter);\n    this.f_filter__java_util_stream_StreamImpl_FilterSpliterator_ \x3d filter;\n    this.f_original__java_util_stream_StreamImpl_FilterSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_StreamImpl_FilterSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    this.f_found__java_util_stream_StreamImpl_FilterSpliterator_ \x3d false;\n    while (!this.f_found__java_util_stream_StreamImpl_FilterSpliterator_ \x26\x26 this.f_original__java_util_stream_StreamImpl_FilterSpliterator_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ item) \x3d\x3e{\n      if (this.f_filter__java_util_stream_StreamImpl_FilterSpliterator_.m_test__java_lang_Object(item)) {\n        this.f_found__java_util_stream_StreamImpl_FilterSpliterator_ \x3d true;\n        action.m_accept__java_lang_Object(item);\n      }\n    })))) {\n    }\n    return this.f_found__java_util_stream_StreamImpl_FilterSpliterator_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FilterSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, FilterSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FilterSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FilterSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$FilterSpliterator'));\n\n\n\n\nexports \x3d FilterSpliterator; \n//# sourceMappingURL\x3dStreamImpl$FilterSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$FilterSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$FilterSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.FilterSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar FilterSpliterator \x3d goog.require('java.util.stream.StreamImpl.FilterSpliterator$impl');\nexports \x3d FilterSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$LimitSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$LimitSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.LimitSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @template C_LimitSpliterator_T\n * @extends {AbstractSpliterator\x3cC_LimitSpliterator_T\x3e}\n  */\nclass LimitSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_limit__java_util_stream_StreamImpl_LimitSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {Spliterator\x3cC_LimitSpliterator_T\x3e} */\n    this.f_original__java_util_stream_StreamImpl_LimitSpliterator_;\n    /** @public {number} */\n    this.f_position__java_util_stream_StreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LimitSpliterator(long, Spliterator)'.\n   * @template C_LimitSpliterator_T\n   * @param {!$Long} limit\n   * @param {Spliterator\x3cC_LimitSpliterator_T\x3e} original\n   * @return {!LimitSpliterator\x3cC_LimitSpliterator_T\x3e}\n   * @public\n   */\n  static $create__long__java_util_Spliterator(limit, original) {\n    LimitSpliterator.$clinit();\n    let $instance \x3d new LimitSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_LimitSpliterator__long__java_util_Spliterator(limit, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LimitSpliterator(long, Spliterator)'.\n   * @param {!$Long} limit\n   * @param {Spliterator\x3cC_LimitSpliterator_T\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_LimitSpliterator__long__java_util_Spliterator(limit, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_min__long__long(original.m_estimateSize__(), limit) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.$init__java_util_stream_StreamImpl_LimitSpliterator();\n    this.f_limit__java_util_stream_StreamImpl_LimitSpliterator_ \x3d limit;\n    this.f_original__java_util_stream_StreamImpl_LimitSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_StreamImpl_LimitSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    if ($LongUtils.$greaterEquals($Primitives.$widenIntToLong(this.f_position__java_util_stream_StreamImpl_LimitSpliterator_), this.f_limit__java_util_stream_StreamImpl_LimitSpliterator_)) {\n      return false;\n    }\n    let result \x3d this.f_original__java_util_stream_StreamImpl_LimitSpliterator_.m_tryAdvance__java_util_function_Consumer(action);\n    this.f_position__java_util_stream_StreamImpl_LimitSpliterator_++;\n    return result;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_StreamImpl_LimitSpliterator() {\n    this.f_position__java_util_stream_StreamImpl_LimitSpliterator_ \x3d 0;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LimitSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LimitSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LimitSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LimitSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$LimitSpliterator'));\n\n\n\n\nexports \x3d LimitSpliterator; \n//# sourceMappingURL\x3dStreamImpl$LimitSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$LimitSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$LimitSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.LimitSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar LimitSpliterator \x3d goog.require('java.util.stream.StreamImpl.LimitSpliterator$impl');\nexports \x3d LimitSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToDoubleSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.MapToDoubleSpliterator$impl');\n\n\nconst AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_MapToDoubleSpliterator_T\n  */\nclass MapToDoubleSpliterator extends AbstractDoubleSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ToDoubleFunction\x3c?\x3e} */\n    this.f_map__java_util_stream_StreamImpl_MapToDoubleSpliterator_;\n    /** @public {Spliterator\x3cC_MapToDoubleSpliterator_T\x3e} */\n    this.f_original__java_util_stream_StreamImpl_MapToDoubleSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToDoubleSpliterator(ToDoubleFunction, Spliterator)'.\n   * @template C_MapToDoubleSpliterator_T\n   * @param {ToDoubleFunction\x3c?\x3e} map\n   * @param {Spliterator\x3cC_MapToDoubleSpliterator_T\x3e} original\n   * @return {!MapToDoubleSpliterator\x3cC_MapToDoubleSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_ToDoubleFunction__java_util_Spliterator(map, original) {\n    MapToDoubleSpliterator.$clinit();\n    let $instance \x3d new MapToDoubleSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_MapToDoubleSpliterator__java_util_function_ToDoubleFunction__java_util_Spliterator(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToDoubleSpliterator(ToDoubleFunction, Spliterator)'.\n   * @param {ToDoubleFunction\x3c?\x3e} map\n   * @param {Spliterator\x3cC_MapToDoubleSpliterator_T\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_MapToDoubleSpliterator__java_util_function_ToDoubleFunction__java_util_Spliterator(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractDoubleSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_StreamImpl_MapToDoubleSpliterator_ \x3d map;\n    this.f_original__java_util_stream_StreamImpl_MapToDoubleSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {DoubleConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_DoubleConsumer(action) {\n    return this.f_original__java_util_stream_StreamImpl_MapToDoubleSpliterator_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ u) \x3d\x3e{\n      action.m_accept__double(this.f_map__java_util_stream_StreamImpl_MapToDoubleSpliterator_.m_applyAsDouble__java_lang_Object(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfDouble.m_forEachRemaining__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfDouble.m_tryAdvance__$default__java_util_Spliterator_OfDouble__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {DoubleConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_DoubleConsumer(/**@type {DoubleConsumer} */ ($Casts.$to(arg0, DoubleConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToDoubleSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToDoubleSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToDoubleSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractDoubleSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToDoubleSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$MapToDoubleSpliterator'));\n\n\n\n\nexports \x3d MapToDoubleSpliterator; \n//# sourceMappingURL\x3dStreamImpl$MapToDoubleSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToDoubleSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToDoubleSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.MapToDoubleSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractDoubleSpliterator \x3d goog.require('java.util.Spliterators.AbstractDoubleSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToDoubleSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToDoubleSpliterator$impl');\nexports \x3d MapToDoubleSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToIntSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToIntSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.MapToIntSpliterator$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_MapToIntSpliterator_T\n  */\nclass MapToIntSpliterator extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ToIntFunction\x3c?\x3e} */\n    this.f_map__java_util_stream_StreamImpl_MapToIntSpliterator_;\n    /** @public {Spliterator\x3cC_MapToIntSpliterator_T\x3e} */\n    this.f_original__java_util_stream_StreamImpl_MapToIntSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToIntSpliterator(ToIntFunction, Spliterator)'.\n   * @template C_MapToIntSpliterator_T\n   * @param {ToIntFunction\x3c?\x3e} map\n   * @param {Spliterator\x3cC_MapToIntSpliterator_T\x3e} original\n   * @return {!MapToIntSpliterator\x3cC_MapToIntSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_ToIntFunction__java_util_Spliterator(map, original) {\n    MapToIntSpliterator.$clinit();\n    let $instance \x3d new MapToIntSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_MapToIntSpliterator__java_util_function_ToIntFunction__java_util_Spliterator(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToIntSpliterator(ToIntFunction, Spliterator)'.\n   * @param {ToIntFunction\x3c?\x3e} map\n   * @param {Spliterator\x3cC_MapToIntSpliterator_T\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_MapToIntSpliterator__java_util_function_ToIntFunction__java_util_Spliterator(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_StreamImpl_MapToIntSpliterator_ \x3d map;\n    this.f_original__java_util_stream_StreamImpl_MapToIntSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    return this.f_original__java_util_stream_StreamImpl_MapToIntSpliterator_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ u) \x3d\x3e{\n      action.m_accept__int(this.f_map__java_util_stream_StreamImpl_MapToIntSpliterator_.m_applyAsInt__java_lang_Object(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToIntSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToIntSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToIntSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToIntSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$MapToIntSpliterator'));\n\n\n\n\nexports \x3d MapToIntSpliterator; \n//# sourceMappingURL\x3dStreamImpl$MapToIntSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToIntSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToIntSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.MapToIntSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToIntSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToIntSpliterator$impl');\nexports \x3d MapToIntSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToLongSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToLongSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.MapToLongSpliterator$impl');\n\n\nconst AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_MapToLongSpliterator_T\n  */\nclass MapToLongSpliterator extends AbstractLongSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ToLongFunction\x3c?\x3e} */\n    this.f_map__java_util_stream_StreamImpl_MapToLongSpliterator_;\n    /** @public {Spliterator\x3cC_MapToLongSpliterator_T\x3e} */\n    this.f_original__java_util_stream_StreamImpl_MapToLongSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToLongSpliterator(ToLongFunction, Spliterator)'.\n   * @template C_MapToLongSpliterator_T\n   * @param {ToLongFunction\x3c?\x3e} map\n   * @param {Spliterator\x3cC_MapToLongSpliterator_T\x3e} original\n   * @return {!MapToLongSpliterator\x3cC_MapToLongSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_ToLongFunction__java_util_Spliterator(map, original) {\n    MapToLongSpliterator.$clinit();\n    let $instance \x3d new MapToLongSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_MapToLongSpliterator__java_util_function_ToLongFunction__java_util_Spliterator(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToLongSpliterator(ToLongFunction, Spliterator)'.\n   * @param {ToLongFunction\x3c?\x3e} map\n   * @param {Spliterator\x3cC_MapToLongSpliterator_T\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_MapToLongSpliterator__java_util_function_ToLongFunction__java_util_Spliterator(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractLongSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_StreamImpl_MapToLongSpliterator_ \x3d map;\n    this.f_original__java_util_stream_StreamImpl_MapToLongSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @param {LongConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_LongConsumer(action) {\n    return this.f_original__java_util_stream_StreamImpl_MapToLongSpliterator_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ u) \x3d\x3e{\n      action.m_accept__long(this.f_map__java_util_stream_StreamImpl_MapToLongSpliterator_.m_applyAsLong__java_lang_Object(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfLong.m_forEachRemaining__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfLong.m_tryAdvance__$default__java_util_Spliterator_OfLong__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {LongConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_LongConsumer(/**@type {LongConsumer} */ ($Casts.$to(arg0, LongConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToLongSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToLongSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToLongSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractLongSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToLongSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$MapToLongSpliterator'));\n\n\n\n\nexports \x3d MapToLongSpliterator; \n//# sourceMappingURL\x3dStreamImpl$MapToLongSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToLongSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToLongSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.MapToLongSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractLongSpliterator \x3d goog.require('java.util.Spliterators.AbstractLongSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MapToLongSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToLongSpliterator$impl');\nexports \x3d MapToLongSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToObjSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToObjSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.MapToObjSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template C_MapToObjSpliterator_U, C_MapToObjSpliterator_T\n * @extends {AbstractSpliterator\x3cC_MapToObjSpliterator_T\x3e}\n  */\nclass MapToObjSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {j_u_function_Function\x3c?, ?\x3e} */\n    this.f_map__java_util_stream_StreamImpl_MapToObjSpliterator_;\n    /** @public {Spliterator\x3cC_MapToObjSpliterator_U\x3e} */\n    this.f_original__java_util_stream_StreamImpl_MapToObjSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'MapToObjSpliterator(Function, Spliterator)'.\n   * @template C_MapToObjSpliterator_U, C_MapToObjSpliterator_T\n   * @param {j_u_function_Function\x3c?, ?\x3e} map\n   * @param {Spliterator\x3cC_MapToObjSpliterator_U\x3e} original\n   * @return {!MapToObjSpliterator\x3cC_MapToObjSpliterator_U, C_MapToObjSpliterator_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_Function__java_util_Spliterator(map, original) {\n    MapToObjSpliterator.$clinit();\n    let $instance \x3d new MapToObjSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_MapToObjSpliterator__java_util_function_Function__java_util_Spliterator(map, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'MapToObjSpliterator(Function, Spliterator)'.\n   * @param {j_u_function_Function\x3c?, ?\x3e} map\n   * @param {Spliterator\x3cC_MapToObjSpliterator_U\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_MapToObjSpliterator__java_util_function_Function__java_util_Spliterator(map, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_estimateSize__(), original.m_characteristics__() \x26 ~(Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator));\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(map);\n    this.f_map__java_util_stream_StreamImpl_MapToObjSpliterator_ \x3d map;\n    this.f_original__java_util_stream_StreamImpl_MapToObjSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    return this.f_original__java_util_stream_StreamImpl_MapToObjSpliterator_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ u) \x3d\x3e{\n      action.m_accept__java_lang_Object(this.f_map__java_util_stream_StreamImpl_MapToObjSpliterator_.m_apply__java_lang_Object(u));\n    })));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MapToObjSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, MapToObjSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MapToObjSpliterator.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(MapToObjSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$MapToObjSpliterator'));\n\n\n\n\nexports \x3d MapToObjSpliterator; \n//# sourceMappingURL\x3dStreamImpl$MapToObjSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$MapToObjSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$MapToObjSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.MapToObjSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar MapToObjSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToObjSpliterator$impl');\nexports \x3d MapToObjSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$SkipSpliterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$SkipSpliterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.SkipSpliterator$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Math \x3d goog.forwardDeclare('java.lang.Math$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @template C_SkipSpliterator_T\n * @extends {AbstractSpliterator\x3cC_SkipSpliterator_T\x3e}\n  */\nclass SkipSpliterator extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {!$Long} */\n    this.f_skip__java_util_stream_StreamImpl_SkipSpliterator_ \x3d $Long.fromInt(0);\n    /** @public {Spliterator\x3cC_SkipSpliterator_T\x3e} */\n    this.f_original__java_util_stream_StreamImpl_SkipSpliterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SkipSpliterator(long, Spliterator)'.\n   * @template C_SkipSpliterator_T\n   * @param {!$Long} skip\n   * @param {Spliterator\x3cC_SkipSpliterator_T\x3e} original\n   * @return {!SkipSpliterator\x3cC_SkipSpliterator_T\x3e}\n   * @public\n   */\n  static $create__long__java_util_Spliterator(skip, original) {\n    SkipSpliterator.$clinit();\n    let $instance \x3d new SkipSpliterator();\n    $instance.$ctor__java_util_stream_StreamImpl_SkipSpliterator__long__java_util_Spliterator(skip, original);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SkipSpliterator(long, Spliterator)'.\n   * @param {!$Long} skip\n   * @param {Spliterator\x3cC_SkipSpliterator_T\x3e} original\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_SkipSpliterator__long__java_util_Spliterator(skip, original) {\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int(original.m_hasCharacteristics__int(Spliterator.f_SIZED__java_util_Spliterator) ? Math.m_max__long__long($Primitives.$widenIntToLong(0), $LongUtils.$minus(original.m_estimateSize__(), skip)) : Long.f_MAX_VALUE__java_lang_Long, original.m_characteristics__());\n    this.f_skip__java_util_stream_StreamImpl_SkipSpliterator_ \x3d skip;\n    this.f_original__java_util_stream_StreamImpl_SkipSpliterator_ \x3d original;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return this.f_original__java_util_stream_StreamImpl_SkipSpliterator_.m_getComparator__();\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    while ($LongUtils.$greater(this.f_skip__java_util_stream_StreamImpl_SkipSpliterator_, $Primitives.$widenIntToLong(0))) {\n      if (!this.f_original__java_util_stream_StreamImpl_SkipSpliterator_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ ignore) \x3d\x3e{\n      })))) {\n        return false;\n      }\n      this.f_skip__java_util_stream_StreamImpl_SkipSpliterator_ \x3d $LongUtils.$minus(this.f_skip__java_util_stream_StreamImpl_SkipSpliterator_, $Long.fromInt(1));\n    }\n    return this.f_original__java_util_stream_StreamImpl_SkipSpliterator_.m_tryAdvance__java_util_function_Consumer(action);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SkipSpliterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SkipSpliterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SkipSpliterator.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Math \x3d goog.module.get('java.lang.Math$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SkipSpliterator, $Util.$makeClassName('java.util.stream.StreamImpl$SkipSpliterator'));\n\n\n\n\nexports \x3d SkipSpliterator; \n//# sourceMappingURL\x3dStreamImpl$SkipSpliterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$SkipSpliterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$SkipSpliterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.SkipSpliterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Math \x3d goog.require('java.lang.Math');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar SkipSpliterator \x3d goog.require('java.util.stream.StreamImpl.SkipSpliterator$impl');\nexports \x3d SkipSpliterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$ValueConsumer.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$ValueConsumer.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.ValueConsumer$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Consumer \x3d goog.require('java.util.function.Consumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_ValueConsumer_T\n * @implements {Consumer\x3cC_ValueConsumer_T\x3e}\n  */\nclass ValueConsumer extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {C_ValueConsumer_T} */\n    this.f_value__java_util_stream_StreamImpl_ValueConsumer;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ValueConsumer()'.\n   * @template C_ValueConsumer_T\n   * @return {!ValueConsumer\x3cC_ValueConsumer_T\x3e}\n   * @public\n   */\n  static $create__() {\n    ValueConsumer.$clinit();\n    let $instance \x3d new ValueConsumer();\n    $instance.$ctor__java_util_stream_StreamImpl_ValueConsumer__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ValueConsumer()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_ValueConsumer__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {C_ValueConsumer_T} value\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object(value) {\n    this.f_value__java_util_stream_StreamImpl_ValueConsumer \x3d value;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {Consumer\x3cC_ValueConsumer_T\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Consumer(arg0) {\n    return /**@type {Consumer\x3cC_ValueConsumer_T\x3e} */ (Consumer.m_andThen__$default__java_util_function_Consumer__java_util_function_Consumer(this, arg0));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ValueConsumer;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ValueConsumer);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ValueConsumer.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    Consumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ValueConsumer, $Util.$makeClassName('java.util.stream.StreamImpl$ValueConsumer'));\n\n\nConsumer.$markImplementor(ValueConsumer);\n\n\nexports \x3d ValueConsumer; \n//# sourceMappingURL\x3dStreamImpl$ValueConsumer.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$ValueConsumer.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$ValueConsumer.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.ValueConsumer');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ValueConsumer \x3d goog.require('java.util.stream.StreamImpl.ValueConsumer$impl');\nexports \x3d ValueConsumer;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Stream$impl');\n\n\nconst BaseStream \x3d goog.require('java.util.stream.BaseStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Runnable \x3d goog.forwardDeclare('java.lang.Runnable$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Optional \x3d goog.forwardDeclare('java.util.Optional$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Collector \x3d goog.forwardDeclare('java.util.stream.Collector$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.Stream.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.Stream.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.Stream.$3$impl');\nlet $4 \x3d goog.forwardDeclare('java.util.stream.Stream.$4$impl');\nlet Builder \x3d goog.forwardDeclare('java.util.stream.Stream.Builder$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.StreamImpl.Empty$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @interface\n * @template C_T\n * @extends {BaseStream\x3cC_T, Stream\x3cC_T\x3e\x3e}\n */\nclass Stream {\n  /**\n   * @template M_T\n   * @return {Builder\x3cM_T\x3e}\n   * @public\n   */\n  static m_builder__() {\n    Stream.$clinit();\n    return /**@type {!$1\x3c*\x3e} */ ($1.$create__());\n  }\n  \n  /**\n   * @template M_T\n   * @param {Stream\x3c?\x3e} a\n   * @param {Stream\x3c?\x3e} b\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_concat__java_util_stream_Stream__java_util_stream_Stream(a, b) {\n    Stream.$clinit();\n    let spliteratorOfStreams \x3d /**@type {List\x3cStream\x3c?\x3e\x3e} */ (Arrays.m_asList__arrayOf_java_lang_Object(/**@type {!Array\x3cStream\x3c?\x3e\x3e} */ ($Arrays.$init([a, b], Stream)))).m_spliterator__();\n    let spliterator \x3d /**@type {!$2\x3c*\x3e} */ ($2.$create__java_util_Spliterator__long__int(spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0));\n    let result \x3d /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(null, spliterator));\n    return /**@type {Stream\x3c*\x3e} */ ($Casts.$to(/**@type {Stream\x3c*\x3e} */ ($Casts.$to(result.m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      a.m_close__();\n    }))), Stream)).m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      b.m_close__();\n    }))), Stream));\n  }\n  \n  /**\n   * @template M_T\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_empty__() {\n    Stream.$clinit();\n    return /**@type {!Empty\x3c*\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(null));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Supplier\x3cM_T\x3e} s\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_generate__java_util_function_Supplier(s) {\n    Stream.$clinit();\n    let spliterator \x3d /**@type {!$3\x3c*\x3e} */ ($3.$create__java_util_function_Supplier__long__int(s, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator));\n    return /**@type {Stream\x3c*\x3e} */ (StreamSupport.m_stream__java_util_Spliterator__boolean(spliterator, false));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} seed\n   * @param {UnaryOperator\x3cM_T\x3e} f\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_iterate__java_lang_Object__java_util_function_UnaryOperator(seed, f) {\n    Stream.$clinit();\n    let spliterator \x3d /**@type {!$4\x3c*\x3e} */ ($4.$create__java_lang_Object__java_util_function_UnaryOperator__long__int(seed, f, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator));\n    return /**@type {Stream\x3c*\x3e} */ (StreamSupport.m_stream__java_util_Spliterator__boolean(spliterator, false));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} t\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_of__java_lang_Object(t) {\n    Stream.$clinit();\n    return /**@type {Set\x3c*\x3e} */ (Collections.m_singleton__java_lang_Object(t)).m_stream__();\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} values\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_of__arrayOf_java_lang_Object(values) {\n    Stream.$clinit();\n    return /**@type {Stream\x3c*\x3e} */ (Arrays.m_stream__arrayOf_java_lang_Object(values));\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_Predicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_Predicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R, M_A\n   * @param {Collector\x3c?, M_A, M_R\x3e} collector\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_stream_Collector(collector) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {BiConsumer\x3cM_R, ?\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_distinct__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_filter__java_util_function_Predicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_findAny__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_findFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Stream\x3cM_R\x3e}\n   * @public\n   */\n  m_flatMap__java_util_function_Function(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_flatMapToDouble__java_util_function_Function(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_flatMapToInt__java_util_function_Function(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_flatMapToLong__java_util_function_Function(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_Consumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} maxSize\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_limit__long(maxSize) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Stream\x3cM_R\x3e}\n   * @public\n   */\n  m_map__java_util_function_Function(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {ToDoubleFunction\x3c?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_ToDoubleFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {ToIntFunction\x3c?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_ToIntFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {ToLongFunction\x3c?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_ToLongFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_max__java_util_Comparator(comparator) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_min__java_util_Comparator(comparator) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_Predicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Consumer\x3c?\x3e} action\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_peek__java_util_function_Consumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {BinaryOperator\x3cC_T\x3e} accumulator\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_reduce__java_util_function_BinaryOperator(accumulator) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_T} identity\n   * @param {BinaryOperator\x3cC_T\x3e} accumulator\n   * @return {C_T}\n   * @public\n   */\n  m_reduce__java_lang_Object__java_util_function_BinaryOperator(identity, accumulator) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_U\n   * @param {M_U} identity\n   * @param {BiFunction\x3cM_U, ?, M_U\x3e} accumulator\n   * @param {BinaryOperator\x3cM_U\x3e} combiner\n   * @return {M_U}\n   * @public\n   */\n  m_reduce__java_lang_Object__java_util_function_BiFunction__java_util_function_BinaryOperator(identity, accumulator, combiner) {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} n\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_skip__long(n) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_sorted__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_sorted__java_util_Comparator(comparator) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  m_toArray__() {\n  }\n  \n  /**\n   * @abstract\n   * @template M_A\n   * @param {IntFunction\x3cArray\x3cM_A\x3e\x3e} generator\n   * @return {Array\x3cM_A\x3e}\n   * @public\n   */\n  m_toArray__java_util_function_IntFunction(generator) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    BaseStream.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_Stream \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_Stream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_Stream;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Stream.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Runnable \x3d goog.module.get('java.lang.Runnable$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    $1 \x3d goog.module.get('java.util.stream.Stream.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.Stream.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.Stream.$3$impl');\n    $4 \x3d goog.module.get('java.util.stream.Stream.$4$impl');\n    StreamImpl \x3d goog.module.get('java.util.stream.StreamImpl$impl');\n    Empty \x3d goog.module.get('java.util.stream.StreamImpl.Empty$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Stream, $Util.$makeClassName('java.util.stream.Stream'));\n\n\nStream.$markImplementor(/** @type {Function} */ (Stream));\n\n\nexports \x3d Stream; \n//# sourceMappingURL\x3dStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl$impl');\n\n\nconst Stream \x3d goog.require('java.util.stream.Stream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Optional \x3d goog.forwardDeclare('java.util.Optional$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet Collector \x3d goog.forwardDeclare('java.util.stream.Collector$impl');\nlet Characteristics \x3d goog.forwardDeclare('java.util.stream.Collector.Characteristics$impl');\nlet Collectors \x3d goog.forwardDeclare('java.util.stream.Collectors$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.StreamImpl.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.StreamImpl.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.StreamImpl.$3$impl');\nlet $4 \x3d goog.forwardDeclare('java.util.stream.StreamImpl.$4$impl');\nlet $5 \x3d goog.forwardDeclare('java.util.stream.StreamImpl.$5$impl');\nlet $6 \x3d goog.forwardDeclare('java.util.stream.StreamImpl.$6$impl');\nlet FilterSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.FilterSpliterator$impl');\nlet LimitSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.LimitSpliterator$impl');\nlet MapToDoubleSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.MapToDoubleSpliterator$impl');\nlet MapToIntSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.MapToIntSpliterator$impl');\nlet MapToLongSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.MapToLongSpliterator$impl');\nlet MapToObjSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.MapToObjSpliterator$impl');\nlet SkipSpliterator \x3d goog.forwardDeclare('java.util.stream.StreamImpl.SkipSpliterator$impl');\nlet ValueConsumer \x3d goog.forwardDeclare('java.util.stream.StreamImpl.ValueConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @template C_T\n * @extends {TerminatableStream\x3cStreamImpl\x3cC_T\x3e\x3e}\n * @implements {Stream\x3cC_T\x3e}\n  */\nclass StreamImpl extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Spliterator\x3cC_T\x3e} */\n    this.f_spliterator__java_util_stream_StreamImpl_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StreamImpl(TerminatableStream, Spliterator)'.\n   * @template C_T\n   * @param {TerminatableStream\x3c?\x3e} prev\n   * @param {Spliterator\x3cC_T\x3e} spliterator\n   * @return {!StreamImpl\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream__java_util_Spliterator(prev, spliterator) {\n    StreamImpl.$clinit();\n    let $instance \x3d new StreamImpl();\n    $instance.$ctor__java_util_stream_StreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator(prev, spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StreamImpl(TerminatableStream, Spliterator)'.\n   * @param {TerminatableStream\x3c?\x3e} prev\n   * @param {Spliterator\x3cC_T\x3e} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator(prev, spliterator) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(prev);\n    this.f_spliterator__java_util_stream_StreamImpl_ \x3d spliterator;\n  }\n  \n  /**\n   * @override\n   * @return {Spliterator\x3cC_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return this.f_spliterator__java_util_stream_StreamImpl_;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_T\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return /**@type {Iterator\x3cC_T\x3e} */ (Spliterators.m_iterator__java_util_Spliterator(this.m_spliterator__()));\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    let count \x3d $Long.fromInt(0);\n    while (this.f_spliterator__java_util_stream_StreamImpl_.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** * */ a) \x3d\x3e{\n    })))) {\n      count \x3d $LongUtils.$plus(count, $Long.fromInt(1));\n    }\n    return count;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(action) {\n    this.m_forEachOrdered__java_util_function_Consumer(action);\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_Consumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n    this.f_spliterator__java_util_stream_StreamImpl_.m_forEachRemaining__java_util_function_Consumer(action);\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  m_toArray__() {\n    return this.m_toArray__java_util_function_IntFunction(IntFunction.$adapt(((/** number */ arg0) \x3d\x3e{\n      return new Array(arg0);\n    })));\n  }\n  \n  /**\n   * @override\n   * @template M_A\n   * @param {IntFunction\x3cArray\x3cM_A\x3e\x3e} generator\n   * @return {Array\x3cM_A\x3e}\n   * @public\n   */\n  m_toArray__java_util_function_IntFunction(generator) {\n    let collected \x3d /**@type {List\x3cC_T\x3e} */ ($Casts.$to(this.m_collect__java_util_stream_Collector(/**@type {Collector\x3cC_T, ?, List\x3cC_T\x3e\x3e} */ (Collectors.m_toList__())), List));\n    return collected.m_toArray__arrayOf_java_lang_Object(/**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(generator.m_apply__int(collected.size()), j_l_Object, 1)));\n  }\n  \n  /**\n   * @override\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {BiConsumer\x3cM_R, ?\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    return this.m_collect__java_util_stream_Collector(/**@type {Collector\x3c?, *, *\x3e} */ (Collector.m_of__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BinaryOperator__arrayOf_java_util_stream_Collector_Characteristics(supplier, accumulator, /**@type {BinaryOperator\x3c*\x3e} */ (BinaryOperator.$adapt(((/** * */ a, /** * */ b) \x3d\x3e{\n      combiner.m_accept__java_lang_Object__java_lang_Object(a, b);\n      return a;\n    }))), /**@type {!Array\x3cCharacteristics\x3e} */ ($Arrays.$init([], Characteristics)))));\n  }\n  \n  /**\n   * @override\n   * @template M_R, M_A\n   * @param {Collector\x3c?, M_A, M_R\x3e} collector\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_stream_Collector(collector) {\n    return collector.m_finisher__().m_apply__java_lang_Object(this.m_reduce__java_lang_Object__java_util_function_BiFunction__java_util_function_BinaryOperator(collector.m_supplier__().m_get__(), /**@type {BiFunction\x3c*, ?, *\x3e} */ (BiFunction.$adapt(((/** * */ a, /** * */ t) \x3d\x3e{\n      collector.m_accumulator__().m_accept__java_lang_Object__java_lang_Object(a, t);\n      return a;\n    }))), collector.m_combiner__()));\n  }\n  \n  /**\n   * @override\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d /**@type {!ValueConsumer\x3cC_T\x3e} */ (ValueConsumer.$create__());\n    if (this.f_spliterator__java_util_stream_StreamImpl_.m_tryAdvance__java_util_function_Consumer(holder)) {\n      return /**@type {Optional\x3cC_T\x3e} */ (Optional.m_of__java_lang_Object(holder.f_value__java_util_stream_StreamImpl_ValueConsumer));\n    }\n    return /**@type {Optional\x3cC_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @override\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_findAny__() {\n    return this.m_findFirst__();\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_Predicate(predicate) {\n    return this.m_filter__java_util_function_Predicate(predicate).m_spliterator__().m_tryAdvance__java_util_function_Consumer(StreamImpl.$f_NULL_CONSUMER__java_util_stream_StreamImpl_);\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_Predicate(predicate) {\n    return !this.m_anyMatch__java_util_function_Predicate(predicate.m_negate__());\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_Predicate(predicate) {\n    return !this.m_anyMatch__java_util_function_Predicate(predicate);\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_min__java_util_Comparator(comparator) {\n    return this.m_reduce__java_util_function_BinaryOperator(/**@type {BinaryOperator\x3cC_T\x3e} */ (BinaryOperator.m_minBy__java_util_Comparator(comparator)));\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_max__java_util_Comparator(comparator) {\n    return this.m_reduce__java_util_function_BinaryOperator(/**@type {BinaryOperator\x3cC_T\x3e} */ (BinaryOperator.m_maxBy__java_util_Comparator(comparator)));\n  }\n  \n  /**\n   * @override\n   * @param {C_T} identity\n   * @param {BinaryOperator\x3cC_T\x3e} accumulator\n   * @return {C_T}\n   * @public\n   */\n  m_reduce__java_lang_Object__java_util_function_BinaryOperator(identity, accumulator) {\n    return this.m_reduce__java_lang_Object__java_util_function_BiFunction__java_util_function_BinaryOperator(identity, accumulator, accumulator);\n  }\n  \n  /**\n   * @override\n   * @param {BinaryOperator\x3cC_T\x3e} accumulator\n   * @return {Optional\x3cC_T\x3e}\n   * @public\n   */\n  m_reduce__java_util_function_BinaryOperator(accumulator) {\n    let consumer \x3d /**@type {!ValueConsumer\x3cC_T\x3e} */ (ValueConsumer.$create__());\n    if (!this.f_spliterator__java_util_stream_StreamImpl_.m_tryAdvance__java_util_function_Consumer(consumer)) {\n      this.m_terminate___$pp_java_util_stream();\n      return /**@type {Optional\x3cC_T\x3e} */ (Optional.m_empty__());\n    }\n    return /**@type {Optional\x3cC_T\x3e} */ (Optional.m_of__java_lang_Object(this.m_reduce__java_lang_Object__java_util_function_BinaryOperator(consumer.f_value__java_util_stream_StreamImpl_ValueConsumer, accumulator)));\n  }\n  \n  /**\n   * @override\n   * @template M_U\n   * @param {M_U} identity\n   * @param {BiFunction\x3cM_U, ?, M_U\x3e} accumulator\n   * @param {BinaryOperator\x3cM_U\x3e} combiner\n   * @return {M_U}\n   * @public\n   */\n  m_reduce__java_lang_Object__java_util_function_BiFunction__java_util_function_BinaryOperator(identity, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    let consumer \x3d /**@type {!ValueConsumer\x3c*\x3e} */ (ValueConsumer.$create__());\n    consumer.f_value__java_util_stream_StreamImpl_ValueConsumer \x3d identity;\n    this.f_spliterator__java_util_stream_StreamImpl_.m_forEachRemaining__java_util_function_Consumer(Consumer.$adapt(((/** * */ item) \x3d\x3e{\n      consumer.m_accept__java_lang_Object(accumulator.m_apply__java_lang_Object__java_lang_Object(consumer.f_value__java_util_stream_StreamImpl_ValueConsumer, item));\n    })));\n    return consumer.f_value__java_util_stream_StreamImpl_ValueConsumer;\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_filter__java_util_function_Predicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!StreamImpl\x3cC_T\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!FilterSpliterator\x3cC_T\x3e} */ (FilterSpliterator.$create__java_util_function_Predicate__java_util_Spliterator(predicate, this.f_spliterator__java_util_stream_StreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @template M_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Stream\x3cM_R\x3e}\n   * @public\n   */\n  m_map__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!MapToObjSpliterator\x3cC_T, *\x3e} */ (MapToObjSpliterator.$create__java_util_function_Function__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_ToIntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, /**@type {!MapToIntSpliterator\x3cC_T\x3e} */ (MapToIntSpliterator.$create__java_util_function_ToIntFunction__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_)));\n  }\n  \n  /**\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_ToLongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, /**@type {!MapToLongSpliterator\x3cC_T\x3e} */ (MapToLongSpliterator.$create__java_util_function_ToLongFunction__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_)));\n  }\n  \n  /**\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_ToDoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, /**@type {!MapToDoubleSpliterator\x3cC_T\x3e} */ (MapToDoubleSpliterator.$create__java_util_function_ToDoubleFunction__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_)));\n  }\n  \n  /**\n   * @override\n   * @template M_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Stream\x3cM_R\x3e}\n   * @public\n   */\n  m_flatMap__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cC_T, Stream\x3e} */ (MapToObjSpliterator.$create__java_util_function_Function__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_));\n    let flatMapSpliterator \x3d /**@type {!$1\x3c*, C_T\x3e} */ ($1.$create__java_util_stream_StreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0));\n    return /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, flatMapSpliterator));\n  }\n  \n  /**\n   * @override\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_flatMapToInt__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cC_T, IntStream\x3e} */ (MapToObjSpliterator.$create__java_util_function_Function__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_));\n    let flatMapSpliterator \x3d /**@type {!$2\x3cC_T\x3e} */ ($2.$create__java_util_stream_StreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0));\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, flatMapSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_flatMapToLong__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cC_T, LongStream\x3e} */ (MapToObjSpliterator.$create__java_util_function_Function__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_));\n    let flatMapSpliterator \x3d /**@type {!$3\x3cC_T\x3e} */ ($3.$create__java_util_stream_StreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0));\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, flatMapSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_flatMapToDouble__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cC_T, DoubleStream\x3e} */ (MapToObjSpliterator.$create__java_util_function_Function__java_util_Spliterator(mapper, this.f_spliterator__java_util_stream_StreamImpl_));\n    let flatMapSpliterator \x3d /**@type {!$4\x3cC_T\x3e} */ ($4.$create__java_util_stream_StreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0));\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, flatMapSpliterator);\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let seen \x3d /**@type {!HashSet\x3cC_T\x3e} */ (HashSet.$create__());\n    return this.m_filter__java_util_function_Predicate(Predicate.$adapt(((/** * */ arg0) \x3d\x3e{\n      return seen.add(arg0);\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let c \x3d /**@type {Comparator} */ ($Casts.$to(Comparator.m_naturalOrder__(), Comparator));\n    return this.m_sorted__java_util_Comparator(c);\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_sorted__java_util_Comparator(comparator) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let sortedSpliterator \x3d /**@type {!$5\x3cC_T\x3e} */ ($5.$create__java_util_stream_StreamImpl__java_util_Comparator__long__int(this, comparator, this.f_spliterator__java_util_stream_StreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_StreamImpl_.m_characteristics__() | Spliterator.f_SORTED__java_util_Spliterator));\n    return /**@type {!StreamImpl\x3cC_T\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, sortedSpliterator));\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_peek__java_util_function_Consumer(action) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(action);\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let peekSpliterator \x3d /**@type {!$6\x3cC_T\x3e} */ ($6.$create__java_util_stream_StreamImpl__java_util_function_Consumer__long__int(this, action, this.f_spliterator__java_util_stream_StreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_StreamImpl_.m_characteristics__()));\n    return /**@type {!StreamImpl\x3cC_T\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, peekSpliterator));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return /**@type {!StreamImpl\x3cC_T\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!LimitSpliterator\x3cC_T\x3e} */ (LimitSpliterator.$create__long__java_util_Spliterator(maxSize, this.f_spliterator__java_util_stream_StreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    if ($LongUtils.$equals(n, $Primitives.$widenIntToLong(0))) {\n      return this;\n    }\n    return /**@type {!StreamImpl\x3cC_T\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!SkipSpliterator\x3cC_T\x3e} */ (SkipSpliterator.$create__long__java_util_Spliterator(n, this.f_spliterator__java_util_stream_StreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_T\x3e}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @return {Consumer\x3c*\x3e}\n   * @public\n   */\n  static get f_NULL_CONSUMER__java_util_stream_StreamImpl_() {\n    return (StreamImpl.$clinit(), StreamImpl.$f_NULL_CONSUMER__java_util_stream_StreamImpl_);\n  }\n  \n  /**\n   * @param {Consumer\x3c*\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_NULL_CONSUMER__java_util_stream_StreamImpl_(value) {\n    (StreamImpl.$clinit(), StreamImpl.$f_NULL_CONSUMER__java_util_stream_StreamImpl_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StreamImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StreamImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StreamImpl.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    Optional \x3d goog.module.get('java.util.Optional$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    BiFunction \x3d goog.module.get('java.util.function.BiFunction$impl');\n    BinaryOperator \x3d goog.module.get('java.util.function.BinaryOperator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    IntFunction \x3d goog.module.get('java.util.function.IntFunction$impl');\n    Predicate \x3d goog.module.get('java.util.function.Predicate$impl');\n    Collector \x3d goog.module.get('java.util.stream.Collector$impl');\n    Characteristics \x3d goog.module.get('java.util.stream.Collector.Characteristics$impl');\n    Collectors \x3d goog.module.get('java.util.stream.Collectors$impl');\n    DoubleStreamImpl \x3d goog.module.get('java.util.stream.DoubleStreamImpl$impl');\n    IntStreamImpl \x3d goog.module.get('java.util.stream.IntStreamImpl$impl');\n    LongStreamImpl \x3d goog.module.get('java.util.stream.LongStreamImpl$impl');\n    $1 \x3d goog.module.get('java.util.stream.StreamImpl.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.StreamImpl.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.StreamImpl.$3$impl');\n    $4 \x3d goog.module.get('java.util.stream.StreamImpl.$4$impl');\n    $5 \x3d goog.module.get('java.util.stream.StreamImpl.$5$impl');\n    $6 \x3d goog.module.get('java.util.stream.StreamImpl.$6$impl');\n    FilterSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.FilterSpliterator$impl');\n    LimitSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.LimitSpliterator$impl');\n    MapToDoubleSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.MapToDoubleSpliterator$impl');\n    MapToIntSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.MapToIntSpliterator$impl');\n    MapToLongSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.MapToLongSpliterator$impl');\n    MapToObjSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.MapToObjSpliterator$impl');\n    SkipSpliterator \x3d goog.module.get('java.util.stream.StreamImpl.SkipSpliterator$impl');\n    ValueConsumer \x3d goog.module.get('java.util.stream.StreamImpl.ValueConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    TerminatableStream.$clinit();\n    StreamImpl.$f_NULL_CONSUMER__java_util_stream_StreamImpl_ \x3d Consumer.$adapt(((/** * */ value) \x3d\x3e{\n    }));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StreamImpl, $Util.$makeClassName('java.util.stream.StreamImpl'));\n\n\n/** @private {Consumer\x3c*\x3e} */\nStreamImpl.$f_NULL_CONSUMER__java_util_stream_StreamImpl_;\n\n\nStream.$markImplementor(StreamImpl);\n\n\nexports \x3d StreamImpl; \n//# sourceMappingURL\x3dStreamImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _List \x3d goog.require('java.util.List');\nconst _Optional \x3d goog.require('java.util.Optional');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _Collector \x3d goog.require('java.util.stream.Collector');\nconst _Characteristics \x3d goog.require('java.util.stream.Collector.Characteristics');\nconst _Collectors \x3d goog.require('java.util.stream.Collectors');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _$1 \x3d goog.require('java.util.stream.StreamImpl.$1');\nconst _$2 \x3d goog.require('java.util.stream.StreamImpl.$2');\nconst _$3 \x3d goog.require('java.util.stream.StreamImpl.$3');\nconst _$4 \x3d goog.require('java.util.stream.StreamImpl.$4');\nconst _$5 \x3d goog.require('java.util.stream.StreamImpl.$5');\nconst _$6 \x3d goog.require('java.util.stream.StreamImpl.$6');\nconst _FilterSpliterator \x3d goog.require('java.util.stream.StreamImpl.FilterSpliterator');\nconst _LimitSpliterator \x3d goog.require('java.util.stream.StreamImpl.LimitSpliterator');\nconst _MapToDoubleSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToDoubleSpliterator');\nconst _MapToIntSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToIntSpliterator');\nconst _MapToLongSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToLongSpliterator');\nconst _MapToObjSpliterator \x3d goog.require('java.util.stream.StreamImpl.MapToObjSpliterator');\nconst _SkipSpliterator \x3d goog.require('java.util.stream.StreamImpl.SkipSpliterator');\nconst _ValueConsumer \x3d goog.require('java.util.stream.StreamImpl.ValueConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar StreamImpl \x3d goog.require('java.util.stream.StreamImpl$impl');\nexports \x3d StreamImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStream$impl');\n\n\nconst BaseStream \x3d goog.require('java.util.stream.BaseStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Runnable \x3d goog.forwardDeclare('java.lang.Runnable$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet LongSummaryStatistics \x3d goog.forwardDeclare('java.util.LongSummaryStatistics$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OptionalLong \x3d goog.forwardDeclare('java.util.OptionalLong$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfLong$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterator_OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet LongBinaryOperator \x3d goog.forwardDeclare('java.util.function.LongBinaryOperator$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongFunction \x3d goog.forwardDeclare('java.util.function.LongFunction$impl');\nlet LongPredicate \x3d goog.forwardDeclare('java.util.function.LongPredicate$impl');\nlet LongSupplier \x3d goog.forwardDeclare('java.util.function.LongSupplier$impl');\nlet LongToDoubleFunction \x3d goog.forwardDeclare('java.util.function.LongToDoubleFunction$impl');\nlet LongToIntFunction \x3d goog.forwardDeclare('java.util.function.LongToIntFunction$impl');\nlet LongUnaryOperator \x3d goog.forwardDeclare('java.util.function.LongUnaryOperator$impl');\nlet ObjLongConsumer \x3d goog.forwardDeclare('java.util.function.ObjLongConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.LongStream.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.LongStream.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.LongStream.$3$impl');\nlet $4 \x3d goog.forwardDeclare('java.util.stream.LongStream.$4$impl');\nlet $5 \x3d goog.forwardDeclare('java.util.stream.LongStream.$5$impl');\nlet Builder \x3d goog.forwardDeclare('java.util.stream.LongStream.Builder$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.Empty$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\n/**\n * @interface\n * @extends {BaseStream\x3cLong, LongStream\x3e}\n */\nclass LongStream {\n  /**\n   * @return {Builder}\n   * @public\n   */\n  static m_builder__() {\n    LongStream.$clinit();\n    return $1.$create__();\n  }\n  \n  /**\n   * @param {LongStream} a\n   * @param {LongStream} b\n   * @return {LongStream}\n   * @public\n   */\n  static m_concat__java_util_stream_LongStream__java_util_stream_LongStream(a, b) {\n    LongStream.$clinit();\n    let spliteratorOfStreams \x3d /**@type {List\x3cLongStream\x3e} */ (Arrays.m_asList__arrayOf_java_lang_Object(/**@type {!Array\x3cLongStream\x3e} */ ($Arrays.$init([a, b], LongStream)))).m_spliterator__();\n    let spliterator \x3d $2.$create__java_util_Spliterator__long__int(spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0);\n    let result \x3d LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(null, spliterator);\n    return /**@type {LongStream} */ ($Casts.$to(/**@type {LongStream} */ ($Casts.$to(result.m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      a.m_close__();\n    }))), LongStream)).m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      b.m_close__();\n    }))), LongStream));\n  }\n  \n  /**\n   * @return {LongStream}\n   * @public\n   */\n  static m_empty__() {\n    LongStream.$clinit();\n    return Empty.$create__java_util_stream_TerminatableStream(null);\n  }\n  \n  /**\n   * @param {LongSupplier} s\n   * @return {LongStream}\n   * @public\n   */\n  static m_generate__java_util_function_LongSupplier(s) {\n    LongStream.$clinit();\n    let spltierator \x3d $3.$create__java_util_function_LongSupplier__long__int(s, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n    return StreamSupport.m_longStream__java_util_Spliterator_OfLong__boolean(spltierator, false);\n  }\n  \n  /**\n   * @param {!$Long} seed\n   * @param {LongUnaryOperator} f\n   * @return {LongStream}\n   * @public\n   */\n  static m_iterate__long__java_util_function_LongUnaryOperator(seed, f) {\n    LongStream.$clinit();\n    let spliterator \x3d $4.$create__long__java_util_function_LongUnaryOperator__long__int(seed, f, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n    return StreamSupport.m_longStream__java_util_Spliterator_OfLong__boolean(spliterator, false);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} values\n   * @return {LongStream}\n   * @public\n   */\n  static m_of__arrayOf_long(values) {\n    LongStream.$clinit();\n    return Arrays.m_stream__arrayOf_long(values);\n  }\n  \n  /**\n   * @param {!$Long} t\n   * @return {LongStream}\n   * @public\n   */\n  static m_of__long(t) {\n    LongStream.$clinit();\n    return LongStream.m_of__arrayOf_long(/**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$init([t], $long)));\n  }\n  \n  /**\n   * @param {!$Long} startInclusive\n   * @param {!$Long} endExclusive\n   * @return {LongStream}\n   * @public\n   */\n  static m_range__long__long(startInclusive, endExclusive) {\n    LongStream.$clinit();\n    if ($LongUtils.$greaterEquals(startInclusive, endExclusive)) {\n      return LongStream.m_empty__();\n    }\n    return LongStream.m_rangeClosed__long__long(startInclusive, $LongUtils.$minus(endExclusive, $Primitives.$widenIntToLong(1)));\n  }\n  \n  /**\n   * @param {!$Long} startInclusive\n   * @param {!$Long} endInclusive\n   * @return {LongStream}\n   * @public\n   */\n  static m_rangeClosed__long__long(startInclusive, endInclusive) {\n    LongStream.$clinit();\n    if ($LongUtils.$greater(startInclusive, endInclusive)) {\n      return LongStream.m_empty__();\n    }\n    let count \x3d $LongUtils.$plus($LongUtils.$minus(endInclusive, startInclusive), $Primitives.$widenIntToLong(1));\n    let spliterator \x3d $5.$create__long__long__long__int(startInclusive, endInclusive, count, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator | Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator);\n    return StreamSupport.m_longStream__java_util_Spliterator_OfLong__boolean(spliterator, false);\n  }\n  \n  /**\n   * @abstract\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_LongPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_LongPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoubleStream}\n   * @public\n   */\n  m_asDoubleStream__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cLong\x3e}\n   * @public\n   */\n  m_boxed__() {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {ObjLongConsumer\x3cM_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjLongConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {LongStream}\n   * @public\n   */\n  m_distinct__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongPredicate} predicate\n   * @return {LongStream}\n   * @public\n   */\n  m_filter__java_util_function_LongPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalLong}\n   * @public\n   */\n  m_findAny__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalLong}\n   * @public\n   */\n  m_findFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongFunction\x3c?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_flatMap__java_util_function_LongFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_LongConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_LongConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {OfLong}\n   * @public\n   */\n  m_iterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} maxSize\n   * @return {LongStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongUnaryOperator} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_map__java_util_function_LongUnaryOperator(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongToDoubleFunction} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_LongToDoubleFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongToIntFunction} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_LongToIntFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_U\n   * @param {LongFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_LongFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalLong}\n   * @public\n   */\n  m_max__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalLong}\n   * @public\n   */\n  m_min__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_LongPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_parallel__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongConsumer} action\n   * @return {LongStream}\n   * @public\n   */\n  m_peek__java_util_function_LongConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {LongBinaryOperator} op\n   * @return {OptionalLong}\n   * @public\n   */\n  m_reduce__java_util_function_LongBinaryOperator(op) {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} identity\n   * @param {LongBinaryOperator} op\n   * @return {!$Long}\n   * @public\n   */\n  m_reduce__long__java_util_function_LongBinaryOperator(identity, op) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_sequential__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} n\n   * @return {LongStream}\n   * @public\n   */\n  m_skip__long(n) {\n  }\n  \n  /**\n   * @abstract\n   * @return {LongStream}\n   * @public\n   */\n  m_sorted__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Spliterator_OfLong}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_sum__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {LongSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Array\x3c!$Long\x3e}\n   * @public\n   */\n  m_toArray__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    BaseStream.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_LongStream \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_LongStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_LongStream;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongStream.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Runnable \x3d goog.module.get('java.lang.Runnable$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    $1 \x3d goog.module.get('java.util.stream.LongStream.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.LongStream.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.LongStream.$3$impl');\n    $4 \x3d goog.module.get('java.util.stream.LongStream.$4$impl');\n    $5 \x3d goog.module.get('java.util.stream.LongStream.$5$impl');\n    LongStreamImpl \x3d goog.module.get('java.util.stream.LongStreamImpl$impl');\n    Empty \x3d goog.module.get('java.util.stream.LongStreamImpl.Empty$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(LongStream, $Util.$makeClassName('java.util.stream.LongStream'));\n\n\nLongStream.$markImplementor(/** @type {Function} */ (LongStream));\n\n\nexports \x3d LongStream; \n//# sourceMappingURL\x3dLongStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl$impl');\n\n\nconst LongStream \x3d goog.require('java.util.stream.LongStream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet LongSummaryStatistics \x3d goog.forwardDeclare('java.util.LongSummaryStatistics$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OptionalLong \x3d goog.forwardDeclare('java.util.OptionalLong$impl');\nlet PrimitiveIterator_OfLong \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfLong$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet LongBinaryOperator \x3d goog.forwardDeclare('java.util.function.LongBinaryOperator$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongFunction \x3d goog.forwardDeclare('java.util.function.LongFunction$impl');\nlet LongPredicate \x3d goog.forwardDeclare('java.util.function.LongPredicate$impl');\nlet LongToDoubleFunction \x3d goog.forwardDeclare('java.util.function.LongToDoubleFunction$impl');\nlet LongToIntFunction \x3d goog.forwardDeclare('java.util.function.LongToIntFunction$impl');\nlet LongUnaryOperator \x3d goog.forwardDeclare('java.util.function.LongUnaryOperator$impl');\nlet ObjLongConsumer \x3d goog.forwardDeclare('java.util.function.ObjLongConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.$3$impl');\nlet FilterSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.FilterSpliterator$impl');\nlet LimitSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.LimitSpliterator$impl');\nlet MapToDoubleSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.MapToDoubleSpliterator$impl');\nlet MapToIntSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.MapToIntSpliterator$impl');\nlet MapToLongSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.MapToLongSpliterator$impl');\nlet MapToObjSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.MapToObjSpliterator$impl');\nlet SkipSpliterator \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.SkipSpliterator$impl');\nlet ValueConsumer \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.ValueConsumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\n/**\n * @extends {TerminatableStream\x3cLongStreamImpl\x3e}\n * @implements {LongStream}\n  */\nclass LongStreamImpl extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfLong} */\n    this.f_spliterator__java_util_stream_LongStreamImpl_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LongStreamImpl(TerminatableStream, OfLong)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @param {OfLong} spliterator\n   * @return {!LongStreamImpl}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(previous, spliterator) {\n    LongStreamImpl.$clinit();\n    let $instance \x3d new LongStreamImpl();\n    $instance.$ctor__java_util_stream_LongStreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(previous, spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LongStreamImpl(TerminatableStream, OfLong)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @param {OfLong} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(previous, spliterator) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n    this.f_spliterator__java_util_stream_LongStreamImpl_ \x3d spliterator;\n  }\n  \n  /**\n   * @override\n   * @param {LongConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_LongConsumer(action) {\n    this.m_forEachOrdered__java_util_function_LongConsumer(action);\n  }\n  \n  /**\n   * @override\n   * @param {LongConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_LongConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n    this.f_spliterator__java_util_stream_LongStreamImpl_.m_forEachRemaining__java_lang_Object(action);\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c!$Long\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    let entries \x3d /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([0], $long));\n    this.f_spliterator__java_util_stream_LongStreamImpl_.m_forEachRemaining__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ value) \x3d\x3e{\n      $Arrays.$set(entries, entries.length, value);\n    })));\n    return entries;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} identity\n   * @param {LongBinaryOperator} op\n   * @return {!$Long}\n   * @public\n   */\n  m_reduce__long__java_util_function_LongBinaryOperator(identity, op) {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d ValueConsumer.$create__();\n    holder.f_value__java_util_stream_LongStreamImpl_ValueConsumer \x3d identity;\n    this.f_spliterator__java_util_stream_LongStreamImpl_.m_forEachRemaining__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ value) \x3d\x3e{\n      holder.m_accept__long(op.m_applyAsLong__long__long(holder.f_value__java_util_stream_LongStreamImpl_ValueConsumer, value));\n    })));\n    return holder.f_value__java_util_stream_LongStreamImpl_ValueConsumer;\n  }\n  \n  /**\n   * @override\n   * @param {LongBinaryOperator} op\n   * @return {OptionalLong}\n   * @public\n   */\n  m_reduce__java_util_function_LongBinaryOperator(op) {\n    let holder \x3d ValueConsumer.$create__();\n    if (this.f_spliterator__java_util_stream_LongStreamImpl_.m_tryAdvance__java_lang_Object(holder)) {\n      return OptionalLong.m_of__long(this.m_reduce__long__java_util_function_LongBinaryOperator(holder.f_value__java_util_stream_LongStreamImpl_ValueConsumer, op));\n    }\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {ObjLongConsumer\x3cM_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjLongConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    let acc \x3d supplier.m_get__();\n    this.f_spliterator__java_util_stream_LongStreamImpl_.m_forEachRemaining__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ value) \x3d\x3e{\n      accumulator.m_accept__java_lang_Object__long(acc, value);\n    })));\n    return acc;\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_sum__() {\n    return this.m_summaryStatistics__().m_getSum__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_min__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalLong.m_empty__();\n    }\n    return OptionalLong.m_of__long(stats.m_getMin__());\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_max__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalLong.m_empty__();\n    }\n    return OptionalLong.m_of__long(stats.m_getMax__());\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    let count \x3d $Long.fromInt(0);\n    while (this.f_spliterator__java_util_stream_LongStreamImpl_.m_tryAdvance__java_lang_Object(LongConsumer.$adapt(((/** !$Long */ value) \x3d\x3e{\n    })))) {\n      count \x3d $LongUtils.$plus(count, $Long.fromInt(1));\n    }\n    return count;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalDouble.m_empty__();\n    }\n    return OptionalDouble.m_of__double(stats.m_getAverage__());\n  }\n  \n  /**\n   * @override\n   * @return {LongSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n    return /**@type {LongSummaryStatistics} */ ($Casts.$to(this.m_collect__java_util_function_Supplier__java_util_function_ObjLongConsumer__java_util_function_BiConsumer(Supplier.$adapt((() \x3d\x3e{\n      return LongSummaryStatistics.$create__();\n    })), ObjLongConsumer.$adapt(((/** LongSummaryStatistics */ longSummaryStatistics, /** !$Long */ value) \x3d\x3e{\n      longSummaryStatistics.m_accept__long(value);\n    })), BiConsumer.$adapt(((/** LongSummaryStatistics */ arg0, /** LongSummaryStatistics */ arg1) \x3d\x3e{\n      arg0.m_combine__java_util_LongSummaryStatistics(arg1);\n    }))), LongSummaryStatistics));\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_LongPredicate(predicate) {\n    return this.m_filter__java_util_function_LongPredicate(predicate).m_findFirst__().m_isPresent__();\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_LongPredicate(predicate) {\n    return !this.m_anyMatch__java_util_function_LongPredicate(predicate.m_negate__());\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_LongPredicate(predicate) {\n    return !this.m_anyMatch__java_util_function_LongPredicate(predicate);\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d ValueConsumer.$create__();\n    if (this.f_spliterator__java_util_stream_LongStreamImpl_.m_tryAdvance__java_lang_Object(holder)) {\n      return OptionalLong.m_of__long(holder.f_value__java_util_stream_LongStreamImpl_ValueConsumer);\n    }\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_findAny__() {\n    return this.m_findFirst__();\n  }\n  \n  /**\n   * @override\n   * @return {PrimitiveIterator_OfLong}\n   * @public\n   */\n  m_iterator__() {\n    return Spliterators.m_iterator__java_util_Spliterator_OfLong(this.m_spliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {OfLong}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return this.f_spliterator__java_util_stream_LongStreamImpl_;\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {LongStream}\n   * @public\n   */\n  m_filter__java_util_function_LongPredicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, FilterSpliterator.$create__java_util_function_LongPredicate__java_util_Spliterator_OfLong(predicate, this.f_spliterator__java_util_stream_LongStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {LongUnaryOperator} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_map__java_util_function_LongUnaryOperator(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, MapToLongSpliterator.$create__java_util_function_LongUnaryOperator__java_util_Spliterator_OfLong(mapper, this.f_spliterator__java_util_stream_LongStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @template M_U\n   * @param {LongFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_LongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!MapToObjSpliterator\x3c*\x3e} */ (MapToObjSpliterator.$create__java_util_function_LongFunction__java_util_Spliterator_OfLong(mapper, this.f_spliterator__java_util_stream_LongStreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @param {LongToIntFunction} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_LongToIntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, MapToIntSpliterator.$create__java_util_function_LongToIntFunction__java_util_Spliterator_OfLong(mapper, this.f_spliterator__java_util_stream_LongStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {LongToDoubleFunction} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_LongToDoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, MapToDoubleSpliterator.$create__java_util_function_LongToDoubleFunction__java_util_Spliterator_OfLong(mapper, this.f_spliterator__java_util_stream_LongStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {LongFunction\x3c?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_flatMap__java_util_function_LongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cLongStream\x3e} */ (MapToObjSpliterator.$create__java_util_function_LongFunction__java_util_Spliterator_OfLong(mapper, this.f_spliterator__java_util_stream_LongStreamImpl_));\n    let flatMapSpliterator \x3d $1.$create__java_util_stream_LongStreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0);\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, flatMapSpliterator);\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let seen \x3d /**@type {!HashSet\x3cLong\x3e} */ (HashSet.$create__());\n    return this.m_filter__java_util_function_LongPredicate(LongPredicate.$adapt(((/** !$Long */ arg0) \x3d\x3e{\n      return seen.add(Long.m_valueOf__long(arg0));\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let sortedSpliterator \x3d $2.$create__java_util_stream_LongStreamImpl__long__int(this, this.f_spliterator__java_util_stream_LongStreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_LongStreamImpl_.m_characteristics__() | Spliterator.f_SORTED__java_util_Spliterator);\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, sortedSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {LongConsumer} action\n   * @return {LongStream}\n   * @public\n   */\n  m_peek__java_util_function_LongConsumer(action) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(action);\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let peekSpliterator \x3d $3.$create__java_util_stream_LongStreamImpl__java_util_function_LongConsumer__long__int(this, action, this.f_spliterator__java_util_stream_LongStreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_LongStreamImpl_.m_characteristics__());\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, peekSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {LongStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, LimitSpliterator.$create__long__java_util_Spliterator_OfLong(maxSize, this.f_spliterator__java_util_stream_LongStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {LongStream}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    if ($LongUtils.$equals(n, $Primitives.$widenIntToLong(0))) {\n      return this;\n    }\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, SkipSpliterator.$create__long__java_util_Spliterator_OfLong(n, this.f_spliterator__java_util_stream_LongStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_asDoubleStream__() {\n    return this.m_mapToDouble__java_util_function_LongToDoubleFunction(LongToDoubleFunction.$adapt(((/** !$Long */ x) \x3d\x3e{\n      return $Primitives.$widenLongToDouble(x);\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cLong\x3e}\n   * @public\n   */\n  m_boxed__() {\n    return /**@type {Stream\x3cLong\x3e} */ (this.m_mapToObj__java_util_function_LongFunction(LongFunction.$adapt(((/** !$Long */ arg0) \x3d\x3e{\n      return Long.m_valueOf__long(arg0);\n    }))));\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongStreamImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongStreamImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongStreamImpl.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    LongSummaryStatistics \x3d goog.module.get('java.util.LongSummaryStatistics$impl');\n    OptionalDouble \x3d goog.module.get('java.util.OptionalDouble$impl');\n    OptionalLong \x3d goog.module.get('java.util.OptionalLong$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    BiConsumer \x3d goog.module.get('java.util.function.BiConsumer$impl');\n    LongConsumer \x3d goog.module.get('java.util.function.LongConsumer$impl');\n    LongFunction \x3d goog.module.get('java.util.function.LongFunction$impl');\n    LongPredicate \x3d goog.module.get('java.util.function.LongPredicate$impl');\n    LongToDoubleFunction \x3d goog.module.get('java.util.function.LongToDoubleFunction$impl');\n    ObjLongConsumer \x3d goog.module.get('java.util.function.ObjLongConsumer$impl');\n    Supplier \x3d goog.module.get('java.util.function.Supplier$impl');\n    DoubleStreamImpl \x3d goog.module.get('java.util.stream.DoubleStreamImpl$impl');\n    IntStreamImpl \x3d goog.module.get('java.util.stream.IntStreamImpl$impl');\n    $1 \x3d goog.module.get('java.util.stream.LongStreamImpl.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.LongStreamImpl.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.LongStreamImpl.$3$impl');\n    FilterSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.FilterSpliterator$impl');\n    LimitSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.LimitSpliterator$impl');\n    MapToDoubleSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.MapToDoubleSpliterator$impl');\n    MapToIntSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.MapToIntSpliterator$impl');\n    MapToLongSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.MapToLongSpliterator$impl');\n    MapToObjSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.MapToObjSpliterator$impl');\n    SkipSpliterator \x3d goog.module.get('java.util.stream.LongStreamImpl.SkipSpliterator$impl');\n    ValueConsumer \x3d goog.module.get('java.util.stream.LongStreamImpl.ValueConsumer$impl');\n    StreamImpl \x3d goog.module.get('java.util.stream.StreamImpl$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongStreamImpl, $Util.$makeClassName('java.util.stream.LongStreamImpl'));\n\n\nLongStream.$markImplementor(LongStreamImpl);\n\n\nexports \x3d LongStreamImpl; \n//# sourceMappingURL\x3dLongStreamImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _LongSummaryStatistics \x3d goog.require('java.util.LongSummaryStatistics');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OptionalLong \x3d goog.require('java.util.OptionalLong');\nconst _PrimitiveIterator_OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongFunction \x3d goog.require('java.util.function.LongFunction');\nconst _LongPredicate \x3d goog.require('java.util.function.LongPredicate');\nconst _LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction');\nconst _LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction');\nconst _LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator');\nconst _ObjLongConsumer \x3d goog.require('java.util.function.ObjLongConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _$1 \x3d goog.require('java.util.stream.LongStreamImpl.$1');\nconst _$2 \x3d goog.require('java.util.stream.LongStreamImpl.$2');\nconst _$3 \x3d goog.require('java.util.stream.LongStreamImpl.$3');\nconst _FilterSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.FilterSpliterator');\nconst _LimitSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.LimitSpliterator');\nconst _MapToDoubleSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToDoubleSpliterator');\nconst _MapToIntSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToIntSpliterator');\nconst _MapToLongSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToLongSpliterator');\nconst _MapToObjSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.MapToObjSpliterator');\nconst _SkipSpliterator \x3d goog.require('java.util.stream.LongStreamImpl.SkipSpliterator');\nconst _ValueConsumer \x3d goog.require('java.util.stream.LongStreamImpl.ValueConsumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl$impl');\nexports \x3d LongStreamImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$Empty.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$Empty.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamImpl.Empty$impl');\n\n\nconst Stream \x3d goog.require('java.util.stream.Stream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Optional \x3d goog.forwardDeclare('java.util.Optional$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet Collector \x3d goog.forwardDeclare('java.util.stream.Collector$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.Empty$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.Empty$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.Empty$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @template C_Empty_T\n * @extends {TerminatableStream\x3cStreamImpl_Empty\x3cC_Empty_T\x3e\x3e}\n * @implements {Stream\x3cC_Empty_T\x3e}\n  */\nclass StreamImpl_Empty extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Empty(TerminatableStream)'.\n   * @template C_Empty_T\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {!StreamImpl_Empty\x3cC_Empty_T\x3e}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream(previous) {\n    StreamImpl_Empty.$clinit();\n    let $instance \x3d new StreamImpl_Empty();\n    $instance.$ctor__java_util_stream_StreamImpl_Empty__java_util_stream_TerminatableStream(previous);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamImpl_Empty__java_util_stream_TerminatableStream(previous) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_filter__java_util_function_Predicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_map_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Stream\x3cM_Empty_map_R\x3e}\n   * @public\n   */\n  m_map__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {Stream} */ ($Casts.$to(this, Stream));\n  }\n  \n  /**\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_ToIntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_ToLongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_ToDoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_flatMap_R\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {Stream\x3cM_Empty_flatMap_R\x3e}\n   * @public\n   */\n  m_flatMap__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {Stream} */ ($Casts.$to(this, Stream));\n  }\n  \n  /**\n   * @override\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_flatMapToInt__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_flatMapToLong__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {j_u_function_Function\x3c?, ?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_flatMapToDouble__java_util_function_Function(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_sorted__java_util_Comparator(comparator) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_peek__java_util_function_Consumer(action) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_Consumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    return new Array(0);\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_toArray_A\n   * @param {IntFunction\x3cArray\x3cM_Empty_toArray_A\x3e\x3e} generator\n   * @return {Array\x3cM_Empty_toArray_A\x3e}\n   * @public\n   */\n  m_toArray__java_util_function_IntFunction(generator) {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(generator.m_apply__int(0), j_l_Object, 1));\n  }\n  \n  /**\n   * @override\n   * @param {C_Empty_T} identity\n   * @param {BinaryOperator\x3cC_Empty_T\x3e} accumulator\n   * @return {C_Empty_T}\n   * @public\n   */\n  m_reduce__java_lang_Object__java_util_function_BinaryOperator(identity, accumulator) {\n    this.m_terminate___$pp_java_util_stream();\n    return identity;\n  }\n  \n  /**\n   * @override\n   * @param {BinaryOperator\x3cC_Empty_T\x3e} accumulator\n   * @return {Optional\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_reduce__java_util_function_BinaryOperator(accumulator) {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Optional\x3cC_Empty_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_reduce_U\n   * @param {M_Empty_reduce_U} identity\n   * @param {BiFunction\x3cM_Empty_reduce_U, ?, M_Empty_reduce_U\x3e} accumulator\n   * @param {BinaryOperator\x3cM_Empty_reduce_U\x3e} combiner\n   * @return {M_Empty_reduce_U}\n   * @public\n   */\n  m_reduce__java_lang_Object__java_util_function_BiFunction__java_util_function_BinaryOperator(identity, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    return identity;\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_collect_R\n   * @param {Supplier\x3cM_Empty_collect_R\x3e} supplier\n   * @param {BiConsumer\x3cM_Empty_collect_R, ?\x3e} accumulator\n   * @param {BiConsumer\x3cM_Empty_collect_R, M_Empty_collect_R\x3e} combiner\n   * @return {M_Empty_collect_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_BiConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    return supplier.m_get__();\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_collect_R, M_Empty_collect_A\n   * @param {Collector\x3c?, M_Empty_collect_A, M_Empty_collect_R\x3e} collector\n   * @return {M_Empty_collect_R}\n   * @public\n   */\n  m_collect__java_util_stream_Collector(collector) {\n    this.m_terminate___$pp_java_util_stream();\n    return collector.m_finisher__().m_apply__java_lang_Object(collector.m_supplier__().m_get__());\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Optional\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_min__java_util_Comparator(comparator) {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Optional\x3cC_Empty_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {Optional\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_max__java_util_Comparator(comparator) {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Optional\x3cC_Empty_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    return $Long.fromInt(0);\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_Predicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_Predicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {Predicate\x3c?\x3e} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_Predicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {Optional\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Optional\x3cC_Empty_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @override\n   * @return {Optional\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_findAny__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Optional\x3cC_Empty_T\x3e} */ (Optional.m_empty__());\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_iterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Iterator\x3cC_Empty_T\x3e} */ (Collections.m_emptyIterator__());\n  }\n  \n  /**\n   * @override\n   * @return {Spliterator\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {Spliterator\x3cC_Empty_T\x3e} */ (Spliterators.m_emptySpliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cC_Empty_T\x3e}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StreamImpl_Empty;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StreamImpl_Empty);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StreamImpl_Empty.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Optional \x3d goog.module.get('java.util.Optional$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    DoubleStreamImpl_Empty \x3d goog.module.get('java.util.stream.DoubleStreamImpl.Empty$impl');\n    Empty \x3d goog.module.get('java.util.stream.IntStreamImpl.Empty$impl');\n    LongStreamImpl_Empty \x3d goog.module.get('java.util.stream.LongStreamImpl.Empty$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StreamImpl_Empty, $Util.$makeClassName('java.util.stream.StreamImpl$Empty'));\n\n\nStream.$markImplementor(StreamImpl_Empty);\n\n\nexports \x3d StreamImpl_Empty; \n//# sourceMappingURL\x3dStreamImpl$Empty.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamImpl$Empty.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamImpl$Empty.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamImpl.Empty');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Optional \x3d goog.require('java.util.Optional');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _Collector \x3d goog.require('java.util.stream.Collector');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl_Empty \x3d goog.require('java.util.stream.DoubleStreamImpl.Empty');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _Empty \x3d goog.require('java.util.stream.IntStreamImpl.Empty');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl_Empty \x3d goog.require('java.util.stream.LongStreamImpl.Empty');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar StreamImpl_Empty \x3d goog.require('java.util.stream.StreamImpl.Empty$impl');\nexports \x3d StreamImpl_Empty;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream$impl');\n\n\nconst BaseStream \x3d goog.require('java.util.stream.BaseStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Runnable \x3d goog.forwardDeclare('java.lang.Runnable$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet IntSummaryStatistics \x3d goog.forwardDeclare('java.util.IntSummaryStatistics$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OptionalInt \x3d goog.forwardDeclare('java.util.OptionalInt$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfInt$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterator_OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet IntBinaryOperator \x3d goog.forwardDeclare('java.util.function.IntBinaryOperator$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet IntPredicate \x3d goog.forwardDeclare('java.util.function.IntPredicate$impl');\nlet IntSupplier \x3d goog.forwardDeclare('java.util.function.IntSupplier$impl');\nlet IntToDoubleFunction \x3d goog.forwardDeclare('java.util.function.IntToDoubleFunction$impl');\nlet IntToLongFunction \x3d goog.forwardDeclare('java.util.function.IntToLongFunction$impl');\nlet IntUnaryOperator \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator$impl');\nlet ObjIntConsumer \x3d goog.forwardDeclare('java.util.function.ObjIntConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.IntStream.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.IntStream.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.IntStream.$3$impl');\nlet $4 \x3d goog.forwardDeclare('java.util.stream.IntStream.$4$impl');\nlet $5 \x3d goog.forwardDeclare('java.util.stream.IntStream.$5$impl');\nlet Builder \x3d goog.forwardDeclare('java.util.stream.IntStream.Builder$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.Empty$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\n/**\n * @interface\n * @extends {BaseStream\x3cInteger, IntStream\x3e}\n */\nclass IntStream {\n  /**\n   * @return {Builder}\n   * @public\n   */\n  static m_builder__() {\n    IntStream.$clinit();\n    return $1.$create__();\n  }\n  \n  /**\n   * @param {IntStream} a\n   * @param {IntStream} b\n   * @return {IntStream}\n   * @public\n   */\n  static m_concat__java_util_stream_IntStream__java_util_stream_IntStream(a, b) {\n    IntStream.$clinit();\n    let spliteratorOfStreams \x3d /**@type {List\x3cIntStream\x3e} */ (Arrays.m_asList__arrayOf_java_lang_Object(/**@type {!Array\x3cIntStream\x3e} */ ($Arrays.$init([a, b], IntStream)))).m_spliterator__();\n    let spliterator \x3d $2.$create__java_util_Spliterator__long__int(spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0);\n    let result \x3d IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(null, spliterator);\n    return /**@type {IntStream} */ ($Casts.$to(/**@type {IntStream} */ ($Casts.$to(result.m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      a.m_close__();\n    }))), IntStream)).m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      b.m_close__();\n    }))), IntStream));\n  }\n  \n  /**\n   * @return {IntStream}\n   * @public\n   */\n  static m_empty__() {\n    IntStream.$clinit();\n    return Empty.$create__java_util_stream_TerminatableStream(null);\n  }\n  \n  /**\n   * @param {IntSupplier} s\n   * @return {IntStream}\n   * @public\n   */\n  static m_generate__java_util_function_IntSupplier(s) {\n    IntStream.$clinit();\n    let spliterator \x3d $3.$create__java_util_function_IntSupplier__long__int(s, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n    return StreamSupport.m_intStream__java_util_Spliterator_OfInt__boolean(spliterator, false);\n  }\n  \n  /**\n   * @param {number} seed\n   * @param {IntUnaryOperator} f\n   * @return {IntStream}\n   * @public\n   */\n  static m_iterate__int__java_util_function_IntUnaryOperator(seed, f) {\n    IntStream.$clinit();\n    let spliterator \x3d $4.$create__int__java_util_function_IntUnaryOperator__long__int(seed, f, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n    return StreamSupport.m_intStream__java_util_Spliterator_OfInt__boolean(spliterator, false);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} values\n   * @return {IntStream}\n   * @public\n   */\n  static m_of__arrayOf_int(values) {\n    IntStream.$clinit();\n    return Arrays.m_stream__arrayOf_int(values);\n  }\n  \n  /**\n   * @param {number} t\n   * @return {IntStream}\n   * @public\n   */\n  static m_of__int(t) {\n    IntStream.$clinit();\n    return IntStream.m_of__arrayOf_int(/**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([t], $int)));\n  }\n  \n  /**\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {IntStream}\n   * @public\n   */\n  static m_range__int__int(startInclusive, endExclusive) {\n    IntStream.$clinit();\n    if (startInclusive \x3e\x3d endExclusive) {\n      return IntStream.m_empty__();\n    }\n    return IntStream.m_rangeClosed__int__int(startInclusive, endExclusive - 1);\n  }\n  \n  /**\n   * @param {number} startInclusive\n   * @param {number} endInclusive\n   * @return {IntStream}\n   * @public\n   */\n  static m_rangeClosed__int__int(startInclusive, endInclusive) {\n    IntStream.$clinit();\n    if (startInclusive \x3e endInclusive) {\n      return IntStream.m_empty__();\n    }\n    let count \x3d endInclusive - startInclusive + 1;\n    let spliterator \x3d $5.$create__int__int__long__int(startInclusive, endInclusive, $Primitives.$widenIntToLong(count), Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_SIZED__java_util_Spliterator | Spliterator.f_SUBSIZED__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator | Spliterator.f_SORTED__java_util_Spliterator | Spliterator.f_DISTINCT__java_util_Spliterator);\n    return StreamSupport.m_intStream__java_util_Spliterator_OfInt__boolean(spliterator, false);\n  }\n  \n  /**\n   * @abstract\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_IntPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_IntPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoubleStream}\n   * @public\n   */\n  m_asDoubleStream__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {LongStream}\n   * @public\n   */\n  m_asLongStream__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cInteger\x3e}\n   * @public\n   */\n  m_boxed__() {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {ObjIntConsumer\x3cM_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjIntConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {IntStream}\n   * @public\n   */\n  m_distinct__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntPredicate} predicate\n   * @return {IntStream}\n   * @public\n   */\n  m_filter__java_util_function_IntPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalInt}\n   * @public\n   */\n  m_findAny__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalInt}\n   * @public\n   */\n  m_findFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntFunction\x3c?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_flatMap__java_util_function_IntFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_IntConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_IntConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {OfInt}\n   * @public\n   */\n  m_iterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} maxSize\n   * @return {IntStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntUnaryOperator} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_map__java_util_function_IntUnaryOperator(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntToDoubleFunction} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_IntToDoubleFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntToLongFunction} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_IntToLongFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_U\n   * @param {IntFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_IntFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalInt}\n   * @public\n   */\n  m_max__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalInt}\n   * @public\n   */\n  m_min__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_IntPredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_parallel__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntConsumer} action\n   * @return {IntStream}\n   * @public\n   */\n  m_peek__java_util_function_IntConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {IntBinaryOperator} op\n   * @return {OptionalInt}\n   * @public\n   */\n  m_reduce__java_util_function_IntBinaryOperator(op) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} identity\n   * @param {IntBinaryOperator} op\n   * @return {number}\n   * @public\n   */\n  m_reduce__int__java_util_function_IntBinaryOperator(identity, op) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_sequential__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} n\n   * @return {IntStream}\n   * @public\n   */\n  m_skip__long(n) {\n  }\n  \n  /**\n   * @abstract\n   * @return {IntStream}\n   * @public\n   */\n  m_sorted__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Spliterator_OfInt}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_sum__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {IntSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_toArray__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    BaseStream.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_IntStream \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_IntStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_IntStream;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntStream.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Runnable \x3d goog.module.get('java.lang.Runnable$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    $1 \x3d goog.module.get('java.util.stream.IntStream.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.IntStream.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.IntStream.$3$impl');\n    $4 \x3d goog.module.get('java.util.stream.IntStream.$4$impl');\n    $5 \x3d goog.module.get('java.util.stream.IntStream.$5$impl');\n    IntStreamImpl \x3d goog.module.get('java.util.stream.IntStreamImpl$impl');\n    Empty \x3d goog.module.get('java.util.stream.IntStreamImpl.Empty$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(IntStream, $Util.$makeClassName('java.util.stream.IntStream'));\n\n\nIntStream.$markImplementor(/** @type {Function} */ (IntStream));\n\n\nexports \x3d IntStream; \n//# sourceMappingURL\x3dIntStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$Empty.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$Empty.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl.Empty$impl');\n\n\nconst IntStream \x3d goog.require('java.util.stream.IntStream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet IntSummaryStatistics \x3d goog.forwardDeclare('java.util.IntSummaryStatistics$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OptionalInt \x3d goog.forwardDeclare('java.util.OptionalInt$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfInt$impl');\nlet Spliterator_OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet IntBinaryOperator \x3d goog.forwardDeclare('java.util.function.IntBinaryOperator$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet IntPredicate \x3d goog.forwardDeclare('java.util.function.IntPredicate$impl');\nlet IntToDoubleFunction \x3d goog.forwardDeclare('java.util.function.IntToDoubleFunction$impl');\nlet IntToLongFunction \x3d goog.forwardDeclare('java.util.function.IntToLongFunction$impl');\nlet IntUnaryOperator \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator$impl');\nlet ObjIntConsumer \x3d goog.forwardDeclare('java.util.function.ObjIntConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.Empty$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.Empty$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.StreamImpl.Empty$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\n/**\n * @extends {TerminatableStream\x3cIntStreamImpl_Empty\x3e}\n * @implements {IntStream}\n  */\nclass IntStreamImpl_Empty extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {!IntStreamImpl_Empty}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream(previous) {\n    IntStreamImpl_Empty.$clinit();\n    let $instance \x3d new IntStreamImpl_Empty();\n    $instance.$ctor__java_util_stream_IntStreamImpl_Empty__java_util_stream_TerminatableStream(previous);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl_Empty__java_util_stream_TerminatableStream(previous) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {IntStream}\n   * @public\n   */\n  m_filter__java_util_function_IntPredicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {IntUnaryOperator} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_map__java_util_function_IntUnaryOperator(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_mapToObj_U\n   * @param {IntFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_Empty_mapToObj_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_IntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!Empty\x3c*\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(this));\n  }\n  \n  /**\n   * @override\n   * @param {IntToLongFunction} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_IntToLongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {IntToDoubleFunction} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_IntToDoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {IntFunction\x3c?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_flatMap__java_util_function_IntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {IntConsumer} action\n   * @return {IntStream}\n   * @public\n   */\n  m_peek__java_util_function_IntConsumer(action) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {IntStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {IntStream}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {IntConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_IntConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @param {IntConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_IntConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $int));\n  }\n  \n  /**\n   * @override\n   * @param {number} identity\n   * @param {IntBinaryOperator} op\n   * @return {number}\n   * @public\n   */\n  m_reduce__int__java_util_function_IntBinaryOperator(identity, op) {\n    this.m_terminate___$pp_java_util_stream();\n    return identity;\n  }\n  \n  /**\n   * @override\n   * @param {IntBinaryOperator} op\n   * @return {OptionalInt}\n   * @public\n   */\n  m_reduce__java_util_function_IntBinaryOperator(op) {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_collect_R\n   * @param {Supplier\x3cM_Empty_collect_R\x3e} supplier\n   * @param {ObjIntConsumer\x3cM_Empty_collect_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_Empty_collect_R, M_Empty_collect_R\x3e} combiner\n   * @return {M_Empty_collect_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjIntConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    return supplier.m_get__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_sum__() {\n    this.m_terminate___$pp_java_util_stream();\n    return 0;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_min__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_max__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    return $Long.fromInt(0);\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {IntSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n    this.m_terminate___$pp_java_util_stream();\n    return IntSummaryStatistics.$create__();\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_IntPredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_IntPredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_IntPredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_findAny__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_asLongStream__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_asDoubleStream__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cInteger\x3e}\n   * @public\n   */\n  m_boxed__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!Empty\x3cInteger\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(this));\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {OfInt}\n   * @public\n   */\n  m_iterator__() {\n    return Spliterators.m_iterator__java_util_Spliterator_OfInt(this.m_spliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {Spliterator_OfInt}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return Spliterators.m_emptyIntSpliterator__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IntStreamImpl_Empty;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IntStreamImpl_Empty);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntStreamImpl_Empty.$clinit \x3d function() {};\n    IntSummaryStatistics \x3d goog.module.get('java.util.IntSummaryStatistics$impl');\n    OptionalDouble \x3d goog.module.get('java.util.OptionalDouble$impl');\n    OptionalInt \x3d goog.module.get('java.util.OptionalInt$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    DoubleStreamImpl_Empty \x3d goog.module.get('java.util.stream.DoubleStreamImpl.Empty$impl');\n    LongStreamImpl_Empty \x3d goog.module.get('java.util.stream.LongStreamImpl.Empty$impl');\n    Empty \x3d goog.module.get('java.util.stream.StreamImpl.Empty$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IntStreamImpl_Empty, $Util.$makeClassName('java.util.stream.IntStreamImpl$Empty'));\n\n\nIntStream.$markImplementor(IntStreamImpl_Empty);\n\n\nexports \x3d IntStreamImpl_Empty; \n//# sourceMappingURL\x3dIntStreamImpl$Empty.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl$Empty.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl$Empty.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl.Empty');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _IntSummaryStatistics \x3d goog.require('java.util.IntSummaryStatistics');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OptionalInt \x3d goog.require('java.util.OptionalInt');\nconst _OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _Spliterator_OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _IntPredicate \x3d goog.require('java.util.function.IntPredicate');\nconst _IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction');\nconst _IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _ObjIntConsumer \x3d goog.require('java.util.function.ObjIntConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl_Empty \x3d goog.require('java.util.stream.DoubleStreamImpl.Empty');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl_Empty \x3d goog.require('java.util.stream.LongStreamImpl.Empty');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _Empty \x3d goog.require('java.util.stream.StreamImpl.Empty');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar IntStreamImpl_Empty \x3d goog.require('java.util.stream.IntStreamImpl.Empty$impl');\nexports \x3d IntStreamImpl_Empty;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStream$impl');\n\n\nconst BaseStream \x3d goog.require('java.util.stream.BaseStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Runnable \x3d goog.forwardDeclare('java.lang.Runnable$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet DoubleSummaryStatistics \x3d goog.forwardDeclare('java.util.DoubleSummaryStatistics$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfDouble$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Spliterator_OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet DoubleBinaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleBinaryOperator$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleFunction \x3d goog.forwardDeclare('java.util.function.DoubleFunction$impl');\nlet DoublePredicate \x3d goog.forwardDeclare('java.util.function.DoublePredicate$impl');\nlet DoubleSupplier \x3d goog.forwardDeclare('java.util.function.DoubleSupplier$impl');\nlet DoubleToIntFunction \x3d goog.forwardDeclare('java.util.function.DoubleToIntFunction$impl');\nlet DoubleToLongFunction \x3d goog.forwardDeclare('java.util.function.DoubleToLongFunction$impl');\nlet DoubleUnaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleUnaryOperator$impl');\nlet ObjDoubleConsumer \x3d goog.forwardDeclare('java.util.function.ObjDoubleConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.DoubleStream.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.DoubleStream.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.DoubleStream.$3$impl');\nlet $4 \x3d goog.forwardDeclare('java.util.stream.DoubleStream.$4$impl');\nlet Builder \x3d goog.forwardDeclare('java.util.stream.DoubleStream.Builder$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.Empty$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * @interface\n * @extends {BaseStream\x3c?number, DoubleStream\x3e}\n */\nclass DoubleStream {\n  /**\n   * @return {Builder}\n   * @public\n   */\n  static m_builder__() {\n    DoubleStream.$clinit();\n    return $1.$create__();\n  }\n  \n  /**\n   * @param {DoubleStream} a\n   * @param {DoubleStream} b\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_concat__java_util_stream_DoubleStream__java_util_stream_DoubleStream(a, b) {\n    DoubleStream.$clinit();\n    let spliteratorOfStreams \x3d /**@type {List\x3cDoubleStream\x3e} */ (Arrays.m_asList__arrayOf_java_lang_Object(/**@type {!Array\x3cDoubleStream\x3e} */ ($Arrays.$init([a, b], DoubleStream)))).m_spliterator__();\n    let spliterator \x3d $2.$create__java_util_Spliterator__long__int(spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0);\n    let result \x3d DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(null, spliterator);\n    return /**@type {DoubleStream} */ ($Casts.$to(/**@type {DoubleStream} */ ($Casts.$to(result.m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      a.m_close__();\n    }))), DoubleStream)).m_onClose__java_lang_Runnable(Runnable.$adapt((() \x3d\x3e{\n      b.m_close__();\n    }))), DoubleStream));\n  }\n  \n  /**\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_empty__() {\n    DoubleStream.$clinit();\n    return Empty.$create__java_util_stream_TerminatableStream(null);\n  }\n  \n  /**\n   * @param {DoubleSupplier} s\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_generate__java_util_function_DoubleSupplier(s) {\n    DoubleStream.$clinit();\n    let spliterator \x3d $3.$create__java_util_function_DoubleSupplier__long__int(s, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n    return StreamSupport.m_doubleStream__java_util_Spliterator_OfDouble__boolean(spliterator, false);\n  }\n  \n  /**\n   * @param {number} seed\n   * @param {DoubleUnaryOperator} f\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_iterate__double__java_util_function_DoubleUnaryOperator(seed, f) {\n    DoubleStream.$clinit();\n    let spliterator \x3d $4.$create__double__java_util_function_DoubleUnaryOperator__long__int(seed, f, Long.f_MAX_VALUE__java_lang_Long, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n    return StreamSupport.m_doubleStream__java_util_Spliterator_OfDouble__boolean(spliterator, false);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} values\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_of__arrayOf_double(values) {\n    DoubleStream.$clinit();\n    return Arrays.m_stream__arrayOf_double(values);\n  }\n  \n  /**\n   * @param {number} t\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_of__double(t) {\n    DoubleStream.$clinit();\n    return DoubleStream.m_of__arrayOf_double(/**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([t], $double)));\n  }\n  \n  /**\n   * @abstract\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_DoublePredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_DoublePredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3c?number\x3e}\n   * @public\n   */\n  m_boxed__() {\n  }\n  \n  /**\n   * @abstract\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {ObjDoubleConsumer\x3cM_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjDoubleConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n  }\n  \n  /**\n   * @abstract\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoubleStream}\n   * @public\n   */\n  m_distinct__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoublePredicate} predicate\n   * @return {DoubleStream}\n   * @public\n   */\n  m_filter__java_util_function_DoublePredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_findAny__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_findFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleFunction\x3c?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_flatMap__java_util_function_DoubleFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_DoubleConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_DoubleConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {OfDouble}\n   * @public\n   */\n  m_iterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} maxSize\n   * @return {DoubleStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleUnaryOperator} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_map__java_util_function_DoubleUnaryOperator(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleToIntFunction} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_DoubleToIntFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleToLongFunction} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_DoubleToLongFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_U\n   * @param {DoubleFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_DoubleFunction(mapper) {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_max__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_min__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_DoublePredicate(predicate) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_parallel__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleConsumer} action\n   * @return {DoubleStream}\n   * @public\n   */\n  m_peek__java_util_function_DoubleConsumer(action) {\n  }\n  \n  /**\n   * @abstract\n   * @param {DoubleBinaryOperator} op\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_reduce__java_util_function_DoubleBinaryOperator(op) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} identity\n   * @param {DoubleBinaryOperator} op\n   * @return {number}\n   * @public\n   */\n  m_reduce__double__java_util_function_DoubleBinaryOperator(identity, op) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_sequential__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {!$Long} n\n   * @return {DoubleStream}\n   * @public\n   */\n  m_skip__long(n) {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoubleStream}\n   * @public\n   */\n  m_sorted__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Spliterator_OfDouble}\n   * @public\n   */\n  m_spliterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {number}\n   * @public\n   */\n  m_sum__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {DoubleSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_toArray__() {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    BaseStream.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_DoubleStream \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_DoubleStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_DoubleStream;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleStream.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Runnable \x3d goog.module.get('java.lang.Runnable$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    $1 \x3d goog.module.get('java.util.stream.DoubleStream.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.DoubleStream.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.DoubleStream.$3$impl');\n    $4 \x3d goog.module.get('java.util.stream.DoubleStream.$4$impl');\n    DoubleStreamImpl \x3d goog.module.get('java.util.stream.DoubleStreamImpl$impl');\n    Empty \x3d goog.module.get('java.util.stream.DoubleStreamImpl.Empty$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DoubleStream, $Util.$makeClassName('java.util.stream.DoubleStream'));\n\n\nDoubleStream.$markImplementor(/** @type {Function} */ (DoubleStream));\n\n\nexports \x3d DoubleStream; \n//# sourceMappingURL\x3dDoubleStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$Empty.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$Empty.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.Empty$impl');\n\n\nconst DoubleStream \x3d goog.require('java.util.stream.DoubleStream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet DoubleSummaryStatistics \x3d goog.forwardDeclare('java.util.DoubleSummaryStatistics$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfDouble$impl');\nlet Spliterator_OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet DoubleBinaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleBinaryOperator$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleFunction \x3d goog.forwardDeclare('java.util.function.DoubleFunction$impl');\nlet DoublePredicate \x3d goog.forwardDeclare('java.util.function.DoublePredicate$impl');\nlet DoubleToIntFunction \x3d goog.forwardDeclare('java.util.function.DoubleToIntFunction$impl');\nlet DoubleToLongFunction \x3d goog.forwardDeclare('java.util.function.DoubleToLongFunction$impl');\nlet DoubleUnaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleUnaryOperator$impl');\nlet ObjDoubleConsumer \x3d goog.forwardDeclare('java.util.function.ObjDoubleConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.Empty$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl.Empty$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.StreamImpl.Empty$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * @extends {TerminatableStream\x3cDoubleStreamImpl_Empty\x3e}\n * @implements {DoubleStream}\n  */\nclass DoubleStreamImpl_Empty extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {!DoubleStreamImpl_Empty}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream(previous) {\n    DoubleStreamImpl_Empty.$clinit();\n    let $instance \x3d new DoubleStreamImpl_Empty();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl_Empty__java_util_stream_TerminatableStream(previous);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl_Empty__java_util_stream_TerminatableStream(previous) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {DoubleStream}\n   * @public\n   */\n  m_filter__java_util_function_DoublePredicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {DoubleUnaryOperator} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_map__java_util_function_DoubleUnaryOperator(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_mapToObj_U\n   * @param {DoubleFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_Empty_mapToObj_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_DoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!Empty\x3c*\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(this));\n  }\n  \n  /**\n   * @override\n   * @param {DoubleToIntFunction} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_DoubleToIntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {DoubleToLongFunction} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_DoubleToLongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {DoubleFunction\x3c?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_flatMap__java_util_function_DoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {DoubleConsumer} action\n   * @return {DoubleStream}\n   * @public\n   */\n  m_peek__java_util_function_DoubleConsumer(action) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {DoubleStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {DoubleStream}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {DoubleConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_DoubleConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @param {DoubleConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_DoubleConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $double));\n  }\n  \n  /**\n   * @override\n   * @param {number} identity\n   * @param {DoubleBinaryOperator} op\n   * @return {number}\n   * @public\n   */\n  m_reduce__double__java_util_function_DoubleBinaryOperator(identity, op) {\n    this.m_terminate___$pp_java_util_stream();\n    return identity;\n  }\n  \n  /**\n   * @override\n   * @param {DoubleBinaryOperator} op\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_reduce__java_util_function_DoubleBinaryOperator(op) {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_collect_R\n   * @param {Supplier\x3cM_Empty_collect_R\x3e} supplier\n   * @param {ObjDoubleConsumer\x3cM_Empty_collect_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_Empty_collect_R, M_Empty_collect_R\x3e} combiner\n   * @return {M_Empty_collect_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjDoubleConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    return supplier.m_get__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_sum__() {\n    this.m_terminate___$pp_java_util_stream();\n    return 0.0;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_min__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_max__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    return $Long.fromInt(0);\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {DoubleSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n    this.m_terminate___$pp_java_util_stream();\n    return DoubleSummaryStatistics.$create__();\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_DoublePredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_DoublePredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_DoublePredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_findAny__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3c?number\x3e}\n   * @public\n   */\n  m_boxed__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!Empty\x3c?number\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(this));\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {OfDouble}\n   * @public\n   */\n  m_iterator__() {\n    return Spliterators.m_iterator__java_util_Spliterator_OfDouble(this.m_spliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {Spliterator_OfDouble}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return Spliterators.m_emptyDoubleSpliterator__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DoubleStreamImpl_Empty;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DoubleStreamImpl_Empty);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleStreamImpl_Empty.$clinit \x3d function() {};\n    DoubleSummaryStatistics \x3d goog.module.get('java.util.DoubleSummaryStatistics$impl');\n    OptionalDouble \x3d goog.module.get('java.util.OptionalDouble$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    IntStreamImpl_Empty \x3d goog.module.get('java.util.stream.IntStreamImpl.Empty$impl');\n    LongStreamImpl_Empty \x3d goog.module.get('java.util.stream.LongStreamImpl.Empty$impl');\n    Empty \x3d goog.module.get('java.util.stream.StreamImpl.Empty$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DoubleStreamImpl_Empty, $Util.$makeClassName('java.util.stream.DoubleStreamImpl$Empty'));\n\n\nDoubleStream.$markImplementor(DoubleStreamImpl_Empty);\n\n\nexports \x3d DoubleStreamImpl_Empty; \n//# sourceMappingURL\x3dDoubleStreamImpl$Empty.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl$Empty.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl$Empty.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl.Empty');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _DoubleSummaryStatistics \x3d goog.require('java.util.DoubleSummaryStatistics');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble');\nconst _Spliterator_OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleFunction \x3d goog.require('java.util.function.DoubleFunction');\nconst _DoublePredicate \x3d goog.require('java.util.function.DoublePredicate');\nconst _DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction');\nconst _DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction');\nconst _DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator');\nconst _ObjDoubleConsumer \x3d goog.require('java.util.function.ObjDoubleConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl_Empty \x3d goog.require('java.util.stream.IntStreamImpl.Empty');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl_Empty \x3d goog.require('java.util.stream.LongStreamImpl.Empty');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _Empty \x3d goog.require('java.util.stream.StreamImpl.Empty');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar DoubleStreamImpl_Empty \x3d goog.require('java.util.stream.DoubleStreamImpl.Empty$impl');\nexports \x3d DoubleStreamImpl_Empty;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$Empty.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$Empty.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.LongStreamImpl.Empty$impl');\n\n\nconst LongStream \x3d goog.require('java.util.stream.LongStream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet LongSummaryStatistics \x3d goog.forwardDeclare('java.util.LongSummaryStatistics$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OptionalLong \x3d goog.forwardDeclare('java.util.OptionalLong$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfLong$impl');\nlet Spliterator_OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet LongBinaryOperator \x3d goog.forwardDeclare('java.util.function.LongBinaryOperator$impl');\nlet LongConsumer \x3d goog.forwardDeclare('java.util.function.LongConsumer$impl');\nlet LongFunction \x3d goog.forwardDeclare('java.util.function.LongFunction$impl');\nlet LongPredicate \x3d goog.forwardDeclare('java.util.function.LongPredicate$impl');\nlet LongToDoubleFunction \x3d goog.forwardDeclare('java.util.function.LongToDoubleFunction$impl');\nlet LongToIntFunction \x3d goog.forwardDeclare('java.util.function.LongToIntFunction$impl');\nlet LongUnaryOperator \x3d goog.forwardDeclare('java.util.function.LongUnaryOperator$impl');\nlet ObjLongConsumer \x3d goog.forwardDeclare('java.util.function.ObjLongConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.Empty$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl_Empty \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.Empty$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet Empty \x3d goog.forwardDeclare('java.util.stream.StreamImpl.Empty$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\n/**\n * @extends {TerminatableStream\x3cLongStreamImpl_Empty\x3e}\n * @implements {LongStream}\n  */\nclass LongStreamImpl_Empty extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {!LongStreamImpl_Empty}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream(previous) {\n    LongStreamImpl_Empty.$clinit();\n    let $instance \x3d new LongStreamImpl_Empty();\n    $instance.$ctor__java_util_stream_LongStreamImpl_Empty__java_util_stream_TerminatableStream(previous);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Empty(TerminatableStream)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_LongStreamImpl_Empty__java_util_stream_TerminatableStream(previous) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {LongStream}\n   * @public\n   */\n  m_filter__java_util_function_LongPredicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {LongUnaryOperator} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_map__java_util_function_LongUnaryOperator(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_mapToObj_U\n   * @param {LongFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_Empty_mapToObj_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_LongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!Empty\x3c*\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(this));\n  }\n  \n  /**\n   * @override\n   * @param {LongToIntFunction} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_LongToIntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {LongToDoubleFunction} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_LongToDoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @param {LongFunction\x3c?\x3e} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_flatMap__java_util_function_LongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {LongConsumer} action\n   * @return {LongStream}\n   * @public\n   */\n  m_peek__java_util_function_LongConsumer(action) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {LongStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {LongStream}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    return this;\n  }\n  \n  /**\n   * @override\n   * @param {LongConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_LongConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @param {LongConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_LongConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c!$Long\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    return /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([0], $long));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} identity\n   * @param {LongBinaryOperator} op\n   * @return {!$Long}\n   * @public\n   */\n  m_reduce__long__java_util_function_LongBinaryOperator(identity, op) {\n    this.m_terminate___$pp_java_util_stream();\n    return identity;\n  }\n  \n  /**\n   * @override\n   * @param {LongBinaryOperator} op\n   * @return {OptionalLong}\n   * @public\n   */\n  m_reduce__java_util_function_LongBinaryOperator(op) {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @template M_Empty_collect_R\n   * @param {Supplier\x3cM_Empty_collect_R\x3e} supplier\n   * @param {ObjLongConsumer\x3cM_Empty_collect_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_Empty_collect_R, M_Empty_collect_R\x3e} combiner\n   * @return {M_Empty_collect_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjLongConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    return supplier.m_get__();\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_sum__() {\n    this.m_terminate___$pp_java_util_stream();\n    return $Long.fromInt(0);\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_min__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_max__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    return $Long.fromInt(0);\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {LongSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n    this.m_terminate___$pp_java_util_stream();\n    return LongSummaryStatistics.$create__();\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_LongPredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_LongPredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @param {LongPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_LongPredicate(predicate) {\n    this.m_terminate___$pp_java_util_stream();\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalLong}\n   * @public\n   */\n  m_findAny__() {\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalLong.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_asDoubleStream__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl_Empty.$create__java_util_stream_TerminatableStream(this);\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cLong\x3e}\n   * @public\n   */\n  m_boxed__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!Empty\x3cLong\x3e} */ (Empty.$create__java_util_stream_TerminatableStream(this));\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {OfLong}\n   * @public\n   */\n  m_iterator__() {\n    return Spliterators.m_iterator__java_util_Spliterator_OfLong(this.m_spliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {Spliterator_OfLong}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return Spliterators.m_emptyLongSpliterator__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LongStreamImpl_Empty;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LongStreamImpl_Empty);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LongStreamImpl_Empty.$clinit \x3d function() {};\n    LongSummaryStatistics \x3d goog.module.get('java.util.LongSummaryStatistics$impl');\n    OptionalDouble \x3d goog.module.get('java.util.OptionalDouble$impl');\n    OptionalLong \x3d goog.module.get('java.util.OptionalLong$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    DoubleStreamImpl_Empty \x3d goog.module.get('java.util.stream.DoubleStreamImpl.Empty$impl');\n    IntStreamImpl_Empty \x3d goog.module.get('java.util.stream.IntStreamImpl.Empty$impl');\n    Empty \x3d goog.module.get('java.util.stream.StreamImpl.Empty$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LongStreamImpl_Empty, $Util.$makeClassName('java.util.stream.LongStreamImpl$Empty'));\n\n\nLongStream.$markImplementor(LongStreamImpl_Empty);\n\n\nexports \x3d LongStreamImpl_Empty; \n//# sourceMappingURL\x3dLongStreamImpl$Empty.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStreamImpl$Empty.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStreamImpl$Empty.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStreamImpl.Empty');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _LongSummaryStatistics \x3d goog.require('java.util.LongSummaryStatistics');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OptionalLong \x3d goog.require('java.util.OptionalLong');\nconst _OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong');\nconst _Spliterator_OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongFunction \x3d goog.require('java.util.function.LongFunction');\nconst _LongPredicate \x3d goog.require('java.util.function.LongPredicate');\nconst _LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction');\nconst _LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction');\nconst _LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator');\nconst _ObjLongConsumer \x3d goog.require('java.util.function.ObjLongConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl_Empty \x3d goog.require('java.util.stream.DoubleStreamImpl.Empty');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl_Empty \x3d goog.require('java.util.stream.IntStreamImpl.Empty');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _Empty \x3d goog.require('java.util.stream.StreamImpl.Empty');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar LongStreamImpl_Empty \x3d goog.require('java.util.stream.LongStreamImpl.Empty$impl');\nexports \x3d LongStreamImpl_Empty;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamSupport.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamSupport.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.StreamSupport$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass StreamSupport extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {OfDouble} spliterator\n   * @param {boolean} parallel\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_doubleStream__java_util_Spliterator_OfDouble__boolean(spliterator, parallel) {\n    StreamSupport.$clinit();\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(null, spliterator);\n  }\n  \n  /**\n   * @param {Supplier\x3c?\x3e} supplier\n   * @param {number} characteristics\n   * @param {boolean} parallel\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_doubleStream__java_util_function_Supplier__int__boolean(supplier, characteristics, parallel) {\n    StreamSupport.$clinit();\n    return /**@type {Stream\x3c?\x3e} */ (/**@type {Stream\x3cSupplier\x3c?\x3e\x3e} */ (Stream.m_of__java_lang_Object(supplier)).m_map__java_util_function_Function(j_u_function_Function.$adapt(((/** Supplier\x3cOfDouble\x3e */ arg0) \x3d\x3e{\n      return /**@type {?} */ ($Casts.$to(arg0.m_get__(), OfDouble));\n    })))).m_flatMapToDouble__java_util_function_Function(j_u_function_Function.$adapt(((/** OfDouble */ doubleSpliterator) \x3d\x3e{\n      return StreamSupport.m_doubleStream__java_util_Spliterator_OfDouble__boolean(doubleSpliterator, parallel);\n    })));\n  }\n  \n  /**\n   * @param {OfInt} spliterator\n   * @param {boolean} parallel\n   * @return {IntStream}\n   * @public\n   */\n  static m_intStream__java_util_Spliterator_OfInt__boolean(spliterator, parallel) {\n    StreamSupport.$clinit();\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(null, spliterator);\n  }\n  \n  /**\n   * @param {Supplier\x3c?\x3e} supplier\n   * @param {number} characteristics\n   * @param {boolean} parallel\n   * @return {IntStream}\n   * @public\n   */\n  static m_intStream__java_util_function_Supplier__int__boolean(supplier, characteristics, parallel) {\n    StreamSupport.$clinit();\n    return /**@type {Stream\x3c?\x3e} */ (/**@type {Stream\x3cSupplier\x3c?\x3e\x3e} */ (Stream.m_of__java_lang_Object(supplier)).m_map__java_util_function_Function(j_u_function_Function.$adapt(((/** Supplier\x3cOfInt\x3e */ arg0) \x3d\x3e{\n      return /**@type {?} */ ($Casts.$to(arg0.m_get__(), OfInt));\n    })))).m_flatMapToInt__java_util_function_Function(j_u_function_Function.$adapt(((/** OfInt */ intSpliterator) \x3d\x3e{\n      return StreamSupport.m_intStream__java_util_Spliterator_OfInt__boolean(intSpliterator, parallel);\n    })));\n  }\n  \n  /**\n   * @param {OfLong} spliterator\n   * @param {boolean} parallel\n   * @return {LongStream}\n   * @public\n   */\n  static m_longStream__java_util_Spliterator_OfLong__boolean(spliterator, parallel) {\n    StreamSupport.$clinit();\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(null, spliterator);\n  }\n  \n  /**\n   * @param {Supplier\x3c?\x3e} supplier\n   * @param {number} characteristics\n   * @param {boolean} parallel\n   * @return {LongStream}\n   * @public\n   */\n  static m_longStream__java_util_function_Supplier__int__boolean(supplier, characteristics, parallel) {\n    StreamSupport.$clinit();\n    return /**@type {Stream\x3c?\x3e} */ (/**@type {Stream\x3cSupplier\x3c?\x3e\x3e} */ (Stream.m_of__java_lang_Object(supplier)).m_map__java_util_function_Function(j_u_function_Function.$adapt(((/** Supplier\x3cOfLong\x3e */ arg0) \x3d\x3e{\n      return /**@type {?} */ ($Casts.$to(arg0.m_get__(), OfLong));\n    })))).m_flatMapToLong__java_util_function_Function(j_u_function_Function.$adapt(((/** OfLong */ longSpliterator) \x3d\x3e{\n      return StreamSupport.m_longStream__java_util_Spliterator_OfLong__boolean(longSpliterator, parallel);\n    })));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Spliterator\x3cM_T\x3e} spliterator\n   * @param {boolean} parallel\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_stream__java_util_Spliterator__boolean(spliterator, parallel) {\n    StreamSupport.$clinit();\n    return /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(null, spliterator));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Supplier\x3c?\x3e} supplier\n   * @param {number} characteristics\n   * @param {boolean} parallel\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_stream__java_util_function_Supplier__int__boolean(supplier, characteristics, parallel) {\n    StreamSupport.$clinit();\n    return /**@type {Stream\x3c*\x3e} */ (/**@type {Stream\x3c?\x3e} */ (/**@type {Stream\x3cSupplier\x3c?\x3e\x3e} */ (Stream.m_of__java_lang_Object(supplier)).m_map__java_util_function_Function(j_u_function_Function.$adapt(((/** Supplier\x3cSpliterator\x3e */ arg0) \x3d\x3e{\n      return /**@type {?} */ ($Casts.$to(arg0.m_get__(), Spliterator));\n    })))).m_flatMap__java_util_function_Function(j_u_function_Function.$adapt(((/** Spliterator */ spliterator) \x3d\x3e{\n      return /**@type {Stream\x3c*\x3e} */ (StreamSupport.m_stream__java_util_Spliterator__boolean(spliterator, parallel));\n    }))));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StreamSupport()'.\n   * @return {!StreamSupport}\n   * @public\n   */\n  static $create__() {\n    StreamSupport.$clinit();\n    let $instance \x3d new StreamSupport();\n    $instance.$ctor__java_util_stream_StreamSupport__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StreamSupport()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_StreamSupport__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StreamSupport;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StreamSupport);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StreamSupport.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfDouble \x3d goog.module.get('java.util.Spliterator.OfDouble$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfLong \x3d goog.module.get('java.util.Spliterator.OfLong$impl');\n    j_u_function_Function \x3d goog.module.get('java.util.function.Function$impl');\n    DoubleStreamImpl \x3d goog.module.get('java.util.stream.DoubleStreamImpl$impl');\n    IntStreamImpl \x3d goog.module.get('java.util.stream.IntStreamImpl$impl');\n    LongStreamImpl \x3d goog.module.get('java.util.stream.LongStreamImpl$impl');\n    Stream \x3d goog.module.get('java.util.stream.Stream$impl');\n    StreamImpl \x3d goog.module.get('java.util.stream.StreamImpl$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StreamSupport, $Util.$makeClassName('java.util.stream.StreamSupport'));\n\n\n\n\nexports \x3d StreamSupport; \n//# sourceMappingURL\x3dStreamSupport.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/StreamSupport.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.StreamSupport.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.StreamSupport');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar StreamSupport \x3d goog.require('java.util.stream.StreamSupport$impl');\nexports \x3d StreamSupport;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/LongStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.LongStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.LongStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _BaseStream \x3d goog.require('java.util.stream.BaseStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _List \x3d goog.require('java.util.List');\nconst _LongSummaryStatistics \x3d goog.require('java.util.LongSummaryStatistics');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OptionalLong \x3d goog.require('java.util.OptionalLong');\nconst _OfLong \x3d goog.require('java.util.PrimitiveIterator.OfLong');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterator_OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator');\nconst _LongConsumer \x3d goog.require('java.util.function.LongConsumer');\nconst _LongFunction \x3d goog.require('java.util.function.LongFunction');\nconst _LongPredicate \x3d goog.require('java.util.function.LongPredicate');\nconst _LongSupplier \x3d goog.require('java.util.function.LongSupplier');\nconst _LongToDoubleFunction \x3d goog.require('java.util.function.LongToDoubleFunction');\nconst _LongToIntFunction \x3d goog.require('java.util.function.LongToIntFunction');\nconst _LongUnaryOperator \x3d goog.require('java.util.function.LongUnaryOperator');\nconst _ObjLongConsumer \x3d goog.require('java.util.function.ObjLongConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _$1 \x3d goog.require('java.util.stream.LongStream.$1');\nconst _$2 \x3d goog.require('java.util.stream.LongStream.$2');\nconst _$3 \x3d goog.require('java.util.stream.LongStream.$3');\nconst _$4 \x3d goog.require('java.util.stream.LongStream.$4');\nconst _$5 \x3d goog.require('java.util.stream.LongStream.$5');\nconst _Builder \x3d goog.require('java.util.stream.LongStream.Builder');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _Empty \x3d goog.require('java.util.stream.LongStreamImpl.Empty');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar LongStream \x3d goog.require('java.util.stream.LongStream$impl');\nexports \x3d LongStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStreamImpl$impl');\n\n\nconst IntStream \x3d goog.require('java.util.stream.IntStream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet IntSummaryStatistics \x3d goog.forwardDeclare('java.util.IntSummaryStatistics$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet OptionalInt \x3d goog.forwardDeclare('java.util.OptionalInt$impl');\nlet PrimitiveIterator_OfInt \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfInt$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet IntBinaryOperator \x3d goog.forwardDeclare('java.util.function.IntBinaryOperator$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet IntPredicate \x3d goog.forwardDeclare('java.util.function.IntPredicate$impl');\nlet IntToDoubleFunction \x3d goog.forwardDeclare('java.util.function.IntToDoubleFunction$impl');\nlet IntToLongFunction \x3d goog.forwardDeclare('java.util.function.IntToLongFunction$impl');\nlet IntUnaryOperator \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator$impl');\nlet ObjIntConsumer \x3d goog.forwardDeclare('java.util.function.ObjIntConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet DoubleStreamImpl \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.$3$impl');\nlet FilterSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.FilterSpliterator$impl');\nlet LimitSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.LimitSpliterator$impl');\nlet MapToDoubleSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.MapToDoubleSpliterator$impl');\nlet MapToIntSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.MapToIntSpliterator$impl');\nlet MapToLongSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.MapToLongSpliterator$impl');\nlet MapToObjSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.MapToObjSpliterator$impl');\nlet SkipSpliterator \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.SkipSpliterator$impl');\nlet ValueConsumer \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl.ValueConsumer$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\n/**\n * @extends {TerminatableStream\x3cIntStreamImpl\x3e}\n * @implements {IntStream}\n  */\nclass IntStreamImpl extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfInt} */\n    this.f_spliterator__java_util_stream_IntStreamImpl_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IntStreamImpl(TerminatableStream, OfInt)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @param {OfInt} spliterator\n   * @return {!IntStreamImpl}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(previous, spliterator) {\n    IntStreamImpl.$clinit();\n    let $instance \x3d new IntStreamImpl();\n    $instance.$ctor__java_util_stream_IntStreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(previous, spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IntStreamImpl(TerminatableStream, OfInt)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @param {OfInt} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(previous, spliterator) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n    this.f_spliterator__java_util_stream_IntStreamImpl_ \x3d spliterator;\n  }\n  \n  /**\n   * @override\n   * @return {OfInt}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return this.f_spliterator__java_util_stream_IntStreamImpl_;\n  }\n  \n  /**\n   * @override\n   * @return {PrimitiveIterator_OfInt}\n   * @public\n   */\n  m_iterator__() {\n    return Spliterators.m_iterator__java_util_Spliterator_OfInt(this.m_spliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d ValueConsumer.$create__();\n    if (this.f_spliterator__java_util_stream_IntStreamImpl_.m_tryAdvance__java_lang_Object(holder)) {\n      return OptionalInt.m_of__int(holder.f_value__java_util_stream_IntStreamImpl_ValueConsumer);\n    }\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_findAny__() {\n    return this.m_findFirst__();\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_IntPredicate(predicate) {\n    return !this.m_anyMatch__java_util_function_IntPredicate(predicate);\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_IntPredicate(predicate) {\n    return !this.m_anyMatch__java_util_function_IntPredicate(predicate.m_negate__());\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_IntPredicate(predicate) {\n    return this.m_filter__java_util_function_IntPredicate(predicate).m_findFirst__().m_isPresent__();\n  }\n  \n  /**\n   * @override\n   * @return {IntSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n    return /**@type {IntSummaryStatistics} */ ($Casts.$to(this.m_collect__java_util_function_Supplier__java_util_function_ObjIntConsumer__java_util_function_BiConsumer(Supplier.$adapt((() \x3d\x3e{\n      return IntSummaryStatistics.$create__();\n    })), ObjIntConsumer.$adapt(((/** IntSummaryStatistics */ intSummaryStatistics, /** number */ value) \x3d\x3e{\n      intSummaryStatistics.m_accept__int(value);\n    })), BiConsumer.$adapt(((/** IntSummaryStatistics */ arg0, /** IntSummaryStatistics */ arg1) \x3d\x3e{\n      arg0.m_combine__java_util_IntSummaryStatistics(arg1);\n    }))), IntSummaryStatistics));\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalDouble.m_empty__();\n    }\n    return OptionalDouble.m_of__double(stats.m_getAverage__());\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    let count \x3d $Long.fromInt(0);\n    while (this.f_spliterator__java_util_stream_IntStreamImpl_.m_tryAdvance__java_lang_Object(IntConsumer.$adapt(((/** number */ value) \x3d\x3e{\n    })))) {\n      count \x3d $LongUtils.$plus(count, $Long.fromInt(1));\n    }\n    return count;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_max__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalInt.m_empty__();\n    }\n    return OptionalInt.m_of__int(stats.m_getMax__());\n  }\n  \n  /**\n   * @override\n   * @return {OptionalInt}\n   * @public\n   */\n  m_min__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalInt.m_empty__();\n    }\n    return OptionalInt.m_of__int(stats.m_getMin__());\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_sum__() {\n    return $Primitives.$narrowLongToInt(this.m_summaryStatistics__().m_getSum__());\n  }\n  \n  /**\n   * @override\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {ObjIntConsumer\x3cM_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjIntConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    let acc \x3d supplier.m_get__();\n    this.f_spliterator__java_util_stream_IntStreamImpl_.m_forEachRemaining__java_lang_Object(IntConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      accumulator.m_accept__java_lang_Object__int(acc, value);\n    })));\n    return acc;\n  }\n  \n  /**\n   * @override\n   * @param {IntBinaryOperator} op\n   * @return {OptionalInt}\n   * @public\n   */\n  m_reduce__java_util_function_IntBinaryOperator(op) {\n    let holder \x3d ValueConsumer.$create__();\n    if (this.f_spliterator__java_util_stream_IntStreamImpl_.m_tryAdvance__java_lang_Object(holder)) {\n      return OptionalInt.m_of__int(this.m_reduce__int__java_util_function_IntBinaryOperator(holder.f_value__java_util_stream_IntStreamImpl_ValueConsumer, op));\n    }\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalInt.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @param {number} identity\n   * @param {IntBinaryOperator} op\n   * @return {number}\n   * @public\n   */\n  m_reduce__int__java_util_function_IntBinaryOperator(identity, op) {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d ValueConsumer.$create__();\n    holder.f_value__java_util_stream_IntStreamImpl_ValueConsumer \x3d identity;\n    this.f_spliterator__java_util_stream_IntStreamImpl_.m_forEachRemaining__java_lang_Object(IntConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      holder.m_accept__int(op.m_applyAsInt__int__int(holder.f_value__java_util_stream_IntStreamImpl_ValueConsumer, value));\n    })));\n    return holder.f_value__java_util_stream_IntStreamImpl_ValueConsumer;\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    let entries \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $int));\n    this.f_spliterator__java_util_stream_IntStreamImpl_.m_forEachRemaining__java_lang_Object(IntConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      $Arrays.$set(entries, entries.length, value);\n    })));\n    return entries;\n  }\n  \n  /**\n   * @override\n   * @param {IntConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_IntConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n    this.f_spliterator__java_util_stream_IntStreamImpl_.m_forEachRemaining__java_lang_Object(action);\n  }\n  \n  /**\n   * @override\n   * @param {IntConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_IntConsumer(action) {\n    this.m_forEachOrdered__java_util_function_IntConsumer(action);\n  }\n  \n  /**\n   * @override\n   * @param {IntPredicate} predicate\n   * @return {IntStream}\n   * @public\n   */\n  m_filter__java_util_function_IntPredicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, FilterSpliterator.$create__java_util_function_IntPredicate__java_util_Spliterator_OfInt(predicate, this.f_spliterator__java_util_stream_IntStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {IntUnaryOperator} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_map__java_util_function_IntUnaryOperator(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, MapToIntSpliterator.$create__java_util_function_IntUnaryOperator__java_util_Spliterator_OfInt(mapper, this.f_spliterator__java_util_stream_IntStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @template M_U\n   * @param {IntFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_IntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!MapToObjSpliterator\x3c*\x3e} */ (MapToObjSpliterator.$create__java_util_function_IntFunction__java_util_Spliterator_OfInt(mapper, this.f_spliterator__java_util_stream_IntStreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @param {IntToLongFunction} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_IntToLongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, MapToLongSpliterator.$create__java_util_function_IntToLongFunction__java_util_Spliterator_OfInt(mapper, this.f_spliterator__java_util_stream_IntStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {IntToDoubleFunction} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_mapToDouble__java_util_function_IntToDoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, MapToDoubleSpliterator.$create__java_util_function_IntToDoubleFunction__java_util_Spliterator_OfInt(mapper, this.f_spliterator__java_util_stream_IntStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {IntFunction\x3c?\x3e} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_flatMap__java_util_function_IntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cIntStream\x3e} */ (MapToObjSpliterator.$create__java_util_function_IntFunction__java_util_Spliterator_OfInt(mapper, this.f_spliterator__java_util_stream_IntStreamImpl_));\n    let flatMapSpliterator \x3d $1.$create__java_util_stream_IntStreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0);\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, flatMapSpliterator);\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let seen \x3d /**@type {!HashSet\x3cInteger\x3e} */ (HashSet.$create__());\n    return this.m_filter__java_util_function_IntPredicate(IntPredicate.$adapt(((/** number */ arg0) \x3d\x3e{\n      return seen.add(Integer.m_valueOf__int(arg0));\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let sortedSpliterator \x3d $2.$create__java_util_stream_IntStreamImpl__long__int(this, this.f_spliterator__java_util_stream_IntStreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_IntStreamImpl_.m_characteristics__() | Spliterator.f_SORTED__java_util_Spliterator);\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, sortedSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {IntConsumer} action\n   * @return {IntStream}\n   * @public\n   */\n  m_peek__java_util_function_IntConsumer(action) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(action);\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let peekSpliterator \x3d $3.$create__java_util_stream_IntStreamImpl__java_util_function_IntConsumer__long__int(this, action, this.f_spliterator__java_util_stream_IntStreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_IntStreamImpl_.m_characteristics__());\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, peekSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {IntStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, LimitSpliterator.$create__long__java_util_Spliterator_OfInt(maxSize, this.f_spliterator__java_util_stream_IntStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {IntStream}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    if ($LongUtils.$equals(n, $Primitives.$widenIntToLong(0))) {\n      return this;\n    }\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, SkipSpliterator.$create__long__java_util_Spliterator_OfInt(n, this.f_spliterator__java_util_stream_IntStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @return {LongStream}\n   * @public\n   */\n  m_asLongStream__() {\n    return this.m_mapToLong__java_util_function_IntToLongFunction(IntToLongFunction.$adapt(((/** number */ i) \x3d\x3e{\n      return $Primitives.$widenIntToLong(i);\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_asDoubleStream__() {\n    return this.m_mapToDouble__java_util_function_IntToDoubleFunction(IntToDoubleFunction.$adapt(((/** number */ i) \x3d\x3e{\n      return i;\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cInteger\x3e}\n   * @public\n   */\n  m_boxed__() {\n    return /**@type {Stream\x3cInteger\x3e} */ (this.m_mapToObj__java_util_function_IntFunction(IntFunction.$adapt(((/** number */ arg0) \x3d\x3e{\n      return Integer.m_valueOf__int(arg0);\n    }))));\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IntStreamImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IntStreamImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IntStreamImpl.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    IntSummaryStatistics \x3d goog.module.get('java.util.IntSummaryStatistics$impl');\n    OptionalDouble \x3d goog.module.get('java.util.OptionalDouble$impl');\n    OptionalInt \x3d goog.module.get('java.util.OptionalInt$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    BiConsumer \x3d goog.module.get('java.util.function.BiConsumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    IntFunction \x3d goog.module.get('java.util.function.IntFunction$impl');\n    IntPredicate \x3d goog.module.get('java.util.function.IntPredicate$impl');\n    IntToDoubleFunction \x3d goog.module.get('java.util.function.IntToDoubleFunction$impl');\n    IntToLongFunction \x3d goog.module.get('java.util.function.IntToLongFunction$impl');\n    ObjIntConsumer \x3d goog.module.get('java.util.function.ObjIntConsumer$impl');\n    Supplier \x3d goog.module.get('java.util.function.Supplier$impl');\n    DoubleStreamImpl \x3d goog.module.get('java.util.stream.DoubleStreamImpl$impl');\n    $1 \x3d goog.module.get('java.util.stream.IntStreamImpl.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.IntStreamImpl.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.IntStreamImpl.$3$impl');\n    FilterSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.FilterSpliterator$impl');\n    LimitSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.LimitSpliterator$impl');\n    MapToDoubleSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.MapToDoubleSpliterator$impl');\n    MapToIntSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.MapToIntSpliterator$impl');\n    MapToLongSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.MapToLongSpliterator$impl');\n    MapToObjSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.MapToObjSpliterator$impl');\n    SkipSpliterator \x3d goog.module.get('java.util.stream.IntStreamImpl.SkipSpliterator$impl');\n    ValueConsumer \x3d goog.module.get('java.util.stream.IntStreamImpl.ValueConsumer$impl');\n    LongStreamImpl \x3d goog.module.get('java.util.stream.LongStreamImpl$impl');\n    StreamImpl \x3d goog.module.get('java.util.stream.StreamImpl$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IntStreamImpl, $Util.$makeClassName('java.util.stream.IntStreamImpl'));\n\n\nIntStream.$markImplementor(IntStreamImpl);\n\n\nexports \x3d IntStreamImpl; \n//# sourceMappingURL\x3dIntStreamImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStreamImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStreamImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStreamImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _IntSummaryStatistics \x3d goog.require('java.util.IntSummaryStatistics');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OptionalInt \x3d goog.require('java.util.OptionalInt');\nconst _PrimitiveIterator_OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _IntPredicate \x3d goog.require('java.util.function.IntPredicate');\nconst _IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction');\nconst _IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _ObjIntConsumer \x3d goog.require('java.util.function.ObjIntConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _$1 \x3d goog.require('java.util.stream.IntStreamImpl.$1');\nconst _$2 \x3d goog.require('java.util.stream.IntStreamImpl.$2');\nconst _$3 \x3d goog.require('java.util.stream.IntStreamImpl.$3');\nconst _FilterSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.FilterSpliterator');\nconst _LimitSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.LimitSpliterator');\nconst _MapToDoubleSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToDoubleSpliterator');\nconst _MapToIntSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToIntSpliterator');\nconst _MapToLongSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToLongSpliterator');\nconst _MapToObjSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.MapToObjSpliterator');\nconst _SkipSpliterator \x3d goog.require('java.util.stream.IntStreamImpl.SkipSpliterator');\nconst _ValueConsumer \x3d goog.require('java.util.stream.IntStreamImpl.ValueConsumer');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl$impl');\nexports \x3d IntStreamImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.DoubleStreamImpl$impl');\n\n\nconst DoubleStream \x3d goog.require('java.util.stream.DoubleStream$impl');\nconst TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet DoubleSummaryStatistics \x3d goog.forwardDeclare('java.util.DoubleSummaryStatistics$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet OptionalDouble \x3d goog.forwardDeclare('java.util.OptionalDouble$impl');\nlet PrimitiveIterator_OfDouble \x3d goog.forwardDeclare('java.util.PrimitiveIterator.OfDouble$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet DoubleBinaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleBinaryOperator$impl');\nlet DoubleConsumer \x3d goog.forwardDeclare('java.util.function.DoubleConsumer$impl');\nlet DoubleFunction \x3d goog.forwardDeclare('java.util.function.DoubleFunction$impl');\nlet DoublePredicate \x3d goog.forwardDeclare('java.util.function.DoublePredicate$impl');\nlet DoubleToIntFunction \x3d goog.forwardDeclare('java.util.function.DoubleToIntFunction$impl');\nlet DoubleToLongFunction \x3d goog.forwardDeclare('java.util.function.DoubleToLongFunction$impl');\nlet DoubleUnaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleUnaryOperator$impl');\nlet ObjDoubleConsumer \x3d goog.forwardDeclare('java.util.function.ObjDoubleConsumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.$3$impl');\nlet FilterSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.FilterSpliterator$impl');\nlet LimitSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.LimitSpliterator$impl');\nlet MapToDoubleSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.MapToDoubleSpliterator$impl');\nlet MapToIntSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.MapToIntSpliterator$impl');\nlet MapToLongSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.MapToLongSpliterator$impl');\nlet MapToObjSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.MapToObjSpliterator$impl');\nlet SkipSpliterator \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.SkipSpliterator$impl');\nlet ValueConsumer \x3d goog.forwardDeclare('java.util.stream.DoubleStreamImpl.ValueConsumer$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet IntStreamImpl \x3d goog.forwardDeclare('java.util.stream.IntStreamImpl$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet LongStreamImpl \x3d goog.forwardDeclare('java.util.stream.LongStreamImpl$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamImpl \x3d goog.forwardDeclare('java.util.stream.StreamImpl$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * @extends {TerminatableStream\x3cDoubleStreamImpl\x3e}\n * @implements {DoubleStream}\n  */\nclass DoubleStreamImpl extends TerminatableStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfDouble} */\n    this.f_spliterator__java_util_stream_DoubleStreamImpl_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DoubleStreamImpl(TerminatableStream, OfDouble)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @param {OfDouble} spliterator\n   * @return {!DoubleStreamImpl}\n   * @public\n   */\n  static $create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(previous, spliterator) {\n    DoubleStreamImpl.$clinit();\n    let $instance \x3d new DoubleStreamImpl();\n    $instance.$ctor__java_util_stream_DoubleStreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(previous, spliterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DoubleStreamImpl(TerminatableStream, OfDouble)'.\n   * @param {TerminatableStream\x3c?\x3e} previous\n   * @param {OfDouble} spliterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_DoubleStreamImpl__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(previous, spliterator) {\n    this.$ctor__java_util_stream_TerminatableStream__java_util_stream_TerminatableStream(previous);\n    this.f_spliterator__java_util_stream_DoubleStreamImpl_ \x3d spliterator;\n  }\n  \n  /**\n   * @override\n   * @param {DoubleConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_DoubleConsumer(action) {\n    this.m_forEachOrdered__java_util_function_DoubleConsumer(action);\n  }\n  \n  /**\n   * @override\n   * @param {DoubleConsumer} action\n   * @return {void}\n   * @public\n   */\n  m_forEachOrdered__java_util_function_DoubleConsumer(action) {\n    this.m_terminate___$pp_java_util_stream();\n    this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_forEachRemaining__java_lang_Object(action);\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_toArray__() {\n    this.m_terminate___$pp_java_util_stream();\n    let entries \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $double));\n    this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_forEachRemaining__java_lang_Object(DoubleConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      $Arrays.$set(entries, entries.length, value);\n    })));\n    return entries;\n  }\n  \n  /**\n   * @override\n   * @param {number} identity\n   * @param {DoubleBinaryOperator} op\n   * @return {number}\n   * @public\n   */\n  m_reduce__double__java_util_function_DoubleBinaryOperator(identity, op) {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d ValueConsumer.$create__();\n    holder.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer \x3d identity;\n    this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_forEachRemaining__java_lang_Object(DoubleConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      holder.m_accept__double(op.m_applyAsDouble__double__double(holder.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer, value));\n    })));\n    return holder.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer;\n  }\n  \n  /**\n   * @override\n   * @param {DoubleBinaryOperator} op\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_reduce__java_util_function_DoubleBinaryOperator(op) {\n    let holder \x3d ValueConsumer.$create__();\n    if (this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_tryAdvance__java_lang_Object(holder)) {\n      return OptionalDouble.m_of__double(this.m_reduce__double__java_util_function_DoubleBinaryOperator(holder.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer, op));\n    }\n    this.m_terminate___$pp_java_util_stream();\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @template M_R\n   * @param {Supplier\x3cM_R\x3e} supplier\n   * @param {ObjDoubleConsumer\x3cM_R\x3e} accumulator\n   * @param {BiConsumer\x3cM_R, M_R\x3e} combiner\n   * @return {M_R}\n   * @public\n   */\n  m_collect__java_util_function_Supplier__java_util_function_ObjDoubleConsumer__java_util_function_BiConsumer(supplier, accumulator, combiner) {\n    this.m_terminate___$pp_java_util_stream();\n    let acc \x3d supplier.m_get__();\n    this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_forEachRemaining__java_lang_Object(DoubleConsumer.$adapt(((/** number */ value) \x3d\x3e{\n      accumulator.m_accept__java_lang_Object__double(acc, value);\n    })));\n    return acc;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_sum__() {\n    return this.m_summaryStatistics__().m_getSum__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_min__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalDouble.m_empty__();\n    }\n    return OptionalDouble.m_of__double(stats.m_getMin__());\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_max__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalDouble.m_empty__();\n    }\n    return OptionalDouble.m_of__double(stats.m_getMax__());\n  }\n  \n  /**\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_count__() {\n    this.m_terminate___$pp_java_util_stream();\n    let count \x3d $Long.fromInt(0);\n    while (this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_tryAdvance__java_lang_Object(DoubleConsumer.$adapt(((/** number */ value) \x3d\x3e{\n    })))) {\n      count \x3d $LongUtils.$plus(count, $Long.fromInt(1));\n    }\n    return count;\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_average__() {\n    let stats \x3d this.m_summaryStatistics__();\n    if ($LongUtils.$equals(stats.m_getCount__(), $Primitives.$widenIntToLong(0))) {\n      return OptionalDouble.m_empty__();\n    }\n    return OptionalDouble.m_of__double(stats.m_getAverage__());\n  }\n  \n  /**\n   * @override\n   * @return {DoubleSummaryStatistics}\n   * @public\n   */\n  m_summaryStatistics__() {\n    return /**@type {DoubleSummaryStatistics} */ ($Casts.$to(this.m_collect__java_util_function_Supplier__java_util_function_ObjDoubleConsumer__java_util_function_BiConsumer(Supplier.$adapt((() \x3d\x3e{\n      return DoubleSummaryStatistics.$create__();\n    })), ObjDoubleConsumer.$adapt(((/** DoubleSummaryStatistics */ doubleSummaryStatistics, /** number */ value) \x3d\x3e{\n      doubleSummaryStatistics.m_accept__double(value);\n    })), BiConsumer.$adapt(((/** DoubleSummaryStatistics */ arg0, /** DoubleSummaryStatistics */ arg1) \x3d\x3e{\n      arg0.m_combine__java_util_DoubleSummaryStatistics(arg1);\n    }))), DoubleSummaryStatistics));\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_anyMatch__java_util_function_DoublePredicate(predicate) {\n    return this.m_filter__java_util_function_DoublePredicate(predicate).m_findFirst__().m_isPresent__();\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_allMatch__java_util_function_DoublePredicate(predicate) {\n    return !this.m_anyMatch__java_util_function_DoublePredicate(predicate.m_negate__());\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {boolean}\n   * @public\n   */\n  m_noneMatch__java_util_function_DoublePredicate(predicate) {\n    return !this.m_anyMatch__java_util_function_DoublePredicate(predicate);\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_findFirst__() {\n    this.m_terminate___$pp_java_util_stream();\n    let holder \x3d ValueConsumer.$create__();\n    if (this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_tryAdvance__java_lang_Object(holder)) {\n      return OptionalDouble.m_of__double(holder.f_value__java_util_stream_DoubleStreamImpl_ValueConsumer);\n    }\n    return OptionalDouble.m_empty__();\n  }\n  \n  /**\n   * @override\n   * @return {OptionalDouble}\n   * @public\n   */\n  m_findAny__() {\n    return this.m_findFirst__();\n  }\n  \n  /**\n   * @override\n   * @return {PrimitiveIterator_OfDouble}\n   * @public\n   */\n  m_iterator__() {\n    return Spliterators.m_iterator__java_util_Spliterator_OfDouble(this.m_spliterator__());\n  }\n  \n  /**\n   * @override\n   * @return {OfDouble}\n   * @public\n   */\n  m_spliterator__() {\n    this.m_terminate___$pp_java_util_stream();\n    return this.f_spliterator__java_util_stream_DoubleStreamImpl_;\n  }\n  \n  /**\n   * @override\n   * @param {DoublePredicate} predicate\n   * @return {DoubleStream}\n   * @public\n   */\n  m_filter__java_util_function_DoublePredicate(predicate) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, FilterSpliterator.$create__java_util_function_DoublePredicate__java_util_Spliterator_OfDouble(predicate, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {DoubleUnaryOperator} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_map__java_util_function_DoubleUnaryOperator(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, MapToDoubleSpliterator.$create__java_util_function_DoubleUnaryOperator__java_util_Spliterator_OfDouble(mapper, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @template M_U\n   * @param {DoubleFunction\x3c?\x3e} mapper\n   * @return {Stream\x3cM_U\x3e}\n   * @public\n   */\n  m_mapToObj__java_util_function_DoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return /**@type {!StreamImpl\x3c*\x3e} */ (StreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator(this, /**@type {!MapToObjSpliterator\x3c*\x3e} */ (MapToObjSpliterator.$create__java_util_function_DoubleFunction__java_util_Spliterator_OfDouble(mapper, this.f_spliterator__java_util_stream_DoubleStreamImpl_))));\n  }\n  \n  /**\n   * @override\n   * @param {DoubleToIntFunction} mapper\n   * @return {IntStream}\n   * @public\n   */\n  m_mapToInt__java_util_function_DoubleToIntFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return IntStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfInt(this, MapToIntSpliterator.$create__java_util_function_DoubleToIntFunction__java_util_Spliterator_OfDouble(mapper, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {DoubleToLongFunction} mapper\n   * @return {LongStream}\n   * @public\n   */\n  m_mapToLong__java_util_function_DoubleToLongFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return LongStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfLong(this, MapToLongSpliterator.$create__java_util_function_DoubleToLongFunction__java_util_Spliterator_OfDouble(mapper, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {DoubleFunction\x3c?\x3e} mapper\n   * @return {DoubleStream}\n   * @public\n   */\n  m_flatMap__java_util_function_DoubleFunction(mapper) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let spliteratorOfStreams \x3d /**@type {!MapToObjSpliterator\x3cDoubleStream\x3e} */ (MapToObjSpliterator.$create__java_util_function_DoubleFunction__java_util_Spliterator_OfDouble(mapper, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n    let flatMapSpliterator \x3d $1.$create__java_util_stream_DoubleStreamImpl__java_util_Spliterator__long__int(this, spliteratorOfStreams, Long.f_MAX_VALUE__java_lang_Long, 0);\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, flatMapSpliterator);\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_distinct__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let seen \x3d /**@type {!HashSet\x3c?number\x3e} */ (HashSet.$create__());\n    return this.m_filter__java_util_function_DoublePredicate(DoublePredicate.$adapt(((/** number */ arg0) \x3d\x3e{\n      return seen.add(arg0);\n    })));\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_sorted__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let sortingSpliterator \x3d $2.$create__java_util_stream_DoubleStreamImpl__long__int(this, this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_characteristics__() | Spliterator.f_SORTED__java_util_Spliterator);\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, sortingSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {DoubleConsumer} action\n   * @return {DoubleStream}\n   * @public\n   */\n  m_peek__java_util_function_DoubleConsumer(action) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(action);\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    let peekSpliterator \x3d $3.$create__java_util_stream_DoubleStreamImpl__java_util_function_DoubleConsumer__long__int(this, action, this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_estimateSize__(), this.f_spliterator__java_util_stream_DoubleStreamImpl_.m_characteristics__());\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, peekSpliterator);\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} maxSize\n   * @return {DoubleStream}\n   * @public\n   */\n  m_limit__long(maxSize) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(maxSize, $Primitives.$widenIntToLong(0)), \"maxSize may not be negative\");\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, LimitSpliterator.$create__long__java_util_Spliterator_OfDouble(maxSize, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @param {!$Long} n\n   * @return {DoubleStream}\n   * @public\n   */\n  m_skip__long(n) {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object($LongUtils.$greaterEquals(n, $Primitives.$widenIntToLong(0)), \"n may not be negative\");\n    if ($LongUtils.$equals(n, $Primitives.$widenIntToLong(0))) {\n      return this;\n    }\n    return DoubleStreamImpl.$create__java_util_stream_TerminatableStream__java_util_Spliterator_OfDouble(this, SkipSpliterator.$create__long__java_util_Spliterator_OfDouble(n, this.f_spliterator__java_util_stream_DoubleStreamImpl_));\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3c?number\x3e}\n   * @public\n   */\n  m_boxed__() {\n    return /**@type {Stream\x3c?number\x3e} */ (this.m_mapToObj__java_util_function_DoubleFunction(DoubleFunction.$adapt(((/** number */ arg0) \x3d\x3e{\n      return Double.m_valueOf__double(arg0);\n    }))));\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_sequential__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_parallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_isParallel__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {DoubleStream}\n   * @public\n   */\n  m_unordered__() {\n    this.m_throwIfTerminated___$pp_java_util_stream();\n    return this;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DoubleStreamImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DoubleStreamImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DoubleStreamImpl.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    DoubleSummaryStatistics \x3d goog.module.get('java.util.DoubleSummaryStatistics$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    OptionalDouble \x3d goog.module.get('java.util.OptionalDouble$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    BiConsumer \x3d goog.module.get('java.util.function.BiConsumer$impl');\n    DoubleConsumer \x3d goog.module.get('java.util.function.DoubleConsumer$impl');\n    DoubleFunction \x3d goog.module.get('java.util.function.DoubleFunction$impl');\n    DoublePredicate \x3d goog.module.get('java.util.function.DoublePredicate$impl');\n    ObjDoubleConsumer \x3d goog.module.get('java.util.function.ObjDoubleConsumer$impl');\n    Supplier \x3d goog.module.get('java.util.function.Supplier$impl');\n    $1 \x3d goog.module.get('java.util.stream.DoubleStreamImpl.$1$impl');\n    $2 \x3d goog.module.get('java.util.stream.DoubleStreamImpl.$2$impl');\n    $3 \x3d goog.module.get('java.util.stream.DoubleStreamImpl.$3$impl');\n    FilterSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.FilterSpliterator$impl');\n    LimitSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.LimitSpliterator$impl');\n    MapToDoubleSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.MapToDoubleSpliterator$impl');\n    MapToIntSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.MapToIntSpliterator$impl');\n    MapToLongSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.MapToLongSpliterator$impl');\n    MapToObjSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.MapToObjSpliterator$impl');\n    SkipSpliterator \x3d goog.module.get('java.util.stream.DoubleStreamImpl.SkipSpliterator$impl');\n    ValueConsumer \x3d goog.module.get('java.util.stream.DoubleStreamImpl.ValueConsumer$impl');\n    IntStreamImpl \x3d goog.module.get('java.util.stream.IntStreamImpl$impl');\n    LongStreamImpl \x3d goog.module.get('java.util.stream.LongStreamImpl$impl');\n    StreamImpl \x3d goog.module.get('java.util.stream.StreamImpl$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    TerminatableStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DoubleStreamImpl, $Util.$makeClassName('java.util.stream.DoubleStreamImpl'));\n\n\nDoubleStream.$markImplementor(DoubleStreamImpl);\n\n\nexports \x3d DoubleStreamImpl; \n//# sourceMappingURL\x3dDoubleStreamImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStreamImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStreamImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStreamImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _TerminatableStream \x3d goog.require('java.util.stream.TerminatableStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _DoubleSummaryStatistics \x3d goog.require('java.util.DoubleSummaryStatistics');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _PrimitiveIterator_OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleFunction \x3d goog.require('java.util.function.DoubleFunction');\nconst _DoublePredicate \x3d goog.require('java.util.function.DoublePredicate');\nconst _DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction');\nconst _DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction');\nconst _DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator');\nconst _ObjDoubleConsumer \x3d goog.require('java.util.function.ObjDoubleConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$1 \x3d goog.require('java.util.stream.DoubleStreamImpl.$1');\nconst _$2 \x3d goog.require('java.util.stream.DoubleStreamImpl.$2');\nconst _$3 \x3d goog.require('java.util.stream.DoubleStreamImpl.$3');\nconst _FilterSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.FilterSpliterator');\nconst _LimitSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.LimitSpliterator');\nconst _MapToDoubleSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToDoubleSpliterator');\nconst _MapToIntSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToIntSpliterator');\nconst _MapToLongSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToLongSpliterator');\nconst _MapToObjSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.MapToObjSpliterator');\nconst _SkipSpliterator \x3d goog.require('java.util.stream.DoubleStreamImpl.SkipSpliterator');\nconst _ValueConsumer \x3d goog.require('java.util.stream.DoubleStreamImpl.ValueConsumer');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _LongStreamImpl \x3d goog.require('java.util.stream.LongStreamImpl');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl$impl');\nexports \x3d DoubleStreamImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/DoubleStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.DoubleStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.DoubleStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _BaseStream \x3d goog.require('java.util.stream.BaseStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _DoubleSummaryStatistics \x3d goog.require('java.util.DoubleSummaryStatistics');\nconst _List \x3d goog.require('java.util.List');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OfDouble \x3d goog.require('java.util.PrimitiveIterator.OfDouble');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterator_OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator');\nconst _DoubleConsumer \x3d goog.require('java.util.function.DoubleConsumer');\nconst _DoubleFunction \x3d goog.require('java.util.function.DoubleFunction');\nconst _DoublePredicate \x3d goog.require('java.util.function.DoublePredicate');\nconst _DoubleSupplier \x3d goog.require('java.util.function.DoubleSupplier');\nconst _DoubleToIntFunction \x3d goog.require('java.util.function.DoubleToIntFunction');\nconst _DoubleToLongFunction \x3d goog.require('java.util.function.DoubleToLongFunction');\nconst _DoubleUnaryOperator \x3d goog.require('java.util.function.DoubleUnaryOperator');\nconst _ObjDoubleConsumer \x3d goog.require('java.util.function.ObjDoubleConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$1 \x3d goog.require('java.util.stream.DoubleStream.$1');\nconst _$2 \x3d goog.require('java.util.stream.DoubleStream.$2');\nconst _$3 \x3d goog.require('java.util.stream.DoubleStream.$3');\nconst _$4 \x3d goog.require('java.util.stream.DoubleStream.$4');\nconst _Builder \x3d goog.require('java.util.stream.DoubleStream.Builder');\nconst _DoubleStreamImpl \x3d goog.require('java.util.stream.DoubleStreamImpl');\nconst _Empty \x3d goog.require('java.util.stream.DoubleStreamImpl.Empty');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar DoubleStream \x3d goog.require('java.util.stream.DoubleStream$impl');\nexports \x3d DoubleStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$Builder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$Builder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Stream.Builder$impl');\n\n\nconst Consumer \x3d goog.require('java.util.function.Consumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @interface\n * @template C_Builder_T\n * @extends {Consumer\x3cC_Builder_T\x3e}\n */\nclass Builder {\n  /**\n   * @abstract\n   * @override\n   * @param {C_Builder_T} t\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object(t) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_Builder_T} t\n   * @return {Builder\x3cC_Builder_T\x3e}\n   * @public\n   */\n  m_add__java_lang_Object(t) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Stream\x3cC_Builder_T\x3e}\n   * @public\n   */\n  m_build__() {\n  }\n  \n  /**\n   * @template C_Builder_T\n   * @param {Builder\x3cC_Builder_T\x3e} $thisArg\n   * @param {C_Builder_T} t\n   * @return {Builder\x3cC_Builder_T\x3e}\n   * @public\n   */\n  static m_add__$default__java_util_stream_Stream_Builder__java_lang_Object($thisArg, t) {\n    Builder.$clinit();\n    $thisArg.m_accept__java_lang_Object(t);\n    return $thisArg;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    Consumer.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_Stream_Builder \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_Stream_Builder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_Stream_Builder;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Builder.$clinit \x3d function() {};\n    Consumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Builder, $Util.$makeClassName('java.util.stream.Stream$Builder'));\n\n\nBuilder.$markImplementor(/** @type {Function} */ (Builder));\n\n\nexports \x3d Builder; \n//# sourceMappingURL\x3dStream$Builder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$Builder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$Builder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Stream.Builder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar Builder \x3d goog.require('java.util.stream.Stream.Builder$impl');\nexports \x3d Builder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Stream.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Builder \x3d goog.require('java.util.stream.Stream.Builder$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template M_T\n * @implements {Builder\x3cM_T\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3c*\x3e} */\n    this.f_items__java_util_stream_Stream_1_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Builder()'.\n   * @template M_T\n   * @return {!$1\x3cM_T\x3e}\n   * @public\n   */\n  static $create__() {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_Stream_1__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Builder()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_Stream_1__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_stream_Stream_1();\n  }\n  \n  /**\n   * @override\n   * @param {M_T} t\n   * @return {void}\n   * @public\n   */\n  m_accept__java_lang_Object(t) {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_Stream_1_, null), \"Builder already built\");\n    $Arrays.$set(this.f_items__java_util_stream_Stream_1_, this.f_items__java_util_stream_Stream_1_.length, t);\n  }\n  \n  /**\n   * @override\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  m_build__() {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_Stream_1_, null), \"Builder already built\");\n    let stream \x3d /**@type {Stream\x3cM_T\x3e} */ ($Casts.$to(Arrays.m_stream__arrayOf_java_lang_Object(this.f_items__java_util_stream_Stream_1_), Stream));\n    this.f_items__java_util_stream_Stream_1_ \x3d null;\n    return stream;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {M_T} arg0\n   * @return {Builder\x3cM_T\x3e}\n   * @public\n   */\n  m_add__java_lang_Object(arg0) {\n    return /**@type {Builder\x3cM_T\x3e} */ (Builder.m_add__$default__java_util_stream_Stream_Builder__java_lang_Object(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {Consumer\x3cM_T\x3e}\n   * @public\n   */\n  m_andThen__java_util_function_Consumer(arg0) {\n    return /**@type {Consumer\x3cM_T\x3e} */ (Consumer.m_andThen__$default__java_util_function_Consumer__java_util_function_Consumer(this, arg0));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_Stream_1() {\n    this.f_items__java_util_stream_Stream_1_ \x3d new Array(0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    Stream \x3d goog.module.get('java.util.stream.Stream$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Builder.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.Stream$1'));\n\n\nBuilder.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dStream$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Stream.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Builder \x3d goog.require('java.util.stream.Stream.Builder');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.Stream.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Stream.$2$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template M_T\n * @extends {AbstractSpliterator\x3cM_T\x3e}\n  */\nclass $2 extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Spliterator\x3c?\x3e} */\n    this.f_next__java_util_stream_Stream_2;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSpliterator(Spliterator, long, int)'.\n   * @template M_T\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2\x3cM_T\x3e}\n   * @public\n   */\n  static $create__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_Stream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_Stream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_Stream_2()) {\n      if (this.f_next__java_util_stream_Stream_2.m_tryAdvance__java_util_function_Consumer(action)) {\n        return true;\n      } else {\n        this.f_next__java_util_stream_Stream_2 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_Stream_2() {\n    while ($Equality.$same(this.f_next__java_util_stream_Stream_2, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** Stream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_next__java_util_stream_Stream_2 \x3d /**@type {Stream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.Stream$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dStream$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Stream.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.Stream.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Stream.$3$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Supplier \x3d goog.forwardDeclare('java.util.function.Supplier$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template M_T\n * @extends {AbstractSpliterator\x3cM_T\x3e}\n  */\nclass $3 extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Supplier\x3cM_T\x3e} */\n    this.$c_s;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSpliterator(Supplier, long, int)'.\n   * @template M_T\n   * @param {Supplier\x3cM_T\x3e} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3\x3cM_T\x3e}\n   * @public\n   */\n  static $create__java_util_function_Supplier__long__int($c_s, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_Stream_3__java_util_function_Supplier__long__int($c_s, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSpliterator(Supplier, long, int)'.\n   * @param {Supplier\x3cM_T\x3e} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_Stream_3__java_util_function_Supplier__long__int($c_s, $_0, $_1) {\n    this.$c_s \x3d $c_s;\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    action.m_accept__java_lang_Object(this.$c_s.m_get__());\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.Stream$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dStream$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Stream.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.Stream.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.Stream.$4$impl');\n\n\nconst AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\n/**\n * @template M_T\n * @extends {AbstractSpliterator\x3cM_T\x3e}\n  */\nclass $4 extends AbstractSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {M_T} */\n    this.f_next__java_util_stream_Stream_4_;\n    /** @public {M_T} */\n    this.$c_seed;\n    /** @public {UnaryOperator\x3cM_T\x3e} */\n    this.$c_f;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractSpliterator(Object, UnaryOperator, long, int)'.\n   * @template M_T\n   * @param {M_T} $c_seed\n   * @param {UnaryOperator\x3cM_T\x3e} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$4\x3cM_T\x3e}\n   * @public\n   */\n  static $create__java_lang_Object__java_util_function_UnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    $4.$clinit();\n    let $instance \x3d new $4();\n    $instance.$ctor__java_util_stream_Stream_4__java_lang_Object__java_util_function_UnaryOperator__long__int($c_seed, $c_f, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractSpliterator(Object, UnaryOperator, long, int)'.\n   * @param {M_T} $c_seed\n   * @param {UnaryOperator\x3cM_T\x3e} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_Stream_4__java_lang_Object__java_util_function_UnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    this.$c_seed \x3d $c_seed;\n    this.$c_f \x3d $c_f;\n    this.$ctor__java_util_Spliterators_AbstractSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_Stream_4();\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(action) {\n    action.m_accept__java_lang_Object(this.f_next__java_util_stream_Stream_4_);\n    this.f_next__java_util_stream_Stream_4_ \x3d this.$c_f.m_apply__java_lang_Object(this.f_next__java_util_stream_Stream_4_);\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Spliterator.m_forEachRemaining__$default__java_util_Spliterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_Stream_4() {\n    this.f_next__java_util_stream_Stream_4_ \x3d this.$c_seed;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $4.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    AbstractSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($4, $Util.$makeClassName('java.util.stream.Stream$4'));\n\n\n\n\nexports \x3d $4; \n//# sourceMappingURL\x3dStream$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Stream.$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSpliterator \x3d goog.require('java.util.Spliterators.AbstractSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar $4 \x3d goog.require('java.util.stream.Stream.$4$impl');\nexports \x3d $4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/Stream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.Stream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.Stream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _BaseStream \x3d goog.require('java.util.stream.BaseStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _List \x3d goog.require('java.util.List');\nconst _Optional \x3d goog.require('java.util.Optional');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Collector \x3d goog.require('java.util.stream.Collector');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _$1 \x3d goog.require('java.util.stream.Stream.$1');\nconst _$2 \x3d goog.require('java.util.stream.Stream.$2');\nconst _$3 \x3d goog.require('java.util.stream.Stream.$3');\nconst _$4 \x3d goog.require('java.util.stream.Stream.$4');\nconst _Builder \x3d goog.require('java.util.stream.Stream.Builder');\nconst _StreamImpl \x3d goog.require('java.util.stream.StreamImpl');\nconst _Empty \x3d goog.require('java.util.stream.StreamImpl.Empty');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Stream \x3d goog.require('java.util.stream.Stream$impl');\nexports \x3d Stream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Collection.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Collection.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Collection');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar Collection \x3d goog.require('java.util.Collection$impl');\nexports \x3d Collection;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractCollection.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractCollection.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractCollection');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _StringJoiner \x3d goog.require('java.util.StringJoiner');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar AbstractCollection \x3d goog.require('java.util.AbstractCollection$impl');\nexports \x3d AbstractCollection;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList$IteratorImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList$IteratorImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractList.IteratorImpl$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AbstractList \x3d goog.forwardDeclare('java.util.AbstractList$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @template C_E\n * @implements {Iterator\x3cC_E\x3e}\n  */\nclass IteratorImpl extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractList\x3cC_E\x3e} */\n    this.f_$outer_this__java_util_AbstractList_IteratorImpl;\n    /** @public {number} */\n    this.f_i__java_util_AbstractList_IteratorImpl \x3d 0;\n    /** @public {number} */\n    this.f_last__java_util_AbstractList_IteratorImpl \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IteratorImpl(AbstractList)'.\n   * @template C_E\n   * @param {AbstractList\x3cC_E\x3e} $outer_this\n   * @return {!IteratorImpl\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractList($outer_this) {\n    IteratorImpl.$clinit();\n    let $instance \x3d new IteratorImpl();\n    $instance.$ctor__java_util_AbstractList_IteratorImpl__java_util_AbstractList($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IteratorImpl(AbstractList)'.\n   * @param {AbstractList\x3cC_E\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractList_IteratorImpl__java_util_AbstractList($outer_this) {\n    this.f_$outer_this__java_util_AbstractList_IteratorImpl \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_AbstractList_IteratorImpl();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_i__java_util_AbstractList_IteratorImpl \x3c this.f_$outer_this__java_util_AbstractList_IteratorImpl.size();\n  }\n  \n  /**\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_next__() {\n    $InternalPreconditions.m_checkElement__boolean(this.m_hasNext__());\n    return this.f_$outer_this__java_util_AbstractList_IteratorImpl.getAtIndex(this.f_last__java_util_AbstractList_IteratorImpl \x3d this.f_i__java_util_AbstractList_IteratorImpl++);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    $InternalPreconditions.m_checkState__boolean(this.f_last__java_util_AbstractList_IteratorImpl !\x3d -1);\n    this.f_$outer_this__java_util_AbstractList_IteratorImpl.removeAtIndex(this.f_last__java_util_AbstractList_IteratorImpl);\n    this.f_i__java_util_AbstractList_IteratorImpl \x3d this.f_last__java_util_AbstractList_IteratorImpl;\n    this.f_last__java_util_AbstractList_IteratorImpl \x3d -1;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_AbstractList_IteratorImpl() {\n    this.f_i__java_util_AbstractList_IteratorImpl \x3d 0;\n    this.f_last__java_util_AbstractList_IteratorImpl \x3d -1;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IteratorImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IteratorImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IteratorImpl.$clinit \x3d function() {};\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IteratorImpl, $Util.$makeClassName('java.util.AbstractList$IteratorImpl'));\n\n\nIterator.$markImplementor(IteratorImpl);\n\n\nexports \x3d IteratorImpl; \n//# sourceMappingURL\x3dAbstractList$IteratorImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList$IteratorImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList$IteratorImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractList.IteratorImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar IteratorImpl \x3d goog.require('java.util.AbstractList.IteratorImpl$impl');\nexports \x3d IteratorImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList$ListIteratorImpl.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList$ListIteratorImpl.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractList.ListIteratorImpl$impl');\n\n\nconst IteratorImpl \x3d goog.require('java.util.AbstractList.IteratorImpl$impl');\nconst ListIterator \x3d goog.require('java.util.ListIterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AbstractList \x3d goog.forwardDeclare('java.util.AbstractList$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @template C_E\n * @extends {IteratorImpl\x3cC_E\x3e}\n * @implements {ListIterator\x3cC_E\x3e}\n  */\nclass ListIteratorImpl extends IteratorImpl {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractList\x3cC_E\x3e} */\n    this.f_$outer_this__java_util_AbstractList_ListIteratorImpl;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ListIteratorImpl(AbstractList)'.\n   * @template C_E\n   * @param {AbstractList\x3cC_E\x3e} $outer_this\n   * @return {!ListIteratorImpl\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractList($outer_this) {\n    ListIteratorImpl.$clinit();\n    let $instance \x3d new ListIteratorImpl();\n    $instance.$ctor__java_util_AbstractList_ListIteratorImpl__java_util_AbstractList($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ListIteratorImpl(AbstractList)'.\n   * @param {AbstractList\x3cC_E\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractList_ListIteratorImpl__java_util_AbstractList($outer_this) {\n    this.f_$outer_this__java_util_AbstractList_ListIteratorImpl \x3d $outer_this;\n    this.$ctor__java_util_AbstractList_IteratorImpl__java_util_AbstractList($outer_this);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ListIteratorImpl(AbstractList, int)'.\n   * @template C_E\n   * @param {AbstractList\x3cC_E\x3e} $outer_this\n   * @param {number} start\n   * @return {!ListIteratorImpl\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractList__int($outer_this, start) {\n    ListIteratorImpl.$clinit();\n    let $instance \x3d new ListIteratorImpl();\n    $instance.$ctor__java_util_AbstractList_ListIteratorImpl__java_util_AbstractList__int($outer_this, start);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ListIteratorImpl(AbstractList, int)'.\n   * @param {AbstractList\x3cC_E\x3e} $outer_this\n   * @param {number} start\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractList_ListIteratorImpl__java_util_AbstractList__int($outer_this, start) {\n    this.f_$outer_this__java_util_AbstractList_ListIteratorImpl \x3d $outer_this;\n    this.$ctor__java_util_AbstractList_IteratorImpl__java_util_AbstractList($outer_this);\n    $InternalPreconditions.m_checkPositionIndex__int__int(start, $outer_this.size());\n    this.f_i__java_util_AbstractList_IteratorImpl \x3d start;\n  }\n  \n  /**\n   * @override\n   * @param {C_E} o\n   * @return {void}\n   * @public\n   */\n  m_add__java_lang_Object(o) {\n    this.f_$outer_this__java_util_AbstractList_ListIteratorImpl.addAtIndex(this.f_i__java_util_AbstractList_IteratorImpl, o);\n    this.f_i__java_util_AbstractList_IteratorImpl++;\n    this.f_last__java_util_AbstractList_IteratorImpl \x3d -1;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasPrevious__() {\n    return this.f_i__java_util_AbstractList_IteratorImpl \x3e 0;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_nextIndex__() {\n    return this.f_i__java_util_AbstractList_IteratorImpl;\n  }\n  \n  /**\n   * @override\n   * @return {C_E}\n   * @public\n   */\n  m_previous__() {\n    $InternalPreconditions.m_checkElement__boolean(this.m_hasPrevious__());\n    return this.f_$outer_this__java_util_AbstractList_ListIteratorImpl.getAtIndex(this.f_last__java_util_AbstractList_IteratorImpl \x3d --this.f_i__java_util_AbstractList_IteratorImpl);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_previousIndex__() {\n    return this.f_i__java_util_AbstractList_IteratorImpl - 1;\n  }\n  \n  /**\n   * @override\n   * @param {C_E} o\n   * @return {void}\n   * @public\n   */\n  m_set__java_lang_Object(o) {\n    $InternalPreconditions.m_checkState__boolean(this.f_last__java_util_AbstractList_IteratorImpl !\x3d -1);\n    this.f_$outer_this__java_util_AbstractList_ListIteratorImpl.setAtIndex(this.f_last__java_util_AbstractList_IteratorImpl, o);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ListIteratorImpl;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ListIteratorImpl);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ListIteratorImpl.$clinit \x3d function() {};\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    IteratorImpl.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ListIteratorImpl, $Util.$makeClassName('java.util.AbstractList$ListIteratorImpl'));\n\n\nListIterator.$markImplementor(ListIteratorImpl);\n\n\nexports \x3d ListIteratorImpl; \n//# sourceMappingURL\x3dAbstractList$ListIteratorImpl.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList$ListIteratorImpl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList$ListIteratorImpl.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractList.ListIteratorImpl');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IteratorImpl \x3d goog.require('java.util.AbstractList.IteratorImpl');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar ListIteratorImpl \x3d goog.require('java.util.AbstractList.ListIteratorImpl$impl');\nexports \x3d ListIteratorImpl;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList$SubList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList$SubList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractList.SubList$impl');\n\n\nconst AbstractList \x3d goog.require('java.util.AbstractList$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @template C_SubList_E\n * @extends {AbstractList\x3cC_SubList_E\x3e}\n  */\nclass SubList extends AbstractList {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {List\x3cC_SubList_E\x3e} */\n    this.f_wrapped__java_util_AbstractList_SubList_;\n    /** @public {number} */\n    this.f_fromIndex__java_util_AbstractList_SubList_ \x3d 0;\n    /** @public {number} */\n    this.f_size__java_util_AbstractList_SubList_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SubList(List, int, int)'.\n   * @template C_SubList_E\n   * @param {List\x3cC_SubList_E\x3e} wrapped\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {!SubList\x3cC_SubList_E\x3e}\n   * @public\n   */\n  static $create__java_util_List__int__int(wrapped, fromIndex, toIndex) {\n    SubList.$clinit();\n    let $instance \x3d new SubList();\n    $instance.$ctor__java_util_AbstractList_SubList__java_util_List__int__int(wrapped, fromIndex, toIndex);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SubList(List, int, int)'.\n   * @param {List\x3cC_SubList_E\x3e} wrapped\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractList_SubList__java_util_List__int__int(wrapped, fromIndex, toIndex) {\n    this.$ctor__java_util_AbstractList__();\n    $InternalPreconditions.m_checkCriticalPositionIndexes__int__int__int(fromIndex, toIndex, wrapped.size());\n    this.f_wrapped__java_util_AbstractList_SubList_ \x3d wrapped;\n    this.f_fromIndex__java_util_AbstractList_SubList_ \x3d fromIndex;\n    this.f_size__java_util_AbstractList_SubList_ \x3d toIndex - fromIndex;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_SubList_E} element\n   * @return {void}\n   * @public\n   */\n  addAtIndex(index, element) {\n    $InternalPreconditions.m_checkPositionIndex__int__int(index, this.f_size__java_util_AbstractList_SubList_);\n    this.f_wrapped__java_util_AbstractList_SubList_.addAtIndex(this.f_fromIndex__java_util_AbstractList_SubList_ + index, element);\n    this.f_size__java_util_AbstractList_SubList_++;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_SubList_E}\n   * @public\n   */\n  getAtIndex(index) {\n    $InternalPreconditions.m_checkElementIndex__int__int(index, this.f_size__java_util_AbstractList_SubList_);\n    return this.f_wrapped__java_util_AbstractList_SubList_.getAtIndex(this.f_fromIndex__java_util_AbstractList_SubList_ + index);\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_SubList_E}\n   * @public\n   */\n  removeAtIndex(index) {\n    $InternalPreconditions.m_checkElementIndex__int__int(index, this.f_size__java_util_AbstractList_SubList_);\n    let result \x3d this.f_wrapped__java_util_AbstractList_SubList_.removeAtIndex(this.f_fromIndex__java_util_AbstractList_SubList_ + index);\n    this.f_size__java_util_AbstractList_SubList_--;\n    return result;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_SubList_E} element\n   * @return {C_SubList_E}\n   * @public\n   */\n  setAtIndex(index, element) {\n    $InternalPreconditions.m_checkElementIndex__int__int(index, this.f_size__java_util_AbstractList_SubList_);\n    return this.f_wrapped__java_util_AbstractList_SubList_.setAtIndex(this.f_fromIndex__java_util_AbstractList_SubList_ + index, element);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_size__java_util_AbstractList_SubList_;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {UnaryOperator\x3cC_SubList_E\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(arg0) {\n    List.m_replaceAll__$default__java_util_List__java_util_function_UnaryOperator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(arg0) {\n    List.m_sort__$default__java_util_List__java_util_Comparator(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_SubList_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_SubList_E\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_SubList_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_SubList_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_SubList_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_SubList_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SubList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SubList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SubList.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    AbstractList.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SubList, $Util.$makeClassName('java.util.AbstractList$SubList'));\n\n\n\n\nexports \x3d SubList; \n//# sourceMappingURL\x3dAbstractList$SubList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList$SubList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList$SubList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractList.SubList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _List \x3d goog.require('java.util.List');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar SubList \x3d goog.require('java.util.AbstractList.SubList$impl');\nexports \x3d SubList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractCollection \x3d goog.require('java.util.AbstractCollection');\nconst _List \x3d goog.require('java.util.List');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _IteratorImpl \x3d goog.require('java.util.AbstractList.IteratorImpl');\nconst _ListIteratorImpl \x3d goog.require('java.util.AbstractList.ListIteratorImpl');\nconst _SubList \x3d goog.require('java.util.AbstractList.SubList');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar AbstractList \x3d goog.require('java.util.AbstractList$impl');\nexports \x3d AbstractList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Arrays$ArrayList.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Arrays$ArrayList.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Arrays.ArrayList$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractList \x3d goog.require('java.util.AbstractList$impl');\nconst RandomAccess \x3d goog.require('java.util.RandomAccess$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet UnaryOperator \x3d goog.forwardDeclare('java.util.function.UnaryOperator$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_ArrayList_E\n * @extends {AbstractList\x3cC_ArrayList_E\x3e}\n * @implements {RandomAccess}\n * @implements {Serializable}\n  */\nclass ArrayList extends AbstractList {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cC_ArrayList_E\x3e} */\n    this.f_array__java_util_Arrays_ArrayList_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ArrayList(Object[])'.\n   * @template C_ArrayList_E\n   * @param {Array\x3cC_ArrayList_E\x3e} array\n   * @return {!ArrayList\x3cC_ArrayList_E\x3e}\n   * @public\n   */\n  static $create__arrayOf_java_lang_Object(array) {\n    ArrayList.$clinit();\n    let $instance \x3d new ArrayList();\n    $instance.$ctor__java_util_Arrays_ArrayList__arrayOf_java_lang_Object(array);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ArrayList(Object[])'.\n   * @param {Array\x3cC_ArrayList_E\x3e} array\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Arrays_ArrayList__arrayOf_java_lang_Object(array) {\n    this.$ctor__java_util_AbstractList__();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(array);\n    this.f_array__java_util_Arrays_ArrayList_ \x3d array;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return (this.indexOf(o) !\x3d -1);\n  }\n  \n  /**\n   * @override\n   * @param {Consumer\x3c?\x3e} consumer\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(consumer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(consumer);\n    for (let $array \x3d this.f_array__java_util_Arrays_ArrayList_, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      consumer.m_accept__java_lang_Object(e);\n    }\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {C_ArrayList_E}\n   * @public\n   */\n  getAtIndex(index) {\n    $InternalPreconditions.m_checkElementIndex__int__int(index, this.size());\n    return this.f_array__java_util_Arrays_ArrayList_[index];\n  }\n  \n  /**\n   * @override\n   * @param {UnaryOperator\x3cC_ArrayList_E\x3e} operator\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_UnaryOperator(operator) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(operator);\n    for (let i \x3d 0; i \x3c this.f_array__java_util_Arrays_ArrayList_.length; i++) {\n      $Arrays.$set(this.f_array__java_util_Arrays_ArrayList_, i, operator.m_apply__java_lang_Object(this.f_array__java_util_Arrays_ArrayList_[i]));\n    }\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @param {C_ArrayList_E} value\n   * @return {C_ArrayList_E}\n   * @public\n   */\n  setAtIndex(index, value) {\n    let was \x3d this.getAtIndex(index);\n    $Arrays.$set(this.f_array__java_util_Arrays_ArrayList_, index, value);\n    return was;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_array__java_util_Arrays_ArrayList_.length;\n  }\n  \n  /**\n   * @override\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  m_sort__java_util_Comparator(c) {\n    Arrays.m_sort__arrayOf_java_lang_Object__int__int__java_util_Comparator(this.f_array__java_util_Arrays_ArrayList_, 0, this.f_array__java_util_Arrays_ArrayList_.length, c);\n  }\n  \n  /**\n   * @override\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  toArray() {\n    return this.m_toArray__arrayOf_java_lang_Object(new Array(this.f_array__java_util_Arrays_ArrayList_.length));\n  }\n  \n  /**\n   * @override\n   * @template M_ArrayList_toArray_T\n   * @param {Array\x3cM_ArrayList_toArray_T\x3e} out\n   * @return {Array\x3cM_ArrayList_toArray_T\x3e}\n   * @public\n   */\n  m_toArray__arrayOf_java_lang_Object(out) {\n    let size \x3d this.f_array__java_util_Arrays_ArrayList_.length;\n    if (out.length \x3c size) {\n      out \x3d ArrayHelper.m_createFrom__arrayOf_java_lang_Object__int(out, size);\n    }\n    for (let i \x3d 0; i \x3c size; ++i) {\n      $Arrays.$set(out, i, /**@type {*} */ ($Casts.$to(this.f_array__java_util_Arrays_ArrayList_[i], j_l_Object)));\n    }\n    if (out.length \x3e size) {\n      $Arrays.$set(out, size, null);\n    }\n    return out;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_ArrayList_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_ArrayList_E\x3e} */ (List.m_spliterator__$default__java_util_List(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_ArrayList_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_ArrayList_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_ArrayList_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_ArrayList_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayList;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ArrayList);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ArrayList.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractList.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ArrayList, $Util.$makeClassName('java.util.Arrays$ArrayList'));\n\n\nRandomAccess.$markImplementor(ArrayList);\nSerializable.$markImplementor(ArrayList);\n\n\nexports \x3d ArrayList; \n//# sourceMappingURL\x3dArrays$ArrayList.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Arrays$ArrayList.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Arrays$ArrayList.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Arrays.ArrayList');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractList \x3d goog.require('java.util.AbstractList');\nconst _RandomAccess \x3d goog.require('java.util.RandomAccess');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _List \x3d goog.require('java.util.List');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _UnaryOperator \x3d goog.require('java.util.function.UnaryOperator');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ArrayList \x3d goog.require('java.util.Arrays.ArrayList$impl');\nexports \x3d ArrayList;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/JavaScriptFunction.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('vmbootstrap.JavaScriptFunction$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Provides class literal and Object methods implementations for\n * JsFunctions.\n */\nclass JavaScriptFunction {\n  /**\n   * Marks the provided class as implementing this interface.\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__$$JavaScriptFunction \x3d true;\n  }\n\n  /**\n   * Returns whether the provided instance is of a class that implements this\n   * interface.\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 typeof instance \x3d\x3d 'function';\n  }\n\n  /**\n   * Returns whether the provided class is or extends this class.\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26\n        !!classConstructor.prototype.$implements__$$JavaScriptFunction;\n  }\n}\n\n$Util.$setClassMetadata(JavaScriptFunction, '\x3cnative function\x3e');\n\n\nJavaScriptFunction.$markImplementor(\n    /** @type {Function} */ (JavaScriptFunction));\n\n\n/**\n * Exported class.\n */\nexports \x3d JavaScriptFunction;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/JavaScriptFunction.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('vmbootstrap.JavaScriptFunction');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction$impl');\nexports \x3d JavaScriptFunction;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Arrays.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Arrays.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Arrays$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Byte \x3d goog.forwardDeclare('java.lang.Byte$impl');\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet Float \x3d goog.forwardDeclare('java.lang.Float$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet Short \x3d goog.forwardDeclare('java.lang.Short$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.Arrays.ArrayList$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Comparators \x3d goog.forwardDeclare('java.util.Comparators$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfDouble \x3d goog.forwardDeclare('java.util.Spliterator.OfDouble$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfLong \x3d goog.forwardDeclare('java.util.Spliterator.OfLong$impl');\nlet Spliterators \x3d goog.forwardDeclare('java.util.Spliterators$impl');\nlet StringJoiner \x3d goog.forwardDeclare('java.util.StringJoiner$impl');\nlet BinaryOperator \x3d goog.forwardDeclare('java.util.function.BinaryOperator$impl');\nlet DoubleBinaryOperator \x3d goog.forwardDeclare('java.util.function.DoubleBinaryOperator$impl');\nlet IntBinaryOperator \x3d goog.forwardDeclare('java.util.function.IntBinaryOperator$impl');\nlet IntFunction \x3d goog.forwardDeclare('java.util.function.IntFunction$impl');\nlet IntToDoubleFunction \x3d goog.forwardDeclare('java.util.function.IntToDoubleFunction$impl');\nlet IntToLongFunction \x3d goog.forwardDeclare('java.util.function.IntToLongFunction$impl');\nlet IntUnaryOperator \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator$impl');\nlet LongBinaryOperator \x3d goog.forwardDeclare('java.util.function.LongBinaryOperator$impl');\nlet DoubleStream \x3d goog.forwardDeclare('java.util.stream.DoubleStream$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet LongStream \x3d goog.forwardDeclare('java.util.stream.LongStream$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet StreamSupport \x3d goog.forwardDeclare('java.util.stream.StreamSupport$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet Coercions \x3d goog.forwardDeclare('javaemul.internal.Coercions$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $JavaScriptFunction \x3d goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\nlet $boolean \x3d goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');\nlet $byte \x3d goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\nlet $float \x3d goog.forwardDeclare('vmbootstrap.primitives.$float$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\nlet $short \x3d goog.forwardDeclare('vmbootstrap.primitives.$short$impl');\n\n\nclass Arrays extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @return {List\x3cM_T\x3e}\n   * @public\n   */\n  static m_asList__arrayOf_java_lang_Object(array) {\n    Arrays.$clinit();\n    return /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__arrayOf_java_lang_Object(array));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_byte__int__int__byte(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_byte__int__int__byte_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_byte__byte(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_byte__int__int__byte_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_byte__int__int__byte_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if (midVal \x3c key) {\n        low \x3d mid + 1;\n      } else if (midVal \x3e key) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_char__int__int__char(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_char__int__int__char_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_char__char(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_char__int__int__char_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_char__int__int__char_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if (midVal \x3c key) {\n        low \x3d mid + 1;\n      } else if (midVal \x3e key) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_double__int__int__double(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_double__int__int__double_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_double__double(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_double__int__int__double_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_double__int__int__double_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if (midVal \x3c key) {\n        low \x3d mid + 1;\n      } else if (midVal \x3e key) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_float__int__int__float(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_float__int__int__float_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_float__float(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_float__int__int__float_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_float__int__int__float_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if (midVal \x3c key) {\n        low \x3d mid + 1;\n      } else if (midVal \x3e key) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_int__int__int__int(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_int__int__int__int_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_int__int(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_int__int__int__int_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_int__int__int__int_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if (midVal \x3c key) {\n        low \x3d mid + 1;\n      } else if (midVal \x3e key) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {!$Long} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_long__int__int__long(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_long__int__int__long_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} sortedArray\n   * @param {!$Long} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_long__long(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_long__int__int__long_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {!$Long} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_long__int__int__long_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if ($LongUtils.$less(midVal, key)) {\n        low \x3d mid + 1;\n      } else if ($LongUtils.$greater(midVal, key)) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {*} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_java_lang_Object__int__int__java_lang_Object(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch__arrayOf_java_lang_Object__int__int__java_lang_Object__java_util_Comparator(sortedArray, fromIndex, toIndex, key, null);\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} sortedArray\n   * @param {*} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_java_lang_Object__java_lang_Object(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch__arrayOf_java_lang_Object__java_lang_Object__java_util_Comparator(sortedArray, key, null);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_short__int__int__short(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_short__int__int__short_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_short__short(sortedArray, key) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_short__int__int__short_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} key\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_short__int__int__short_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key) {\n    Arrays.$clinit();\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      if (midVal \x3c key) {\n        low \x3d mid + 1;\n      } else if (midVal \x3e key) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {M_T} key\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_java_lang_Object__int__int__java_lang_Object__java_util_Comparator(sortedArray, fromIndex, toIndex, key, comparator) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, sortedArray.length);\n    return Arrays.m_binarySearch0__arrayOf_java_lang_Object__int__int__java_lang_Object__java_util_Comparator_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key, comparator);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} sortedArray\n   * @param {M_T} key\n   * @param {Comparator\x3c?\x3e} c\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch__arrayOf_java_lang_Object__java_lang_Object__java_util_Comparator(sortedArray, key, c) {\n    Arrays.$clinit();\n    return Arrays.m_binarySearch0__arrayOf_java_lang_Object__int__int__java_lang_Object__java_util_Comparator_$p_java_util_Arrays(sortedArray, 0, sortedArray.length, key, c);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} sortedArray\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {M_T} key\n   * @param {Comparator\x3c?\x3e} comparator\n   * @return {number}\n   * @public\n   */\n  static m_binarySearch0__arrayOf_java_lang_Object__int__int__java_lang_Object__java_util_Comparator_$p_java_util_Arrays(sortedArray, fromIndex, toIndex, key, comparator) {\n    Arrays.$clinit();\n    comparator \x3d /**@type {Comparator\x3c?\x3e} */ (Comparators.m_nullToNaturalOrder__java_util_Comparator_$pp_java_util(comparator));\n    let low \x3d fromIndex;\n    let high \x3d toIndex - 1;\n    while (low \x3c\x3d high) {\n      let mid \x3d low + ((high - low) \x3e\x3e 1);\n      let midVal \x3d sortedArray[mid];\n      let compareResult \x3d comparator.m_compare__java_lang_Object__java_lang_Object(midVal, key);\n      if (compareResult \x3c 0) {\n        low \x3d mid + 1;\n      } else if (compareResult \x3e 0) {\n        high \x3d mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -low - 1;\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cboolean\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_boolean__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cboolean\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cboolean\x3e} */ ($Arrays.$create([newLength], $boolean)), 0, newLength), $boolean, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_byte__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength], $byte)), 0, newLength), $byte, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_char__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength], $char)), 0, newLength), $char, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_double__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength], $double)), 0, newLength), $double, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_float__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength], $float)), 0, newLength), $float, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_int__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength], $int)), 0, newLength), $int, 1));\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3c!$Long\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_long__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3c!$Long\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([newLength], $long)), 0, newLength), $long, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_short__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([newLength], $short)), 0, newLength), $short, 1));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} original\n   * @param {number} newLength\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  static m_copyOf__arrayOf_java_lang_Object__int(original, newLength) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArraySize__int(newLength);\n    return Arrays.m_copyObjectArray__arrayOf_java_lang_Object__int__int_$p_java_util_Arrays(original, 0, newLength);\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cboolean\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_boolean__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cboolean\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cboolean\x3e} */ ($Arrays.$create([to - from], $boolean)), from, to), $boolean, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_byte__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([to - from], $byte)), from, to), $byte, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_char__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([to - from], $char)), from, to), $char, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_double__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([to - from], $double)), from, to), $double, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_float__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([to - from], $float)), from, to), $float, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_int__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([to - from], $int)), from, to), $int, 1));\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3c!$Long\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_long__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3c!$Long\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([to - from], $long)), from, to), $long, 1));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_short__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return /**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(Arrays.m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([to - from], $short)), from, to), $short, 1));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  static m_copyOfRange__arrayOf_java_lang_Object__int__int(original, from, to) {\n    Arrays.$clinit();\n    Arrays.m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n    return Arrays.m_copyObjectArray__arrayOf_java_lang_Object__int__int_$p_java_util_Arrays(original, from, to);\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} original\n   * @param {M_T} copy\n   * @param {number} from\n   * @param {number} to\n   * @return {M_T}\n   * @public\n   */\n  static m_copyPrimitiveArray__java_lang_Object__java_lang_Object__int__int_$p_java_util_Arrays(original, copy, from, to) {\n    Arrays.$clinit();\n    let len \x3d ArrayHelper.m_getLength__java_lang_Object(original);\n    let copyLen \x3d Math.min(to, len) - from;\n    ArrayHelper.m_copy__java_lang_Object__int__java_lang_Object__int__int(original, from, copy, 0, copyLen);\n    return copy;\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} original\n   * @param {number} from\n   * @param {number} to\n   * @return {Array\x3cM_T\x3e}\n   * @public\n   */\n  static m_copyObjectArray__arrayOf_java_lang_Object__int__int_$p_java_util_Arrays(original, from, to) {\n    Arrays.$clinit();\n    let copy \x3d ArrayHelper.m_clone__arrayOf_java_lang_Object__int__int(original, from, to);\n    ArrayHelper.m_setLength__java_lang_Object__int(copy, to - from);\n    return copy;\n  }\n  \n  /**\n   * @param {*} original\n   * @param {number} from\n   * @param {number} to\n   * @return {void}\n   * @public\n   */\n  static m_checkCopyOfRange__java_lang_Object__int__int_$p_java_util_Arrays(original, from, to) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_String__arrayOf_java_lang_Object(from \x3c\x3d to, \"%s \x3e %s\", [Integer.m_valueOf__int(from), Integer.m_valueOf__int(to)]);\n    let len \x3d ArrayHelper.m_getLength__java_lang_Object(original);\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(from, from, len);\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a1\n   * @param {Array\x3c*\x3e} a2\n   * @return {boolean}\n   * @public\n   */\n  static m_deepEquals__arrayOf_java_lang_Object__arrayOf_java_lang_Object(a1, a2) {\n    Arrays.$clinit();\n    if ($Equality.$same(a1, a2)) {\n      return true;\n    }\n    if ($Equality.$same(a1, null) || $Equality.$same(a2, null)) {\n      return false;\n    }\n    if (a1.length !\x3d a2.length) {\n      return false;\n    }\n    for (let i \x3d 0, n \x3d a1.length; i \x3c n; ++i) {\n      if (!Objects.m_deepEquals__java_lang_Object__java_lang_Object(a1[i], a2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_deepHashCode__arrayOf_java_lang_Object(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let obj \x3d $array[$index];\n      let /** number */ hash;\n      if ($Arrays.$instanceIsOfType(obj, j_l_Object, 1)) {\n        hash \x3d Arrays.m_deepHashCode__arrayOf_java_lang_Object(/**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(obj, j_l_Object, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $boolean, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_boolean(/**@type {Array\x3cboolean\x3e} */ ($Arrays.$castTo(obj, $boolean, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $byte, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_byte(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $byte, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $char, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_char(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $char, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $short, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_short(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $short, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $int, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_int(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $int, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $long, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_long(/**@type {Array\x3c!$Long\x3e} */ ($Arrays.$castTo(obj, $long, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $float, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_float(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $float, 1)));\n      } else if ($Arrays.$instanceIsOfType(obj, $double, 1)) {\n        hash \x3d Arrays.m_hashCode__arrayOf_double(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $double, 1)));\n      } else {\n        hash \x3d Objects.m_hashCode__java_lang_Object(obj);\n      }\n      hashCode \x3d 31 * hashCode + hash;\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_deepToString__arrayOf_java_lang_Object(a) {\n    Arrays.$clinit();\n    return Arrays.m_deepToString__arrayOf_java_lang_Object__java_util_Set_$p_java_util_Arrays(a, /**@type {!HashSet\x3cArray\x3c*\x3e\x3e} */ (HashSet.$create__()));\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} array1\n   * @param {Array\x3cboolean\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_boolean__arrayOf_boolean(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array1\n   * @param {Array\x3cnumber\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_byte__arrayOf_byte(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array1\n   * @param {Array\x3cnumber\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_char__arrayOf_char(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array1\n   * @param {Array\x3cnumber\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_double__arrayOf_double(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array1\n   * @param {Array\x3cnumber\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_float__arrayOf_float(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array1\n   * @param {Array\x3cnumber\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_int__arrayOf_int(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array1\n   * @param {Array\x3c!$Long\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_long__arrayOf_long(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if ($LongUtils.$notEquals(array1[i], array2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} array1\n   * @param {Array\x3c*\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_java_lang_Object__arrayOf_java_lang_Object(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      let val1 \x3d array1[i];\n      let val2 \x3d array2[i];\n      if (!Objects.m_equals__java_lang_Object__java_lang_Object(val1, val2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array1\n   * @param {Array\x3cnumber\x3e} array2\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__arrayOf_short__arrayOf_short(array1, array2) {\n    Arrays.$clinit();\n    if ($Equality.$same(array1, array2)) {\n      return true;\n    }\n    if ($Equality.$same(array1, null) || $Equality.$same(array2, null)) {\n      return false;\n    }\n    if (array1.length !\x3d array2.length) {\n      return false;\n    }\n    for (let i \x3d 0; i \x3c array1.length; ++i) {\n      if (array1[i] !\x3d array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} a\n   * @param {boolean} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_boolean__boolean(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_boolean__int__int__boolean_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {boolean} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_boolean__int__int__boolean(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_boolean__int__int__boolean_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {boolean} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_boolean__int__int__boolean_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_byte__byte(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_byte__int__int__byte_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_byte__int__int__byte(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_byte__int__int__byte_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_byte__int__int__byte_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_char__char(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_char__int__int__char_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_char__int__int__char(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_char__int__int__char_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_char__int__int__char_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_double__double(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_double__int__int__double_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_double__int__int__double(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_double__int__int__double_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_double__int__int__double_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_float__float(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_float__int__int__float_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_float__int__int__float(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_float__int__int__float_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_float__int__int__float_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_int__int(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_int__int__int__int_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_int__int__int__int(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_int__int__int__int_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_int__int__int__int_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {!$Long} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_long__int__int__long(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_long__int__int__long_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {!$Long} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_long__int__int__long_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} a\n   * @param {!$Long} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_long__long(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_long__int__int__long_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {*} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_java_lang_Object__int__int__java_lang_Object(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_java_lang_Object__int__int__java_lang_Object_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {*} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_java_lang_Object__int__int__java_lang_Object_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @param {*} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_java_lang_Object__java_lang_Object(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_java_lang_Object__int__int__java_lang_Object_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_short__int__int__short(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, a.length);\n    Arrays.m_fill0__arrayOf_short__int__int__short_$p_java_util_Arrays(a, fromIndex, toIndex, val);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill0__arrayOf_short__int__int__short_$p_java_util_Arrays(a, fromIndex, toIndex, val) {\n    Arrays.$clinit();\n    for (let i \x3d fromIndex; i \x3c toIndex; ++i) {\n      $Arrays.$set(a, i, val);\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} val\n   * @return {void}\n   * @public\n   */\n  static m_fill__arrayOf_short__short(a, val) {\n    Arrays.$clinit();\n    Arrays.m_fill0__arrayOf_short__int__int__short_$p_java_util_Arrays(a, 0, a.length, val);\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_boolean(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Boolean.m_hashCode__boolean(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_byte(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Byte.m_hashCode__byte(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_char(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Character.m_hashCode__char(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_double(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Double.m_hashCode__double(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_float(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Float.m_hashCode__float(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_int(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Integer.m_hashCode__int(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_long(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Long.m_hashCode__long(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_java_lang_Object(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Objects.m_hashCode__java_lang_Object(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__arrayOf_short(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return 0;\n    }\n    let hashCode \x3d 1;\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      hashCode \x3d 31 * hashCode + Short.m_hashCode__short(e);\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    }\n    return hashCode;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {DoubleBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_double__java_util_function_DoubleBinaryOperator(array, op) {\n    Arrays.$clinit();\n    Arrays.m_parallelPrefix0__arrayOf_double__int__int__java_util_function_DoubleBinaryOperator_$p_java_util_Arrays(array, 0, array.length, op);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {DoubleBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_double__int__int__java_util_function_DoubleBinaryOperator(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_parallelPrefix0__arrayOf_double__int__int__java_util_function_DoubleBinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {DoubleBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix0__arrayOf_double__int__int__java_util_function_DoubleBinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(op);\n    let acc \x3d array[fromIndex];\n    for (let i \x3d fromIndex + 1; i \x3c toIndex; i++) {\n      $Arrays.$set(array, i, acc \x3d op.m_applyAsDouble__double__double(acc, array[i]));\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {IntBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_int__java_util_function_IntBinaryOperator(array, op) {\n    Arrays.$clinit();\n    Arrays.m_parallelPrefix0__arrayOf_int__int__int__java_util_function_IntBinaryOperator_$p_java_util_Arrays(array, 0, array.length, op);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {IntBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_int__int__int__java_util_function_IntBinaryOperator(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_parallelPrefix0__arrayOf_int__int__int__java_util_function_IntBinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {IntBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix0__arrayOf_int__int__int__java_util_function_IntBinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(op);\n    let acc \x3d array[fromIndex];\n    for (let i \x3d fromIndex + 1; i \x3c toIndex; i++) {\n      $Arrays.$set(array, i, acc \x3d op.m_applyAsInt__int__int(acc, array[i]));\n    }\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {LongBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_long__java_util_function_LongBinaryOperator(array, op) {\n    Arrays.$clinit();\n    Arrays.m_parallelPrefix0__arrayOf_long__int__int__java_util_function_LongBinaryOperator_$p_java_util_Arrays(array, 0, array.length, op);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {LongBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_long__int__int__java_util_function_LongBinaryOperator(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_parallelPrefix0__arrayOf_long__int__int__java_util_function_LongBinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {LongBinaryOperator} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix0__arrayOf_long__int__int__java_util_function_LongBinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(op);\n    let acc \x3d array[fromIndex];\n    for (let i \x3d fromIndex + 1; i \x3c toIndex; i++) {\n      $Arrays.$set(array, i, acc \x3d op.m_applyAsLong__long__long(acc, array[i]));\n    }\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {BinaryOperator\x3cM_T\x3e} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_java_lang_Object__java_util_function_BinaryOperator(array, op) {\n    Arrays.$clinit();\n    Arrays.m_parallelPrefix0__arrayOf_java_lang_Object__int__int__java_util_function_BinaryOperator_$p_java_util_Arrays(array, 0, array.length, op);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {BinaryOperator\x3cM_T\x3e} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix__arrayOf_java_lang_Object__int__int__java_util_function_BinaryOperator(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_parallelPrefix0__arrayOf_java_lang_Object__int__int__java_util_function_BinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {BinaryOperator\x3cM_T\x3e} op\n   * @return {void}\n   * @public\n   */\n  static m_parallelPrefix0__arrayOf_java_lang_Object__int__int__java_util_function_BinaryOperator_$p_java_util_Arrays(array, fromIndex, toIndex, op) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(op);\n    let acc \x3d array[fromIndex];\n    for (let i \x3d fromIndex + 1; i \x3c toIndex; i++) {\n      $Arrays.$set(array, i, acc \x3d op.m_apply__java_lang_Object__java_lang_Object(acc, array[i]));\n    }\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {IntFunction\x3c?\x3e} generator\n   * @return {void}\n   * @public\n   */\n  static m_setAll__arrayOf_java_lang_Object__java_util_function_IntFunction(array, generator) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(generator);\n    for (let i \x3d 0; i \x3c array.length; i++) {\n      $Arrays.$set(array, i, generator.m_apply__int(i));\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {IntToDoubleFunction} generator\n   * @return {void}\n   * @public\n   */\n  static m_setAll__arrayOf_double__java_util_function_IntToDoubleFunction(array, generator) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(generator);\n    for (let i \x3d 0; i \x3c array.length; i++) {\n      $Arrays.$set(array, i, generator.m_applyAsDouble__int(i));\n    }\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {IntUnaryOperator} generator\n   * @return {void}\n   * @public\n   */\n  static m_setAll__arrayOf_int__java_util_function_IntUnaryOperator(array, generator) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(generator);\n    for (let i \x3d 0; i \x3c array.length; i++) {\n      $Arrays.$set(array, i, generator.m_applyAsInt__int(i));\n    }\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {IntToLongFunction} generator\n   * @return {void}\n   * @public\n   */\n  static m_setAll__arrayOf_long__java_util_function_IntToLongFunction(array, generator) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(generator);\n    for (let i \x3d 0; i \x3c array.length; i++) {\n      $Arrays.$set(array, i, generator.m_applyAsLong__int(i));\n    }\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {IntFunction\x3c?\x3e} generator\n   * @return {void}\n   * @public\n   */\n  static m_parallelSetAll__arrayOf_java_lang_Object__java_util_function_IntFunction(array, generator) {\n    Arrays.$clinit();\n    Arrays.m_setAll__arrayOf_java_lang_Object__java_util_function_IntFunction(array, generator);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {IntToDoubleFunction} generator\n   * @return {void}\n   * @public\n   */\n  static m_parallelSetAll__arrayOf_double__java_util_function_IntToDoubleFunction(array, generator) {\n    Arrays.$clinit();\n    Arrays.m_setAll__arrayOf_double__java_util_function_IntToDoubleFunction(array, generator);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {IntUnaryOperator} generator\n   * @return {void}\n   * @public\n   */\n  static m_parallelSetAll__arrayOf_int__java_util_function_IntUnaryOperator(array, generator) {\n    Arrays.$clinit();\n    Arrays.m_setAll__arrayOf_int__java_util_function_IntUnaryOperator(array, generator);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {IntToLongFunction} generator\n   * @return {void}\n   * @public\n   */\n  static m_parallelSetAll__arrayOf_long__java_util_function_IntToLongFunction(array, generator) {\n    Arrays.$clinit();\n    Arrays.m_setAll__arrayOf_long__java_util_function_IntToLongFunction(array, generator);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_byte(array) {\n    Arrays.$clinit();\n    Arrays.m_nativeIntegerSort__java_lang_Object_$p_java_util_Arrays(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_byte__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeIntegerSort__java_lang_Object__int__int_$p_java_util_Arrays(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_char(array) {\n    Arrays.$clinit();\n    Arrays.m_nativeIntegerSort__java_lang_Object_$p_java_util_Arrays(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_char__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeIntegerSort__java_lang_Object__int__int_$p_java_util_Arrays(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_double(array) {\n    Arrays.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).sort(Arrays.m_getDoubleComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_double__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeSort__java_lang_Object__int__int__javaemul_internal_NativeArray_CompareFunction_$p_java_util_Arrays(array, fromIndex, toIndex, Arrays.m_getDoubleComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_float(array) {\n    Arrays.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).sort(Arrays.m_getDoubleComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_float__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeSort__java_lang_Object__int__int__javaemul_internal_NativeArray_CompareFunction_$p_java_util_Arrays(array, fromIndex, toIndex, Arrays.m_getDoubleComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_int(array) {\n    Arrays.$clinit();\n    Arrays.m_nativeIntegerSort__java_lang_Object_$p_java_util_Arrays(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_int__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeIntegerSort__java_lang_Object__int__int_$p_java_util_Arrays(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_long(array) {\n    Arrays.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).sort(Arrays.m_getLongComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_long__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeSort__java_lang_Object__int__int__javaemul_internal_NativeArray_CompareFunction_$p_java_util_Arrays(array, fromIndex, toIndex, Arrays.m_getLongComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_java_lang_Object(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_java_lang_Object__java_util_Comparator(array, null);\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_java_lang_Object__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_java_lang_Object__int__int__java_util_Comparator(array, fromIndex, toIndex, null);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_short(array) {\n    Arrays.$clinit();\n    Arrays.m_nativeIntegerSort__java_lang_Object_$p_java_util_Arrays(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_short__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, array.length);\n    Arrays.m_nativeIntegerSort__java_lang_Object__int__int_$p_java_util_Arrays(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} x\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_java_lang_Object__java_util_Comparator(x, c) {\n    Arrays.$clinit();\n    Arrays.m_mergeSort__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(x, 0, x.length, c);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} x\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  static m_sort__arrayOf_java_lang_Object__int__int__java_util_Comparator(x, fromIndex, toIndex, c) {\n    Arrays.$clinit();\n    $InternalPreconditions.m_checkCriticalArrayBounds__int__int__int(fromIndex, toIndex, x.length);\n    Arrays.m_mergeSort__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(x, fromIndex, toIndex, c);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_byte(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_byte(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_byte__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_byte__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_char(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_char(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_char__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_char__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_double(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_double(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_double__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_double__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_float(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_float(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_float__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_float__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_int(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_int(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_int__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_int__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_long(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_long(array);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_long__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_long__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_short(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_short(array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_short__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_short__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_java_lang_Comparable(array) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_java_lang_Object(array);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_java_lang_Object__java_util_Comparator(array, c) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_java_lang_Object__java_util_Comparator(array, c);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_java_lang_Comparable__int__int(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_java_lang_Object__int__int(array, fromIndex, toIndex);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  static m_parallelSort__arrayOf_java_lang_Object__int__int__java_util_Comparator(array, fromIndex, toIndex, c) {\n    Arrays.$clinit();\n    Arrays.m_sort__arrayOf_java_lang_Object__int__int__java_util_Comparator(array, fromIndex, toIndex, c);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {OfDouble}\n   * @public\n   */\n  static m_spliterator__arrayOf_double(array) {\n    Arrays.$clinit();\n    return Spliterators.m_spliterator__arrayOf_double__int(array, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {OfDouble}\n   * @public\n   */\n  static m_spliterator__arrayOf_double__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return Spliterators.m_spliterator__arrayOf_double__int__int__int(array, startInclusive, endExclusive, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {OfInt}\n   * @public\n   */\n  static m_spliterator__arrayOf_int(array) {\n    Arrays.$clinit();\n    return Spliterators.m_spliterator__arrayOf_int__int(array, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {OfInt}\n   * @public\n   */\n  static m_spliterator__arrayOf_int__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return Spliterators.m_spliterator__arrayOf_int__int__int__int(array, startInclusive, endExclusive, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @return {OfLong}\n   * @public\n   */\n  static m_spliterator__arrayOf_long(array) {\n    Arrays.$clinit();\n    return Spliterators.m_spliterator__arrayOf_long__int(array, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {OfLong}\n   * @public\n   */\n  static m_spliterator__arrayOf_long__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return Spliterators.m_spliterator__arrayOf_long__int__int__int(array, startInclusive, endExclusive, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliterator__arrayOf_java_lang_Object(array) {\n    Arrays.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ (Spliterators.m_spliterator__arrayOf_java_lang_Object__int(array, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {Spliterator\x3cM_T\x3e}\n   * @public\n   */\n  static m_spliterator__arrayOf_java_lang_Object__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return /**@type {Spliterator\x3c*\x3e} */ (Spliterators.m_spliterator__arrayOf_java_lang_Object__int__int__int(array, startInclusive, endExclusive, Spliterator.f_IMMUTABLE__java_util_Spliterator | Spliterator.f_ORDERED__java_util_Spliterator));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_stream__arrayOf_double(array) {\n    Arrays.$clinit();\n    return Arrays.m_stream__arrayOf_double__int__int(array, 0, array.length);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {DoubleStream}\n   * @public\n   */\n  static m_stream__arrayOf_double__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return StreamSupport.m_doubleStream__java_util_Spliterator_OfDouble__boolean(Arrays.m_spliterator__arrayOf_double__int__int(array, startInclusive, endExclusive), false);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @return {IntStream}\n   * @public\n   */\n  static m_stream__arrayOf_int(array) {\n    Arrays.$clinit();\n    return Arrays.m_stream__arrayOf_int__int__int(array, 0, array.length);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {IntStream}\n   * @public\n   */\n  static m_stream__arrayOf_int__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return StreamSupport.m_intStream__java_util_Spliterator_OfInt__boolean(Arrays.m_spliterator__arrayOf_int__int__int(array, startInclusive, endExclusive), false);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @return {LongStream}\n   * @public\n   */\n  static m_stream__arrayOf_long(array) {\n    Arrays.$clinit();\n    return Arrays.m_stream__arrayOf_long__int__int(array, 0, array.length);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {LongStream}\n   * @public\n   */\n  static m_stream__arrayOf_long__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return StreamSupport.m_longStream__java_util_Spliterator_OfLong__boolean(Arrays.m_spliterator__arrayOf_long__int__int(array, startInclusive, endExclusive), false);\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_stream__arrayOf_java_lang_Object(array) {\n    Arrays.$clinit();\n    return /**@type {Stream\x3c*\x3e} */ (Arrays.m_stream__arrayOf_java_lang_Object__int__int(array, 0, array.length));\n  }\n  \n  /**\n   * @template M_T\n   * @param {Array\x3cM_T\x3e} array\n   * @param {number} startInclusive\n   * @param {number} endExclusive\n   * @return {Stream\x3cM_T\x3e}\n   * @public\n   */\n  static m_stream__arrayOf_java_lang_Object__int__int(array, startInclusive, endExclusive) {\n    Arrays.$clinit();\n    return /**@type {Stream\x3c*\x3e} */ (StreamSupport.m_stream__java_util_Spliterator__boolean(/**@type {Spliterator\x3c*\x3e} */ (Arrays.m_spliterator__arrayOf_java_lang_Object__int__int(array, startInclusive, endExclusive)), false));\n  }\n  \n  /**\n   * @param {Array\x3cboolean\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_boolean(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__boolean(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_byte(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__int(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_char(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__char(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_double(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__double(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_float(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__float(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_int(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__int(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_long(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__long(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} x\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_java_lang_Object(x) {\n    Arrays.$clinit();\n    if ($Equality.$same(x, null)) {\n      return \"null\";\n    }\n    return $Objects.m_toString__java_lang_Object(/**@type {List\x3c*\x3e} */ (Arrays.m_asList__arrayOf_java_lang_Object(x)));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @return {?string}\n   * @public\n   */\n  static m_toString__arrayOf_short(a) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let element \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__int(element));\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} a\n   * @param {Set\x3cArray\x3c*\x3e\x3e} arraysIveSeen\n   * @return {?string}\n   * @public\n   */\n  static m_deepToString__arrayOf_java_lang_Object__java_util_Set_$p_java_util_Arrays(a, arraysIveSeen) {\n    Arrays.$clinit();\n    if ($Equality.$same(a, null)) {\n      return \"null\";\n    }\n    if (!arraysIveSeen.add(a)) {\n      return \"[...]\";\n    }\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence__java_lang_CharSequence__java_lang_CharSequence(\", \", \"[\", \"]\");\n    for (let $array \x3d a, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let obj \x3d $array[$index];\n      if (!$Equality.$same(obj, null) \x26\x26 $Objects.m_getClass__java_lang_Object(obj).m_isArray__()) {\n        if ($Arrays.$instanceIsOfType(obj, j_l_Object, 1)) {\n          if (arraysIveSeen.contains(obj)) {\n            joiner.m_add__java_lang_CharSequence(\"[...]\");\n          } else {\n            let objArray \x3d /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(obj, j_l_Object, 1));\n            let tempSet \x3d /**@type {!HashSet\x3cArray\x3c*\x3e\x3e} */ (HashSet.$create__java_util_Collection(arraysIveSeen));\n            joiner.m_add__java_lang_CharSequence(Arrays.m_deepToString__arrayOf_java_lang_Object__java_util_Set_$p_java_util_Arrays(objArray, tempSet));\n          }\n        } else if ($Arrays.$instanceIsOfType(obj, $boolean, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_boolean(/**@type {Array\x3cboolean\x3e} */ ($Arrays.$castTo(obj, $boolean, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $byte, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_byte(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $byte, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $char, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_char(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $char, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $short, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_short(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $short, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $int, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_int(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $int, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $long, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_long(/**@type {Array\x3c!$Long\x3e} */ ($Arrays.$castTo(obj, $long, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $float, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_float(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $float, 1))));\n        } else if ($Arrays.$instanceIsOfType(obj, $double, 1)) {\n          joiner.m_add__java_lang_CharSequence(Arrays.m_toString__arrayOf_double(/**@type {Array\x3cnumber\x3e} */ ($Arrays.$castTo(obj, $double, 1))));\n        } else {\n          $Asserts.$assertWithMessage(false, \"Unexpected array type: \" + j_l_String.m_valueOf__java_lang_Object($Objects.m_getClass__java_lang_Object(obj).m_getName__()));\n        }\n      } else {\n        joiner.m_add__java_lang_CharSequence(j_l_String.m_valueOf__java_lang_Object(obj));\n      }\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} array\n   * @param {number} low\n   * @param {number} high\n   * @param {Comparator\x3c*\x3e} comp\n   * @return {void}\n   * @public\n   */\n  static m_insertionSort__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(array, low, high, comp) {\n    Arrays.$clinit();\n    for (let i \x3d low + 1; i \x3c high; ++i) {\n      for (let j \x3d i; j \x3e low \x26\x26 comp.m_compare__java_lang_Object__java_lang_Object(array[j - 1], array[j]) \x3e 0; --j) {\n        let t \x3d array[j];\n        $Arrays.$set(array, j, array[j - 1]);\n        $Arrays.$set(array, j - 1, t);\n      }\n    }\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} src\n   * @param {number} srcLow\n   * @param {number} srcMid\n   * @param {number} srcHigh\n   * @param {Array\x3c*\x3e} dest\n   * @param {number} destLow\n   * @param {number} destHigh\n   * @param {Comparator\x3c*\x3e} comp\n   * @return {void}\n   * @public\n   */\n  static m_merge__arrayOf_java_lang_Object__int__int__int__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(src, srcLow, srcMid, srcHigh, dest, destLow, destHigh, comp) {\n    Arrays.$clinit();\n    let topIdx \x3d srcMid;\n    while (destLow \x3c destHigh) {\n      if (topIdx \x3e\x3d srcHigh || (srcLow \x3c srcMid \x26\x26 comp.m_compare__java_lang_Object__java_lang_Object(src[srcLow], src[topIdx]) \x3c\x3d 0)) {\n        $Arrays.$set(dest, destLow++, src[srcLow++]);\n      } else {\n        $Arrays.$set(dest, destLow++, src[topIdx++]);\n      }\n    }\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} x\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {Comparator\x3c?\x3e} comp\n   * @return {void}\n   * @public\n   */\n  static m_mergeSort__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(x, fromIndex, toIndex, comp) {\n    Arrays.$clinit();\n    comp \x3d /**@type {Comparator\x3c?\x3e} */ (Comparators.m_nullToNaturalOrder__java_util_Comparator_$pp_java_util(comp));\n    let temp \x3d ArrayHelper.m_unsafeClone__java_lang_Object__int__int(x, fromIndex, toIndex);\n    Arrays.m_mergeSort__arrayOf_java_lang_Object__arrayOf_java_lang_Object__int__int__int__java_util_Comparator_$p_java_util_Arrays(temp, x, fromIndex, toIndex, -fromIndex, /**@type {Comparator\x3c*\x3e} */ ($Casts.$to(comp, Comparator)));\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} temp\n   * @param {Array\x3c*\x3e} array\n   * @param {number} low\n   * @param {number} high\n   * @param {number} ofs\n   * @param {Comparator\x3c*\x3e} comp\n   * @return {void}\n   * @public\n   */\n  static m_mergeSort__arrayOf_java_lang_Object__arrayOf_java_lang_Object__int__int__int__java_util_Comparator_$p_java_util_Arrays(temp, array, low, high, ofs, comp) {\n    Arrays.$clinit();\n    let length \x3d high - low;\n    if (length \x3c 7) {\n      Arrays.m_insertionSort__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(array, low, high, comp);\n      return;\n    }\n    let tempLow \x3d low + ofs;\n    let tempHigh \x3d high + ofs;\n    let tempMid \x3d tempLow + ((tempHigh - tempLow) \x3e\x3e 1);\n    Arrays.m_mergeSort__arrayOf_java_lang_Object__arrayOf_java_lang_Object__int__int__int__java_util_Comparator_$p_java_util_Arrays(array, temp, tempLow, tempMid, -ofs, comp);\n    Arrays.m_mergeSort__arrayOf_java_lang_Object__arrayOf_java_lang_Object__int__int__int__java_util_Comparator_$p_java_util_Arrays(array, temp, tempMid, tempHigh, -ofs, comp);\n    if (comp.m_compare__java_lang_Object__java_lang_Object(temp[tempMid - 1], temp[tempMid]) \x3c\x3d 0) {\n      while (low \x3c high) {\n        $Arrays.$set(array, low++, temp[tempLow++]);\n      }\n      return;\n    }\n    Arrays.m_merge__arrayOf_java_lang_Object__int__int__int__arrayOf_java_lang_Object__int__int__java_util_Comparator_$p_java_util_Arrays(temp, tempLow, tempMid, tempHigh, array, low, high, comp);\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @param {?function(*, *):number} fn\n   * @return {void}\n   * @public\n   */\n  static m_nativeSort__java_lang_Object__int__int__javaemul_internal_NativeArray_CompareFunction_$p_java_util_Arrays(array, fromIndex, toIndex, fn) {\n    Arrays.$clinit();\n    let temp \x3d ArrayHelper.m_unsafeClone__java_lang_Object__int__int(array, fromIndex, toIndex);\n    ArrayHelper.m_asNativeArray__java_lang_Object(temp).sort(fn);\n    ArrayHelper.m_copy__java_lang_Object__int__java_lang_Object__int__int(temp, 0, array, fromIndex, toIndex - fromIndex);\n  }\n  \n  /**\n   * @param {*} array\n   * @return {void}\n   * @public\n   */\n  static m_nativeIntegerSort__java_lang_Object_$p_java_util_Arrays(array) {\n    Arrays.$clinit();\n    ArrayHelper.m_asNativeArray__java_lang_Object(array).sort(Arrays.m_getIntComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @param {*} array\n   * @param {number} fromIndex\n   * @param {number} toIndex\n   * @return {void}\n   * @public\n   */\n  static m_nativeIntegerSort__java_lang_Object__int__int_$p_java_util_Arrays(array, fromIndex, toIndex) {\n    Arrays.$clinit();\n    Arrays.m_nativeSort__java_lang_Object__int__int__javaemul_internal_NativeArray_CompareFunction_$p_java_util_Arrays(array, fromIndex, toIndex, Arrays.m_getIntComparator___$p_java_util_Arrays());\n  }\n  \n  /**\n   * @return {?function(*, *):number}\n   * @public\n   */\n  static m_getIntComparator___$p_java_util_Arrays() {\n    Arrays.$clinit();\n    return /**@type {?function(*, *):number} */ (JsUtils.m_uncheckedCast__java_lang_Object(/**@type {?function(number, number):number} */ ($Casts.$to(((/** number */ a, /** number */ b) \x3d\x3e{\n      return a - b;\n    }), $JavaScriptFunction))));\n  }\n  \n  /**\n   * @return {?function(*, *):number}\n   * @public\n   */\n  static m_getDoubleComparator___$p_java_util_Arrays() {\n    Arrays.$clinit();\n    return /**@type {?function(*, *):number} */ (JsUtils.m_uncheckedCast__java_lang_Object(/**@type {?function(number, number):number} */ ($Casts.$to(((/** number */ arg0, /** number */ arg1) \x3d\x3e{\n      return Double.m_compare__double__double(arg0, arg1);\n    }), $JavaScriptFunction))));\n  }\n  \n  /**\n   * @return {?function(*, *):number}\n   * @public\n   */\n  static m_getLongComparator___$p_java_util_Arrays() {\n    Arrays.$clinit();\n    return /**@type {?function(*, *):number} */ (JsUtils.m_uncheckedCast__java_lang_Object(/**@type {?function(!$Long, !$Long):number} */ ($Casts.$to(((/** !$Long */ arg0, /** !$Long */ arg1) \x3d\x3e{\n      return Long.m_compare__long__long(arg0, arg1);\n    }), $JavaScriptFunction))));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Arrays()'.\n   * @return {!Arrays}\n   * @public\n   */\n  static $create__() {\n    Arrays.$clinit();\n    let $instance \x3d new Arrays();\n    $instance.$ctor__java_util_Arrays__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Arrays()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Arrays__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Arrays;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Arrays);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Arrays.$clinit \x3d function() {};\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Byte \x3d goog.module.get('java.lang.Byte$impl');\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    Float \x3d goog.module.get('java.lang.Float$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    Short \x3d goog.module.get('java.lang.Short$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    ArrayList \x3d goog.module.get('java.util.Arrays.ArrayList$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    Comparators \x3d goog.module.get('java.util.Comparators$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    Spliterators \x3d goog.module.get('java.util.Spliterators$impl');\n    StringJoiner \x3d goog.module.get('java.util.StringJoiner$impl');\n    StreamSupport \x3d goog.module.get('java.util.stream.StreamSupport$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    Coercions \x3d goog.module.get('javaemul.internal.Coercions$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $JavaScriptFunction \x3d goog.module.get('vmbootstrap.JavaScriptFunction$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    $boolean \x3d goog.module.get('vmbootstrap.primitives.$boolean$impl');\n    $byte \x3d goog.module.get('vmbootstrap.primitives.$byte$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    $float \x3d goog.module.get('vmbootstrap.primitives.$float$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    $short \x3d goog.module.get('vmbootstrap.primitives.$short$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Arrays, $Util.$makeClassName('java.util.Arrays'));\n\n\n\n\nexports \x3d Arrays; \n//# sourceMappingURL\x3dArrays.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Arrays.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Arrays.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Arrays');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Byte \x3d goog.require('java.lang.Byte');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _Float \x3d goog.require('java.lang.Float');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Short \x3d goog.require('java.lang.Short');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _ArrayList \x3d goog.require('java.util.Arrays.ArrayList');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Comparators \x3d goog.require('java.util.Comparators');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _List \x3d goog.require('java.util.List');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfDouble \x3d goog.require('java.util.Spliterator.OfDouble');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfLong \x3d goog.require('java.util.Spliterator.OfLong');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _StringJoiner \x3d goog.require('java.util.StringJoiner');\nconst _BinaryOperator \x3d goog.require('java.util.function.BinaryOperator');\nconst _DoubleBinaryOperator \x3d goog.require('java.util.function.DoubleBinaryOperator');\nconst _IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction');\nconst _IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _LongBinaryOperator \x3d goog.require('java.util.function.LongBinaryOperator');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _Coercions \x3d goog.require('javaemul.internal.Coercions');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\nconst _$boolean \x3d goog.require('vmbootstrap.primitives.$boolean');\nconst _$byte \x3d goog.require('vmbootstrap.primitives.$byte');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\nconst _$float \x3d goog.require('vmbootstrap.primitives.$float');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\nconst _$short \x3d goog.require('vmbootstrap.primitives.$short');\n\n\n// Re-exports the implementation.\nvar Arrays \x3d goog.require('java.util.Arrays$impl');\nexports \x3d Arrays;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$Builder.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$Builder.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream.Builder$impl');\n\n\nconst IntConsumer \x3d goog.require('java.util.function.IntConsumer$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\n\n\n/**\n * @interface\n * @extends {IntConsumer}\n */\nclass Builder {\n  /**\n   * @abstract\n   * @override\n   * @param {number} t\n   * @return {void}\n   * @public\n   */\n  m_accept__int(t) {\n  }\n  \n  /**\n   * @abstract\n   * @param {number} t\n   * @return {Builder}\n   * @public\n   */\n  m_add__int(t) {\n  }\n  \n  /**\n   * @abstract\n   * @return {IntStream}\n   * @public\n   */\n  m_build__() {\n  }\n  \n  /**\n   * @param {Builder} $thisArg\n   * @param {number} t\n   * @return {Builder}\n   * @public\n   */\n  static m_add__$default__java_util_stream_IntStream_Builder__int($thisArg, t) {\n    Builder.$clinit();\n    $thisArg.m_accept__int(t);\n    return $thisArg;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    IntConsumer.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_stream_IntStream_Builder \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_stream_IntStream_Builder;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_stream_IntStream_Builder;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Builder.$clinit \x3d function() {};\n    IntConsumer.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Builder, $Util.$makeClassName('java.util.stream.IntStream$Builder'));\n\n\nBuilder.$markImplementor(/** @type {Function} */ (Builder));\n\n\nexports \x3d Builder; \n//# sourceMappingURL\x3dIntStream$Builder.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$Builder.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$Builder.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream.Builder');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\n\n\n// Re-exports the implementation.\nvar Builder \x3d goog.require('java.util.stream.IntStream.Builder$impl');\nexports \x3d Builder;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Builder \x3d goog.require('java.util.stream.IntStream.Builder$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\n\n\n/**\n * @implements {Builder}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cnumber\x3e} */\n    this.f_items__java_util_stream_IntStream_1_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Builder()'.\n   * @return {!$1}\n   * @public\n   */\n  static $create__() {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_stream_IntStream_1__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Builder()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStream_1__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__java_util_stream_IntStream_1();\n  }\n  \n  /**\n   * @override\n   * @param {number} t\n   * @return {void}\n   * @public\n   */\n  m_accept__int(t) {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_IntStream_1_, null), \"Builder already built\");\n    $Arrays.$set(this.f_items__java_util_stream_IntStream_1_, this.f_items__java_util_stream_IntStream_1_.length, t);\n  }\n  \n  /**\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_build__() {\n    $InternalPreconditions.m_checkState__boolean__java_lang_Object(!$Equality.$same(this.f_items__java_util_stream_IntStream_1_, null), \"Builder already built\");\n    let stream \x3d Arrays.m_stream__arrayOf_int(this.f_items__java_util_stream_IntStream_1_);\n    this.f_items__java_util_stream_IntStream_1_ \x3d null;\n    return stream;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {Builder}\n   * @public\n   */\n  m_add__int(arg0) {\n    return Builder.m_add__$default__java_util_stream_IntStream_Builder__int(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {IntConsumer}\n   * @public\n   */\n  m_andThen__java_util_function_IntConsumer(arg0) {\n    return IntConsumer.m_andThen__$default__java_util_function_IntConsumer__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_IntStream_1() {\n    this.f_items__java_util_stream_IntStream_1_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([0], $int));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    j_l_Object.$clinit();\n    Builder.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.stream.IntStream$1'));\n\n\nBuilder.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dIntStream$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Builder \x3d goog.require('java.util.stream.IntStream.Builder');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.stream.IntStream.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream.$2$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $2 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OfInt} */\n    this.f_next__java_util_stream_IntStream_2;\n    /** @public {Spliterator\x3c?\x3e} */\n    this.$c_spliteratorOfStreams;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_stream_IntStream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(Spliterator, long, int)'.\n   * @param {Spliterator\x3c?\x3e} $c_spliteratorOfStreams\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStream_2__java_util_Spliterator__long__int($c_spliteratorOfStreams, $_0, $_1) {\n    this.$c_spliteratorOfStreams \x3d $c_spliteratorOfStreams;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    while (this.m_advanceToNextSpliterator___$p_java_util_stream_IntStream_2()) {\n      if (this.f_next__java_util_stream_IntStream_2.m_tryAdvance__java_lang_Object(action)) {\n        return true;\n      } else {\n        this.f_next__java_util_stream_IntStream_2 \x3d null;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_advanceToNextSpliterator___$p_java_util_stream_IntStream_2() {\n    while ($Equality.$same(this.f_next__java_util_stream_IntStream_2, null)) {\n      if (!this.$c_spliteratorOfStreams.m_tryAdvance__java_util_function_Consumer(Consumer.$adapt(((/** IntStream */ n) \x3d\x3e{\n        if (!$Equality.$same(n, null)) {\n          this.f_next__java_util_stream_IntStream_2 \x3d /**@type {IntStream} */ (n).m_spliterator__();\n        }\n      })))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.stream.IntStream$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dIntStream$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.stream.IntStream.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream.$3$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntSupplier \x3d goog.forwardDeclare('java.util.function.IntSupplier$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {IntSupplier} */\n    this.$c_s;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(IntSupplier, long, int)'.\n   * @param {IntSupplier} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_util_function_IntSupplier__long__int($c_s, $_0, $_1) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_stream_IntStream_3__java_util_function_IntSupplier__long__int($c_s, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(IntSupplier, long, int)'.\n   * @param {IntSupplier} $c_s\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStream_3__java_util_function_IntSupplier__long__int($c_s, $_0, $_1) {\n    this.$c_s \x3d $c_s;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    action.m_accept__int(this.$c_s.m_getAsInt__());\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.stream.IntStream$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dIntStream$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntSupplier \x3d goog.require('java.util.function.IntSupplier');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.stream.IntStream.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream.$4$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet IntUnaryOperator \x3d goog.forwardDeclare('java.util.function.IntUnaryOperator$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $4 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_next__java_util_stream_IntStream_4_ \x3d 0;\n    /** @public {number} */\n    this.$c_seed \x3d 0;\n    /** @public {IntUnaryOperator} */\n    this.$c_f;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(int, IntUnaryOperator, long, int)'.\n   * @param {number} $c_seed\n   * @param {IntUnaryOperator} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$4}\n   * @public\n   */\n  static $create__int__java_util_function_IntUnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    $4.$clinit();\n    let $instance \x3d new $4();\n    $instance.$ctor__java_util_stream_IntStream_4__int__java_util_function_IntUnaryOperator__long__int($c_seed, $c_f, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(int, IntUnaryOperator, long, int)'.\n   * @param {number} $c_seed\n   * @param {IntUnaryOperator} $c_f\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStream_4__int__java_util_function_IntUnaryOperator__long__int($c_seed, $c_f, $_0, $_1) {\n    this.$c_seed \x3d $c_seed;\n    this.$c_f \x3d $c_f;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_IntStream_4();\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    action.m_accept__int(this.f_next__java_util_stream_IntStream_4_);\n    this.f_next__java_util_stream_IntStream_4_ \x3d this.$c_f.m_applyAsInt__int(this.f_next__java_util_stream_IntStream_4_);\n    return true;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return Spliterator.m_getComparator__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_IntStream_4() {\n    this.f_next__java_util_stream_IntStream_4_ \x3d this.$c_seed;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $4.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($4, $Util.$makeClassName('java.util.stream.IntStream$4'));\n\n\n\n\nexports \x3d $4; \n//# sourceMappingURL\x3dIntStream$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream.$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $4 \x3d goog.require('java.util.stream.IntStream.$4$impl');\nexports \x3d $4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$5.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$5.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.stream.IntStream.$5$impl');\n\n\nconst AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet OfInt \x3d goog.forwardDeclare('java.util.Spliterator.OfInt$impl');\nlet OfPrimitive \x3d goog.forwardDeclare('java.util.Spliterator.OfPrimitive$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $5 extends AbstractIntSpliterator {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_next__java_util_stream_IntStream_5_ \x3d 0;\n    /** @public {number} */\n    this.$c_startInclusive \x3d 0;\n    /** @public {number} */\n    this.$c_endInclusive \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new AbstractIntSpliterator(int, int, long, int)'.\n   * @param {number} $c_startInclusive\n   * @param {number} $c_endInclusive\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {!$5}\n   * @public\n   */\n  static $create__int__int__long__int($c_startInclusive, $c_endInclusive, $_0, $_1) {\n    $5.$clinit();\n    let $instance \x3d new $5();\n    $instance.$ctor__java_util_stream_IntStream_5__int__int__long__int($c_startInclusive, $c_endInclusive, $_0, $_1);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new AbstractIntSpliterator(int, int, long, int)'.\n   * @param {number} $c_startInclusive\n   * @param {number} $c_endInclusive\n   * @param {!$Long} $_0\n   * @param {number} $_1\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_stream_IntStream_5__int__int__long__int($c_startInclusive, $c_endInclusive, $_0, $_1) {\n    this.$c_startInclusive \x3d $c_startInclusive;\n    this.$c_endInclusive \x3d $c_endInclusive;\n    this.$ctor__java_util_Spliterators_AbstractIntSpliterator__long__int($_0, $_1);\n    this.$init__java_util_stream_IntStream_5();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_getComparator__() {\n    return null;\n  }\n  \n  /**\n   * @param {IntConsumer} action\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_IntConsumer(action) {\n    if (this.f_next__java_util_stream_IntStream_5_ \x3c\x3d this.$c_endInclusive) {\n      action.m_accept__int(this.f_next__java_util_stream_IntStream_5_++);\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_util_function_Consumer(arg0) {\n    return OfInt.m_tryAdvance__$default__java_util_Spliterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    OfPrimitive.m_forEachRemaining__$default__java_util_Spliterator_OfPrimitive__java_lang_Object(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {!$Long}\n   * @public\n   */\n  m_getExactSizeIfKnown__() {\n    return Spliterator.m_getExactSizeIfKnown__$default__java_util_Spliterator(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {number} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_hasCharacteristics__int(arg0) {\n    return Spliterator.m_hasCharacteristics__$default__java_util_Spliterator__int(this, arg0);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_tryAdvance__java_lang_Object(arg0) {\n    return this.m_tryAdvance__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_stream_IntStream_5() {\n    this.f_next__java_util_stream_IntStream_5_ \x3d this.$c_startInclusive;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $5;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $5);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $5.$clinit \x3d function() {};\n    Spliterator \x3d goog.module.get('java.util.Spliterator$impl');\n    OfInt \x3d goog.module.get('java.util.Spliterator.OfInt$impl');\n    OfPrimitive \x3d goog.module.get('java.util.Spliterator.OfPrimitive$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractIntSpliterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($5, $Util.$makeClassName('java.util.stream.IntStream$5'));\n\n\n\n\nexports \x3d $5; \n//# sourceMappingURL\x3dIntStream$5.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream$5.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream$5.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream.$5');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractIntSpliterator \x3d goog.require('java.util.Spliterators.AbstractIntSpliterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _OfPrimitive \x3d goog.require('java.util.Spliterator.OfPrimitive');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $5 \x3d goog.require('java.util.stream.IntStream.$5$impl');\nexports \x3d $5;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/stream/IntStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.stream.IntStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.stream.IntStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _BaseStream \x3d goog.require('java.util.stream.BaseStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _Runnable \x3d goog.require('java.lang.Runnable');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _IntSummaryStatistics \x3d goog.require('java.util.IntSummaryStatistics');\nconst _List \x3d goog.require('java.util.List');\nconst _OptionalDouble \x3d goog.require('java.util.OptionalDouble');\nconst _OptionalInt \x3d goog.require('java.util.OptionalInt');\nconst _OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterator_OfInt \x3d goog.require('java.util.Spliterator.OfInt');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _IntBinaryOperator \x3d goog.require('java.util.function.IntBinaryOperator');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _IntFunction \x3d goog.require('java.util.function.IntFunction');\nconst _IntPredicate \x3d goog.require('java.util.function.IntPredicate');\nconst _IntSupplier \x3d goog.require('java.util.function.IntSupplier');\nconst _IntToDoubleFunction \x3d goog.require('java.util.function.IntToDoubleFunction');\nconst _IntToLongFunction \x3d goog.require('java.util.function.IntToLongFunction');\nconst _IntUnaryOperator \x3d goog.require('java.util.function.IntUnaryOperator');\nconst _ObjIntConsumer \x3d goog.require('java.util.function.ObjIntConsumer');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _DoubleStream \x3d goog.require('java.util.stream.DoubleStream');\nconst _$1 \x3d goog.require('java.util.stream.IntStream.$1');\nconst _$2 \x3d goog.require('java.util.stream.IntStream.$2');\nconst _$3 \x3d goog.require('java.util.stream.IntStream.$3');\nconst _$4 \x3d goog.require('java.util.stream.IntStream.$4');\nconst _$5 \x3d goog.require('java.util.stream.IntStream.$5');\nconst _Builder \x3d goog.require('java.util.stream.IntStream.Builder');\nconst _IntStreamImpl \x3d goog.require('java.util.stream.IntStreamImpl');\nconst _Empty \x3d goog.require('java.util.stream.IntStreamImpl.Empty');\nconst _LongStream \x3d goog.require('java.util.stream.LongStream');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\n\n\n// Re-exports the implementation.\nvar IntStream \x3d goog.require('java.util.stream.IntStream$impl');\nexports \x3d IntStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Character$CharSequenceAdapter.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Character$CharSequenceAdapter.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Character.CharSequenceAdapter$impl');\n\n\nconst CharSequence \x3d goog.require('java.lang.CharSequence$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\n\n\n/**\n * @implements {CharSequence}\n  */\nclass CharSequenceAdapter extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cnumber\x3e} */\n    this.f_charArray__java_lang_Character_CharSequenceAdapter_;\n    /** @public {number} */\n    this.f_start__java_lang_Character_CharSequenceAdapter_ \x3d 0;\n    /** @public {number} */\n    this.f_end__java_lang_Character_CharSequenceAdapter_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'CharSequenceAdapter(char[])'.\n   * @param {Array\x3cnumber\x3e} charArray\n   * @return {!CharSequenceAdapter}\n   * @public\n   */\n  static $create__arrayOf_char(charArray) {\n    CharSequenceAdapter.$clinit();\n    let $instance \x3d new CharSequenceAdapter();\n    $instance.$ctor__java_lang_Character_CharSequenceAdapter__arrayOf_char(charArray);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'CharSequenceAdapter(char[])'.\n   * @param {Array\x3cnumber\x3e} charArray\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Character_CharSequenceAdapter__arrayOf_char(charArray) {\n    this.$ctor__java_lang_Character_CharSequenceAdapter__arrayOf_char__int__int(charArray, 0, charArray.length);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'CharSequenceAdapter(char[], int, int)'.\n   * @param {Array\x3cnumber\x3e} charArray\n   * @param {number} start\n   * @param {number} end\n   * @return {!CharSequenceAdapter}\n   * @public\n   */\n  static $create__arrayOf_char__int__int(charArray, start, end) {\n    CharSequenceAdapter.$clinit();\n    let $instance \x3d new CharSequenceAdapter();\n    $instance.$ctor__java_lang_Character_CharSequenceAdapter__arrayOf_char__int__int(charArray, start, end);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'CharSequenceAdapter(char[], int, int)'.\n   * @param {Array\x3cnumber\x3e} charArray\n   * @param {number} start\n   * @param {number} end\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Character_CharSequenceAdapter__arrayOf_char__int__int(charArray, start, end) {\n    this.$ctor__java_lang_Object__();\n    this.f_charArray__java_lang_Character_CharSequenceAdapter_ \x3d charArray;\n    this.f_start__java_lang_Character_CharSequenceAdapter_ \x3d start;\n    this.f_end__java_lang_Character_CharSequenceAdapter_ \x3d end;\n  }\n  \n  /**\n   * @override\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  m_charAt__int(index) {\n    return this.f_charArray__java_lang_Character_CharSequenceAdapter_[index + this.f_start__java_lang_Character_CharSequenceAdapter_];\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_length__() {\n    return this.f_end__java_lang_Character_CharSequenceAdapter_ - this.f_start__java_lang_Character_CharSequenceAdapter_;\n  }\n  \n  /**\n   * @override\n   * @param {number} start\n   * @param {number} end\n   * @return {(CharSequence|string)}\n   * @public\n   */\n  m_subSequence__int__int(start, end) {\n    return CharSequenceAdapter.$create__arrayOf_char__int__int(this.f_charArray__java_lang_Character_CharSequenceAdapter_, this.f_start__java_lang_Character_CharSequenceAdapter_ + start, this.f_start__java_lang_Character_CharSequenceAdapter_ + end);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_chars__() {\n    return CharSequence.m_chars__$default__java_lang_CharSequence(this);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof CharSequenceAdapter;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, CharSequenceAdapter);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    CharSequenceAdapter.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    CharSequence.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(CharSequenceAdapter, $Util.$makeClassName('java.lang.Character$CharSequenceAdapter'));\n\n\nCharSequence.$markImplementor(CharSequenceAdapter);\n\n\nexports \x3d CharSequenceAdapter; \n//# sourceMappingURL\x3dCharacter$CharSequenceAdapter.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Character$CharSequenceAdapter.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Character$CharSequenceAdapter.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Character.CharSequenceAdapter');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\n\n\n// Re-exports the implementation.\nvar CharSequenceAdapter \x3d goog.require('java.lang.Character.CharSequenceAdapter$impl');\nexports \x3d CharSequenceAdapter;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/NativeRegExp$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.NativeRegExp$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.NativeRegExp.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof RegExp;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('RegExp'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dNativeRegExp$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/NativeRegExp$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.NativeRegExp$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.NativeRegExp.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.NativeRegExp.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Character.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Character.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Character$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet BoxedValues \x3d goog.forwardDeclare('java.lang.Character.BoxedValues$impl');\nlet CharSequenceAdapter \x3d goog.forwardDeclare('java.lang.Character.CharSequenceAdapter$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.NativeRegExp.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\n\n\n/**\n * @implements {Comparable\x3cCharacter\x3e}\n * @implements {Serializable}\n  */\nclass Character extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_value__java_lang_Character_ \x3d 0 /* '\\u0000' */;\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {number}\n   * @public\n   */\n  static m_charCount__int(codePoint) {\n    Character.$clinit();\n    return codePoint \x3e\x3d Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character ? 2 : 1;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_codePointAt__arrayOf_char__int(a, index) {\n    Character.$clinit();\n    return Character.m_codePointAt__java_lang_CharSequence__int__int_$pp_java_lang(CharSequenceAdapter.$create__arrayOf_char(a), index, a.length);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} index\n   * @param {number} limit\n   * @return {number}\n   * @public\n   */\n  static m_codePointAt__arrayOf_char__int__int(a, index, limit) {\n    Character.$clinit();\n    return Character.m_codePointAt__java_lang_CharSequence__int__int_$pp_java_lang(CharSequenceAdapter.$create__arrayOf_char(a), index, limit);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} seq\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_codePointAt__java_lang_CharSequence__int(seq, index) {\n    Character.$clinit();\n    return Character.m_codePointAt__java_lang_CharSequence__int__int_$pp_java_lang(seq, index, $CharSequences.m_length__java_lang_CharSequence(seq));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_codePointBefore__arrayOf_char__int(a, index) {\n    Character.$clinit();\n    return Character.m_codePointBefore__java_lang_CharSequence__int__int_$pp_java_lang(CharSequenceAdapter.$create__arrayOf_char(a), index, 0);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} index\n   * @param {number} start\n   * @return {number}\n   * @public\n   */\n  static m_codePointBefore__arrayOf_char__int__int(a, index, start) {\n    Character.$clinit();\n    return Character.m_codePointBefore__java_lang_CharSequence__int__int_$pp_java_lang(CharSequenceAdapter.$create__arrayOf_char(a), index, start);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} cs\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_codePointBefore__java_lang_CharSequence__int(cs, index) {\n    Character.$clinit();\n    return Character.m_codePointBefore__java_lang_CharSequence__int__int_$pp_java_lang(cs, index, 0);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} offset\n   * @param {number} count\n   * @return {number}\n   * @public\n   */\n  static m_codePointCount__arrayOf_char__int__int(a, offset, count) {\n    Character.$clinit();\n    return Character.m_codePointCount__java_lang_CharSequence__int__int(CharSequenceAdapter.$create__arrayOf_char(a), offset, offset + count);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} seq\n   * @param {number} beginIndex\n   * @param {number} endIndex\n   * @return {number}\n   * @public\n   */\n  static m_codePointCount__java_lang_CharSequence__int__int(seq, beginIndex, endIndex) {\n    Character.$clinit();\n    let count \x3d 0;\n    for (let idx \x3d beginIndex; idx \x3c endIndex; ) {\n      let ch \x3d $CharSequences.m_charAt__java_lang_CharSequence__int(seq, idx++);\n      if (Character.m_isHighSurrogate__char(ch) \x26\x26 idx \x3c endIndex \x26\x26 Character.m_isLowSurrogate__char($CharSequences.m_charAt__java_lang_CharSequence__int(seq, idx))) {\n        ++idx;\n      }\n      ++count;\n    }\n    return count;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__char__char(x, y) {\n    Character.$clinit();\n    return x - y;\n  }\n  \n  /**\n   * @param {number} c\n   * @param {number} radix\n   * @return {number}\n   * @public\n   */\n  static m_digit__char__int(c, radix) {\n    Character.$clinit();\n    if (radix \x3c Character.f_MIN_RADIX__java_lang_Character || radix \x3e Character.f_MAX_RADIX__java_lang_Character) {\n      return -1;\n    }\n    if (c \x3e\x3d 48 /* '0' */ \x26\x26 c \x3c 48 /* '0' */ + Math.min(radix, 10)) {\n      return c - 48 /* '0' */;\n    }\n    if (c \x3e\x3d 97 /* 'a' */ \x26\x26 c \x3c (radix + 97 /* 'a' */ - 10)) {\n      return c - 97 /* 'a' */ + 10;\n    }\n    if (c \x3e\x3d 65 /* 'A' */ \x26\x26 c \x3c (radix + 65 /* 'A' */ - 10)) {\n      return c - 65 /* 'A' */ + 10;\n    }\n    return -1;\n  }\n  \n  /**\n   * @param {number} digit\n   * @param {number} radix\n   * @return {number}\n   * @public\n   */\n  static m_forDigit__int__int(digit, radix) {\n    Character.$clinit();\n    if (radix \x3c Character.f_MIN_RADIX__java_lang_Character || radix \x3e Character.f_MAX_RADIX__java_lang_Character) {\n      return 0 /* '\\u0000' */;\n    }\n    if (digit \x3c 0 || digit \x3e\x3d radix) {\n      return 0 /* '\\u0000' */;\n    }\n    return Character.m_forDigit__int_$pp_java_lang(digit);\n  }\n  \n  /**\n   * @param {number} c\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__char(c) {\n    Character.$clinit();\n    return c;\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {boolean}\n   * @public\n   */\n  static m_isBmpCodePoint__int(codePoint) {\n    Character.$clinit();\n    return codePoint \x3e\x3d Character.f_MIN_VALUE__java_lang_Character \x26\x26 codePoint \x3c\x3d Character.f_MAX_VALUE__java_lang_Character;\n  }\n  \n  /**\n   * @param {number} c\n   * @return {boolean}\n   * @public\n   */\n  static m_isDigit__char(c) {\n    Character.$clinit();\n    if ($Equality.$same(Character.$f_digitRegex__java_lang_Character_, null)) {\n      Character.$f_digitRegex__java_lang_Character_ \x3d new RegExp(\"\\\\d\");\n    }\n    return Character.$f_digitRegex__java_lang_Character_.test(j_l_String.m_valueOf__char(c));\n  }\n  \n  /**\n   * @param {number} ch\n   * @return {boolean}\n   * @public\n   */\n  static m_isHighSurrogate__char(ch) {\n    Character.$clinit();\n    return ch \x3e\x3d Character.f_MIN_HIGH_SURROGATE__java_lang_Character \x26\x26 ch \x3c\x3d Character.f_MAX_HIGH_SURROGATE__java_lang_Character;\n  }\n  \n  /**\n   * @param {number} c\n   * @return {boolean}\n   * @public\n   */\n  static m_isLetter__char(c) {\n    Character.$clinit();\n    if ($Equality.$same(Character.$f_leterRegex__java_lang_Character_, null)) {\n      Character.$f_leterRegex__java_lang_Character_ \x3d new RegExp(\"[A-Z]\", \"i\");\n    }\n    return Character.$f_leterRegex__java_lang_Character_.test(j_l_String.m_valueOf__char(c));\n  }\n  \n  /**\n   * @param {number} c\n   * @return {boolean}\n   * @public\n   */\n  static m_isLetterOrDigit__char(c) {\n    Character.$clinit();\n    if ($Equality.$same(Character.$f_isLeterOrDigitRegex__java_lang_Character_, null)) {\n      Character.$f_isLeterOrDigitRegex__java_lang_Character_ \x3d new RegExp(\"[A-Z\\\\d]\", \"i\");\n    }\n    return Character.$f_isLeterOrDigitRegex__java_lang_Character_.test(j_l_String.m_valueOf__char(c));\n  }\n  \n  /**\n   * @param {number} c\n   * @return {boolean}\n   * @public\n   */\n  static m_isLowerCase__char(c) {\n    Character.$clinit();\n    return Character.m_toLowerCase__char(c) \x3d\x3d c \x26\x26 Character.m_isLetter__char(c);\n  }\n  \n  /**\n   * @param {number} ch\n   * @return {boolean}\n   * @public\n   */\n  static m_isLowSurrogate__char(ch) {\n    Character.$clinit();\n    return ch \x3e\x3d Character.f_MIN_LOW_SURROGATE__java_lang_Character \x26\x26 ch \x3c\x3d Character.f_MAX_LOW_SURROGATE__java_lang_Character;\n  }\n  \n  /**\n   * @param {number} c\n   * @return {boolean}\n   * @public\n   */\n  static m_isSpace__char(c) {\n    Character.$clinit();\n    switch (c) {\n      case 32 /* ' ' */: \n        return true;\n      case 10 /* '\\n' */: \n        return true;\n      case 9 /* '\\t' */: \n        return true;\n      case 12 /* '\\f' */: \n        return true;\n      case 13 /* '\\r' */: \n        return true;\n      default: \n        return false;\n    }\n  }\n  \n  /**\n   * @param {number} ch\n   * @return {boolean}\n   * @public\n   */\n  static m_isWhitespace__char(ch) {\n    Character.$clinit();\n    return Character.m_isWhitespace__java_lang_String_$p_java_lang_Character(j_l_String.m_valueOf__char(ch));\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {boolean}\n   * @public\n   */\n  static m_isWhitespace__int(codePoint) {\n    Character.$clinit();\n    return Character.m_isWhitespace__java_lang_String_$p_java_lang_Character(j_l_String.m_fromCodePoint__int_$pp_java_lang(codePoint));\n  }\n  \n  /**\n   * @param {?string} ch\n   * @return {boolean}\n   * @public\n   */\n  static m_isWhitespace__java_lang_String_$p_java_lang_Character(ch) {\n    Character.$clinit();\n    if ($Equality.$same(Character.$f_whitespaceRegex__java_lang_Character_, null)) {\n      Character.$f_whitespaceRegex__java_lang_Character_ \x3d new RegExp(\"[\\\\u1680\\\\u180E\\\\u2000-\\\\u2006\\\\u2008-\\\\u200A\\\\u2028\\\\u2029\\\\u205F\\\\u3000\\\\uFEFF]\" + \"|[\\\\t-\\\\r ]\" + \"|[\\\\x1C-\\\\x1F]\");\n    }\n    return Character.$f_whitespaceRegex__java_lang_Character_.test(ch);\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {boolean}\n   * @public\n   */\n  static m_isSupplementaryCodePoint__int(codePoint) {\n    Character.$clinit();\n    return codePoint \x3e\x3d Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character \x26\x26 codePoint \x3c\x3d Character.f_MAX_CODE_POINT__java_lang_Character;\n  }\n  \n  /**\n   * @param {number} highSurrogate\n   * @param {number} lowSurrogate\n   * @return {boolean}\n   * @public\n   */\n  static m_isSurrogatePair__char__char(highSurrogate, lowSurrogate) {\n    Character.$clinit();\n    return Character.m_isHighSurrogate__char(highSurrogate) \x26\x26 Character.m_isLowSurrogate__char(lowSurrogate);\n  }\n  \n  /**\n   * @param {number} c\n   * @return {boolean}\n   * @public\n   */\n  static m_isUpperCase__char(c) {\n    Character.$clinit();\n    return Character.m_toUpperCase__char(c) \x3d\x3d c \x26\x26 Character.m_isLetter__char(c);\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {boolean}\n   * @public\n   */\n  static m_isValidCodePoint__int(codePoint) {\n    Character.$clinit();\n    return codePoint \x3e\x3d Character.f_MIN_CODE_POINT__java_lang_Character \x26\x26 codePoint \x3c\x3d Character.f_MAX_CODE_POINT__java_lang_Character;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} a\n   * @param {number} start\n   * @param {number} count\n   * @param {number} index\n   * @param {number} codePointOffset\n   * @return {number}\n   * @public\n   */\n  static m_offsetByCodePoints__arrayOf_char__int__int__int__int(a, start, count, index, codePointOffset) {\n    Character.$clinit();\n    return Character.m_offsetByCodePoints__java_lang_CharSequence__int__int(CharSequenceAdapter.$create__arrayOf_char__int__int(a, start, count), index, codePointOffset);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} seq\n   * @param {number} index\n   * @param {number} codePointOffset\n   * @return {number}\n   * @public\n   */\n  static m_offsetByCodePoints__java_lang_CharSequence__int__int(seq, index, codePointOffset) {\n    Character.$clinit();\n    if (codePointOffset \x3c 0) {\n      while (codePointOffset \x3c 0) {\n        --index;\n        if (Character.m_isLowSurrogate__char($CharSequences.m_charAt__java_lang_CharSequence__int(seq, index)) \x26\x26 Character.m_isHighSurrogate__char($CharSequences.m_charAt__java_lang_CharSequence__int(seq, index - 1))) {\n          --index;\n        }\n        ++codePointOffset;\n      }\n    } else {\n      while (codePointOffset \x3e 0) {\n        if (Character.m_isHighSurrogate__char($CharSequences.m_charAt__java_lang_CharSequence__int(seq, index)) \x26\x26 Character.m_isLowSurrogate__char($CharSequences.m_charAt__java_lang_CharSequence__int(seq, index + 1))) {\n          ++index;\n        }\n        ++index;\n        --codePointOffset;\n      }\n    }\n    return index;\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_toChars__int(codePoint) {\n    Character.$clinit();\n    $InternalPreconditions.m_checkCriticalArgument__boolean(codePoint \x3e\x3d 0 \x26\x26 codePoint \x3c\x3d Character.f_MAX_CODE_POINT__java_lang_Character);\n    if (codePoint \x3e\x3d Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character) {\n      return /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([Character.m_getHighSurrogate__int_$pp_java_lang(codePoint), Character.m_getLowSurrogate__int_$pp_java_lang(codePoint)], $char));\n    } else {\n      return /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([$Primitives.$narrowIntToChar(codePoint)], $char));\n    }\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @param {Array\x3cnumber\x3e} dst\n   * @param {number} dstIndex\n   * @return {number}\n   * @public\n   */\n  static m_toChars__int__arrayOf_char__int(codePoint, dst, dstIndex) {\n    Character.$clinit();\n    $InternalPreconditions.m_checkCriticalArgument__boolean(codePoint \x3e\x3d 0 \x26\x26 codePoint \x3c\x3d Character.f_MAX_CODE_POINT__java_lang_Character);\n    if (codePoint \x3e\x3d Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character) {\n      $Arrays.$set(dst, dstIndex++, Character.m_getHighSurrogate__int_$pp_java_lang(codePoint));\n      $Arrays.$set(dst, dstIndex, Character.m_getLowSurrogate__int_$pp_java_lang(codePoint));\n      return 2;\n    } else {\n      $Arrays.$set(dst, dstIndex, $Primitives.$narrowIntToChar(codePoint));\n      return 1;\n    }\n  }\n  \n  /**\n   * @param {number} highSurrogate\n   * @param {number} lowSurrogate\n   * @return {number}\n   * @public\n   */\n  static m_toCodePoint__char__char(highSurrogate, lowSurrogate) {\n    Character.$clinit();\n    return Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character + ((highSurrogate \x26 1023) \x3c\x3c 10) + (lowSurrogate \x26 1023);\n  }\n  \n  /**\n   * @param {number} c\n   * @return {number}\n   * @public\n   */\n  static m_toLowerCase__char(c) {\n    Character.$clinit();\n    return j_l_String.m_charAt__java_lang_String__int(j_l_String.m_toLowerCase__java_lang_String(j_l_String.m_valueOf__char(c)), 0);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {?string}\n   * @public\n   */\n  static m_toString__char(x) {\n    Character.$clinit();\n    return j_l_String.m_valueOf__char(x);\n  }\n  \n  /**\n   * @param {number} c\n   * @return {number}\n   * @public\n   */\n  static m_toUpperCase__char(c) {\n    Character.$clinit();\n    return j_l_String.m_charAt__java_lang_String__int(j_l_String.m_toUpperCase__java_lang_String(j_l_String.m_valueOf__char(c)), 0);\n  }\n  \n  /**\n   * @param {number} c\n   * @return {Character}\n   * @public\n   */\n  static m_valueOf__char(c) {\n    Character.$clinit();\n    if (c \x3c 128) {\n      let result \x3d BoxedValues.f_boxedValues__java_lang_Character_BoxedValues_[c];\n      if ($Equality.$same(result, null)) {\n        result \x3d $Arrays.$set(BoxedValues.f_boxedValues__java_lang_Character_BoxedValues_, c, Character.$create__char(c));\n      }\n      return result;\n    }\n    return Character.$create__char(c);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} cs\n   * @param {number} index\n   * @param {number} limit\n   * @return {number}\n   * @public\n   */\n  static m_codePointAt__java_lang_CharSequence__int__int_$pp_java_lang(cs, index, limit) {\n    Character.$clinit();\n    let hiSurrogate \x3d $CharSequences.m_charAt__java_lang_CharSequence__int(cs, index++);\n    let /** number */ loSurrogate;\n    if (Character.m_isHighSurrogate__char(hiSurrogate) \x26\x26 index \x3c limit \x26\x26 Character.m_isLowSurrogate__char(loSurrogate \x3d $CharSequences.m_charAt__java_lang_CharSequence__int(cs, index))) {\n      return Character.m_toCodePoint__char__char(hiSurrogate, loSurrogate);\n    }\n    return hiSurrogate;\n  }\n  \n  /**\n   * @param {(CharSequence|string)} cs\n   * @param {number} index\n   * @param {number} start\n   * @return {number}\n   * @public\n   */\n  static m_codePointBefore__java_lang_CharSequence__int__int_$pp_java_lang(cs, index, start) {\n    Character.$clinit();\n    let loSurrogate \x3d $CharSequences.m_charAt__java_lang_CharSequence__int(cs, --index);\n    let /** number */ highSurrogate;\n    if (Character.m_isLowSurrogate__char(loSurrogate) \x26\x26 index \x3e start \x26\x26 Character.m_isHighSurrogate__char(highSurrogate \x3d $CharSequences.m_charAt__java_lang_CharSequence__int(cs, index - 1))) {\n      return Character.m_toCodePoint__char__char(highSurrogate, loSurrogate);\n    }\n    return loSurrogate;\n  }\n  \n  /**\n   * @param {number} digit\n   * @return {number}\n   * @public\n   */\n  static m_forDigit__int_$pp_java_lang(digit) {\n    Character.$clinit();\n    let overBaseTen \x3d digit - 10;\n    return $Primitives.$narrowIntToChar((overBaseTen \x3c 0 ? 48 /* '0' */ + digit : 97 /* 'a' */ + overBaseTen));\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {number}\n   * @public\n   */\n  static m_getHighSurrogate__int_$pp_java_lang(codePoint) {\n    Character.$clinit();\n    return $Primitives.$narrowIntToChar((Character.f_MIN_HIGH_SURROGATE__java_lang_Character + (((codePoint - Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character) \x3e\x3e 10) \x26 1023)));\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {number}\n   * @public\n   */\n  static m_getLowSurrogate__int_$pp_java_lang(codePoint) {\n    Character.$clinit();\n    return $Primitives.$narrowIntToChar((Character.f_MIN_LOW_SURROGATE__java_lang_Character + ((codePoint - Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character) \x26 1023)));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Character(char)'.\n   * @param {number} value\n   * @return {!Character}\n   * @public\n   */\n  static $create__char(value) {\n    Character.$clinit();\n    let $instance \x3d new Character();\n    $instance.$ctor__java_lang_Character__char(value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Character(char)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Character__char(value) {\n    this.$ctor__java_lang_Object__();\n    this.f_value__java_lang_Character_ \x3d value;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_charValue__() {\n    return this.f_value__java_lang_Character_;\n  }\n  \n  /**\n   * @param {Character} c\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Character(c) {\n    return Character.m_compare__char__char(this.f_value__java_lang_Character_, c.f_value__java_lang_Character_);\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    return Character.$isInstance(o) \x26\x26 ((/**@type {Character} */ ($Casts.$to(o, Character))).f_value__java_lang_Character_ \x3d\x3d this.f_value__java_lang_Character_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Character.m_hashCode__char(this.f_value__java_lang_Character_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return j_l_String.m_valueOf__char(this.f_value__java_lang_Character_);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_lang_Character(/**@type {Character} */ ($Casts.$to(arg0, Character)));\n  }\n  \n  /**\n   * @return {Class\x3cCharacter\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Character() {\n    return (Character.$clinit(), Character.$f_TYPE__java_lang_Character);\n  }\n  \n  /**\n   * @param {Class\x3cCharacter\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Character(value) {\n    (Character.$clinit(), Character.$f_TYPE__java_lang_Character \x3d value);\n  }\n  \n  /**\n   * @return {RegExp}\n   * @public\n   */\n  static get f_digitRegex__java_lang_Character_() {\n    return (Character.$clinit(), Character.$f_digitRegex__java_lang_Character_);\n  }\n  \n  /**\n   * @param {RegExp} value\n   * @return {void}\n   * @public\n   */\n  static set f_digitRegex__java_lang_Character_(value) {\n    (Character.$clinit(), Character.$f_digitRegex__java_lang_Character_ \x3d value);\n  }\n  \n  /**\n   * @return {RegExp}\n   * @public\n   */\n  static get f_leterRegex__java_lang_Character_() {\n    return (Character.$clinit(), Character.$f_leterRegex__java_lang_Character_);\n  }\n  \n  /**\n   * @param {RegExp} value\n   * @return {void}\n   * @public\n   */\n  static set f_leterRegex__java_lang_Character_(value) {\n    (Character.$clinit(), Character.$f_leterRegex__java_lang_Character_ \x3d value);\n  }\n  \n  /**\n   * @return {RegExp}\n   * @public\n   */\n  static get f_isLeterOrDigitRegex__java_lang_Character_() {\n    return (Character.$clinit(), Character.$f_isLeterOrDigitRegex__java_lang_Character_);\n  }\n  \n  /**\n   * @param {RegExp} value\n   * @return {void}\n   * @public\n   */\n  static set f_isLeterOrDigitRegex__java_lang_Character_(value) {\n    (Character.$clinit(), Character.$f_isLeterOrDigitRegex__java_lang_Character_ \x3d value);\n  }\n  \n  /**\n   * @return {RegExp}\n   * @public\n   */\n  static get f_whitespaceRegex__java_lang_Character_() {\n    return (Character.$clinit(), Character.$f_whitespaceRegex__java_lang_Character_);\n  }\n  \n  /**\n   * @param {RegExp} value\n   * @return {void}\n   * @public\n   */\n  static set f_whitespaceRegex__java_lang_Character_(value) {\n    (Character.$clinit(), Character.$f_whitespaceRegex__java_lang_Character_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Character;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Character);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Character.$clinit \x3d function() {};\n    BoxedValues \x3d goog.module.get('java.lang.Character.BoxedValues$impl');\n    CharSequenceAdapter \x3d goog.module.get('java.lang.Character.CharSequenceAdapter$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    j_l_Object.$clinit();\n    Character.$f_TYPE__java_lang_Character \x3d Class.$get(Character);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Character, $Util.$makeClassName('java.lang.Character'));\n\n\n/** @private {Class\x3cCharacter\x3e} */\nCharacter.$f_TYPE__java_lang_Character;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_RADIX__java_lang_Character \x3d 2;\n\n\n/** @public {number} @const */\nCharacter.f_MAX_RADIX__java_lang_Character \x3d 36;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_VALUE__java_lang_Character \x3d 0 /* '\\u0000' */;\n\n\n/** @public {number} @const */\nCharacter.f_MAX_VALUE__java_lang_Character \x3d 65535 /* '\\uFFFF' */;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_SURROGATE__java_lang_Character \x3d 55296 /* '\\uD800' */;\n\n\n/** @public {number} @const */\nCharacter.f_MAX_SURROGATE__java_lang_Character \x3d 57343 /* '\\uDFFF' */;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_LOW_SURROGATE__java_lang_Character \x3d 56320 /* '\\uDC00' */;\n\n\n/** @public {number} @const */\nCharacter.f_MAX_LOW_SURROGATE__java_lang_Character \x3d 57343 /* '\\uDFFF' */;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_HIGH_SURROGATE__java_lang_Character \x3d 55296 /* '\\uD800' */;\n\n\n/** @public {number} @const */\nCharacter.f_MAX_HIGH_SURROGATE__java_lang_Character \x3d 56319 /* '\\uDBFF' */;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character \x3d 65536;\n\n\n/** @public {number} @const */\nCharacter.f_MIN_CODE_POINT__java_lang_Character \x3d 0;\n\n\n/** @public {number} @const */\nCharacter.f_MAX_CODE_POINT__java_lang_Character \x3d 1114111;\n\n\n/** @public {number} @const */\nCharacter.f_SIZE__java_lang_Character \x3d 16;\n\n\n/** @public {number} @const */\nCharacter.f_BYTES__java_lang_Character \x3d 2;\n\n\n/** @private {RegExp} */\nCharacter.$f_digitRegex__java_lang_Character_;\n\n\n/** @private {RegExp} */\nCharacter.$f_leterRegex__java_lang_Character_;\n\n\n/** @private {RegExp} */\nCharacter.$f_isLeterOrDigitRegex__java_lang_Character_;\n\n\n/** @private {RegExp} */\nCharacter.$f_whitespaceRegex__java_lang_Character_;\n\n\nComparable.$markImplementor(Character);\nSerializable.$markImplementor(Character);\n\n\nexports \x3d Character; \n//# sourceMappingURL\x3dCharacter.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Character.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Character.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Character');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _BoxedValues \x3d goog.require('java.lang.Character.BoxedValues');\nconst _CharSequenceAdapter \x3d goog.require('java.lang.Character.CharSequenceAdapter');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Overlay \x3d goog.require('javaemul.internal.NativeRegExp.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\n\n\n// Re-exports the implementation.\nvar Character \x3d goog.require('java.lang.Character$impl');\nexports \x3d Character;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number$JavaLangNumber$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number$JavaLangNumber$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Number.JavaLangNumber.$Overlay$impl');\n\n\nconst JavaLangNumber \x3d goog.require('java.lang.Number$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof JavaLangNumber;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('java.lang.Number$impl'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dNumber$JavaLangNumber$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number$JavaLangNumber$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number$JavaLangNumber$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Number.JavaLangNumber.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _JavaLangNumber \x3d goog.require('java.lang.Number$impl');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.Number.JavaLangNumber.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number$__Decode.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number$__Decode.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Number.__Decode$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass ____Decode extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_payload__java_lang_Number___Decode;\n    /** @public {number} */\n    this.f_radix__java_lang_Number___Decode \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor '__Decode(int, String)'.\n   * @param {number} radix\n   * @param {?string} payload\n   * @return {!____Decode}\n   * @public\n   */\n  static $create__int__java_lang_String(radix, payload) {\n    ____Decode.$clinit();\n    let $instance \x3d new ____Decode();\n    $instance.$ctor__java_lang_Number___Decode__int__java_lang_String(radix, payload);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor '__Decode(int, String)'.\n   * @param {number} radix\n   * @param {?string} payload\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Number___Decode__int__java_lang_String(radix, payload) {\n    this.$ctor__java_lang_Object__();\n    this.f_radix__java_lang_Number___Decode \x3d radix;\n    this.f_payload__java_lang_Number___Decode \x3d payload;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ____Decode;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ____Decode);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ____Decode.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(____Decode, $Util.$makeClassName('java.lang.Number$__Decode'));\n\n\n\n\nexports \x3d ____Decode; \n//# sourceMappingURL\x3dNumber$__Decode.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number$__Decode.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number$__Decode.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Number.__Decode');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ____Decode \x3d goog.require('java.lang.Number.__Decode$impl');\nexports \x3d ____Decode;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number$__ParseLong.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number$__ParseLong.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Number.__ParseLong$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $int \x3d goog.forwardDeclare('vmbootstrap.primitives.$int$impl');\nlet $long \x3d goog.forwardDeclare('vmbootstrap.primitives.$long$impl');\n\n\nclass ____ParseLong extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor '__ParseLong()'.\n   * @return {!____ParseLong}\n   * @public\n   */\n  static $create__() {\n    ____ParseLong.$clinit();\n    let $instance \x3d new ____ParseLong();\n    $instance.$ctor__java_lang_Number___ParseLong__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor '__ParseLong()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Number___ParseLong__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_maxDigitsForRadix__java_lang_Number___ParseLong_() {\n    return (____ParseLong.$clinit(), ____ParseLong.$f_maxDigitsForRadix__java_lang_Number___ParseLong_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_maxDigitsForRadix__java_lang_Number___ParseLong_(value) {\n    (____ParseLong.$clinit(), ____ParseLong.$f_maxDigitsForRadix__java_lang_Number___ParseLong_ \x3d value);\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_maxDigitsRadixPower__java_lang_Number___ParseLong_() {\n    return (____ParseLong.$clinit(), ____ParseLong.$f_maxDigitsRadixPower__java_lang_Number___ParseLong_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_maxDigitsRadixPower__java_lang_Number___ParseLong_(value) {\n    (____ParseLong.$clinit(), ____ParseLong.$f_maxDigitsRadixPower__java_lang_Number___ParseLong_ \x3d value);\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_maxLengthForRadix__java_lang_Number___ParseLong_() {\n    return (____ParseLong.$clinit(), ____ParseLong.$f_maxLengthForRadix__java_lang_Number___ParseLong_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_maxLengthForRadix__java_lang_Number___ParseLong_(value) {\n    (____ParseLong.$clinit(), ____ParseLong.$f_maxLengthForRadix__java_lang_Number___ParseLong_ \x3d value);\n  }\n  \n  /**\n   * @return {Array\x3c!$Long\x3e}\n   * @public\n   */\n  static get f_maxValueForRadix__java_lang_Number___ParseLong_() {\n    return (____ParseLong.$clinit(), ____ParseLong.$f_maxValueForRadix__java_lang_Number___ParseLong_);\n  }\n  \n  /**\n   * @param {Array\x3c!$Long\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_maxValueForRadix__java_lang_Number___ParseLong_(value) {\n    (____ParseLong.$clinit(), ____ParseLong.$f_maxValueForRadix__java_lang_Number___ParseLong_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ____ParseLong;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ____ParseLong);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ____ParseLong.$clinit \x3d function() {};\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $int \x3d goog.module.get('vmbootstrap.primitives.$int$impl');\n    $long \x3d goog.module.get('vmbootstrap.primitives.$long$impl');\n    j_l_Object.$clinit();\n    ____ParseLong.$f_maxDigitsForRadix__java_lang_Number___ParseLong_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([-1, -1, 30, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5], $int));\n    ____ParseLong.$f_maxDigitsRadixPower__java_lang_Number___ParseLong_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([37], $int));\n    ____ParseLong.$f_maxLengthForRadix__java_lang_Number___ParseLong_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([-1, -1, 63, 40, 32, 28, 25, 23, 21, 20, 19, 19, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13], $int));\n    ____ParseLong.$f_maxValueForRadix__java_lang_Number___ParseLong_ \x3d /**@type {!Array\x3c!$Long\x3e} */ ($Arrays.$create([37], $long));\n    for (let i \x3d 2; i \x3c\x3d 36; i++) {\n      $Arrays.$set(____ParseLong.$f_maxDigitsRadixPower__java_lang_Number___ParseLong_, i, $Primitives.$narrowDoubleToInt(Math.pow(i, ____ParseLong.$f_maxDigitsForRadix__java_lang_Number___ParseLong_[i])));\n      $Arrays.$set(____ParseLong.$f_maxValueForRadix__java_lang_Number___ParseLong_, i, $LongUtils.$divide(Long.f_MAX_VALUE__java_lang_Long, $Primitives.$widenIntToLong(____ParseLong.$f_maxDigitsRadixPower__java_lang_Number___ParseLong_[i])));\n    }\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(____ParseLong, $Util.$makeClassName('java.lang.Number$__ParseLong'));\n\n\n/** @private {Array\x3cnumber\x3e} */\n____ParseLong.$f_maxDigitsForRadix__java_lang_Number___ParseLong_;\n\n\n/** @private {Array\x3cnumber\x3e} */\n____ParseLong.$f_maxDigitsRadixPower__java_lang_Number___ParseLong_;\n\n\n/** @private {Array\x3cnumber\x3e} */\n____ParseLong.$f_maxLengthForRadix__java_lang_Number___ParseLong_;\n\n\n/** @private {Array\x3c!$Long\x3e} */\n____ParseLong.$f_maxValueForRadix__java_lang_Number___ParseLong_;\n\n\n\n\nexports \x3d ____ParseLong; \n//# sourceMappingURL\x3dNumber$__ParseLong.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number$__ParseLong.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number$__ParseLong.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Number.__ParseLong');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$int \x3d goog.require('vmbootstrap.primitives.$int');\nconst _$long \x3d goog.require('vmbootstrap.primitives.$long');\n\n\n// Re-exports the implementation.\nvar ____ParseLong \x3d goog.require('java.lang.Number.__ParseLong$impl');\nexports \x3d ____ParseLong;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/NumberFormatException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.NumberFormatException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.NumberFormatException$impl');\n\n\nconst IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\n\n\nclass NumberFormatException extends IllegalArgumentException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {NumberFormatException}\n   * @public\n   */\n  static m_forInputString__java_lang_String_$pp_java_lang(s) {\n    NumberFormatException.$clinit();\n    return NumberFormatException.$create__java_lang_String(\"For input string: \\\"\" + j_l_String.m_valueOf__java_lang_Object(s) + \"\\\"\");\n  }\n  \n  /**\n   * @return {NumberFormatException}\n   * @public\n   */\n  static m_forNullInputString___$pp_java_lang() {\n    NumberFormatException.$clinit();\n    return NumberFormatException.$create__java_lang_String(\"null\");\n  }\n  \n  /**\n   * @param {number} radix\n   * @return {NumberFormatException}\n   * @public\n   */\n  static m_forRadix__int_$pp_java_lang(radix) {\n    NumberFormatException.$clinit();\n    return NumberFormatException.$create__java_lang_String(\"radix \" + radix + \" out of range\");\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NumberFormatException()'.\n   * @return {!NumberFormatException}\n   * @public\n   */\n  static $create__() {\n    NumberFormatException.$clinit();\n    let $instance \x3d new NumberFormatException();\n    $instance.$ctor__java_lang_NumberFormatException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NumberFormatException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NumberFormatException__() {\n    this.$ctor__java_lang_IllegalArgumentException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NumberFormatException(String)'.\n   * @param {?string} message\n   * @return {!NumberFormatException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    NumberFormatException.$clinit();\n    let $instance \x3d new NumberFormatException();\n    $instance.$ctor__java_lang_NumberFormatException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NumberFormatException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NumberFormatException__java_lang_String(message) {\n    this.$ctor__java_lang_IllegalArgumentException__java_lang_String(message);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NumberFormatException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NumberFormatException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NumberFormatException.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    IllegalArgumentException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NumberFormatException, $Util.$makeClassName('java.lang.NumberFormatException'));\n\n\n\n\nexports \x3d NumberFormatException; \n//# sourceMappingURL\x3dNumberFormatException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/NumberFormatException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.NumberFormatException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.NumberFormatException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\n\n\n// Re-exports the implementation.\nvar NumberFormatException \x3d goog.require('java.lang.NumberFormatException$impl');\nexports \x3d NumberFormatException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Number.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Number.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Number');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _$Overlay \x3d goog.require('java.lang.Number.JavaLangNumber.$Overlay');\nconst _____Decode \x3d goog.require('java.lang.Number.__Decode');\nconst _____ParseLong \x3d goog.require('java.lang.Number.__ParseLong');\nconst _NumberFormatException \x3d goog.require('java.lang.NumberFormatException');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _NativeRegExp_$Overlay \x3d goog.require('javaemul.internal.NativeRegExp.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar Number \x3d goog.require('java.lang.Number$impl');\nexports \x3d Number;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Double$PowersTable.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Double$PowersTable.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Double.PowersTable$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\nclass PowersTable extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'PowersTable()'.\n   * @return {!PowersTable}\n   * @public\n   */\n  static $create__() {\n    PowersTable.$clinit();\n    let $instance \x3d new PowersTable();\n    $instance.$ctor__java_lang_Double_PowersTable__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'PowersTable()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Double_PowersTable__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_powers__java_lang_Double_PowersTable_() {\n    return (PowersTable.$clinit(), PowersTable.$f_powers__java_lang_Double_PowersTable_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_powers__java_lang_Double_PowersTable_(value) {\n    (PowersTable.$clinit(), PowersTable.$f_powers__java_lang_Double_PowersTable_ \x3d value);\n  }\n  \n  /**\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static get f_invPowers__java_lang_Double_PowersTable_() {\n    return (PowersTable.$clinit(), PowersTable.$f_invPowers__java_lang_Double_PowersTable_);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_invPowers__java_lang_Double_PowersTable_(value) {\n    (PowersTable.$clinit(), PowersTable.$f_invPowers__java_lang_Double_PowersTable_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof PowersTable;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, PowersTable);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PowersTable.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    j_l_Object.$clinit();\n    PowersTable.$f_powers__java_lang_Double_PowersTable_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([Double.f_POWER_512__java_lang_Double_, Double.f_POWER_256__java_lang_Double_, Double.f_POWER_128__java_lang_Double_, Double.f_POWER_64__java_lang_Double_, Double.f_POWER_32__java_lang_Double_, Double.f_POWER_16__java_lang_Double_, Double.f_POWER_8__java_lang_Double_, Double.f_POWER_4__java_lang_Double_, Double.f_POWER_2__java_lang_Double_, Double.f_POWER_1__java_lang_Double_], $double));\n    PowersTable.$f_invPowers__java_lang_Double_PowersTable_ \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$init([Double.f_POWER_MINUS_512__java_lang_Double_, Double.f_POWER_MINUS_256__java_lang_Double_, Double.f_POWER_MINUS_128__java_lang_Double_, Double.f_POWER_MINUS_64__java_lang_Double_, Double.f_POWER_MINUS_32__java_lang_Double_, Double.f_POWER_MINUS_16__java_lang_Double_, Double.f_POWER_MINUS_8__java_lang_Double_, Double.f_POWER_MINUS_4__java_lang_Double_, Double.f_POWER_MINUS_2__java_lang_Double_, Double.f_POWER_MINUS_1__java_lang_Double_], $double));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(PowersTable, $Util.$makeClassName('java.lang.Double$PowersTable'));\n\n\n/** @private {Array\x3cnumber\x3e} */\nPowersTable.$f_powers__java_lang_Double_PowersTable_;\n\n\n/** @private {Array\x3cnumber\x3e} */\nPowersTable.$f_invPowers__java_lang_Double_PowersTable_;\n\n\n\n\nexports \x3d PowersTable; \n//# sourceMappingURL\x3dDouble$PowersTable.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Double$PowersTable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Double$PowersTable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Double.PowersTable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar PowersTable \x3d goog.require('java.lang.Double.PowersTable$impl');\nexports \x3d PowersTable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Double.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Double.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Double$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst Number \x3d goog.require('java.lang.Number$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet PowersTable \x3d goog.forwardDeclare('java.lang.Double.PowersTable$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $double \x3d goog.forwardDeclare('vmbootstrap.primitives.$double$impl');\n\n\n/**\n * @abstract\n * @implements {Comparable\x3c?number\x3e}\n  */\nclass Double extends Number {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {number}\n   * @public\n   */\n  static m_compare__double__double(x, y) {\n    Double.$clinit();\n    if (x \x3c y) {\n      return -1;\n    }\n    if (x \x3e y) {\n      return 1;\n    }\n    if (x \x3d\x3d y) {\n      return x \x3d\x3d 0 ? Double.m_compare__double__double(1 / x, 1 / y) : 0;\n    }\n    if (isNaN(x)) {\n      if (isNaN(y)) {\n        return 0;\n      } else {\n        return 1;\n      }\n    } else {\n      return -1;\n    }\n  }\n  \n  /**\n   * @param {number} value\n   * @return {!$Long}\n   * @public\n   */\n  static m_doubleToLongBits__double(value) {\n    Double.$clinit();\n    if (isNaN(value)) {\n      return $Long.fromBits(0, 2146959360) /* 9221120237041090560 */;\n    }\n    let negative \x3d false;\n    if (value \x3d\x3d 0.0) {\n      if (1.0 / value \x3d\x3d Double.f_NEGATIVE_INFINITY__java_lang_Double) {\n        return $Long.fromBits(0, -2147483648) /* -9223372036854775808 */;\n      } else {\n        return $Long.fromInt(0);\n      }\n    }\n    if (value \x3c 0.0) {\n      negative \x3d true;\n      value \x3d -value;\n    }\n    if (Double.m_isInfinite__double(value)) {\n      if (negative) {\n        return $Long.fromBits(0, -1048576) /* -4503599627370496 */;\n      } else {\n        return $Long.fromBits(0, 2146435072) /* 9218868437227405312 */;\n      }\n    }\n    let exp \x3d 0;\n    if (value \x3c 1.0) {\n      let bit \x3d 512;\n      for (let i \x3d 0; i \x3c 10; i++, bit \x3e\x3e\x3d 1) {\n        if (value \x3c PowersTable.f_invPowers__java_lang_Double_PowersTable_[i] \x26\x26 exp - bit \x3e\x3d -1023) {\n          value *\x3d PowersTable.f_powers__java_lang_Double_PowersTable_[i];\n          exp -\x3d bit;\n        }\n      }\n      if (value \x3c 1.0 \x26\x26 exp - 1 \x3e\x3d -1023) {\n        value *\x3d 2.0;\n        exp--;\n      }\n    } else if (value \x3e\x3d 2.0) {\n      let bit$1$ \x3d 512;\n      for (let i$1$ \x3d 0; i$1$ \x3c 10; i$1$++, bit$1$ \x3e\x3e\x3d 1) {\n        if (value \x3e\x3d PowersTable.f_powers__java_lang_Double_PowersTable_[i$1$]) {\n          value *\x3d PowersTable.f_invPowers__java_lang_Double_PowersTable_[i$1$];\n          exp +\x3d bit$1$;\n        }\n      }\n    }\n    if (exp \x3e -1023) {\n      value -\x3d 1.0;\n    } else {\n      value *\x3d 0.5;\n    }\n    let ihi \x3d $Primitives.$narrowDoubleToLong((value * Double.f_POWER_20__java_lang_Double_));\n    value -\x3d $Primitives.$widenLongToDouble(ihi) * Double.f_POWER_MINUS_20__java_lang_Double_;\n    let ilo \x3d $Primitives.$narrowDoubleToLong((value * Double.f_POWER_52__java_lang_Double_));\n    ihi \x3d $LongUtils.$or(ihi, $Primitives.$widenIntToLong(((exp + 1023) \x3c\x3c 20)));\n    if (negative) {\n      ihi \x3d $LongUtils.$or(ihi, $Long.fromBits(-2147483648, 0) /* 2147483648 */);\n    }\n    return $LongUtils.$or($LongUtils.$leftShift(ihi, 32), ilo);\n  }\n  \n  /**\n   * @param {number} d\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__double(d) {\n    Double.$clinit();\n    return $Primitives.$narrowDoubleToInt(d);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {boolean}\n   * @public\n   */\n  static m_isInfinite__double(x) {\n    Double.$clinit();\n    return !isNaN(x) \x26\x26 !isFinite(x);\n  }\n  \n  /**\n   * @param {!$Long} bits\n   * @return {number}\n   * @public\n   */\n  static m_longBitsToDouble__long(bits) {\n    Double.$clinit();\n    let ihi \x3d $LongUtils.$rightShiftSigned(bits, 32);\n    let ilo \x3d $LongUtils.$and(bits, $Long.fromBits(-1, 0) /* 4294967295 */);\n    if ($LongUtils.$less(ihi, $Primitives.$widenIntToLong(0))) {\n      ihi \x3d $LongUtils.$plus(ihi, $Long.fromBits(0, 1) /* 4294967296 */);\n    }\n    if ($LongUtils.$less(ilo, $Primitives.$widenIntToLong(0))) {\n      ilo \x3d $LongUtils.$plus(ilo, $Long.fromBits(0, 1) /* 4294967296 */);\n    }\n    let negative \x3d $LongUtils.$notEquals($LongUtils.$and(ihi, $Primitives.$widenIntToLong(-2147483648)), $Primitives.$widenIntToLong(0));\n    let exp \x3d $Primitives.$narrowLongToInt($LongUtils.$and($LongUtils.$rightShiftSigned(ihi, 20), $Primitives.$widenIntToLong(2047)));\n    ihi \x3d $LongUtils.$and(ihi, $Primitives.$widenIntToLong(1048575));\n    if (exp \x3d\x3d 0) {\n      let d \x3d ($Primitives.$widenLongToDouble(ihi) * Double.f_POWER_MINUS_20__java_lang_Double_) + ($Primitives.$widenLongToDouble(ilo) * Double.f_POWER_MINUS_52__java_lang_Double_);\n      d *\x3d Double.f_POWER_MINUS_1022__java_lang_Double_;\n      return negative ? (d \x3d\x3d 0.0 ? -0.0 : -d) : d;\n    } else if (exp \x3d\x3d 2047) {\n      if ($LongUtils.$equals(ihi, $Primitives.$widenIntToLong(0)) \x26\x26 $LongUtils.$equals(ilo, $Primitives.$widenIntToLong(0))) {\n        return negative ? Double.f_NEGATIVE_INFINITY__java_lang_Double : Double.f_POSITIVE_INFINITY__java_lang_Double;\n      } else {\n        return Double.f_NaN__java_lang_Double;\n      }\n    }\n    exp -\x3d 1023;\n    let d$1$ \x3d 1.0 + ($Primitives.$widenLongToDouble(ihi) * Double.f_POWER_MINUS_20__java_lang_Double_) + ($Primitives.$widenLongToDouble(ilo) * Double.f_POWER_MINUS_52__java_lang_Double_);\n    if (exp \x3e 0) {\n      let bit \x3d 512;\n      for (let i \x3d 0; i \x3c 10; i++, bit \x3e\x3e\x3d 1) {\n        if (exp \x3e\x3d bit) {\n          d$1$ *\x3d PowersTable.f_powers__java_lang_Double_PowersTable_[i];\n          exp -\x3d bit;\n        }\n      }\n    } else if (exp \x3c 0) {\n      while (exp \x3c 0) {\n        let bit$1$ \x3d 512;\n        for (let i$1$ \x3d 0; i$1$ \x3c 10; i$1$++, bit$1$ \x3e\x3e\x3d 1) {\n          if (exp \x3c\x3d -bit$1$) {\n            d$1$ *\x3d PowersTable.f_invPowers__java_lang_Double_PowersTable_[i$1$];\n            exp +\x3d bit$1$;\n          }\n        }\n      }\n    }\n    return negative ? -d$1$ : d$1$;\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_max__double__double(a, b) {\n    Double.$clinit();\n    return Math.max(a, b);\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_min__double__double(a, b) {\n    Double.$clinit();\n    return Math.min(a, b);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m_parseDouble__java_lang_String(s) {\n    Double.$clinit();\n    return Number.m___parseAndValidateDouble__java_lang_String(s);\n  }\n  \n  /**\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   * @public\n   */\n  static m_sum__double__double(a, b) {\n    Double.$clinit();\n    return a + b;\n  }\n  \n  /**\n   * @param {number} b\n   * @return {?string}\n   * @public\n   */\n  static m_toString__double(b) {\n    Double.$clinit();\n    return j_l_String.m_valueOf__double(b);\n  }\n  \n  /**\n   * @param {number} d\n   * @return {?number}\n   * @public\n   */\n  static m_valueOf__double(d) {\n    Double.$clinit();\n    return Double.$create__double(d);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {?number}\n   * @public\n   */\n  static m_valueOf__java_lang_String(s) {\n    Double.$clinit();\n    return Double.$create__java_lang_String(s);\n  }\n  \n  /**\n   * Initialization from constructor 'Double(double)'.\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Double__double(value) {\n    this.$ctor__java_lang_Number__();\n    Double.$create__double(value);\n  }\n  \n  /**\n   * Initialization from constructor 'Double(String)'.\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Double__java_lang_String(s) {\n    this.$ctor__java_lang_Number__();\n    Double.$create__java_lang_String(s);\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_byteValue__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return $Primitives.$narrowDoubleToByte(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @param {?number} b\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_Double__java_lang_Double($thisArg, b) {\n    Double.$clinit();\n    return Double.m_compare__double__double(Double.m_doubleValue__java_lang_Double($thisArg), Double.m_doubleValue__java_lang_Double(b));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_doubleValue__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return JsUtils.m_unsafeCastToDouble__java_lang_Object($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__java_lang_Double__java_lang_Object($thisArg, o) {\n    Double.$clinit();\n    return $Equality.$same($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg), o);\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_floatValue__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return Double.m_doubleValue__java_lang_Double($thisArg);\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return Double.m_hashCode__double(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_intValue__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return $Primitives.$narrowDoubleToInt(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isInfinite__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return Double.m_isInfinite__double(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNaN__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return isNaN(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {!$Long}\n   * @public\n   */\n  static m_longValue__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return $Primitives.$narrowDoubleToLong(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_shortValue__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return $Primitives.$narrowDoubleToShort(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_toString__java_lang_Double($thisArg) {\n    Double.$clinit();\n    return Double.m_toString__double(Double.m_doubleValue__java_lang_Double($thisArg));\n  }\n  \n  /**\n   * @param {number} x\n   * @return {?number}\n   * @public\n   */\n  static $create__double(x) {\n    Double.$clinit();\n    return /**@type {?number} */ (JsUtils.m_uncheckedCast__java_lang_Object(x));\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {?number}\n   * @public\n   */\n  static $create__java_lang_String(s) {\n    Double.$clinit();\n    return /**@type {?number} */ (JsUtils.m_uncheckedCast__java_lang_Object(Double.m_parseDouble__java_lang_String(s)));\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    Double.$clinit();\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(\"number\", typeof(instance));\n  }\n  \n  /**\n   * @param {?number} $thisArg\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_Double__java_lang_Object($thisArg, arg0) {\n    Double.$clinit();\n    return Double.m_compareTo__java_lang_Double__java_lang_Double($thisArg, /**@type {?number} */ ($Casts.$to(arg0, Double)));\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {?number} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @return {Class\x3c?number\x3e}\n   * @public\n   */\n  static get f_TYPE__java_lang_Double() {\n    return (Double.$clinit(), Double.$f_TYPE__java_lang_Double);\n  }\n  \n  /**\n   * @param {Class\x3c?number\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__java_lang_Double(value) {\n    (Double.$clinit(), Double.$f_TYPE__java_lang_Double \x3d value);\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Double);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Double.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    PowersTable \x3d goog.module.get('java.lang.Double.PowersTable$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Long \x3d goog.module.get('nativebootstrap.Long$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $double \x3d goog.module.get('vmbootstrap.primitives.$double$impl');\n    Number.$clinit();\n    Double.$f_TYPE__java_lang_Double \x3d Class.$get($double);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Double, $Util.$makeClassName('java.lang.Double'));\n\n\n/** @public {number} @const */\nDouble.f_MAX_VALUE__java_lang_Double \x3d 1.7976931348623157E308;\n\n\n/** @public {number} @const */\nDouble.f_MIN_VALUE__java_lang_Double \x3d 4.9E-324;\n\n\n/** @public {number} @const */\nDouble.f_MIN_NORMAL__java_lang_Double \x3d 2.2250738585072014E-308;\n\n\n/** @public {number} @const */\nDouble.f_MAX_EXPONENT__java_lang_Double \x3d 1023;\n\n\n/** @public {number} @const */\nDouble.f_MIN_EXPONENT__java_lang_Double \x3d -1022;\n\n\n/** @public {number} @const */\nDouble.f_NaN__java_lang_Double \x3d NaN;\n\n\n/** @public {number} @const */\nDouble.f_NEGATIVE_INFINITY__java_lang_Double \x3d -Infinity;\n\n\n/** @public {number} @const */\nDouble.f_POSITIVE_INFINITY__java_lang_Double \x3d Infinity;\n\n\n/** @public {number} @const */\nDouble.f_SIZE__java_lang_Double \x3d 64;\n\n\n/** @public {number} @const */\nDouble.f_BYTES__java_lang_Double \x3d 8;\n\n\n/** @private {Class\x3c?number\x3e} */\nDouble.$f_TYPE__java_lang_Double;\n\n\n/** @public {number} @const */\nDouble.f_POWER_512__java_lang_Double_ \x3d 1.3407807929942597E154;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_512__java_lang_Double_ \x3d 7.458340731200207E-155;\n\n\n/** @public {number} @const */\nDouble.f_POWER_256__java_lang_Double_ \x3d 1.157920892373162E77;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_256__java_lang_Double_ \x3d 8.636168555094445E-78;\n\n\n/** @public {number} @const */\nDouble.f_POWER_128__java_lang_Double_ \x3d 3.4028236692093846E38;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_128__java_lang_Double_ \x3d 2.9387358770557188E-39;\n\n\n/** @public {number} @const */\nDouble.f_POWER_64__java_lang_Double_ \x3d 1.8446744073709552E19;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_64__java_lang_Double_ \x3d 5.421010862427522E-20;\n\n\n/** @public {number} @const */\nDouble.f_POWER_52__java_lang_Double_ \x3d 4.503599627370496E15;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_52__java_lang_Double_ \x3d 2.220446049250313E-16;\n\n\n/** @public {number} @const */\nDouble.f_POWER_32__java_lang_Double_ \x3d 4.294967296E9;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_32__java_lang_Double_ \x3d 2.3283064365386963E-10;\n\n\n/** @public {number} @const */\nDouble.f_POWER_31__java_lang_Double_ \x3d 2.147483648E9;\n\n\n/** @public {number} @const */\nDouble.f_POWER_20__java_lang_Double_ \x3d 1048576.0;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_20__java_lang_Double_ \x3d 9.5367431640625E-7;\n\n\n/** @public {number} @const */\nDouble.f_POWER_16__java_lang_Double_ \x3d 65536.0;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_16__java_lang_Double_ \x3d 1.52587890625E-5;\n\n\n/** @public {number} @const */\nDouble.f_POWER_8__java_lang_Double_ \x3d 256.0;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_8__java_lang_Double_ \x3d 0.00390625;\n\n\n/** @public {number} @const */\nDouble.f_POWER_4__java_lang_Double_ \x3d 16.0;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_4__java_lang_Double_ \x3d 0.0625;\n\n\n/** @public {number} @const */\nDouble.f_POWER_2__java_lang_Double_ \x3d 4.0;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_2__java_lang_Double_ \x3d 0.25;\n\n\n/** @public {number} @const */\nDouble.f_POWER_1__java_lang_Double_ \x3d 2.0;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_1__java_lang_Double_ \x3d 0.5;\n\n\n/** @public {number} @const */\nDouble.f_POWER_MINUS_1022__java_lang_Double_ \x3d 2.2250738585072014E-308;\n\n\nComparable.$markImplementor(Double);\n\n\nexports \x3d Double; \n//# sourceMappingURL\x3dDouble.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Double.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Double.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Double');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _Number \x3d goog.require('java.lang.Number');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _PowersTable \x3d goog.require('java.lang.Double.PowersTable');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$double \x3d goog.require('vmbootstrap.primitives.$double');\n\n\n// Re-exports the implementation.\nvar Double \x3d goog.require('java.lang.Double$impl');\nexports \x3d Double;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/JavaScriptObject.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('vmbootstrap.JavaScriptObject$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * Provides class literal and Object methods implementations for native\n * JS objects.\n */\nclass JavaScriptObject {}\n\n$Util.$setClassMetadata(JavaScriptObject, '\x3cnative object\x3e');\n\n/**\n * Exported class.\n */\nexports \x3d JavaScriptObject;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/JavaScriptObject.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('vmbootstrap.JavaScriptObject');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nconst JavaScriptObject \x3d goog.require('vmbootstrap.JavaScriptObject$impl');\nexports \x3d JavaScriptObject;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/nativebootstrap/Hashing.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('nativebootstrap.Hashing');\n\n\n// Re-exports the implementation.\nconst Hashing \x3d goog.require('nativebootstrap.Hashing$impl');\nexports \x3d Hashing;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Objects.impl.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Impl hand rolled.\n */\ngoog.module('vmbootstrap.Objects$impl');\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet JavaScriptFunction \x3d goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');\nlet JavaScriptObject \x3d goog.forwardDeclare('vmbootstrap.JavaScriptObject$impl');\nlet $Hashing \x3d goog.forwardDeclare('nativebootstrap.Hashing$impl');\n\n/**\n * Provides devirtualized Object methods\n */\nclass Objects {\n  /**\n   * @param {*} obj\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__java_lang_Object__java_lang_Object(obj, other) {\n    Objects.$clinit();\n\n    // Objects: use the custom 'equals' if it exists.\n    if (obj.equals) {\n      return obj.equals(other);\n    }\n\n    // Boxed Types: overrides 'equals' but doesn't need special casing as\n    // fallback covers them.\n\n    // Array Types: doesn't override 'equals'.\n\n    // Fallback to default j.l.Object#equals behavior.\n    return obj \x3d\x3d\x3d other;\n  }\n\n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_lang_Object(obj) {\n    Objects.$clinit();\n\n    // Objects: use the custom 'hashCode' if it exists.\n    if (obj.hashCode) {\n      return obj.hashCode();\n    }\n\n    // Boxed Types: overrides 'hashCode. Restore the behavior by the overrides\n    // in boxing classes.\n    let type \x3d typeof obj;\n    if (type \x3d\x3d 'number') {\n      return Double.m_hashCode__java_lang_Double(/**@type {number}*/ (obj));\n    } else if (type \x3d\x3d 'boolean') {\n      return Boolean.m_hashCode__java_lang_Boolean(/**@type {boolean}*/ (obj));\n    } else if (type \x3d\x3d 'string') {\n      return String.m_hashCode__java_lang_String(/**@type {string}*/ (obj));\n    }\n\n    // Array Types: doesn't override 'hashCode'.\n\n    // Fallback to default j.l.Object#hashCode behavior.\n    return $Hashing.$getHashCode(obj);\n  }\n\n  /**\n   * @param {*} obj\n   * @return {string}\n   * @public\n   */\n  static m_toString__java_lang_Object(obj) {\n    Objects.$clinit();\n\n    // We only special case 'toString' for arrays to enforce the Java behavior.\n    if (obj instanceof Array) {\n      return Arrays.m_toString__java_lang_Object(obj);\n    }\n\n    // For the rest including Java objects, 'toString' already has the behavior\n    // we want.\n    return obj.toString();\n  }\n\n  /**\n   * @param {*} obj\n   * @return {Class}\n   * @public\n   */\n  static m_getClass__java_lang_Object(obj) {\n    Objects.$clinit();\n\n    // We special case 'getClass' for all types as they all corresspond to\n    // different classes.\n    let type \x3d typeof obj;\n    if (type \x3d\x3d 'number') {\n      return Class.$get(Double);\n    } else if (type \x3d\x3d 'boolean') {\n      return Class.$get(Boolean);\n    } else if (type \x3d\x3d 'string') {\n      return Class.$get(String);\n    } else if (obj instanceof Array) {\n      return Arrays.m_getClass__java_lang_Object(obj);\n    } else if (obj instanceof Object) {\n      return Class.$get(obj.constructor);\n    } else if (obj) {\n      // Do not need to check existence of 'getClass' since j.l.Object#getClass\n      // is final and all native types map to a single special class and so do\n      // native functions.\n      return Class.$get(\n          type \x3d\x3d 'function' ? JavaScriptFunction : JavaScriptObject);\n    }\n\n    throw new TypeError(\"null.getClass\");\n  }\n\n  /**\n   * Runs inline static field initializers.\n   * @public\n   */\n  static $clinit() {\n    Objects.$clinit \x3d function() {};\n    Object \x3d goog.module.get('java.lang.Object$impl');\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    String \x3d goog.module.get('java.lang.String$impl');\n    Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    JavaScriptFunction \x3d goog.module.get('vmbootstrap.JavaScriptFunction$impl');\n    JavaScriptObject \x3d goog.module.get('vmbootstrap.JavaScriptObject$impl');\n    $Hashing \x3d goog.module.get('nativebootstrap.Hashing$impl');\n  }\n};\n\n\n/**\n * Exported class.\n */\nexports \x3d Objects;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/bootstrap.js.zip!/javaemul/internal/vmbootstrap/Objects.java.js
goog.loadModule("'use strict'"+"// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Header hand rolled.\n *\n * @suppress {lateProvide}\n */\ngoog.module('vmbootstrap.Objects');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _Object \x3d goog.require('java.lang.Object');\nconst _String \x3d goog.require('java.lang.String');\nconst _Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction');\nconst _JavaScriptObject \x3d goog.require('vmbootstrap.JavaScriptObject');\nconst _$Hashing \x3d goog.require('nativebootstrap.Hashing');\n\n\n// Re-exports the implementation.\nconst Objects \x3d goog.require('vmbootstrap.Objects$impl');\nexports \x3d Objects;\n");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Casts.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Casts.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('vmbootstrap.Casts$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Constructor \x3d goog.forwardDeclare('javaemul.internal.Constructor');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.Constructor.$Overlay$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\nclass Casts extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Casts()'.\n   * @return {!Casts}\n   * @public\n   */\n  static $create__() {\n    Casts.$clinit();\n    let $instance \x3d new Casts();\n    $instance.$ctor__javaemul_internal_Casts__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Casts()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_Casts__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {*} instance\n   * @param {Constructor} castType\n   * @return {*}\n   * @public\n   */\n  // native static $to(instance, castType) \n  \n  /**\n   * @param {*} instance\n   * @param {?function(*):boolean} castTypeIsInstance\n   * @param {Constructor} castType\n   * @return {*}\n   * @public\n   */\n  static $toInternal(instance, castTypeIsInstance, castType) {\n    Casts.$clinit();\n    if ($InternalPreconditions.m_isTypeChecked__()) {\n      let castSucceeds \x3d $Equality.$same(instance, null) || castTypeIsInstance(instance);\n      if (!castSucceeds) {\n        let message \x3d j_l_String.m_valueOf__java_lang_Object($Objects.m_getClass__java_lang_Object(instance).m_getName__()) + \" cannot be cast to \" + j_l_String.m_valueOf__java_lang_Object(Class.$get(castType).m_getName__());\n        $InternalPreconditions.m_checkType__boolean__java_lang_String(false, message);\n      }\n    }\n    return instance;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Casts;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Casts);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Casts.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Casts, $Util.$makeClassName('javaemul.internal.Casts'));\n\n\n\n\n/* NATIVE.JS EPILOG */\n\nconst javaemul_internal_Casts \x3d Casts;\n\n/**\n * // TODO(b/79389970): change castType to Function.\n * @param {*} instance\n * @param {Object} castType\n * @return {*}\n */\nCasts.$to \x3d function(instance, castType) {\n  return Casts.$toInternal(\n      instance, /** @type {function(*):boolean} */ (castType.$isInstance),\n      /** @type {Constructor} */ (castType));\n};\n\n\nexports \x3d Casts; \n//# sourceMappingURL\x3dCasts.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/Casts.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.Casts.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('vmbootstrap.Casts');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Constructor \x3d goog.require('javaemul.internal.Constructor');\nconst _$Overlay \x3d goog.require('javaemul.internal.Constructor.$Overlay');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar Casts \x3d goog.require('vmbootstrap.Casts$impl');\nexports \x3d Casts;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AssertionError.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AssertionError.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.AssertionError$impl');\n\n\nconst Error \x3d goog.require('java.lang.Error$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass AssertionError extends Error {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError()'.\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__() {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__() {\n    this.$ctor__java_lang_Error__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(boolean)'.\n   * @param {boolean} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__boolean(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__boolean(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(boolean)'.\n   * @param {boolean} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__boolean(message) {\n    this.$ctor__java_lang_AssertionError__java_lang_String(j_l_String.m_valueOf__boolean(message));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(char)'.\n   * @param {number} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__char(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__char(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(char)'.\n   * @param {number} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__char(message) {\n    this.$ctor__java_lang_AssertionError__java_lang_String(j_l_String.m_valueOf__char(message));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(double)'.\n   * @param {number} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__double(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__double(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(double)'.\n   * @param {number} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__double(message) {\n    this.$ctor__java_lang_AssertionError__java_lang_String(j_l_String.m_valueOf__double(message));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(float)'.\n   * @param {number} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__float(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__float(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(float)'.\n   * @param {number} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__float(message) {\n    this.$ctor__java_lang_AssertionError__java_lang_String(j_l_String.m_valueOf__float(message));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(int)'.\n   * @param {number} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__int(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__int(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(int)'.\n   * @param {number} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__int(message) {\n    this.$ctor__java_lang_AssertionError__java_lang_String(j_l_String.m_valueOf__int(message));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(long)'.\n   * @param {!$Long} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__long(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__long(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(long)'.\n   * @param {!$Long} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__long(message) {\n    this.$ctor__java_lang_AssertionError__java_lang_String(j_l_String.m_valueOf__long(message));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(Object)'.\n   * @param {*} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__java_lang_Object(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__java_lang_Object(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(Object)'.\n   * @param {*} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__java_lang_Object(message) {\n    this.$ctor__java_lang_Error__java_lang_String__java_lang_Throwable(j_l_String.m_valueOf__java_lang_Object(message), Throwable.$isInstance(message) ? /**@type {Throwable} */ ($Casts.$to(message, Throwable)) : null);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_Error__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AssertionError(String)'.\n   * @param {?string} message\n   * @return {!AssertionError}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    AssertionError.$clinit();\n    let $instance \x3d new AssertionError();\n    $instance.$ctor__java_lang_AssertionError__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AssertionError(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_AssertionError__java_lang_String(message) {\n    this.$ctor__java_lang_Error__java_lang_String(message);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AssertionError;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AssertionError);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AssertionError.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Throwable \x3d goog.module.get('java.lang.Throwable$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    Error.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AssertionError, $Util.$makeClassName('java.lang.AssertionError'));\n\n\n\n\nexports \x3d AssertionError; \n//# sourceMappingURL\x3dAssertionError.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/AssertionError.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.AssertionError.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.AssertionError');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Error \x3d goog.require('java.lang.Error');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AssertionError \x3d goog.require('java.lang.AssertionError$impl');\nexports \x3d AssertionError;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ClassCastException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ClassCastException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.ClassCastException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass ClassCastException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ClassCastException()'.\n   * @return {!ClassCastException}\n   * @public\n   */\n  static $create__() {\n    ClassCastException.$clinit();\n    let $instance \x3d new ClassCastException();\n    $instance.$ctor__java_lang_ClassCastException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ClassCastException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ClassCastException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ClassCastException(String)'.\n   * @param {?string} message\n   * @return {!ClassCastException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    ClassCastException.$clinit();\n    let $instance \x3d new ClassCastException();\n    $instance.$ctor__java_lang_ClassCastException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ClassCastException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_ClassCastException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ClassCastException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ClassCastException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ClassCastException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ClassCastException, $Util.$makeClassName('java.lang.ClassCastException'));\n\n\n\n\nexports \x3d ClassCastException; \n//# sourceMappingURL\x3dClassCastException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/ClassCastException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.ClassCastException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.ClassCastException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar ClassCastException \x3d goog.require('java.lang.ClassCastException$impl');\nexports \x3d ClassCastException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/NegativeArraySizeException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.NegativeArraySizeException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.NegativeArraySizeException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass NegativeArraySizeException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NegativeArraySizeException()'.\n   * @return {!NegativeArraySizeException}\n   * @public\n   */\n  static $create__() {\n    NegativeArraySizeException.$clinit();\n    let $instance \x3d new NegativeArraySizeException();\n    $instance.$ctor__java_lang_NegativeArraySizeException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NegativeArraySizeException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NegativeArraySizeException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NegativeArraySizeException(String)'.\n   * @param {?string} message\n   * @return {!NegativeArraySizeException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    NegativeArraySizeException.$clinit();\n    let $instance \x3d new NegativeArraySizeException();\n    $instance.$ctor__java_lang_NegativeArraySizeException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NegativeArraySizeException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_NegativeArraySizeException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NegativeArraySizeException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NegativeArraySizeException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NegativeArraySizeException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NegativeArraySizeException, $Util.$makeClassName('java.lang.NegativeArraySizeException'));\n\n\n\n\nexports \x3d NegativeArraySizeException; \n//# sourceMappingURL\x3dNegativeArraySizeException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/NegativeArraySizeException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.NegativeArraySizeException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.NegativeArraySizeException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar NegativeArraySizeException \x3d goog.require('java.lang.NegativeArraySizeException$impl');\nexports \x3d NegativeArraySizeException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StringIndexOutOfBoundsException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StringIndexOutOfBoundsException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.StringIndexOutOfBoundsException$impl');\n\n\nconst IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass StringIndexOutOfBoundsException extends IndexOutOfBoundsException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringIndexOutOfBoundsException()'.\n   * @return {!StringIndexOutOfBoundsException}\n   * @public\n   */\n  static $create__() {\n    StringIndexOutOfBoundsException.$clinit();\n    let $instance \x3d new StringIndexOutOfBoundsException();\n    $instance.$ctor__java_lang_StringIndexOutOfBoundsException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringIndexOutOfBoundsException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringIndexOutOfBoundsException__() {\n    this.$ctor__java_lang_IndexOutOfBoundsException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringIndexOutOfBoundsException(String)'.\n   * @param {?string} message\n   * @return {!StringIndexOutOfBoundsException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    StringIndexOutOfBoundsException.$clinit();\n    let $instance \x3d new StringIndexOutOfBoundsException();\n    $instance.$ctor__java_lang_StringIndexOutOfBoundsException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringIndexOutOfBoundsException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringIndexOutOfBoundsException__java_lang_String(message) {\n    this.$ctor__java_lang_IndexOutOfBoundsException__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringIndexOutOfBoundsException(int)'.\n   * @param {number} index\n   * @return {!StringIndexOutOfBoundsException}\n   * @public\n   */\n  static $create__int(index) {\n    StringIndexOutOfBoundsException.$clinit();\n    let $instance \x3d new StringIndexOutOfBoundsException();\n    $instance.$ctor__java_lang_StringIndexOutOfBoundsException__int(index);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringIndexOutOfBoundsException(int)'.\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StringIndexOutOfBoundsException__int(index) {\n    this.$ctor__java_lang_IndexOutOfBoundsException__java_lang_String(\"String index out of range: \" + index);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StringIndexOutOfBoundsException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StringIndexOutOfBoundsException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StringIndexOutOfBoundsException.$clinit \x3d function() {};\n    IndexOutOfBoundsException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StringIndexOutOfBoundsException, $Util.$makeClassName('java.lang.StringIndexOutOfBoundsException'));\n\n\n\n\nexports \x3d StringIndexOutOfBoundsException; \n//# sourceMappingURL\x3dStringIndexOutOfBoundsException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StringIndexOutOfBoundsException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StringIndexOutOfBoundsException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.StringIndexOutOfBoundsException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar StringIndexOutOfBoundsException \x3d goog.require('java.lang.StringIndexOutOfBoundsException$impl');\nexports \x3d StringIndexOutOfBoundsException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/InternalPreconditions.impl.java.js
goog.loadModule("'use strict'"+'/**\n * @fileoverview transpiled from javaemul.internal.InternalPreconditions.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module(\'javaemul.internal.InternalPreconditions$impl\');\n\n\nconst j_l_Object \x3d goog.require(\'java.lang.Object$impl\');\nconst $Util \x3d goog.require(\'nativebootstrap.Util$impl\');\n\nlet ArithmeticException \x3d goog.forwardDeclare(\'java.lang.ArithmeticException$impl\');\nlet ArrayIndexOutOfBoundsException \x3d goog.forwardDeclare(\'java.lang.ArrayIndexOutOfBoundsException$impl\');\nlet ArrayStoreException \x3d goog.forwardDeclare(\'java.lang.ArrayStoreException$impl\');\nlet AssertionError \x3d goog.forwardDeclare(\'java.lang.AssertionError$impl\');\nlet ClassCastException \x3d goog.forwardDeclare(\'java.lang.ClassCastException$impl\');\nlet Exception \x3d goog.forwardDeclare(\'java.lang.Exception$impl\');\nlet IllegalArgumentException \x3d goog.forwardDeclare(\'java.lang.IllegalArgumentException$impl\');\nlet IllegalStateException \x3d goog.forwardDeclare(\'java.lang.IllegalStateException$impl\');\nlet IndexOutOfBoundsException \x3d goog.forwardDeclare(\'java.lang.IndexOutOfBoundsException$impl\');\nlet NegativeArraySizeException \x3d goog.forwardDeclare(\'java.lang.NegativeArraySizeException$impl\');\nlet NullPointerException \x3d goog.forwardDeclare(\'java.lang.NullPointerException$impl\');\nlet j_l_String \x3d goog.forwardDeclare(\'java.lang.String$impl\');\nlet StringBuilder \x3d goog.forwardDeclare(\'java.lang.StringBuilder$impl\');\nlet StringIndexOutOfBoundsException \x3d goog.forwardDeclare(\'java.lang.StringIndexOutOfBoundsException$impl\');\nlet NoSuchElementException \x3d goog.forwardDeclare(\'java.util.NoSuchElementException$impl\');\nlet $Equality \x3d goog.forwardDeclare(\'nativebootstrap.Equality$impl\');\nlet $Exceptions \x3d goog.forwardDeclare(\'vmbootstrap.Exceptions$impl\');\n\n\nclass $InternalPreconditions extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static m_isTypeChecked__() {\n    $InternalPreconditions.$clinit();\n    return $InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_ || $InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static m_isApiChecked__() {\n    $InternalPreconditions.$clinit();\n    return $InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_ || $InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_;\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkType__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    $InternalPreconditions.m_checkType__boolean__java_lang_String(expression, null);\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  static m_checkType__boolean__java_lang_String(expression, message) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalType__boolean__java_lang_String(expression, message);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalType__boolean__java_lang_String(expression, message);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalType__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    $InternalPreconditions.m_checkCriticalType__boolean__java_lang_String(expression, null);\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalType__boolean__java_lang_String(expression, message) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(ClassCastException.$create__java_lang_String(message));\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkArrayType__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArrayType__boolean(expression);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArrayType__boolean(expression);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArrayType__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(ArrayStoreException.$create__());\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkArrayType__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArrayType__boolean__java_lang_Object(expression, errorMessage);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArrayType__boolean__java_lang_Object(expression, errorMessage);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArrayType__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(ArrayStoreException.$create__java_lang_String(j_l_String.m_valueOf__java_lang_Object(errorMessage)));\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkArithmetic__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArithmetic__boolean(expression);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArithmetic__boolean(expression);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArithmetic__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(ArithmeticException.$create__());\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkElement__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalElement__boolean(expression);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalElement__boolean(expression);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalElement__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(NoSuchElementException.$create__());\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkElement__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalElement__boolean__java_lang_Object(expression, errorMessage);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalElement__boolean__java_lang_Object(expression, errorMessage);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalElement__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(NoSuchElementException.$create__java_lang_String(j_l_String.m_valueOf__java_lang_Object(errorMessage)));\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkArgument__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArgument__boolean(expression);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArgument__boolean(expression);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArgument__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__());\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkArgument__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArgument__boolean__java_lang_Object(expression, errorMessage);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArgument__boolean__java_lang_Object(expression, errorMessage);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArgument__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(j_l_String.m_valueOf__java_lang_Object(errorMessage)));\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {?string} errorMessageTemplate\n   * @param {Array\x3c*\x3e} errorMessageArgs\n   * @return {void}\n   * @public\n   */\n  static m_checkArgument__boolean__java_lang_String__arrayOf_java_lang_Object(expression, errorMessageTemplate, errorMessageArgs) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArgument__boolean__java_lang_String__arrayOf_java_lang_Object(expression, errorMessageTemplate, errorMessageArgs);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArgument__boolean__java_lang_String__arrayOf_java_lang_Object(expression, errorMessageTemplate, errorMessageArgs);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {?string} errorMessageTemplate\n   * @param {Array\x3c*\x3e} errorMessageArgs\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArgument__boolean__java_lang_String__arrayOf_java_lang_Object(expression, errorMessageTemplate, errorMessageArgs) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String($InternalPreconditions.m_format__java_lang_String__arrayOf_java_lang_Object_$p_javaemul_internal_InternalPreconditions(errorMessageTemplate, errorMessageArgs)));\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkState__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalState__boolean(expression);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalState__boolean(expression);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalState__boolean(expression) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(IllegalStateException.$create__());\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkState__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalState__boolean__java_lang_Object(expression, errorMessage);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalState__boolean__java_lang_Object(expression, errorMessage);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalState__boolean__java_lang_Object(expression, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(IllegalStateException.$create__java_lang_String(j_l_String.m_valueOf__java_lang_Object(errorMessage)));\n    }\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} reference\n   * @return {M_T}\n   * @public\n   */\n  static m_checkNotNull__java_lang_Object(reference) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(reference);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object(reference);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n    return reference;\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} reference\n   * @return {M_T}\n   * @public\n   */\n  static m_checkCriticalNotNull__java_lang_Object(reference) {\n    $InternalPreconditions.$clinit();\n    if ($Equality.$same(reference, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__());\n    }\n    return reference;\n  }\n  \n  /**\n   * @param {*} reference\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkNotNull__java_lang_Object__java_lang_Object(reference, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object__java_lang_Object(reference, errorMessage);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalNotNull__java_lang_Object__java_lang_Object(reference, errorMessage);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {*} reference\n   * @param {*} errorMessage\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalNotNull__java_lang_Object__java_lang_Object(reference, errorMessage) {\n    $InternalPreconditions.$clinit();\n    if ($Equality.$same(reference, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(j_l_String.m_valueOf__java_lang_Object(errorMessage)));\n    }\n  }\n  \n  /**\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkArraySize__int(size) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalArraySize__int(size);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalArraySize__int(size);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArraySize__int(size) {\n    $InternalPreconditions.$clinit();\n    if (size \x3c 0) {\n      throw $Exceptions.toJs(NegativeArraySizeException.$create__java_lang_String("Negative array size: " + size));\n    }\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkElementIndex__int__int(index, size) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalElementIndex__int__int(index, size);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalElementIndex__int__int(index, size);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalElementIndex__int__int(index, size) {\n    $InternalPreconditions.$clinit();\n    if (index \x3c 0 || index \x3e\x3d size) {\n      throw $Exceptions.toJs(IndexOutOfBoundsException.$create__java_lang_String("Index: " + index + ", Size: " + size));\n    }\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkStringElementIndex__int__int(index, size) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalStringElementIndex__int__int(index, size);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalStringElementIndex__int__int(index, size);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalStringElementIndex__int__int(index, size) {\n    $InternalPreconditions.$clinit();\n    if (index \x3c 0 || index \x3e\x3d size) {\n      throw $Exceptions.toJs(StringIndexOutOfBoundsException.$create__java_lang_String("Index: " + index + ", Size: " + size));\n    }\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkPositionIndex__int__int(index, size) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalPositionIndex__int__int(index, size);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalPositionIndex__int__int(index, size);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {number} index\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalPositionIndex__int__int(index, size) {\n    $InternalPreconditions.$clinit();\n    if (index \x3c 0 || index \x3e size) {\n      throw $Exceptions.toJs(IndexOutOfBoundsException.$create__java_lang_String("Index: " + index + ", Size: " + size));\n    }\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkPositionIndexes__int__int__int(start, end, size) {\n    $InternalPreconditions.$clinit();\n    if ($InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_) {\n      $InternalPreconditions.m_checkCriticalPositionIndexes__int__int__int(start, end, size);\n    } else if ($InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_) {\n      try {\n        $InternalPreconditions.m_checkCriticalPositionIndexes__int__int__int(start, end, size);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {number} size\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalPositionIndexes__int__int__int(start, end, size) {\n    $InternalPreconditions.$clinit();\n    if (start \x3c 0 || end \x3e size) {\n      throw $Exceptions.toJs(IndexOutOfBoundsException.$create__java_lang_String("fromIndex: " + start + ", toIndex: " + end + ", size: " + size));\n    }\n    if (start \x3e end) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String("fromIndex: " + start + " \x3e toIndex: " + end));\n    }\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalArrayBounds__int__int__int(start, end, length) {\n    $InternalPreconditions.$clinit();\n    if (start \x3e end) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String("fromIndex: " + start + " \x3e toIndex: " + end));\n    }\n    if (start \x3c 0 || end \x3e length) {\n      throw $Exceptions.toJs(ArrayIndexOutOfBoundsException.$create__java_lang_String("fromIndex: " + start + ", toIndex: " + end + ", length: " + length));\n    }\n  }\n  \n  /**\n   * @param {number} start\n   * @param {number} end\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalStringBounds__int__int__int(start, end, length) {\n    $InternalPreconditions.$clinit();\n    if (start \x3c 0 || end \x3e length || end \x3c start) {\n      throw $Exceptions.toJs(StringIndexOutOfBoundsException.$create__java_lang_String("fromIndex: " + start + ", toIndex: " + end + ", length: " + length));\n    }\n  }\n  \n  /**\n   * @param {?string} template\n   * @param {Array\x3c*\x3e} args\n   * @return {?string}\n   * @public\n   */\n  static m_format__java_lang_String__arrayOf_java_lang_Object_$p_javaemul_internal_InternalPreconditions(template, args) {\n    $InternalPreconditions.$clinit();\n    template \x3d j_l_String.m_valueOf__java_lang_Object(template);\n    let builder \x3d StringBuilder.$create__int(j_l_String.m_length__java_lang_String(template) + 16 * args.length);\n    let templateStart \x3d 0;\n    let i \x3d 0;\n    while (i \x3c args.length) {\n      let placeholderStart \x3d j_l_String.m_indexOf__java_lang_String__java_lang_String__int(template, "%s", templateStart);\n      if (placeholderStart \x3d\x3d -1) {\n        break;\n      }\n      builder.m_append__java_lang_String(j_l_String.m_substring__java_lang_String__int__int(template, templateStart, placeholderStart));\n      builder.m_append__java_lang_Object(args[i++]);\n      templateStart \x3d placeholderStart + 2;\n    }\n    builder.m_append__java_lang_String(j_l_String.m_substring__java_lang_String__int(template, templateStart));\n    if (i \x3c args.length) {\n      builder.m_append__java_lang_String(" [");\n      builder.m_append__java_lang_Object(args[i++]);\n      while (i \x3c args.length) {\n        builder.m_append__java_lang_String(", ");\n        builder.m_append__java_lang_Object(args[i++]);\n      }\n      builder.m_append__char(93 /* \']\' */);\n    }\n    return builder.toString();\n  }\n  \n  /**\n   * Factory method corresponding to constructor \'InternalPreconditions()\'.\n   * @return {!$InternalPreconditions}\n   * @public\n   */\n  static $create__() {\n    $InternalPreconditions.$clinit();\n    let $instance \x3d new $InternalPreconditions();\n    $instance.$ctor__javaemul_internal_InternalPreconditions__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor \'InternalPreconditions()\'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_InternalPreconditions__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  static get f_CHECK_TYPE__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_TYPE__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static set f_CHECK_TYPE__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_TYPE__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  static get f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static set f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  static get f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static set f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  static get f_CHECK_API__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_API__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static set f_CHECK_API__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_CHECK_API__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_ASSERTED__javaemul_internal_InternalPreconditions_() {\n    return ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_ASSERTED__javaemul_internal_InternalPreconditions_(value) {\n    ($InternalPreconditions.$clinit(), $InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $InternalPreconditions;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $InternalPreconditions);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $InternalPreconditions.$clinit \x3d function() {};\n    ArithmeticException \x3d goog.module.get(\'java.lang.ArithmeticException$impl\');\n    ArrayIndexOutOfBoundsException \x3d goog.module.get(\'java.lang.ArrayIndexOutOfBoundsException$impl\');\n    ArrayStoreException \x3d goog.module.get(\'java.lang.ArrayStoreException$impl\');\n    AssertionError \x3d goog.module.get(\'java.lang.AssertionError$impl\');\n    ClassCastException \x3d goog.module.get(\'java.lang.ClassCastException$impl\');\n    Exception \x3d goog.module.get(\'java.lang.Exception$impl\');\n    IllegalArgumentException \x3d goog.module.get(\'java.lang.IllegalArgumentException$impl\');\n    IllegalStateException \x3d goog.module.get(\'java.lang.IllegalStateException$impl\');\n    IndexOutOfBoundsException \x3d goog.module.get(\'java.lang.IndexOutOfBoundsException$impl\');\n    NegativeArraySizeException \x3d goog.module.get(\'java.lang.NegativeArraySizeException$impl\');\n    NullPointerException \x3d goog.module.get(\'java.lang.NullPointerException$impl\');\n    j_l_String \x3d goog.module.get(\'java.lang.String$impl\');\n    StringBuilder \x3d goog.module.get(\'java.lang.StringBuilder$impl\');\n    StringIndexOutOfBoundsException \x3d goog.module.get(\'java.lang.StringIndexOutOfBoundsException$impl\');\n    NoSuchElementException \x3d goog.module.get(\'java.util.NoSuchElementException$impl\');\n    $Equality \x3d goog.module.get(\'nativebootstrap.Equality$impl\');\n    $Exceptions \x3d goog.module.get(\'vmbootstrap.Exceptions$impl\');\n    j_l_Object.$clinit();\n    $InternalPreconditions.$f_CHECK_TYPE__javaemul_internal_InternalPreconditions_ \x3d $Util.$getDefine("jre.checks.type");\n    $InternalPreconditions.$f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_ \x3d $Util.$getDefine("jre.checks.numeric");\n    $InternalPreconditions.$f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_ \x3d $Util.$getDefine("jre.checks.bounds");\n    $InternalPreconditions.$f_CHECK_API__javaemul_internal_InternalPreconditions_ \x3d $Util.$getDefine("jre.checks.api");\n    $InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($Util.$getDefine("jre.checks.checkLevel"), "NORMAL");\n    $InternalPreconditions.$f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($Util.$getDefine("jre.checks.checkLevel"), "OPTIMIZED") || $Equality.$same($Util.$getDefine("jre.checks.checkLevel"), "NORMAL");\n    $InternalPreconditions.$f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($Util.$getDefine("jre.checks.checkLevel"), "MINIMAL") || $Equality.$same($Util.$getDefine("jre.checks.checkLevel"), "OPTIMIZED") || $Equality.$same($Util.$getDefine("jre.checks.checkLevel"), "NORMAL");\n    if (!$InternalPreconditions.$f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_) {\n      throw $Exceptions.toJs(IllegalStateException.$create__java_lang_String("Incorrect level: " + j_l_String.m_valueOf__java_lang_Object($Util.$getDefine("jre.checks.checkLevel"))));\n    }\n    $InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($InternalPreconditions.$f_CHECK_TYPE__javaemul_internal_InternalPreconditions_, "AUTO") \x26\x26 $InternalPreconditions.$f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_ || $Equality.$same($InternalPreconditions.$f_CHECK_TYPE__javaemul_internal_InternalPreconditions_, "ENABLED");\n    $InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($InternalPreconditions.$f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_, "AUTO") \x26\x26 $InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ || $Equality.$same($InternalPreconditions.$f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_, "ENABLED");\n    $InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($InternalPreconditions.$f_CHECK_API__javaemul_internal_InternalPreconditions_, "AUTO") \x26\x26 $InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ || $Equality.$same($InternalPreconditions.$f_CHECK_API__javaemul_internal_InternalPreconditions_, "ENABLED");\n    $InternalPreconditions.$f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($InternalPreconditions.$f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_, "AUTO") \x26\x26 $InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ || $Equality.$same($InternalPreconditions.$f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_, "ENABLED");\n    $InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_ \x3d $Equality.$same($Util.$getDefine("jre.checkedMode"), "ENABLED");\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($InternalPreconditions, $Util.$makeClassName(\'javaemul.internal.InternalPreconditions\'));\n\n\n/** @private {?string} */\n$InternalPreconditions.$f_CHECK_TYPE__javaemul_internal_InternalPreconditions_;\n\n\n/** @private {?string} */\n$InternalPreconditions.$f_CHECK_NUMERIC__javaemul_internal_InternalPreconditions_;\n\n\n/** @private {?string} */\n$InternalPreconditions.$f_CHECK_BOUNDS__javaemul_internal_InternalPreconditions_;\n\n\n/** @private {?string} */\n$InternalPreconditions.$f_CHECK_API__javaemul_internal_InternalPreconditions_;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_LEVEL_NORMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_LEVEL_OPT_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_LEVEL_MINIMAL_OR_HIGHER__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_IS_TYPE_CHECKED__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_IS_BOUNDS_CHECKED__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_IS_API_CHECKED__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_IS_NUMERIC_CHECKED__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\n$InternalPreconditions.$f_IS_ASSERTED__javaemul_internal_InternalPreconditions_ \x3d false;\n\n\n\n\nexports \x3d $InternalPreconditions; \n//# sourceMappingURL\x3dInternalPreconditions.js.map');

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/InternalPreconditions.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.InternalPreconditions.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.InternalPreconditions');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ArithmeticException \x3d goog.require('java.lang.ArithmeticException');\nconst _ArrayIndexOutOfBoundsException \x3d goog.require('java.lang.ArrayIndexOutOfBoundsException');\nconst _ArrayStoreException \x3d goog.require('java.lang.ArrayStoreException');\nconst _AssertionError \x3d goog.require('java.lang.AssertionError');\nconst _ClassCastException \x3d goog.require('java.lang.ClassCastException');\nconst _Exception \x3d goog.require('java.lang.Exception');\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _IllegalStateException \x3d goog.require('java.lang.IllegalStateException');\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _NegativeArraySizeException \x3d goog.require('java.lang.NegativeArraySizeException');\nconst _NullPointerException \x3d goog.require('java.lang.NullPointerException');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _StringBuilder \x3d goog.require('java.lang.StringBuilder');\nconst _StringIndexOutOfBoundsException \x3d goog.require('java.lang.StringIndexOutOfBoundsException');\nconst _NoSuchElementException \x3d goog.require('java.util.NoSuchElementException');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar $InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions$impl');\nexports \x3d $InternalPreconditions;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/IOUtils.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.IOUtils.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.IOUtils$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IndexOutOfBoundsException \x3d goog.forwardDeclare('java.lang.IndexOutOfBoundsException$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass IOUtils extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} buffer\n   * @param {number} byteOffset\n   * @param {number} byteCount\n   * @return {void}\n   * @public\n   */\n  static m_checkOffsetAndCount__arrayOf_byte__int__int(buffer, byteOffset, byteCount) {\n    IOUtils.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(buffer);\n    IOUtils.m_checkOffsetAndCount__int__int__int_$p_java_io_IOUtils(buffer.length, byteOffset, byteCount);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} buffer\n   * @param {number} charOffset\n   * @param {number} charCount\n   * @return {void}\n   * @public\n   */\n  static m_checkOffsetAndCount__arrayOf_char__int__int(buffer, charOffset, charCount) {\n    IOUtils.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(buffer);\n    IOUtils.m_checkOffsetAndCount__int__int__int_$p_java_io_IOUtils(buffer.length, charOffset, charCount);\n  }\n  \n  /**\n   * @param {number} length\n   * @param {number} offset\n   * @param {number} count\n   * @return {void}\n   * @public\n   */\n  static m_checkOffsetAndCount__int__int__int_$p_java_io_IOUtils(length, offset, count) {\n    IOUtils.$clinit();\n    if ((offset \x3c 0) || (count \x3c 0) || ((offset + count) \x3e length)) {\n      throw $Exceptions.toJs(IndexOutOfBoundsException.$create__());\n    }\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IOUtils()'.\n   * @return {!IOUtils}\n   * @public\n   */\n  static $create__() {\n    IOUtils.$clinit();\n    let $instance \x3d new IOUtils();\n    $instance.$ctor__java_io_IOUtils__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IOUtils()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_IOUtils__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IOUtils;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IOUtils);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IOUtils.$clinit \x3d function() {};\n    IndexOutOfBoundsException \x3d goog.module.get('java.lang.IndexOutOfBoundsException$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IOUtils, $Util.$makeClassName('java.io.IOUtils'));\n\n\n\n\nexports \x3d IOUtils; \n//# sourceMappingURL\x3dIOUtils.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/IOUtils.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.IOUtils.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.IOUtils');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar IOUtils \x3d goog.require('java.io.IOUtils$impl');\nexports \x3d IOUtils;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/OutputStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.OutputStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.OutputStream$impl');\n\n\nconst Closeable \x3d goog.require('java.io.Closeable$impl');\nconst Flushable \x3d goog.require('java.io.Flushable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IOUtils \x3d goog.forwardDeclare('java.io.IOUtils$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\n\n\n/**\n * @abstract\n * @implements {Closeable}\n * @implements {Flushable}\n  */\nclass OutputStream extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'OutputStream()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_OutputStream__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_flush__() {\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} buffer\n   * @return {void}\n   * @public\n   */\n  m_write__arrayOf_byte(buffer) {\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(buffer);\n    this.m_write__arrayOf_byte__int__int(buffer, 0, buffer.length);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} buffer\n   * @param {number} offset\n   * @param {number} count\n   * @return {void}\n   * @public\n   */\n  m_write__arrayOf_byte__int__int(buffer, offset, count) {\n    IOUtils.m_checkOffsetAndCount__arrayOf_byte__int__int(buffer, offset, count);\n    for (let i \x3d offset; i \x3c offset + count; i++) {\n      this.m_write__int(buffer[i]);\n    }\n  }\n  \n  /**\n   * @abstract\n   * @param {number} oneByte\n   * @return {void}\n   * @public\n   */\n  m_write__int(oneByte) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof OutputStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, OutputStream);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OutputStream.$clinit \x3d function() {};\n    IOUtils \x3d goog.module.get('java.io.IOUtils$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(OutputStream, $Util.$makeClassName('java.io.OutputStream'));\n\n\nCloseable.$markImplementor(OutputStream);\nFlushable.$markImplementor(OutputStream);\n\n\nexports \x3d OutputStream; \n//# sourceMappingURL\x3dOutputStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/OutputStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.OutputStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.OutputStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Closeable \x3d goog.require('java.io.Closeable');\nconst _Flushable \x3d goog.require('java.io.Flushable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IOUtils \x3d goog.require('java.io.IOUtils');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\n\n\n// Re-exports the implementation.\nvar OutputStream \x3d goog.require('java.io.OutputStream$impl');\nexports \x3d OutputStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/IOException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.IOException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.IOException$impl');\n\n\nconst Exception \x3d goog.require('java.lang.Exception$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\n\n\nclass IOException extends Exception {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IOException()'.\n   * @return {!IOException}\n   * @public\n   */\n  static $create__() {\n    IOException.$clinit();\n    let $instance \x3d new IOException();\n    $instance.$ctor__java_io_IOException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IOException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_IOException__() {\n    this.$ctor__java_lang_Exception__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IOException(String)'.\n   * @param {?string} message\n   * @return {!IOException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    IOException.$clinit();\n    let $instance \x3d new IOException();\n    $instance.$ctor__java_io_IOException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IOException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_IOException__java_lang_String(message) {\n    this.$ctor__java_lang_Exception__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IOException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} throwable\n   * @return {!IOException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, throwable) {\n    IOException.$clinit();\n    let $instance \x3d new IOException();\n    $instance.$ctor__java_io_IOException__java_lang_String__java_lang_Throwable(message, throwable);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IOException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} throwable\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_IOException__java_lang_String__java_lang_Throwable(message, throwable) {\n    this.$ctor__java_lang_Exception__java_lang_String__java_lang_Throwable(message, throwable);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IOException(Throwable)'.\n   * @param {Throwable} throwable\n   * @return {!IOException}\n   * @public\n   */\n  static $create__java_lang_Throwable(throwable) {\n    IOException.$clinit();\n    let $instance \x3d new IOException();\n    $instance.$ctor__java_io_IOException__java_lang_Throwable(throwable);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IOException(Throwable)'.\n   * @param {Throwable} throwable\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_IOException__java_lang_Throwable(throwable) {\n    this.$ctor__java_lang_Exception__java_lang_Throwable(throwable);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IOException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IOException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IOException.$clinit \x3d function() {};\n    Exception.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IOException, $Util.$makeClassName('java.io.IOException'));\n\n\n\n\nexports \x3d IOException; \n//# sourceMappingURL\x3dIOException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/IOException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.IOException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.IOException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Exception \x3d goog.require('java.lang.Exception');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\n\n\n// Re-exports the implementation.\nvar IOException \x3d goog.require('java.io.IOException$impl');\nexports \x3d IOException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/FilterOutputStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.FilterOutputStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.FilterOutputStream$impl');\n\n\nconst OutputStream \x3d goog.require('java.io.OutputStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IOException \x3d goog.forwardDeclare('java.io.IOException$impl');\nlet IOUtils \x3d goog.forwardDeclare('java.io.IOUtils$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass FilterOutputStream extends OutputStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {OutputStream} */\n    this.f_out__java_io_FilterOutputStream;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'FilterOutputStream(OutputStream)'.\n   * @param {OutputStream} out\n   * @return {!FilterOutputStream}\n   * @public\n   */\n  static $create__java_io_OutputStream(out) {\n    FilterOutputStream.$clinit();\n    let $instance \x3d new FilterOutputStream();\n    $instance.$ctor__java_io_FilterOutputStream__java_io_OutputStream(out);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'FilterOutputStream(OutputStream)'.\n   * @param {OutputStream} out\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_FilterOutputStream__java_io_OutputStream(out) {\n    this.$ctor__java_io_OutputStream__();\n    this.f_out__java_io_FilterOutputStream \x3d out;\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_close__() {\n    let thrown \x3d null;\n    try {\n      this.m_flush__();\n    } catch (__$exc) {\n      __$exc \x3d $Exceptions.toJava(__$exc);\n      if (Throwable.$isInstance(__$exc)) {\n        let e \x3d /**@type {Throwable} */ (__$exc);\n        thrown \x3d e;\n      } else {\n        throw $Exceptions.toJs(__$exc);\n      }\n    }\n    try {\n      this.f_out__java_io_FilterOutputStream.m_close__();\n    } catch (__$exc$1$) {\n      __$exc$1$ \x3d $Exceptions.toJava(__$exc$1$);\n      if (Throwable.$isInstance(__$exc$1$)) {\n        let e$1$ \x3d /**@type {Throwable} */ (__$exc$1$);\n        if ($Equality.$same(thrown, null)) {\n          thrown \x3d e$1$;\n        }\n      } else {\n        throw $Exceptions.toJs(__$exc$1$);\n      }\n    }\n    if (!$Equality.$same(thrown, null)) {\n      throw $Exceptions.toJs(IOException.$create__java_lang_Throwable(thrown));\n    }\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_flush__() {\n    this.f_out__java_io_FilterOutputStream.m_flush__();\n  }\n  \n  /**\n   * @override\n   * @param {Array\x3cnumber\x3e} buffer\n   * @param {number} offset\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  m_write__arrayOf_byte__int__int(buffer, offset, length) {\n    IOUtils.m_checkOffsetAndCount__arrayOf_byte__int__int(buffer, offset, length);\n    for (let i \x3d 0; i \x3c length; i++) {\n      this.m_write__int(buffer[offset + i]);\n    }\n  }\n  \n  /**\n   * @override\n   * @param {number} oneByte\n   * @return {void}\n   * @public\n   */\n  m_write__int(oneByte) {\n    this.f_out__java_io_FilterOutputStream.m_write__int(oneByte);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FilterOutputStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, FilterOutputStream);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FilterOutputStream.$clinit \x3d function() {};\n    IOException \x3d goog.module.get('java.io.IOException$impl');\n    IOUtils \x3d goog.module.get('java.io.IOUtils$impl');\n    Throwable \x3d goog.module.get('java.lang.Throwable$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    OutputStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FilterOutputStream, $Util.$makeClassName('java.io.FilterOutputStream'));\n\n\n\n\nexports \x3d FilterOutputStream; \n//# sourceMappingURL\x3dFilterOutputStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/FilterOutputStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.FilterOutputStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.FilterOutputStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _OutputStream \x3d goog.require('java.io.OutputStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IOException \x3d goog.require('java.io.IOException');\nconst _IOUtils \x3d goog.require('java.io.IOUtils');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar FilterOutputStream \x3d goog.require('java.io.FilterOutputStream$impl');\nexports \x3d FilterOutputStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/PrintStream.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.PrintStream.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.PrintStream$impl');\n\n\nconst FilterOutputStream \x3d goog.require('java.io.FilterOutputStream$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet OutputStream \x3d goog.forwardDeclare('java.io.OutputStream$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\nclass PrintStream extends FilterOutputStream {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'PrintStream(OutputStream)'.\n   * @param {OutputStream} out\n   * @return {!PrintStream}\n   * @public\n   */\n  static $create__java_io_OutputStream(out) {\n    PrintStream.$clinit();\n    let $instance \x3d new PrintStream();\n    $instance.$ctor__java_io_PrintStream__java_io_OutputStream(out);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'PrintStream(OutputStream)'.\n   * @param {OutputStream} out\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_PrintStream__java_io_OutputStream(out) {\n    this.$ctor__java_io_FilterOutputStream__java_io_OutputStream(out);\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {void}\n   * @public\n   */\n  m_print__boolean(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_print__char(x) {\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @return {void}\n   * @public\n   */\n  m_print__arrayOf_char(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_print__double(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_print__float(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_print__int(x) {\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {void}\n   * @public\n   */\n  m_print__long(x) {\n  }\n  \n  /**\n   * @param {*} x\n   * @return {void}\n   * @public\n   */\n  m_print__java_lang_Object(x) {\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  m_print__java_lang_String(s) {\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_println__() {\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {void}\n   * @public\n   */\n  m_println__boolean(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_println__char(x) {\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @return {void}\n   * @public\n   */\n  m_println__arrayOf_char(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_println__double(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_println__float(x) {\n  }\n  \n  /**\n   * @param {number} x\n   * @return {void}\n   * @public\n   */\n  m_println__int(x) {\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {void}\n   * @public\n   */\n  m_println__long(x) {\n  }\n  \n  /**\n   * @param {*} x\n   * @return {void}\n   * @public\n   */\n  m_println__java_lang_Object(x) {\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {void}\n   * @public\n   */\n  m_println__java_lang_String(s) {\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_flush__() {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof PrintStream;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, PrintStream);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PrintStream.$clinit \x3d function() {};\n    FilterOutputStream.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(PrintStream, $Util.$makeClassName('java.io.PrintStream'));\n\n\n\n\nexports \x3d PrintStream; \n//# sourceMappingURL\x3dPrintStream.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/PrintStream.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.PrintStream.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.PrintStream');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _FilterOutputStream \x3d goog.require('java.io.FilterOutputStream');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _OutputStream \x3d goog.require('java.io.OutputStream');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar PrintStream \x3d goog.require('java.io.PrintStream$impl');\nexports \x3d PrintStream;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StackTraceElement.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StackTraceElement.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.StackTraceElement$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @implements {Serializable}\n  */\nclass StackTraceElement extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_className__java_lang_StackTraceElement_;\n    /** @public {?string} */\n    this.f_fileName__java_lang_StackTraceElement_;\n    /** @public {number} */\n    this.f_lineNumber__java_lang_StackTraceElement_ \x3d 0;\n    /** @public {?string} */\n    this.f_methodName__java_lang_StackTraceElement_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StackTraceElement()'.\n   * @return {!StackTraceElement}\n   * @public\n   */\n  static $create__() {\n    StackTraceElement.$clinit();\n    let $instance \x3d new StackTraceElement();\n    $instance.$ctor__java_lang_StackTraceElement__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StackTraceElement()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StackTraceElement__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StackTraceElement(String, String, String, int)'.\n   * @param {?string} className\n   * @param {?string} methodName\n   * @param {?string} fileName\n   * @param {number} lineNumber\n   * @return {!StackTraceElement}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_String__java_lang_String__int(className, methodName, fileName, lineNumber) {\n    StackTraceElement.$clinit();\n    let $instance \x3d new StackTraceElement();\n    $instance.$ctor__java_lang_StackTraceElement__java_lang_String__java_lang_String__java_lang_String__int(className, methodName, fileName, lineNumber);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StackTraceElement(String, String, String, int)'.\n   * @param {?string} className\n   * @param {?string} methodName\n   * @param {?string} fileName\n   * @param {number} lineNumber\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_StackTraceElement__java_lang_String__java_lang_String__java_lang_String__int(className, methodName, fileName, lineNumber) {\n    this.$ctor__java_lang_Object__();\n    $Asserts.$assert(!$Equality.$same(className, null));\n    $Asserts.$assert(!$Equality.$same(methodName, null));\n    this.f_className__java_lang_StackTraceElement_ \x3d className;\n    this.f_methodName__java_lang_StackTraceElement_ \x3d methodName;\n    this.f_fileName__java_lang_StackTraceElement_ \x3d fileName;\n    this.f_lineNumber__java_lang_StackTraceElement_ \x3d lineNumber;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getClassName__() {\n    return this.f_className__java_lang_StackTraceElement_;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getFileName__() {\n    return this.f_fileName__java_lang_StackTraceElement_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getLineNumber__() {\n    return this.f_lineNumber__java_lang_StackTraceElement_;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getMethodName__() {\n    return this.f_methodName__java_lang_StackTraceElement_;\n  }\n  \n  /**\n   * @override\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  equals(other) {\n    if (StackTraceElement.$isInstance(other)) {\n      let st \x3d /**@type {StackTraceElement} */ ($Casts.$to(other, StackTraceElement));\n      return this.f_lineNumber__java_lang_StackTraceElement_ \x3d\x3d st.f_lineNumber__java_lang_StackTraceElement_ \x26\x26 Objects.m_equals__java_lang_String__java_lang_String(this.f_methodName__java_lang_StackTraceElement_, st.f_methodName__java_lang_StackTraceElement_) \x26\x26 Objects.m_equals__java_lang_String__java_lang_String(this.f_className__java_lang_StackTraceElement_, st.f_className__java_lang_StackTraceElement_) \x26\x26 Objects.m_equals__java_lang_String__java_lang_String(this.f_fileName__java_lang_StackTraceElement_, st.f_fileName__java_lang_StackTraceElement_);\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return Objects.m_hash__arrayOf_java_lang_Object([Integer.m_valueOf__int(this.f_lineNumber__java_lang_StackTraceElement_), this.f_className__java_lang_StackTraceElement_, this.f_methodName__java_lang_StackTraceElement_, this.f_fileName__java_lang_StackTraceElement_]);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return j_l_String.m_valueOf__java_lang_Object(this.f_className__java_lang_StackTraceElement_) + \".\" + j_l_String.m_valueOf__java_lang_Object(this.f_methodName__java_lang_StackTraceElement_) + \"(\" + j_l_String.m_valueOf__java_lang_Object((!$Equality.$same(this.f_fileName__java_lang_StackTraceElement_, null) ? this.f_fileName__java_lang_StackTraceElement_ : \"Unknown Source\")) + j_l_String.m_valueOf__java_lang_Object((this.f_lineNumber__java_lang_StackTraceElement_ \x3e\x3d 0 ? \":\" + this.f_lineNumber__java_lang_StackTraceElement_ : \"\")) + \")\";\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StackTraceElement;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StackTraceElement);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StackTraceElement.$clinit \x3d function() {};\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StackTraceElement, $Util.$makeClassName('java.lang.StackTraceElement'));\n\n\nSerializable.$markImplementor(StackTraceElement);\n\n\nexports \x3d StackTraceElement; \n//# sourceMappingURL\x3dStackTraceElement.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/StackTraceElement.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.StackTraceElement.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.StackTraceElement');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar StackTraceElement \x3d goog.require('java.lang.StackTraceElement$impl');\nexports \x3d StackTraceElement;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/StringHashCache.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.StringHashCache.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.StringHashCache$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Coercions \x3d goog.forwardDeclare('javaemul.internal.Coercions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\nclass StringHashCache extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StringHashCache()'.\n   * @return {!StringHashCache}\n   * @public\n   */\n  static $create__() {\n    StringHashCache.$clinit();\n    let $instance \x3d new StringHashCache();\n    $instance.$ctor__javaemul_internal_StringHashCache__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StringHashCache()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_StringHashCache__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?string} str\n   * @return {number}\n   * @public\n   */\n  static m_getHashCode__java_lang_String(str) {\n    StringHashCache.$clinit();\n    let key \x3d \":\" + j_l_String.m_valueOf__java_lang_Object(str);\n    let result \x3d /**@type {?number} */ (JsUtils.m_getProperty__java_lang_Object__java_lang_String(StringHashCache.$f_front__javaemul_internal_StringHashCache_, key));\n    if (!$Equality.$same(result, null)) {\n      return Double.m_intValue__java_lang_Double(result);\n    }\n    result \x3d /**@type {?number} */ (JsUtils.m_getProperty__java_lang_Object__java_lang_String(StringHashCache.$f_back__javaemul_internal_StringHashCache_, key));\n    let hashCode \x3d $Equality.$same(result, null) ? StringHashCache.m_compute__java_lang_String_$p_javaemul_internal_StringHashCache(str) : Double.m_intValue__java_lang_Double(result);\n    StringHashCache.m_increment___$p_javaemul_internal_StringHashCache();\n    JsUtils.m_setProperty__java_lang_Object__java_lang_String__java_lang_Object(StringHashCache.$f_front__javaemul_internal_StringHashCache_, key, hashCode);\n    return hashCode;\n  }\n  \n  /**\n   * @param {?string} str\n   * @return {number}\n   * @public\n   */\n  static m_compute__java_lang_String_$p_javaemul_internal_StringHashCache(str) {\n    StringHashCache.$clinit();\n    let hashCode \x3d 0;\n    let n \x3d j_l_String.m_length__java_lang_String(str);\n    let nBatch \x3d n - 4;\n    let i \x3d 0;\n    while (i \x3c nBatch) {\n      hashCode \x3d j_l_String.m_charAt__java_lang_String__int(str, i + 3) + 31 * (j_l_String.m_charAt__java_lang_String__int(str, i + 2) + 31 * (j_l_String.m_charAt__java_lang_String__int(str, i + 1) + 31 * (j_l_String.m_charAt__java_lang_String__int(str, i) + 31 * hashCode)));\n      hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n      i +\x3d 4;\n    }\n    while (i \x3c n) {\n      hashCode \x3d hashCode * 31 + j_l_String.m_charAt__java_lang_String__int(str, i++);\n    }\n    hashCode \x3d Coercions.m_ensureInt__int(hashCode);\n    return hashCode;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  static m_increment___$p_javaemul_internal_StringHashCache() {\n    StringHashCache.$clinit();\n    if (StringHashCache.$f_count__javaemul_internal_StringHashCache_ \x3d\x3d StringHashCache.f_MAX_CACHE__javaemul_internal_StringHashCache_) {\n      StringHashCache.$f_back__javaemul_internal_StringHashCache_ \x3d StringHashCache.$f_front__javaemul_internal_StringHashCache_;\n      StringHashCache.$f_front__javaemul_internal_StringHashCache_ \x3d j_l_Object.$create__();\n      StringHashCache.$f_count__javaemul_internal_StringHashCache_ \x3d 0;\n    }\n    ++StringHashCache.$f_count__javaemul_internal_StringHashCache_;\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  static get f_back__javaemul_internal_StringHashCache_() {\n    return (StringHashCache.$clinit(), StringHashCache.$f_back__javaemul_internal_StringHashCache_);\n  }\n  \n  /**\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  static set f_back__javaemul_internal_StringHashCache_(value) {\n    (StringHashCache.$clinit(), StringHashCache.$f_back__javaemul_internal_StringHashCache_ \x3d value);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_count__javaemul_internal_StringHashCache_() {\n    return (StringHashCache.$clinit(), StringHashCache.$f_count__javaemul_internal_StringHashCache_);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_count__javaemul_internal_StringHashCache_(value) {\n    (StringHashCache.$clinit(), StringHashCache.$f_count__javaemul_internal_StringHashCache_ \x3d value);\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  static get f_front__javaemul_internal_StringHashCache_() {\n    return (StringHashCache.$clinit(), StringHashCache.$f_front__javaemul_internal_StringHashCache_);\n  }\n  \n  /**\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  static set f_front__javaemul_internal_StringHashCache_(value) {\n    (StringHashCache.$clinit(), StringHashCache.$f_front__javaemul_internal_StringHashCache_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StringHashCache;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StringHashCache);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StringHashCache.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Coercions \x3d goog.module.get('javaemul.internal.Coercions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    j_l_Object.$clinit();\n    StringHashCache.$f_back__javaemul_internal_StringHashCache_ \x3d j_l_Object.$create__();\n    StringHashCache.$f_count__javaemul_internal_StringHashCache_ \x3d 0;\n    StringHashCache.$f_front__javaemul_internal_StringHashCache_ \x3d j_l_Object.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StringHashCache, $Util.$makeClassName('javaemul.internal.StringHashCache'));\n\n\n/** @private {*} */\nStringHashCache.$f_back__javaemul_internal_StringHashCache_;\n\n\n/** @private {number} */\nStringHashCache.$f_count__javaemul_internal_StringHashCache_ \x3d 0;\n\n\n/** @private {*} */\nStringHashCache.$f_front__javaemul_internal_StringHashCache_;\n\n\n/** @public {number} @const */\nStringHashCache.f_MAX_CACHE__javaemul_internal_StringHashCache_ \x3d 256;\n\n\n\n\nexports \x3d StringHashCache; \n//# sourceMappingURL\x3dStringHashCache.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/StringHashCache.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.StringHashCache.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.StringHashCache');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Coercions \x3d goog.require('javaemul.internal.Coercions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar StringHashCache \x3d goog.require('javaemul.internal.StringHashCache$impl');\nexports \x3d StringHashCache;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/HashCodes.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.HashCodes.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.HashCodes$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet StringHashCache \x3d goog.forwardDeclare('javaemul.internal.StringHashCache$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet ObjectHashing \x3d goog.forwardDeclare('nativebootstrap.Hashing');\n\n\nclass HashCodes extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'HashCodes()'.\n   * @return {!HashCodes}\n   * @public\n   */\n  static $create__() {\n    HashCodes.$clinit();\n    let $instance \x3d new HashCodes();\n    $instance.$ctor__javaemul_internal_HashCodes__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'HashCodes()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_HashCodes__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  static m_getIdentityHashCode__java_lang_Object(o) {\n    HashCodes.$clinit();\n    switch ($InternalPreconditions.m_checkNotNull__java_lang_Object(typeof(o))) {\n      case \"string\": \n        return HashCodes.m_getStringHashCode__java_lang_String(/**@type {?string} */ (JsUtils.m_uncheckedCast__java_lang_Object(o)));\n      case \"number\": \n        return Double.m_hashCode__double(JsUtils.m_unsafeCastToDouble__java_lang_Object(o));\n      case \"boolean\": \n        return Boolean.m_hashCode__boolean(JsUtils.m_unsafeCastToBoolean__java_lang_Object(o));\n      default: \n        return $Equality.$same(o, null) ? 0 : HashCodes.m_getObjectIdentityHashCode__java_lang_Object(o);\n    }\n  }\n  \n  /**\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  static m_getObjectIdentityHashCode__java_lang_Object(o) {\n    HashCodes.$clinit();\n    return ObjectHashing.$getHashCode(o);\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {number}\n   * @public\n   */\n  static m_getStringHashCode__java_lang_String(s) {\n    HashCodes.$clinit();\n    return StringHashCache.m_getHashCode__java_lang_String(s);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HashCodes;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, HashCodes);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HashCodes.$clinit \x3d function() {};\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    StringHashCache \x3d goog.module.get('javaemul.internal.StringHashCache$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    ObjectHashing \x3d goog.module.get('nativebootstrap.Hashing');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(HashCodes, $Util.$makeClassName('javaemul.internal.HashCodes'));\n\n\n\n\nexports \x3d HashCodes; \n//# sourceMappingURL\x3dHashCodes.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/HashCodes.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.HashCodes.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.HashCodes');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _StringHashCache \x3d goog.require('javaemul.internal.StringHashCache');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _ObjectHashing \x3d goog.require('nativebootstrap.Hashing');\n\n\n// Re-exports the implementation.\nvar HashCodes \x3d goog.require('javaemul.internal.HashCodes$impl');\nexports \x3d HashCodes;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/System.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.System.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.System$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet PrintStream \x3d goog.forwardDeclare('java.io.PrintStream$impl');\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet IndexOutOfBoundsException \x3d goog.forwardDeclare('java.lang.IndexOutOfBoundsException$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet HashCodes \x3d goog.forwardDeclare('javaemul.internal.HashCodes$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass System extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'System()'.\n   * @return {!System}\n   * @public\n   */\n  static $create__() {\n    System.$clinit();\n    let $instance \x3d new System();\n    $instance.$ctor__java_lang_System__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'System()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_System__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {*} src\n   * @param {number} srcOfs\n   * @param {*} dest\n   * @param {number} destOfs\n   * @param {number} len\n   * @return {void}\n   * @public\n   */\n  static m_arraycopy__java_lang_Object__int__java_lang_Object__int__int(src, srcOfs, dest, destOfs, len) {\n    System.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(src, \"src\");\n    $InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(dest, \"dest\");\n    let srcType \x3d $Objects.m_getClass__java_lang_Object(src);\n    let destType \x3d $Objects.m_getClass__java_lang_Object(dest);\n    $InternalPreconditions.m_checkArrayType__boolean__java_lang_Object(srcType.m_isArray__(), \"srcType is not an array\");\n    $InternalPreconditions.m_checkArrayType__boolean__java_lang_Object(destType.m_isArray__(), \"destType is not an array\");\n    let srcComp \x3d srcType.m_getComponentType__();\n    let destComp \x3d destType.m_getComponentType__();\n    $InternalPreconditions.m_checkArrayType__boolean__java_lang_Object(System.m_arrayTypeMatch__java_lang_Class__java_lang_Class_$p_java_lang_System(srcComp, destComp), \"Array types don't match\");\n    let srclen \x3d ArrayHelper.m_getLength__java_lang_Object(src);\n    let destlen \x3d ArrayHelper.m_getLength__java_lang_Object(dest);\n    if (srcOfs \x3c 0 || destOfs \x3c 0 || len \x3c 0 || srcOfs + len \x3e srclen || destOfs + len \x3e destlen) {\n      throw $Exceptions.toJs(IndexOutOfBoundsException.$create__());\n    }\n    if ($InternalPreconditions.m_isTypeChecked__() \x26\x26 !srcComp.m_isPrimitive__() \x26\x26 !$Objects.m_equals__java_lang_Object__java_lang_Object(srcType, destType)) {\n      let srcArray \x3d /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(src, j_l_Object, 1));\n      let destArray \x3d /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(dest, j_l_Object, 1));\n      if ($Equality.$same(src, dest) \x26\x26 srcOfs \x3c destOfs) {\n        srcOfs +\x3d len;\n        for (let destEnd \x3d destOfs + len; destEnd-- \x3e destOfs; ) {\n          $Arrays.$set(destArray, destEnd, srcArray[--srcOfs]);\n        }\n      } else {\n        for (let destEnd$1$ \x3d destOfs + len; destOfs \x3c destEnd$1$; ) {\n          $Arrays.$set(destArray, destOfs++, srcArray[srcOfs++]);\n        }\n      }\n    } else if (len \x3e 0) {\n      ArrayHelper.m_copy__java_lang_Object__int__java_lang_Object__int__int(src, srcOfs, dest, destOfs, len);\n    }\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  static m_currentTimeMillis__() {\n    System.$clinit();\n    return $Primitives.$narrowDoubleToLong(Date.now());\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  static m_gc__() {\n    System.$clinit();\n  }\n  \n  /**\n   * @param {*} o\n   * @return {number}\n   * @public\n   */\n  static m_identityHashCode__java_lang_Object(o) {\n    System.$clinit();\n    return HashCodes.m_getIdentityHashCode__java_lang_Object(o);\n  }\n  \n  /**\n   * @param {PrintStream} err\n   * @return {void}\n   * @public\n   */\n  static m_setErr__java_io_PrintStream(err) {\n    System.$clinit();\n    System.$f_err__java_lang_System \x3d err;\n  }\n  \n  /**\n   * @param {PrintStream} out\n   * @return {void}\n   * @public\n   */\n  static m_setOut__java_io_PrintStream(out) {\n    System.$clinit();\n    System.$f_out__java_lang_System \x3d out;\n  }\n  \n  /**\n   * @param {Class\x3c?\x3e} srcComp\n   * @param {Class\x3c?\x3e} destComp\n   * @return {boolean}\n   * @public\n   */\n  static m_arrayTypeMatch__java_lang_Class__java_lang_Class_$p_java_lang_System(srcComp, destComp) {\n    System.$clinit();\n    if (srcComp.m_isPrimitive__()) {\n      return $Objects.m_equals__java_lang_Object__java_lang_Object(srcComp, destComp);\n    } else {\n      return !destComp.m_isPrimitive__();\n    }\n  }\n  \n  /**\n   * @return {PrintStream}\n   * @public\n   */\n  static get f_err__java_lang_System() {\n    return (System.$clinit(), System.$f_err__java_lang_System);\n  }\n  \n  /**\n   * @param {PrintStream} value\n   * @return {void}\n   * @public\n   */\n  static set f_err__java_lang_System(value) {\n    (System.$clinit(), System.$f_err__java_lang_System \x3d value);\n  }\n  \n  /**\n   * @return {PrintStream}\n   * @public\n   */\n  static get f_out__java_lang_System() {\n    return (System.$clinit(), System.$f_out__java_lang_System);\n  }\n  \n  /**\n   * @param {PrintStream} value\n   * @return {void}\n   * @public\n   */\n  static set f_out__java_lang_System(value) {\n    (System.$clinit(), System.$f_out__java_lang_System \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof System;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, System);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    System.$clinit \x3d function() {};\n    PrintStream \x3d goog.module.get('java.io.PrintStream$impl');\n    IndexOutOfBoundsException \x3d goog.module.get('java.lang.IndexOutOfBoundsException$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    HashCodes \x3d goog.module.get('javaemul.internal.HashCodes$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n    System.$f_err__java_lang_System \x3d PrintStream.$create__java_io_OutputStream(null);\n    System.$f_out__java_lang_System \x3d PrintStream.$create__java_io_OutputStream(null);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(System, $Util.$makeClassName('java.lang.System'));\n\n\n/** @private {PrintStream} */\nSystem.$f_err__java_lang_System;\n\n\n/** @private {PrintStream} */\nSystem.$f_out__java_lang_System;\n\n\n\n\nexports \x3d System; \n//# sourceMappingURL\x3dSystem.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/System.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.System.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.System');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _PrintStream \x3d goog.require('java.io.PrintStream');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _HashCodes \x3d goog.require('javaemul.internal.HashCodes');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar System \x3d goog.require('java.lang.System$impl');\nexports \x3d System;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Throwable$HasJavaThrowable$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Throwable$HasJavaThrowable$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Throwable.HasJavaThrowable.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dThrowable$HasJavaThrowable$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Throwable$HasJavaThrowable$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Throwable$HasJavaThrowable$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Throwable.HasJavaThrowable.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.Throwable.HasJavaThrowable.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Throwable$NativeTypeError$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Throwable$NativeTypeError$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Throwable.NativeTypeError.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof TypeError;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('TypeError'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dThrowable$NativeTypeError$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Throwable$NativeTypeError$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Throwable$NativeTypeError$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Throwable.NativeTypeError.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.Throwable.NativeTypeError.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Throwable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Throwable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Throwable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _PrintStream \x3d goog.require('java.io.PrintStream');\nconst _JsException \x3d goog.require('java.lang.JsException');\nconst _NullPointerException \x3d goog.require('java.lang.NullPointerException');\nconst _StackTraceElement \x3d goog.require('java.lang.StackTraceElement');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _System \x3d goog.require('java.lang.System');\nconst _$Overlay \x3d goog.require('java.lang.Throwable.HasJavaThrowable.$Overlay');\nconst _NativeTypeError_$Overlay \x3d goog.require('java.lang.Throwable.NativeTypeError.$Overlay');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Throwable \x3d goog.require('java.lang.Throwable$impl');\nexports \x3d Throwable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Exception.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Exception.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Exception');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Exception \x3d goog.require('java.lang.Exception$impl');\nexports \x3d Exception;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/RuntimeException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.RuntimeException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.RuntimeException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Exception \x3d goog.require('java.lang.Exception');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\n\n\n// Re-exports the implementation.\nvar RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nexports \x3d RuntimeException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/UnsupportedOperationException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.UnsupportedOperationException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.UnsupportedOperationException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\n\n\nclass UnsupportedOperationException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedOperationException()'.\n   * @return {!UnsupportedOperationException}\n   * @public\n   */\n  static $create__() {\n    UnsupportedOperationException.$clinit();\n    let $instance \x3d new UnsupportedOperationException();\n    $instance.$ctor__java_lang_UnsupportedOperationException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedOperationException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_UnsupportedOperationException__() {\n    this.$ctor__java_lang_RuntimeException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedOperationException(String)'.\n   * @param {?string} message\n   * @return {!UnsupportedOperationException}\n   * @public\n   */\n  static $create__java_lang_String(message) {\n    UnsupportedOperationException.$clinit();\n    let $instance \x3d new UnsupportedOperationException();\n    $instance.$ctor__java_lang_UnsupportedOperationException__java_lang_String(message);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedOperationException(String)'.\n   * @param {?string} message\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_UnsupportedOperationException__java_lang_String(message) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(message);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedOperationException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {!UnsupportedOperationException}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_Throwable(message, cause) {\n    UnsupportedOperationException.$clinit();\n    let $instance \x3d new UnsupportedOperationException();\n    $instance.$ctor__java_lang_UnsupportedOperationException__java_lang_String__java_lang_Throwable(message, cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedOperationException(String, Throwable)'.\n   * @param {?string} message\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_UnsupportedOperationException__java_lang_String__java_lang_Throwable(message, cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(message, cause);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedOperationException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {!UnsupportedOperationException}\n   * @public\n   */\n  static $create__java_lang_Throwable(cause) {\n    UnsupportedOperationException.$clinit();\n    let $instance \x3d new UnsupportedOperationException();\n    $instance.$ctor__java_lang_UnsupportedOperationException__java_lang_Throwable(cause);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedOperationException(Throwable)'.\n   * @param {Throwable} cause\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_UnsupportedOperationException__java_lang_Throwable(cause) {\n    this.$ctor__java_lang_RuntimeException__java_lang_Throwable(cause);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnsupportedOperationException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnsupportedOperationException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnsupportedOperationException.$clinit \x3d function() {};\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnsupportedOperationException, $Util.$makeClassName('java.lang.UnsupportedOperationException'));\n\n\n\n\nexports \x3d UnsupportedOperationException; \n//# sourceMappingURL\x3dUnsupportedOperationException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/UnsupportedOperationException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.UnsupportedOperationException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.UnsupportedOperationException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\n\n\n// Re-exports the implementation.\nvar UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException$impl');\nexports \x3d UnsupportedOperationException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Iterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Iterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Iterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Iterator \x3d goog.require('java.util.Iterator$impl');\nexports \x3d Iterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.PrimitiveIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator$impl');\nexports \x3d PrimitiveIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/PrimitiveIterator$OfInt.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.PrimitiveIterator$OfInt.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.PrimitiveIterator.OfInt');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _PrimitiveIterator \x3d goog.require('java.util.PrimitiveIterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt$impl');\nexports \x3d OfInt;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/CharSequence$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.CharSequence$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.CharSequence.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CharSequence \x3d goog.forwardDeclare('java.lang.CharSequence$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet IntConsumer \x3d goog.forwardDeclare('java.util.function.IntConsumer$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\n\n\n/**\n * @implements {OfInt}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {(CharSequence|string)} */\n    this.f_$outer_this__java_lang_CharSequence_1;\n    /** @public {number} */\n    this.f_cursor__java_lang_CharSequence_1 \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new OfInt(CharSequence)'.\n   * @param {(CharSequence|string)} $outer_this\n   * @return {!$1}\n   * @public\n   */\n  static $create__java_lang_CharSequence($outer_this) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_lang_CharSequence_1__java_lang_CharSequence($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new OfInt(CharSequence)'.\n   * @param {(CharSequence|string)} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_CharSequence_1__java_lang_CharSequence($outer_this) {\n    this.f_$outer_this__java_lang_CharSequence_1 \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_nextInt__() {\n    $InternalPreconditions.m_checkElement__boolean(this.m_hasNext__());\n    return $CharSequences.m_charAt__java_lang_CharSequence__int(this.f_$outer_this__java_lang_CharSequence_1, this.f_cursor__java_lang_CharSequence_1++);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_cursor__java_lang_CharSequence_1 \x3c $CharSequences.m_length__java_lang_CharSequence(this.f_$outer_this__java_lang_CharSequence_1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {IntConsumer} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_IntConsumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfInt__java_util_function_IntConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    OfInt.m_forEachRemaining__$default__java_util_PrimitiveIterator_OfInt__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Integer}\n   * @public\n   */\n  m_next__() {\n    return OfInt.m_next__$default__java_util_PrimitiveIterator_OfInt(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    Iterator.m_remove__$default__java_util_Iterator(this);\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_lang_Object(arg0) {\n    this.m_forEachRemaining__java_util_function_IntConsumer(/**@type {IntConsumer} */ ($Casts.$to(arg0, IntConsumer)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Iterator \x3d goog.module.get('java.util.Iterator$impl');\n    IntConsumer \x3d goog.module.get('java.util.function.IntConsumer$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    j_l_Object.$clinit();\n    OfInt.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.lang.CharSequence$1'));\n\n\nOfInt.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dCharSequence$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/CharSequence$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.CharSequence$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.CharSequence.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _OfInt \x3d goog.require('java.util.PrimitiveIterator.OfInt');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _IntConsumer \x3d goog.require('java.util.function.IntConsumer');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.lang.CharSequence.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/HasCharSequenceTypeMarker$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.HasCharSequenceTypeMarker$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.HasCharSequenceTypeMarker.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('*'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHasCharSequenceTypeMarker$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/HasCharSequenceTypeMarker$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.HasCharSequenceTypeMarker$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.HasCharSequenceTypeMarker.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.HasCharSequenceTypeMarker.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/CharSequence.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.CharSequence.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.CharSequence');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$1 \x3d goog.require('java.lang.CharSequence.$1');\nconst _$Overlay \x3d goog.require('java.lang.HasCharSequenceTypeMarker.$Overlay');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Spliterators \x3d goog.require('java.util.Spliterators');\nconst _Supplier \x3d goog.require('java.util.function.Supplier');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _StreamSupport \x3d goog.require('java.util.stream.StreamSupport');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar CharSequence \x3d goog.require('java.lang.CharSequence$impl');\nexports \x3d CharSequence;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/UnsupportedEncodingException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.UnsupportedEncodingException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.io.UnsupportedEncodingException$impl');\n\n\nconst IOException \x3d goog.require('java.io.IOException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass UnsupportedEncodingException extends IOException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedEncodingException()'.\n   * @return {!UnsupportedEncodingException}\n   * @public\n   */\n  static $create__() {\n    UnsupportedEncodingException.$clinit();\n    let $instance \x3d new UnsupportedEncodingException();\n    $instance.$ctor__java_io_UnsupportedEncodingException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedEncodingException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_UnsupportedEncodingException__() {\n    this.$ctor__java_io_IOException__();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedEncodingException(String)'.\n   * @param {?string} msg\n   * @return {!UnsupportedEncodingException}\n   * @public\n   */\n  static $create__java_lang_String(msg) {\n    UnsupportedEncodingException.$clinit();\n    let $instance \x3d new UnsupportedEncodingException();\n    $instance.$ctor__java_io_UnsupportedEncodingException__java_lang_String(msg);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedEncodingException(String)'.\n   * @param {?string} msg\n   * @return {void}\n   * @public\n   */\n  $ctor__java_io_UnsupportedEncodingException__java_lang_String(msg) {\n    this.$ctor__java_io_IOException__java_lang_String(msg);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnsupportedEncodingException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnsupportedEncodingException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnsupportedEncodingException.$clinit \x3d function() {};\n    IOException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnsupportedEncodingException, $Util.$makeClassName('java.io.UnsupportedEncodingException'));\n\n\n\n\nexports \x3d UnsupportedEncodingException; \n//# sourceMappingURL\x3dUnsupportedEncodingException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/UnsupportedEncodingException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.UnsupportedEncodingException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.UnsupportedEncodingException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IOException \x3d goog.require('java.io.IOException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar UnsupportedEncodingException \x3d goog.require('java.io.UnsupportedEncodingException$impl');\nexports \x3d UnsupportedEncodingException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.String.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Comparator \x3d goog.require('java.util.Comparator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Comparable \x3d goog.forwardDeclare('java.lang.Comparable$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet ToDoubleFunction \x3d goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');\nlet ToIntFunction \x3d goog.forwardDeclare('java.util.function.ToIntFunction$impl');\nlet ToLongFunction \x3d goog.forwardDeclare('java.util.function.ToLongFunction$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @implements {Comparator\x3c?string\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Comparator()'.\n   * @return {!$1}\n   * @public\n   */\n  static $create__() {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_lang_String_1__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Comparator()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String_1__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?string} a\n   * @param {?string} b\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_String__java_lang_String(a, b) {\n    return j_l_String.m_compareToIgnoreCase__java_lang_String__java_lang_String(a, b);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_reversed__() {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_reversed__$default__java_util_Comparator(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Comparator\x3c?\x3e} arg0\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_Comparator(arg0) {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @param {Comparator\x3c?\x3e} arg1\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function__java_util_Comparator(arg0, arg1) {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0, arg1));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @template M_U\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg0\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_thenComparing__java_util_function_Function(arg0) {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToDoubleFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToIntFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction(this, arg0));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {ToLongFunction\x3c?\x3e} arg0\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {\n    return /**@type {Comparator\x3c?string\x3e} */ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction(this, arg0));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {number}\n   * @public\n   */\n  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.m_compare__java_lang_String__java_lang_String(/**@type {?string} */ ($Casts.$to(arg0, j_l_String)), /**@type {?string} */ ($Casts.$to(arg1, j_l_String)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Comparator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.lang.String$1'));\n\n\nComparator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dString$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.String.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _ToDoubleFunction \x3d goog.require('java.util.function.ToDoubleFunction');\nconst _ToIntFunction \x3d goog.require('java.util.function.ToIntFunction');\nconst _ToLongFunction \x3d goog.require('java.util.function.ToLongFunction');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.lang.String.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String$NativeFunction$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String$NativeFunction$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.String.NativeFunction.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Function;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Function'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dString$NativeFunction$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String$NativeFunction$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String$NativeFunction$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.String.NativeFunction.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.String.NativeFunction.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String$NativeString$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String$NativeString$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.String.NativeString.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof String;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('String'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dString$NativeString$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String$NativeString$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String$NativeString$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.String.NativeString.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.lang.String.NativeString.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/NavigableSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.NavigableSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.NavigableSet$impl');\n\n\nconst SortedSet \x3d goog.require('java.util.SortedSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\n\n\n/**\n * @interface\n * @template C_E\n * @extends {SortedSet\x3cC_E\x3e}\n */\nclass NavigableSet {\n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {C_E}\n   * @public\n   */\n  m_ceiling__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Iterator\x3cC_E\x3e}\n   * @public\n   */\n  m_descendingIterator__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {NavigableSet\x3cC_E\x3e}\n   * @public\n   */\n  m_descendingSet__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {C_E}\n   * @public\n   */\n  m_floor__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} toElement\n   * @param {boolean} inclusive\n   * @return {NavigableSet\x3cC_E\x3e}\n   * @public\n   */\n  m_headSet__java_lang_Object__boolean(toElement, inclusive) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {C_E}\n   * @public\n   */\n  m_higher__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} e\n   * @return {C_E}\n   * @public\n   */\n  m_lower__java_lang_Object(e) {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_pollFirst__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {C_E}\n   * @public\n   */\n  m_pollLast__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} fromElement\n   * @param {boolean} fromInclusive\n   * @param {C_E} toElement\n   * @param {boolean} toInclusive\n   * @return {NavigableSet\x3cC_E\x3e}\n   * @public\n   */\n  m_subSet__java_lang_Object__boolean__java_lang_Object__boolean(fromElement, fromInclusive, toElement, toInclusive) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_E} fromElement\n   * @param {boolean} inclusive\n   * @return {NavigableSet\x3cC_E\x3e}\n   * @public\n   */\n  m_tailSet__java_lang_Object__boolean(fromElement, inclusive) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    SortedSet.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_NavigableSet \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_NavigableSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_NavigableSet;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NavigableSet.$clinit \x3d function() {};\n    SortedSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(NavigableSet, $Util.$makeClassName('java.util.NavigableSet'));\n\n\nNavigableSet.$markImplementor(/** @type {Function} */ (NavigableSet));\n\n\nexports \x3d NavigableSet; \n//# sourceMappingURL\x3dNavigableSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/NavigableSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.NavigableSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.NavigableSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SortedSet \x3d goog.require('java.util.SortedSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterator \x3d goog.require('java.util.Iterator');\n\n\n// Re-exports the implementation.\nvar NavigableSet \x3d goog.require('java.util.NavigableSet$impl');\nexports \x3d NavigableSet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/NavigableMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.NavigableMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.NavigableMap$impl');\n\n\nconst SortedMap \x3d goog.require('java.util.SortedMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet NavigableSet \x3d goog.forwardDeclare('java.util.NavigableSet$impl');\n\n\n/**\n * @interface\n * @template C_K, C_V\n * @extends {SortedMap\x3cC_K, C_V\x3e}\n */\nclass NavigableMap {\n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_ceilingEntry__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_ceilingKey__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @return {NavigableSet\x3cC_K\x3e}\n   * @public\n   */\n  m_descendingKeySet__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_descendingMap__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_firstEntry__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_floorEntry__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_floorKey__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} toKey\n   * @param {boolean} inclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object__boolean(toKey, inclusive) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_higherEntry__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_higherKey__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_lastEntry__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_lowerEntry__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_lowerKey__java_lang_Object(key) {\n  }\n  \n  /**\n   * @abstract\n   * @return {NavigableSet\x3cC_K\x3e}\n   * @public\n   */\n  m_navigableKeySet__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_pollFirstEntry__() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_pollLastEntry__() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(fromKey, fromInclusive, toKey, toInclusive) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} fromKey\n   * @param {boolean} inclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object__boolean(fromKey, inclusive) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    SortedMap.$markImplementor(classConstructor);\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_util_NavigableMap \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_util_NavigableMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_util_NavigableMap;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NavigableMap.$clinit \x3d function() {};\n    Map \x3d goog.module.get('java.util.Map$impl');\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(NavigableMap, $Util.$makeClassName('java.util.NavigableMap'));\n\n\nNavigableMap.$markImplementor(/** @type {Function} */ (NavigableMap));\n\n\nexports \x3d NavigableMap; \n//# sourceMappingURL\x3dNavigableMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/NavigableMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.NavigableMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.NavigableMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _NavigableSet \x3d goog.require('java.util.NavigableSet');\n\n\n// Re-exports the implementation.\nvar NavigableMap \x3d goog.require('java.util.NavigableMap$impl');\nexports \x3d NavigableMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$SimpleImmutableEntry.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$SimpleImmutableEntry.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractMap.SimpleImmutableEntry$impl');\n\n\nconst AbstractEntry \x3d goog.require('java.util.AbstractMap.AbstractEntry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedOperationException \x3d goog.forwardDeclare('java.lang.UnsupportedOperationException$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_SimpleImmutableEntry_K, C_SimpleImmutableEntry_V\n * @extends {AbstractEntry\x3cC_SimpleImmutableEntry_K, C_SimpleImmutableEntry_V\x3e}\n  */\nclass SimpleImmutableEntry extends AbstractEntry {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SimpleImmutableEntry(Object, Object)'.\n   * @template C_SimpleImmutableEntry_K, C_SimpleImmutableEntry_V\n   * @param {C_SimpleImmutableEntry_K} key\n   * @param {C_SimpleImmutableEntry_V} value\n   * @return {!SimpleImmutableEntry\x3cC_SimpleImmutableEntry_K, C_SimpleImmutableEntry_V\x3e}\n   * @public\n   */\n  static $create__java_lang_Object__java_lang_Object(key, value) {\n    SimpleImmutableEntry.$clinit();\n    let $instance \x3d new SimpleImmutableEntry();\n    $instance.$ctor__java_util_AbstractMap_SimpleImmutableEntry__java_lang_Object__java_lang_Object(key, value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SimpleImmutableEntry(Object, Object)'.\n   * @param {C_SimpleImmutableEntry_K} key\n   * @param {C_SimpleImmutableEntry_V} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_SimpleImmutableEntry__java_lang_Object__java_lang_Object(key, value) {\n    this.$ctor__java_util_AbstractMap_AbstractEntry__java_lang_Object__java_lang_Object(key, value);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SimpleImmutableEntry(Entry)'.\n   * @template C_SimpleImmutableEntry_K, C_SimpleImmutableEntry_V\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {!SimpleImmutableEntry\x3cC_SimpleImmutableEntry_K, C_SimpleImmutableEntry_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map_Entry(entry) {\n    SimpleImmutableEntry.$clinit();\n    let $instance \x3d new SimpleImmutableEntry();\n    $instance.$ctor__java_util_AbstractMap_SimpleImmutableEntry__java_util_Map_Entry(entry);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SimpleImmutableEntry(Entry)'.\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractMap_SimpleImmutableEntry__java_util_Map_Entry(entry) {\n    this.$ctor__java_util_AbstractMap_AbstractEntry__java_lang_Object__java_lang_Object(entry.m_getKey__(), entry.m_getValue__());\n  }\n  \n  /**\n   * @override\n   * @param {C_SimpleImmutableEntry_V} value\n   * @return {C_SimpleImmutableEntry_V}\n   * @public\n   */\n  m_setValue__java_lang_Object(value) {\n    throw $Exceptions.toJs(UnsupportedOperationException.$create__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SimpleImmutableEntry;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SimpleImmutableEntry);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SimpleImmutableEntry.$clinit \x3d function() {};\n    UnsupportedOperationException \x3d goog.module.get('java.lang.UnsupportedOperationException$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    AbstractEntry.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SimpleImmutableEntry, $Util.$makeClassName('java.util.AbstractMap$SimpleImmutableEntry'));\n\n\n\n\nexports \x3d SimpleImmutableEntry; \n//# sourceMappingURL\x3dAbstractMap$SimpleImmutableEntry.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractMap$SimpleImmutableEntry.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractMap$SimpleImmutableEntry.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractMap.SimpleImmutableEntry');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractEntry \x3d goog.require('java.util.AbstractMap.AbstractEntry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedOperationException \x3d goog.require('java.lang.UnsupportedOperationException');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar SimpleImmutableEntry \x3d goog.require('java.util.AbstractMap.SimpleImmutableEntry$impl');\nexports \x3d SimpleImmutableEntry;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractNavigableMap$impl');\n\n\nconst AbstractMap \x3d goog.require('java.util.AbstractMap$impl');\nconst NavigableMap \x3d goog.require('java.util.NavigableMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet SimpleImmutableEntry \x3d goog.forwardDeclare('java.util.AbstractMap.SimpleImmutableEntry$impl');\nlet DescendingMap \x3d goog.forwardDeclare('java.util.AbstractNavigableMap.DescendingMap$impl');\nlet EntrySet \x3d goog.forwardDeclare('java.util.AbstractNavigableMap.EntrySet$impl');\nlet NavigableKeySet \x3d goog.forwardDeclare('java.util.AbstractNavigableMap.NavigableKeySet$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet NavigableSet \x3d goog.forwardDeclare('java.util.NavigableSet$impl');\nlet NoSuchElementException \x3d goog.forwardDeclare('java.util.NoSuchElementException$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet SortedMap \x3d goog.forwardDeclare('java.util.SortedMap$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @abstract\n * @template C_K, C_V\n * @extends {AbstractMap\x3cC_K, C_V\x3e}\n * @implements {NavigableMap\x3cC_K, C_V\x3e}\n  */\nclass AbstractNavigableMap extends AbstractMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'AbstractNavigableMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractNavigableMap__() {\n    this.$ctor__java_util_AbstractMap__();\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {Entry\x3cM_K, M_V\x3e} entry\n   * @return {Entry\x3cM_K, M_V\x3e}\n   * @public\n   */\n  static m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(entry) {\n    AbstractNavigableMap.$clinit();\n    return $Equality.$same(entry, null) ? null : /**@type {!SimpleImmutableEntry\x3c*, *\x3e} */ (SimpleImmutableEntry.$create__java_util_Map_Entry(entry));\n  }\n  \n  /**\n   * @template M_K, M_V\n   * @param {Entry\x3cM_K, M_V\x3e} entry\n   * @return {M_K}\n   * @public\n   */\n  static m_getKeyOrNSE__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(entry) {\n    AbstractNavigableMap.$clinit();\n    if ($Equality.$same(entry, null)) {\n      throw $Exceptions.toJs(NoSuchElementException.$create__());\n    }\n    return entry.m_getKey__();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_ceilingEntry__java_lang_Object(key) {\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getCeilingEntry__java_lang_Object_$pp_java_util(key)));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_ceilingKey__java_lang_Object(key) {\n    return AbstractMap.m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(this.m_getCeilingEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {*} k\n   * @return {boolean}\n   * @public\n   */\n  containsKey(k) {\n    let key \x3d /**@type {C_K} */ ($Casts.$to(k, j_l_Object));\n    return !$Equality.$same(this.m_getEntry__java_lang_Object_$pp_java_util(key), null);\n  }\n  \n  /**\n   * @override\n   * @return {NavigableSet\x3cC_K\x3e}\n   * @public\n   */\n  m_descendingKeySet__() {\n    return this.m_descendingMap__().m_navigableKeySet__();\n  }\n  \n  /**\n   * @override\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_descendingMap__() {\n    return /**@type {!DescendingMap\x3cC_K, C_V\x3e} */ (DescendingMap.$create__java_util_AbstractNavigableMap(this));\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n    return /**@type {!EntrySet\x3cC_K, C_V\x3e} */ (EntrySet.$create__java_util_AbstractNavigableMap(this));\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_firstEntry__() {\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getFirstEntry___$pp_java_util()));\n  }\n  \n  /**\n   * @override\n   * @return {C_K}\n   * @public\n   */\n  m_firstKey__() {\n    return AbstractNavigableMap.m_getKeyOrNSE__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getFirstEntry___$pp_java_util());\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_floorEntry__java_lang_Object(key) {\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getFloorEntry__java_lang_Object_$pp_java_util(key)));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_floorKey__java_lang_Object(key) {\n    return AbstractMap.m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(this.m_getFloorEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {*} k\n   * @return {C_V}\n   * @public\n   */\n  get(k) {\n    let key \x3d /**@type {C_K} */ ($Casts.$to(k, j_l_Object));\n    return AbstractMap.m_getEntryValueOrNull__java_util_Map_Entry_$pp_java_util(this.m_getEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} toKey\n   * @return {SortedMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object(toKey) {\n    return this.m_headMap__java_lang_Object__boolean(toKey, false);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_higherEntry__java_lang_Object(key) {\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getHigherEntry__java_lang_Object_$pp_java_util(key)));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_higherKey__java_lang_Object(key) {\n    return AbstractMap.m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(this.m_getHigherEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cC_K\x3e}\n   * @public\n   */\n  keySet() {\n    return this.m_navigableKeySet__();\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_lastEntry__() {\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getLastEntry___$pp_java_util()));\n  }\n  \n  /**\n   * @override\n   * @return {C_K}\n   * @public\n   */\n  m_lastKey__() {\n    return AbstractNavigableMap.m_getKeyOrNSE__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getLastEntry___$pp_java_util());\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_lowerEntry__java_lang_Object(key) {\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getLowerEntry__java_lang_Object_$pp_java_util(key)));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {C_K}\n   * @public\n   */\n  m_lowerKey__java_lang_Object(key) {\n    return AbstractMap.m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(this.m_getLowerEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @return {NavigableSet\x3cC_K\x3e}\n   * @public\n   */\n  m_navigableKeySet__() {\n    return /**@type {!NavigableKeySet\x3cC_K, C_V\x3e} */ (NavigableKeySet.$create__java_util_NavigableMap(this));\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_pollFirstEntry__() {\n    return this.m_pollEntry__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getFirstEntry___$pp_java_util());\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_pollLastEntry__() {\n    return this.m_pollEntry__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(this.m_getLastEntry___$pp_java_util());\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @param {C_K} toKey\n   * @return {SortedMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__java_lang_Object(fromKey, toKey) {\n    return this.m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(fromKey, true, toKey, false);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @return {SortedMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object(fromKey) {\n    return this.m_tailMap__java_lang_Object__boolean(fromKey, true);\n  }\n  \n  /**\n   * @override\n   * @param {Entry\x3c?, ?\x3e} entry\n   * @return {boolean}\n   * @public\n   */\n  m_containsEntry__java_util_Map_Entry_$pp_java_util(entry) {\n    let key \x3d /**@type {C_K} */ ($Casts.$to(entry.m_getKey__(), j_l_Object));\n    let lookupEntry \x3d this.m_getEntry__java_lang_Object_$pp_java_util(key);\n    return !$Equality.$same(lookupEntry, null) \x26\x26 Objects.m_equals__java_lang_Object__java_lang_Object(lookupEntry.m_getValue__(), entry.m_getValue__());\n  }\n  \n  /**\n   * @abstract\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_descendingEntryIterator___$pp_java_util() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entryIterator___$pp_java_util() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getEntry__java_lang_Object_$pp_java_util(key) {\n  }\n  \n  /**\n   * @abstract\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFirstEntry___$pp_java_util() {\n  }\n  \n  /**\n   * @abstract\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLastEntry___$pp_java_util() {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getCeilingEntry__java_lang_Object_$pp_java_util(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFloorEntry__java_lang_Object_$pp_java_util(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getHigherEntry__java_lang_Object_$pp_java_util(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLowerEntry__java_lang_Object_$pp_java_util(key) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {boolean}\n   * @public\n   */\n  m_removeEntry__java_util_Map_Entry_$pp_java_util(entry) {\n  }\n  \n  /**\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_pollEntry__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(entry) {\n    if (!$Equality.$same(entry, null)) {\n      this.m_removeEntry__java_util_Map_Entry_$pp_java_util(entry);\n    }\n    return /**@type {Entry\x3cC_K, C_V\x3e} */ (AbstractNavigableMap.m_copyOf__java_util_Map_Entry_$p_java_util_AbstractNavigableMap(entry));\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {boolean} arg1\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object__boolean(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {boolean} arg1\n   * @param {C_K} arg2\n   * @param {boolean} arg3\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(arg0, arg1, arg2, arg3) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {C_K} arg0\n   * @param {boolean} arg1\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object__boolean(arg0, arg1) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AbstractNavigableMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AbstractNavigableMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AbstractNavigableMap.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    SimpleImmutableEntry \x3d goog.module.get('java.util.AbstractMap.SimpleImmutableEntry$impl');\n    DescendingMap \x3d goog.module.get('java.util.AbstractNavigableMap.DescendingMap$impl');\n    EntrySet \x3d goog.module.get('java.util.AbstractNavigableMap.EntrySet$impl');\n    NavigableKeySet \x3d goog.module.get('java.util.AbstractNavigableMap.NavigableKeySet$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    NoSuchElementException \x3d goog.module.get('java.util.NoSuchElementException$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    AbstractMap.$clinit();\n    Map.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AbstractNavigableMap, $Util.$makeClassName('java.util.AbstractNavigableMap'));\n\n\nNavigableMap.$markImplementor(AbstractNavigableMap);\n\n\nexports \x3d AbstractNavigableMap; \n//# sourceMappingURL\x3dAbstractNavigableMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$DescendingMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$DescendingMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractNavigableMap.DescendingMap$impl');\n\n\nconst AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet NavigableMap \x3d goog.forwardDeclare('java.util.NavigableMap$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractNavigableMap\x3cC_K, C_V\x3e}\n  */\nclass DescendingMap extends AbstractNavigableMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractNavigableMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractNavigableMap_DescendingMap;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DescendingMap(AbstractNavigableMap)'.\n   * @template C_K, C_V\n   * @param {AbstractNavigableMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!DescendingMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractNavigableMap($outer_this) {\n    DescendingMap.$clinit();\n    let $instance \x3d new DescendingMap();\n    $instance.$ctor__java_util_AbstractNavigableMap_DescendingMap__java_util_AbstractNavigableMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DescendingMap(AbstractNavigableMap)'.\n   * @param {AbstractNavigableMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractNavigableMap_DescendingMap__java_util_AbstractNavigableMap($outer_this) {\n    this.f_$outer_this__java_util_AbstractNavigableMap_DescendingMap \x3d $outer_this;\n    this.$ctor__java_util_AbstractNavigableMap__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.m_ascendingMap___$pp_java_util().clear();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n    return /**@type {Comparator\x3c?\x3e} */ (Collections.m_reverseOrder__java_util_Comparator(this.m_ascendingMap___$pp_java_util().m_comparator__()));\n  }\n  \n  /**\n   * @override\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_descendingMap__() {\n    return this.m_ascendingMap___$pp_java_util();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} toKey\n   * @param {boolean} inclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object__boolean(toKey, inclusive) {\n    return this.m_ascendingMap___$pp_java_util().m_tailMap__java_lang_Object__boolean(toKey, inclusive).m_descendingMap__();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n    return this.m_ascendingMap___$pp_java_util().put(key, value);\n  }\n  \n  /**\n   * @override\n   * @param {*} key\n   * @return {C_V}\n   * @public\n   */\n  remove(key) {\n    return this.m_ascendingMap___$pp_java_util().remove(key);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.m_ascendingMap___$pp_java_util().size();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(fromKey, fromInclusive, toKey, toInclusive) {\n    return this.m_ascendingMap___$pp_java_util().m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(toKey, toInclusive, fromKey, fromInclusive).m_descendingMap__();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @param {boolean} inclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object__boolean(fromKey, inclusive) {\n    return this.m_ascendingMap___$pp_java_util().m_headMap__java_lang_Object__boolean(fromKey, inclusive).m_descendingMap__();\n  }\n  \n  /**\n   * @return {AbstractNavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_ascendingMap___$pp_java_util() {\n    return this.f_$outer_this__java_util_AbstractNavigableMap_DescendingMap;\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_descendingEntryIterator___$pp_java_util() {\n    return this.m_ascendingMap___$pp_java_util().m_entryIterator___$pp_java_util();\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entryIterator___$pp_java_util() {\n    return this.m_ascendingMap___$pp_java_util().m_descendingEntryIterator___$pp_java_util();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_ascendingMap___$pp_java_util().m_getEntry__java_lang_Object_$pp_java_util(key);\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFirstEntry___$pp_java_util() {\n    return this.m_ascendingMap___$pp_java_util().m_getLastEntry___$pp_java_util();\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLastEntry___$pp_java_util() {\n    return this.m_ascendingMap___$pp_java_util().m_getFirstEntry___$pp_java_util();\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getCeilingEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_ascendingMap___$pp_java_util().m_getFloorEntry__java_lang_Object_$pp_java_util(key);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFloorEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_ascendingMap___$pp_java_util().m_getCeilingEntry__java_lang_Object_$pp_java_util(key);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getHigherEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_ascendingMap___$pp_java_util().m_getLowerEntry__java_lang_Object_$pp_java_util(key);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLowerEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_ascendingMap___$pp_java_util().m_getHigherEntry__java_lang_Object_$pp_java_util(key);\n  }\n  \n  /**\n   * @override\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {boolean}\n   * @public\n   */\n  m_removeEntry__java_util_Map_Entry_$pp_java_util(entry) {\n    return this.m_ascendingMap___$pp_java_util().m_removeEntry__java_util_Map_Entry_$pp_java_util(entry);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {C_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DescendingMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DescendingMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DescendingMap.$clinit \x3d function() {};\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    AbstractNavigableMap.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DescendingMap, $Util.$makeClassName('java.util.AbstractNavigableMap$DescendingMap'));\n\n\n\n\nexports \x3d DescendingMap; \n//# sourceMappingURL\x3dAbstractNavigableMap$DescendingMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$DescendingMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$DescendingMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractNavigableMap.DescendingMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _NavigableMap \x3d goog.require('java.util.NavigableMap');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\n\n\n// Re-exports the implementation.\nvar DescendingMap \x3d goog.require('java.util.AbstractNavigableMap.DescendingMap$impl');\nexports \x3d DescendingMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$EntrySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$EntrySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractNavigableMap.EntrySet$impl');\n\n\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet AbstractNavigableMap \x3d goog.forwardDeclare('java.util.AbstractNavigableMap$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractSet\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass EntrySet extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {AbstractNavigableMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_AbstractNavigableMap_EntrySet;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntrySet(AbstractNavigableMap)'.\n   * @template C_K, C_V\n   * @param {AbstractNavigableMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!EntrySet\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractNavigableMap($outer_this) {\n    EntrySet.$clinit();\n    let $instance \x3d new EntrySet();\n    $instance.$ctor__java_util_AbstractNavigableMap_EntrySet__java_util_AbstractNavigableMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntrySet(AbstractNavigableMap)'.\n   * @param {AbstractNavigableMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractNavigableMap_EntrySet__java_util_AbstractNavigableMap($outer_this) {\n    this.f_$outer_this__java_util_AbstractNavigableMap_EntrySet \x3d $outer_this;\n    this.$ctor__java_util_AbstractSet__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return Entry.$isInstance(o) \x26\x26 this.f_$outer_this__java_util_AbstractNavigableMap_EntrySet.m_containsEntry__java_util_Map_Entry_$pp_java_util(/**@type {Entry\x3c*, *\x3e} */ ($Casts.$to(o, Entry)));\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_iterator__() {\n    return this.f_$outer_this__java_util_AbstractNavigableMap_EntrySet.m_entryIterator___$pp_java_util();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    if (Entry.$isInstance(o)) {\n      let entry \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(o, Entry));\n      return this.f_$outer_this__java_util_AbstractNavigableMap_EntrySet.m_removeEntry__java_util_Map_Entry_$pp_java_util(entry);\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_$outer_this__java_util_AbstractNavigableMap_EntrySet.size();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EntrySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EntrySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntrySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    AbstractSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EntrySet, $Util.$makeClassName('java.util.AbstractNavigableMap$EntrySet'));\n\n\n\n\nexports \x3d EntrySet; \n//# sourceMappingURL\x3dAbstractNavigableMap$EntrySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$EntrySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$EntrySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractNavigableMap.EntrySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar EntrySet \x3d goog.require('java.util.AbstractNavigableMap.EntrySet$impl');\nexports \x3d EntrySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$NavigableKeySet$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$NavigableKeySet$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractNavigableMap.NavigableKeySet.$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet NavigableKeySet \x3d goog.forwardDeclare('java.util.AbstractNavigableMap.NavigableKeySet$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_NavigableKeySet_K, C_NavigableKeySet_V\n * @implements {Iterator\x3cC_NavigableKeySet_K\x3e}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {NavigableKeySet\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} */\n    this.f_$outer_this__java_util_AbstractNavigableMap_NavigableKeySet_1;\n    /** @public {Iterator\x3cEntry\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e\x3e} */\n    this.$c_entryIterator;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Iterator(NavigableKeySet, Iterator)'.\n   * @template C_NavigableKeySet_K, C_NavigableKeySet_V\n   * @param {NavigableKeySet\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e\x3e} $c_entryIterator\n   * @return {!$1\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e}\n   * @public\n   */\n  static $create__java_util_AbstractNavigableMap_NavigableKeySet__java_util_Iterator($outer_this, $c_entryIterator) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_AbstractNavigableMap_NavigableKeySet_1__java_util_AbstractNavigableMap_NavigableKeySet__java_util_Iterator($outer_this, $c_entryIterator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Iterator(NavigableKeySet, Iterator)'.\n   * @param {NavigableKeySet\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} $outer_this\n   * @param {Iterator\x3cEntry\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e\x3e} $c_entryIterator\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractNavigableMap_NavigableKeySet_1__java_util_AbstractNavigableMap_NavigableKeySet__java_util_Iterator($outer_this, $c_entryIterator) {\n    this.f_$outer_this__java_util_AbstractNavigableMap_NavigableKeySet_1 \x3d $outer_this;\n    this.$c_entryIterator \x3d $c_entryIterator;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.$c_entryIterator.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_next__() {\n    let entry \x3d /**@type {Entry\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} */ ($Casts.$to(this.$c_entryIterator.m_next__(), Entry));\n    return entry.m_getKey__();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.$c_entryIterator.m_remove__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.AbstractNavigableMap$NavigableKeySet$1'));\n\n\nIterator.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dAbstractNavigableMap$NavigableKeySet$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$NavigableKeySet$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$NavigableKeySet$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractNavigableMap.NavigableKeySet.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _NavigableKeySet \x3d goog.require('java.util.AbstractNavigableMap.NavigableKeySet');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.AbstractNavigableMap.NavigableKeySet.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$NavigableKeySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$NavigableKeySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.AbstractNavigableMap.NavigableKeySet$impl');\n\n\nconst AbstractSet \x3d goog.require('java.util.AbstractSet$impl');\nconst NavigableSet \x3d goog.require('java.util.NavigableSet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet AbstractMap \x3d goog.forwardDeclare('java.util.AbstractMap$impl');\nlet $1 \x3d goog.forwardDeclare('java.util.AbstractNavigableMap.NavigableKeySet.$1$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet NavigableMap \x3d goog.forwardDeclare('java.util.NavigableMap$impl');\nlet SortedSet \x3d goog.forwardDeclare('java.util.SortedSet$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_NavigableKeySet_K, C_NavigableKeySet_V\n * @extends {AbstractSet\x3cC_NavigableKeySet_K\x3e}\n * @implements {NavigableSet\x3cC_NavigableKeySet_K\x3e}\n  */\nclass NavigableKeySet extends AbstractSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {NavigableMap\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} */\n    this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NavigableKeySet(NavigableMap)'.\n   * @template C_NavigableKeySet_K, C_NavigableKeySet_V\n   * @param {NavigableMap\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} map\n   * @return {!NavigableKeySet\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e}\n   * @public\n   */\n  static $create__java_util_NavigableMap(map) {\n    NavigableKeySet.$clinit();\n    let $instance \x3d new NavigableKeySet();\n    $instance.$ctor__java_util_AbstractNavigableMap_NavigableKeySet__java_util_NavigableMap(map);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NavigableKeySet(NavigableMap)'.\n   * @param {NavigableMap\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} map\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_AbstractNavigableMap_NavigableKeySet__java_util_NavigableMap(map) {\n    this.$ctor__java_util_AbstractSet__();\n    this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_ \x3d map;\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} k\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_ceiling__java_lang_Object(k) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_ceilingKey__java_lang_Object(k);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.clear();\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_comparator__();\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  contains(o) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.containsKey(o);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_descendingIterator__() {\n    return this.m_descendingSet__().m_iterator__();\n  }\n  \n  /**\n   * @override\n   * @return {NavigableSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_descendingSet__() {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_descendingMap__().m_navigableKeySet__();\n  }\n  \n  /**\n   * @override\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_first__() {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_firstKey__();\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} k\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_floor__java_lang_Object(k) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_floorKey__java_lang_Object(k);\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} toElement\n   * @return {SortedSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_headSet__java_lang_Object(toElement) {\n    return this.m_headSet__java_lang_Object__boolean(toElement, false);\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} toElement\n   * @param {boolean} inclusive\n   * @return {NavigableSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_headSet__java_lang_Object__boolean(toElement, inclusive) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_headMap__java_lang_Object__boolean(toElement, inclusive).m_navigableKeySet__();\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} k\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_higher__java_lang_Object(k) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_higherKey__java_lang_Object(k);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_iterator__() {\n    let entryIterator \x3d this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_entrySet__().m_iterator__();\n    return /**@type {!$1\x3cC_NavigableKeySet_K, C_NavigableKeySet_V\x3e} */ ($1.$create__java_util_AbstractNavigableMap_NavigableKeySet__java_util_Iterator(this, entryIterator));\n  }\n  \n  /**\n   * @override\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_last__() {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_lastKey__();\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} k\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_lower__java_lang_Object(k) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_lowerKey__java_lang_Object(k);\n  }\n  \n  /**\n   * @override\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_pollFirst__() {\n    return AbstractMap.m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_pollFirstEntry__());\n  }\n  \n  /**\n   * @override\n   * @return {C_NavigableKeySet_K}\n   * @public\n   */\n  m_pollLast__() {\n    return AbstractMap.m_getEntryKeyOrNull__java_util_Map_Entry_$pp_java_util(this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_pollLastEntry__());\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  remove(o) {\n    if (this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.containsKey(o)) {\n      this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.remove(o);\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.size();\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} fromElement\n   * @param {boolean} fromInclusive\n   * @param {C_NavigableKeySet_K} toElement\n   * @param {boolean} toInclusive\n   * @return {NavigableSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_subSet__java_lang_Object__boolean__java_lang_Object__boolean(fromElement, fromInclusive, toElement, toInclusive) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(fromElement, fromInclusive, toElement, toInclusive).m_navigableKeySet__();\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} fromElement\n   * @param {C_NavigableKeySet_K} toElement\n   * @return {SortedSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_subSet__java_lang_Object__java_lang_Object(fromElement, toElement) {\n    return this.m_subSet__java_lang_Object__boolean__java_lang_Object__boolean(fromElement, true, toElement, false);\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} fromElement\n   * @return {SortedSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_tailSet__java_lang_Object(fromElement) {\n    return this.m_tailSet__java_lang_Object__boolean(fromElement, true);\n  }\n  \n  /**\n   * @override\n   * @param {C_NavigableKeySet_K} fromElement\n   * @param {boolean} inclusive\n   * @return {NavigableSet\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_tailSet__java_lang_Object__boolean(fromElement, inclusive) {\n    return this.f_map__java_util_AbstractNavigableMap_NavigableKeySet_.m_tailMap__java_lang_Object__boolean(fromElement, inclusive).m_navigableKeySet__();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_NavigableKeySet_K\x3e} */ (SortedSet.m_spliterator__$default__java_util_SortedSet(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_NavigableKeySet_K\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_NavigableKeySet_K\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_NavigableKeySet_K\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NavigableKeySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NavigableKeySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NavigableKeySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    AbstractMap \x3d goog.module.get('java.util.AbstractMap$impl');\n    $1 \x3d goog.module.get('java.util.AbstractNavigableMap.NavigableKeySet.$1$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    SortedSet \x3d goog.module.get('java.util.SortedSet$impl');\n    AbstractSet.$clinit();\n    SortedSet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NavigableKeySet, $Util.$makeClassName('java.util.AbstractNavigableMap$NavigableKeySet'));\n\n\nNavigableSet.$markImplementor(NavigableKeySet);\n\n\nexports \x3d NavigableKeySet; \n//# sourceMappingURL\x3dAbstractNavigableMap$NavigableKeySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap$NavigableKeySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap$NavigableKeySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractNavigableMap.NavigableKeySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractSet \x3d goog.require('java.util.AbstractSet');\nconst _NavigableSet \x3d goog.require('java.util.NavigableSet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _AbstractMap \x3d goog.require('java.util.AbstractMap');\nconst _$1 \x3d goog.require('java.util.AbstractNavigableMap.NavigableKeySet.$1');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _NavigableMap \x3d goog.require('java.util.NavigableMap');\nconst _SortedSet \x3d goog.require('java.util.SortedSet');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar NavigableKeySet \x3d goog.require('java.util.AbstractNavigableMap.NavigableKeySet$impl');\nexports \x3d NavigableKeySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/AbstractNavigableMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.AbstractNavigableMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.AbstractNavigableMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractMap \x3d goog.require('java.util.AbstractMap');\nconst _NavigableMap \x3d goog.require('java.util.NavigableMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _SimpleImmutableEntry \x3d goog.require('java.util.AbstractMap.SimpleImmutableEntry');\nconst _DescendingMap \x3d goog.require('java.util.AbstractNavigableMap.DescendingMap');\nconst _EntrySet \x3d goog.require('java.util.AbstractNavigableMap.EntrySet');\nconst _NavigableKeySet \x3d goog.require('java.util.AbstractNavigableMap.NavigableKeySet');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _NavigableSet \x3d goog.require('java.util.NavigableSet');\nconst _NoSuchElementException \x3d goog.require('java.util.NoSuchElementException');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Set \x3d goog.require('java.util.Set');\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap$impl');\nexports \x3d AbstractNavigableMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.SubMapType$impl');\n\n\nconst Enum \x3d goog.require('java.lang.Enum$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $1 \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType.$3$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Enums \x3d goog.forwardDeclare('vmbootstrap.Enums$impl');\n\n\n/**\n * @extends {Enum\x3cSubMapType\x3e}\n  */\nclass SubMapType extends Enum {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!SubMapType}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    let $instance \x3d new SubMapType();\n    $instance.$ctor__java_util_TreeMap_SubMapType__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_SubMapType__java_lang_String__int($name, $ordinal) {\n    this.f_name__java_lang_Enum_ \x3d $name;\n    this.f_ordinal__java_lang_Enum_ \x3d $ordinal;\n    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_fromKeyValid__() {\n    return false;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_toKeyValid__() {\n    return false;\n  }\n  \n  /**\n   * @param {string} name\n   * @return {!SubMapType}\n   * @public\n   */\n  static m_valueOf__java_lang_String(name) {\n    SubMapType.$clinit();\n    if ($Equality.$same(SubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_, null)) {\n      SubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_ \x3d $Enums.createMapFromValues(SubMapType.m_values__());\n    }\n    return $Enums.getValueFromNameAndMap(name, SubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_);\n  }\n  \n  /**\n   * @return {!Array\x3c!SubMapType\x3e}\n   * @public\n   */\n  static m_values__() {\n    SubMapType.$clinit();\n    return /**@type {!Array\x3cSubMapType\x3e} */ ($Arrays.$init([SubMapType.$f_All__java_util_TreeMap_SubMapType, SubMapType.$f_Head__java_util_TreeMap_SubMapType, SubMapType.$f_Range__java_util_TreeMap_SubMapType, SubMapType.$f_Tail__java_util_TreeMap_SubMapType], SubMapType));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {SubMapType} */ ($Casts.$to(arg0, SubMapType)));\n  }\n  \n  /**\n   * @return {!SubMapType}\n   * @public\n   */\n  static get f_All__java_util_TreeMap_SubMapType() {\n    return (SubMapType.$clinit(), SubMapType.$f_All__java_util_TreeMap_SubMapType);\n  }\n  \n  /**\n   * @param {!SubMapType} value\n   * @return {void}\n   * @public\n   */\n  static set f_All__java_util_TreeMap_SubMapType(value) {\n    (SubMapType.$clinit(), SubMapType.$f_All__java_util_TreeMap_SubMapType \x3d value);\n  }\n  \n  /**\n   * @return {!SubMapType}\n   * @public\n   */\n  static get f_Head__java_util_TreeMap_SubMapType() {\n    return (SubMapType.$clinit(), SubMapType.$f_Head__java_util_TreeMap_SubMapType);\n  }\n  \n  /**\n   * @param {!SubMapType} value\n   * @return {void}\n   * @public\n   */\n  static set f_Head__java_util_TreeMap_SubMapType(value) {\n    (SubMapType.$clinit(), SubMapType.$f_Head__java_util_TreeMap_SubMapType \x3d value);\n  }\n  \n  /**\n   * @return {!SubMapType}\n   * @public\n   */\n  static get f_Range__java_util_TreeMap_SubMapType() {\n    return (SubMapType.$clinit(), SubMapType.$f_Range__java_util_TreeMap_SubMapType);\n  }\n  \n  /**\n   * @param {!SubMapType} value\n   * @return {void}\n   * @public\n   */\n  static set f_Range__java_util_TreeMap_SubMapType(value) {\n    (SubMapType.$clinit(), SubMapType.$f_Range__java_util_TreeMap_SubMapType \x3d value);\n  }\n  \n  /**\n   * @return {!SubMapType}\n   * @public\n   */\n  static get f_Tail__java_util_TreeMap_SubMapType() {\n    return (SubMapType.$clinit(), SubMapType.$f_Tail__java_util_TreeMap_SubMapType);\n  }\n  \n  /**\n   * @param {!SubMapType} value\n   * @return {void}\n   * @public\n   */\n  static set f_Tail__java_util_TreeMap_SubMapType(value) {\n    (SubMapType.$clinit(), SubMapType.$f_Tail__java_util_TreeMap_SubMapType \x3d value);\n  }\n  \n  /**\n   * @return {Map\x3c?string, !SubMapType\x3e}\n   * @public\n   */\n  static get f_namesToValuesMap__java_util_TreeMap_SubMapType_() {\n    return (SubMapType.$clinit(), SubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_);\n  }\n  \n  /**\n   * @param {Map\x3c?string, !SubMapType\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_namesToValuesMap__java_util_TreeMap_SubMapType_(value) {\n    (SubMapType.$clinit(), SubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SubMapType;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SubMapType);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SubMapType.$clinit \x3d function() {};\n    $1 \x3d goog.module.get('java.util.TreeMap.SubMapType.$1$impl');\n    $2 \x3d goog.module.get('java.util.TreeMap.SubMapType.$2$impl');\n    $3 \x3d goog.module.get('java.util.TreeMap.SubMapType.$3$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Enums \x3d goog.module.get('vmbootstrap.Enums$impl');\n    Enum.$clinit();\n    SubMapType.$f_All__java_util_TreeMap_SubMapType \x3d SubMapType.$create__java_lang_String__int($Util.$makeEnumName(\"All\"), SubMapType.$ordinal$f_All__java_util_TreeMap_SubMapType);\n    SubMapType.$f_Head__java_util_TreeMap_SubMapType \x3d $1.$create__java_lang_String__int($Util.$makeEnumName(\"Head\"), SubMapType.$ordinal$f_Head__java_util_TreeMap_SubMapType);\n    SubMapType.$f_Range__java_util_TreeMap_SubMapType \x3d $2.$create__java_lang_String__int($Util.$makeEnumName(\"Range\"), SubMapType.$ordinal$f_Range__java_util_TreeMap_SubMapType);\n    SubMapType.$f_Tail__java_util_TreeMap_SubMapType \x3d $3.$create__java_lang_String__int($Util.$makeEnumName(\"Tail\"), SubMapType.$ordinal$f_Tail__java_util_TreeMap_SubMapType);\n    SubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_ \x3d null;\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForEnum(SubMapType, $Util.$makeClassName('java.util.TreeMap$SubMapType'));\n\n\n/** @private {!SubMapType} */\nSubMapType.$f_All__java_util_TreeMap_SubMapType;\n\n\n/** @private {!SubMapType} */\nSubMapType.$f_Head__java_util_TreeMap_SubMapType;\n\n\n/** @private {!SubMapType} */\nSubMapType.$f_Range__java_util_TreeMap_SubMapType;\n\n\n/** @private {!SubMapType} */\nSubMapType.$f_Tail__java_util_TreeMap_SubMapType;\n\n\n/** @private {Map\x3c?string, !SubMapType\x3e} */\nSubMapType.$f_namesToValuesMap__java_util_TreeMap_SubMapType_;\n\n\n/** @public {number} @const */\nSubMapType.$ordinal$f_All__java_util_TreeMap_SubMapType \x3d 0;\n\n\n/** @public {number} @const */\nSubMapType.$ordinal$f_Head__java_util_TreeMap_SubMapType \x3d 1;\n\n\n/** @public {number} @const */\nSubMapType.$ordinal$f_Range__java_util_TreeMap_SubMapType \x3d 2;\n\n\n/** @public {number} @const */\nSubMapType.$ordinal$f_Tail__java_util_TreeMap_SubMapType \x3d 3;\n\n\n\n\nexports \x3d SubMapType; \n//# sourceMappingURL\x3dTreeMap$SubMapType.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.SubMapType.$1$impl');\n\n\nconst SubMapType \x3d goog.require('java.util.TreeMap.SubMapType$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $1 extends SubMapType {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!$1}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_TreeMap_SubMapType_1__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_SubMapType_1__java_lang_String__int($name, $ordinal) {\n    this.$ctor__java_util_TreeMap_SubMapType__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_toKeyValid__() {\n    return true;\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {SubMapType} */ ($Casts.$to(arg0, SubMapType)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    SubMapType.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.TreeMap$SubMapType$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dTreeMap$SubMapType$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.SubMapType.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.TreeMap.SubMapType.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.SubMapType.$2$impl');\n\n\nconst SubMapType \x3d goog.require('java.util.TreeMap.SubMapType$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $2 extends SubMapType {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!$2}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_TreeMap_SubMapType_2__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_SubMapType_2__java_lang_String__int($name, $ordinal) {\n    this.$ctor__java_util_TreeMap_SubMapType__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_fromKeyValid__() {\n    return true;\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_toKeyValid__() {\n    return true;\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {SubMapType} */ ($Casts.$to(arg0, SubMapType)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    SubMapType.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.TreeMap$SubMapType$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dTreeMap$SubMapType$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.SubMapType.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.TreeMap.SubMapType.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.SubMapType.$3$impl');\n\n\nconst SubMapType \x3d goog.require('java.util.TreeMap.SubMapType$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $3 extends SubMapType {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!$3}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_TreeMap_SubMapType_3__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new SubMapType(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_SubMapType_3__java_lang_String__int($name, $ordinal) {\n    this.$ctor__java_util_TreeMap_SubMapType__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_fromKeyValid__() {\n    return true;\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {SubMapType} */ ($Casts.$to(arg0, SubMapType)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    SubMapType.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.TreeMap$SubMapType$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dTreeMap$SubMapType$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.SubMapType.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.TreeMap.SubMapType.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMapType.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMapType.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.SubMapType');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Enum \x3d goog.require('java.lang.Enum');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$1 \x3d goog.require('java.util.TreeMap.SubMapType.$1');\nconst _$2 \x3d goog.require('java.util.TreeMap.SubMapType.$2');\nconst _$3 \x3d goog.require('java.util.TreeMap.SubMapType.$3');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Enums \x3d goog.require('vmbootstrap.Enums');\n\n\n// Re-exports the implementation.\nvar SubMapType \x3d goog.require('java.util.TreeMap.SubMapType$impl');\nexports \x3d SubMapType;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$DescendingEntryIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$DescendingEntryIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.DescendingEntryIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet TreeMap \x3d goog.forwardDeclare('java.util.TreeMap$impl');\nlet SubMapType \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass DescendingEntryIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {TreeMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_TreeMap_DescendingEntryIterator;\n    /** @public {ListIterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_iter__java_util_TreeMap_DescendingEntryIterator_;\n    /** @public {Entry\x3cC_K, C_V\x3e} */\n    this.f_last__java_util_TreeMap_DescendingEntryIterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DescendingEntryIterator(TreeMap)'.\n   * @template C_K, C_V\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!DescendingEntryIterator\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_TreeMap($outer_this) {\n    DescendingEntryIterator.$clinit();\n    let $instance \x3d new DescendingEntryIterator();\n    $instance.$ctor__java_util_TreeMap_DescendingEntryIterator__java_util_TreeMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DescendingEntryIterator(TreeMap)'.\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_DescendingEntryIterator__java_util_TreeMap($outer_this) {\n    this.$ctor__java_util_TreeMap_DescendingEntryIterator__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, SubMapType.f_All__java_util_TreeMap_SubMapType, null, false, null, false);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DescendingEntryIterator(TreeMap, SubMapType, Object, boolean, Object, boolean)'.\n   * @template C_K, C_V\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {SubMapType} type\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {!DescendingEntryIterator\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive) {\n    DescendingEntryIterator.$clinit();\n    let $instance \x3d new DescendingEntryIterator();\n    $instance.$ctor__java_util_TreeMap_DescendingEntryIterator__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DescendingEntryIterator(TreeMap, SubMapType, Object, boolean, Object, boolean)'.\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {SubMapType} type\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_DescendingEntryIterator__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive) {\n    this.f_$outer_this__java_util_TreeMap_DescendingEntryIterator \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    let list \x3d /**@type {!ArrayList\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (ArrayList.$create__());\n    $outer_this.m_inOrderAdd__java_util_List__java_util_TreeMap_SubMapType__java_util_TreeMap_Node__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(list, type, $outer_this.f_root__java_util_TreeMap_, fromKey, fromInclusive, toKey, toInclusive);\n    this.f_iter__java_util_TreeMap_DescendingEntryIterator_ \x3d list.m_listIterator__int(list.size());\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_iter__java_util_TreeMap_DescendingEntryIterator_.m_hasPrevious__();\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_next__() {\n    return this.f_last__java_util_TreeMap_DescendingEntryIterator_ \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.f_iter__java_util_TreeMap_DescendingEntryIterator_.m_previous__(), Entry));\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.f_iter__java_util_TreeMap_DescendingEntryIterator_.m_remove__();\n    this.f_$outer_this__java_util_TreeMap_DescendingEntryIterator.m_removeEntry__java_util_Map_Entry_$pp_java_util(this.f_last__java_util_TreeMap_DescendingEntryIterator_);\n    this.f_last__java_util_TreeMap_DescendingEntryIterator_ \x3d null;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DescendingEntryIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DescendingEntryIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DescendingEntryIterator.$clinit \x3d function() {};\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    SubMapType \x3d goog.module.get('java.util.TreeMap.SubMapType$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DescendingEntryIterator, $Util.$makeClassName('java.util.TreeMap$DescendingEntryIterator'));\n\n\nIterator.$markImplementor(DescendingEntryIterator);\n\n\nexports \x3d DescendingEntryIterator; \n//# sourceMappingURL\x3dTreeMap$DescendingEntryIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$DescendingEntryIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$DescendingEntryIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.DescendingEntryIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _TreeMap \x3d goog.require('java.util.TreeMap');\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar DescendingEntryIterator \x3d goog.require('java.util.TreeMap.DescendingEntryIterator$impl');\nexports \x3d DescendingEntryIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$EntryIterator.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$EntryIterator.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.EntryIterator$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Iterator \x3d goog.require('java.util.Iterator$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet ListIterator \x3d goog.forwardDeclare('java.util.ListIterator$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet TreeMap \x3d goog.forwardDeclare('java.util.TreeMap$impl');\nlet SubMapType \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_K, C_V\n * @implements {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n  */\nclass EntryIterator extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {TreeMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_TreeMap_EntryIterator;\n    /** @public {ListIterator\x3cEntry\x3cC_K, C_V\x3e\x3e} */\n    this.f_iter__java_util_TreeMap_EntryIterator_;\n    /** @public {Entry\x3cC_K, C_V\x3e} */\n    this.f_last__java_util_TreeMap_EntryIterator_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntryIterator(TreeMap)'.\n   * @template C_K, C_V\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!EntryIterator\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_TreeMap($outer_this) {\n    EntryIterator.$clinit();\n    let $instance \x3d new EntryIterator();\n    $instance.$ctor__java_util_TreeMap_EntryIterator__java_util_TreeMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntryIterator(TreeMap)'.\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_EntryIterator__java_util_TreeMap($outer_this) {\n    this.$ctor__java_util_TreeMap_EntryIterator__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, SubMapType.f_All__java_util_TreeMap_SubMapType, null, false, null, false);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntryIterator(TreeMap, SubMapType, Object, boolean, Object, boolean)'.\n   * @template C_K, C_V\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {SubMapType} type\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {!EntryIterator\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive) {\n    EntryIterator.$clinit();\n    let $instance \x3d new EntryIterator();\n    $instance.$ctor__java_util_TreeMap_EntryIterator__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntryIterator(TreeMap, SubMapType, Object, boolean, Object, boolean)'.\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {SubMapType} type\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_EntryIterator__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive) {\n    this.f_$outer_this__java_util_TreeMap_EntryIterator \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n    let list \x3d /**@type {!ArrayList\x3cEntry\x3cC_K, C_V\x3e\x3e} */ (ArrayList.$create__());\n    $outer_this.m_inOrderAdd__java_util_List__java_util_TreeMap_SubMapType__java_util_TreeMap_Node__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(list, type, $outer_this.f_root__java_util_TreeMap_, fromKey, fromInclusive, toKey, toInclusive);\n    this.f_iter__java_util_TreeMap_EntryIterator_ \x3d list.m_listIterator__();\n  }\n  \n  /**\n   * @override\n   * @return {boolean}\n   * @public\n   */\n  m_hasNext__() {\n    return this.f_iter__java_util_TreeMap_EntryIterator_.m_hasNext__();\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_next__() {\n    return this.f_last__java_util_TreeMap_EntryIterator_ \x3d /**@type {Entry\x3cC_K, C_V\x3e} */ ($Casts.$to(this.f_iter__java_util_TreeMap_EntryIterator_.m_next__(), Entry));\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_remove__() {\n    this.f_iter__java_util_TreeMap_EntryIterator_.m_remove__();\n    this.f_$outer_this__java_util_TreeMap_EntryIterator.m_removeEntry__java_util_Map_Entry_$pp_java_util(this.f_last__java_util_TreeMap_EntryIterator_);\n    this.f_last__java_util_TreeMap_EntryIterator_ \x3d null;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEachRemaining__java_util_function_Consumer(arg0) {\n    Iterator.m_forEachRemaining__$default__java_util_Iterator__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EntryIterator;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EntryIterator);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntryIterator.$clinit \x3d function() {};\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    Entry \x3d goog.module.get('java.util.Map.Entry$impl');\n    SubMapType \x3d goog.module.get('java.util.TreeMap.SubMapType$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    Iterator.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EntryIterator, $Util.$makeClassName('java.util.TreeMap$EntryIterator'));\n\n\nIterator.$markImplementor(EntryIterator);\n\n\nexports \x3d EntryIterator; \n//# sourceMappingURL\x3dTreeMap$EntryIterator.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$EntryIterator.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$EntryIterator.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.EntryIterator');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _ListIterator \x3d goog.require('java.util.ListIterator');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _TreeMap \x3d goog.require('java.util.TreeMap');\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar EntryIterator \x3d goog.require('java.util.TreeMap.EntryIterator$impl');\nexports \x3d EntryIterator;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$EntrySet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$EntrySet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.EntrySet$impl');\n\n\nconst EntrySet \x3d goog.require('java.util.AbstractNavigableMap.EntrySet$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet TreeMap \x3d goog.forwardDeclare('java.util.TreeMap$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_K, C_V\n  */\nclass TreeMap_EntrySet extends EntrySet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {TreeMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_TreeMap_EntrySet;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'EntrySet(TreeMap)'.\n   * @template C_K, C_V\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {!TreeMap_EntrySet\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_TreeMap($outer_this) {\n    TreeMap_EntrySet.$clinit();\n    let $instance \x3d new TreeMap_EntrySet();\n    $instance.$ctor__java_util_TreeMap_EntrySet__java_util_TreeMap($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'EntrySet(TreeMap)'.\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_EntrySet__java_util_TreeMap($outer_this) {\n    this.f_$outer_this__java_util_TreeMap_EntrySet \x3d $outer_this;\n    this.$ctor__java_util_AbstractNavigableMap_EntrySet__java_util_AbstractNavigableMap($outer_this);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_$outer_this__java_util_TreeMap_EntrySet.clear();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cEntry\x3c*, *\x3e\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cEntry\x3c*, *\x3e\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3c*, *\x3e\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cEntry\x3c*, *\x3e\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cEntry\x3c*, *\x3e\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cEntry\x3c*, *\x3e\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof TreeMap_EntrySet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, TreeMap_EntrySet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    TreeMap_EntrySet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    Set \x3d goog.module.get('java.util.Set$impl');\n    EntrySet.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(TreeMap_EntrySet, $Util.$makeClassName('java.util.TreeMap$EntrySet'));\n\n\n\n\nexports \x3d TreeMap_EntrySet; \n//# sourceMappingURL\x3dTreeMap$EntrySet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$EntrySet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$EntrySet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.EntrySet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _EntrySet \x3d goog.require('java.util.AbstractNavigableMap.EntrySet');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _Set \x3d goog.require('java.util.Set');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _TreeMap \x3d goog.require('java.util.TreeMap');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar TreeMap_EntrySet \x3d goog.require('java.util.TreeMap.EntrySet$impl');\nexports \x3d TreeMap_EntrySet;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$Node.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$Node.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.Node$impl');\n\n\nconst SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\n\n\n/**\n * @template C_Node_K, C_Node_V\n * @extends {SimpleEntry\x3cC_Node_K, C_Node_V\x3e}\n  */\nclass Node extends SimpleEntry {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Array\x3cNode\x3cC_Node_K, C_Node_V\x3e\x3e} */\n    this.f_child__java_util_TreeMap_Node;\n    /** @public {boolean} */\n    this.f_isRed__java_util_TreeMap_Node \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Node(Object, Object)'.\n   * @template C_Node_K, C_Node_V\n   * @param {C_Node_K} key\n   * @param {C_Node_V} value\n   * @return {!Node\x3cC_Node_K, C_Node_V\x3e}\n   * @public\n   */\n  static $create__java_lang_Object__java_lang_Object(key, value) {\n    Node.$clinit();\n    let $instance \x3d new Node();\n    $instance.$ctor__java_util_TreeMap_Node__java_lang_Object__java_lang_Object(key, value);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Node(Object, Object)'.\n   * @param {C_Node_K} key\n   * @param {C_Node_V} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_Node__java_lang_Object__java_lang_Object(key, value) {\n    this.$ctor__java_util_TreeMap_Node__java_lang_Object__java_lang_Object__boolean(key, value, true);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Node(Object, Object, boolean)'.\n   * @template C_Node_K, C_Node_V\n   * @param {C_Node_K} key\n   * @param {C_Node_V} value\n   * @param {boolean} isRed\n   * @return {!Node\x3cC_Node_K, C_Node_V\x3e}\n   * @public\n   */\n  static $create__java_lang_Object__java_lang_Object__boolean(key, value, isRed) {\n    Node.$clinit();\n    let $instance \x3d new Node();\n    $instance.$ctor__java_util_TreeMap_Node__java_lang_Object__java_lang_Object__boolean(key, value, isRed);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Node(Object, Object, boolean)'.\n   * @param {C_Node_K} key\n   * @param {C_Node_V} value\n   * @param {boolean} isRed\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_Node__java_lang_Object__java_lang_Object__boolean(key, value, isRed) {\n    this.$ctor__java_util_AbstractMap_SimpleEntry__java_lang_Object__java_lang_Object(key, value);\n    this.$init__java_util_TreeMap_Node();\n    this.f_isRed__java_util_TreeMap_Node \x3d isRed;\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_TreeMap_Node() {\n    this.f_child__java_util_TreeMap_Node \x3d /**@type {!Array\x3cNode\x3e} */ ($Arrays.$create([2], Node));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Node;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Node);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Node.$clinit \x3d function() {};\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    SimpleEntry.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Node, $Util.$makeClassName('java.util.TreeMap$Node'));\n\n\n\n\nexports \x3d Node; \n//# sourceMappingURL\x3dTreeMap$Node.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$Node.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$Node.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.Node');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SimpleEntry \x3d goog.require('java.util.AbstractMap.SimpleEntry');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar Node \x3d goog.require('java.util.TreeMap.Node$impl');\nexports \x3d Node;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$State.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$State.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.State$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\n\n\n/**\n * @template C_State_V\n  */\nclass State extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {boolean} */\n    this.f_done__java_util_TreeMap_State \x3d false;\n    /** @public {boolean} */\n    this.f_found__java_util_TreeMap_State \x3d false;\n    /** @public {boolean} */\n    this.f_matchValue__java_util_TreeMap_State \x3d false;\n    /** @public {C_State_V} */\n    this.f_value__java_util_TreeMap_State;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'State()'.\n   * @template C_State_V\n   * @return {!State\x3cC_State_V\x3e}\n   * @public\n   */\n  static $create__() {\n    State.$clinit();\n    let $instance \x3d new State();\n    $instance.$ctor__java_util_TreeMap_State__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'State()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_State__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"State: mv\x3d\" + this.f_matchValue__java_util_TreeMap_State + \" value\x3d\" + j_l_String.m_valueOf__java_lang_Object(this.f_value__java_util_TreeMap_State) + \" done\x3d\" + this.f_done__java_util_TreeMap_State + \" found\x3d\" + this.f_found__java_util_TreeMap_State;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof State;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, State);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    State.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(State, $Util.$makeClassName('java.util.TreeMap$State'));\n\n\n\n\nexports \x3d State; \n//# sourceMappingURL\x3dTreeMap$State.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$State.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$State.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.State');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\n\n\n// Re-exports the implementation.\nvar State \x3d goog.require('java.util.TreeMap.State$impl');\nexports \x3d State;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap.SubMap$impl');\n\n\nconst AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IllegalArgumentException \x3d goog.forwardDeclare('java.lang.IllegalArgumentException$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet EntrySet \x3d goog.forwardDeclare('java.util.AbstractNavigableMap.EntrySet$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet NavigableMap \x3d goog.forwardDeclare('java.util.NavigableMap$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet TreeMap \x3d goog.forwardDeclare('java.util.TreeMap$impl');\nlet DescendingEntryIterator \x3d goog.forwardDeclare('java.util.TreeMap.DescendingEntryIterator$impl');\nlet EntryIterator \x3d goog.forwardDeclare('java.util.TreeMap.EntryIterator$impl');\nlet SubMapType \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractNavigableMap\x3cC_K, C_V\x3e}\n  */\nclass SubMap extends AbstractNavigableMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {TreeMap\x3cC_K, C_V\x3e} */\n    this.f_$outer_this__java_util_TreeMap_SubMap;\n    /** @public {boolean} */\n    this.f_fromInclusive__java_util_TreeMap_SubMap_ \x3d false;\n    /** @public {C_K} */\n    this.f_fromKey__java_util_TreeMap_SubMap_;\n    /** @public {boolean} */\n    this.f_toInclusive__java_util_TreeMap_SubMap_ \x3d false;\n    /** @public {C_K} */\n    this.f_toKey__java_util_TreeMap_SubMap_;\n    /** @public {SubMapType} */\n    this.f_type__java_util_TreeMap_SubMap_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SubMap(TreeMap, SubMapType, Object, boolean, Object, boolean)'.\n   * @template C_K, C_V\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {SubMapType} type\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {!SubMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive) {\n    SubMap.$clinit();\n    let $instance \x3d new SubMap();\n    $instance.$ctor__java_util_TreeMap_SubMap__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SubMap(TreeMap, SubMapType, Object, boolean, Object, boolean)'.\n   * @param {TreeMap\x3cC_K, C_V\x3e} $outer_this\n   * @param {SubMapType} type\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap_SubMap__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean($outer_this, type, fromKey, fromInclusive, toKey, toInclusive) {\n    this.f_$outer_this__java_util_TreeMap_SubMap \x3d $outer_this;\n    this.$ctor__java_util_AbstractNavigableMap__();\n    switch (type.ordinal()) {\n      case SubMapType.$ordinal$f_Range__java_util_TreeMap_SubMapType: \n        if ($outer_this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(toKey, fromKey) \x3c 0) {\n          throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"subMap: \" + j_l_String.m_valueOf__java_lang_Object(toKey) + \" less than \" + j_l_String.m_valueOf__java_lang_Object(fromKey)));\n        }\n        break;\n      case SubMapType.$ordinal$f_Head__java_util_TreeMap_SubMapType: \n        $outer_this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(toKey, toKey);\n        break;\n      case SubMapType.$ordinal$f_Tail__java_util_TreeMap_SubMapType: \n        $outer_this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(fromKey, fromKey);\n        break;\n      case SubMapType.$ordinal$f_All__java_util_TreeMap_SubMapType: \n        break;\n    }\n    this.f_type__java_util_TreeMap_SubMap_ \x3d type;\n    this.f_fromKey__java_util_TreeMap_SubMap_ \x3d fromKey;\n    this.f_fromInclusive__java_util_TreeMap_SubMap_ \x3d fromInclusive;\n    this.f_toKey__java_util_TreeMap_SubMap_ \x3d toKey;\n    this.f_toInclusive__java_util_TreeMap_SubMap_ \x3d toInclusive;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n    return this.f_$outer_this__java_util_TreeMap_SubMap.m_comparator__();\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n    return /**@type {!EntrySet\x3cC_K, C_V\x3e} */ (EntrySet.$create__java_util_AbstractNavigableMap(this));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object__boolean(toKey, toInclusive) {\n    if (this.f_type__java_util_TreeMap_SubMap_.m_toKeyValid__() \x26\x26 this.f_$outer_this__java_util_TreeMap_SubMap.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(toKey, this.f_toKey__java_util_TreeMap_SubMap_) \x3e 0) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"subMap: \" + j_l_String.m_valueOf__java_lang_Object(toKey) + \" greater than \" + j_l_String.m_valueOf__java_lang_Object(this.f_toKey__java_util_TreeMap_SubMap_)));\n    }\n    if (this.f_type__java_util_TreeMap_SubMap_.m_fromKeyValid__()) {\n      return this.f_$outer_this__java_util_TreeMap_SubMap.m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(this.f_fromKey__java_util_TreeMap_SubMap_, this.f_fromInclusive__java_util_TreeMap_SubMap_, toKey, toInclusive);\n    } else {\n      return this.f_$outer_this__java_util_TreeMap_SubMap.m_headMap__java_lang_Object__boolean(toKey, toInclusive);\n    }\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n    if (!this.m_inRange__java_lang_Object_$p_java_util_TreeMap_SubMap(key)) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(j_l_String.m_valueOf__java_lang_Object(key) + \" outside the range \" + j_l_String.m_valueOf__java_lang_Object(this.f_fromKey__java_util_TreeMap_SubMap_) + \" to \" + j_l_String.m_valueOf__java_lang_Object(this.f_toKey__java_util_TreeMap_SubMap_)));\n    }\n    return this.f_$outer_this__java_util_TreeMap_SubMap.put(key, value);\n  }\n  \n  /**\n   * @override\n   * @param {*} k\n   * @return {C_V}\n   * @public\n   */\n  remove(k) {\n    let key \x3d /**@type {C_K} */ ($Casts.$to(k, j_l_Object));\n    if (!this.m_inRange__java_lang_Object_$p_java_util_TreeMap_SubMap(key)) {\n      return null;\n    }\n    return this.f_$outer_this__java_util_TreeMap_SubMap.remove(key);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    if ($Equality.$same(this.m_getFirstEntry___$pp_java_util(), null)) {\n      return 0;\n    }\n    let count \x3d 0;\n    for (let it \x3d this.m_entryIterator___$pp_java_util(); it.m_hasNext__(); it.m_next__()) {\n      count++;\n    }\n    return count;\n  }\n  \n  /**\n   * @override\n   * @param {C_K} newFromKey\n   * @param {boolean} newFromInclusive\n   * @param {C_K} newToKey\n   * @param {boolean} newToInclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(newFromKey, newFromInclusive, newToKey, newToInclusive) {\n    if (this.f_type__java_util_TreeMap_SubMap_.m_fromKeyValid__() \x26\x26 this.f_$outer_this__java_util_TreeMap_SubMap.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(newFromKey, this.f_fromKey__java_util_TreeMap_SubMap_) \x3c 0) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"subMap: \" + j_l_String.m_valueOf__java_lang_Object(newFromKey) + \" less than \" + j_l_String.m_valueOf__java_lang_Object(this.f_fromKey__java_util_TreeMap_SubMap_)));\n    }\n    if (this.f_type__java_util_TreeMap_SubMap_.m_toKeyValid__() \x26\x26 this.f_$outer_this__java_util_TreeMap_SubMap.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(newToKey, this.f_toKey__java_util_TreeMap_SubMap_) \x3e 0) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"subMap: \" + j_l_String.m_valueOf__java_lang_Object(newToKey) + \" greater than \" + j_l_String.m_valueOf__java_lang_Object(this.f_toKey__java_util_TreeMap_SubMap_)));\n    }\n    return this.f_$outer_this__java_util_TreeMap_SubMap.m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(newFromKey, newFromInclusive, newToKey, newToInclusive);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object__boolean(fromKey, fromInclusive) {\n    if (this.f_type__java_util_TreeMap_SubMap_.m_fromKeyValid__() \x26\x26 this.f_$outer_this__java_util_TreeMap_SubMap.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(fromKey, this.f_fromKey__java_util_TreeMap_SubMap_) \x3c 0) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"subMap: \" + j_l_String.m_valueOf__java_lang_Object(fromKey) + \" less than \" + j_l_String.m_valueOf__java_lang_Object(this.f_fromKey__java_util_TreeMap_SubMap_)));\n    }\n    if (this.f_type__java_util_TreeMap_SubMap_.m_toKeyValid__()) {\n      return this.f_$outer_this__java_util_TreeMap_SubMap.m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(fromKey, fromInclusive, this.f_toKey__java_util_TreeMap_SubMap_, this.f_toInclusive__java_util_TreeMap_SubMap_);\n    } else {\n      return this.f_$outer_this__java_util_TreeMap_SubMap.m_tailMap__java_lang_Object__boolean(fromKey, fromInclusive);\n    }\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_descendingEntryIterator___$pp_java_util() {\n    return /**@type {!DescendingEntryIterator\x3cC_K, C_V\x3e} */ (DescendingEntryIterator.$create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean(this.f_$outer_this__java_util_TreeMap_SubMap, this.f_type__java_util_TreeMap_SubMap_, this.f_fromKey__java_util_TreeMap_SubMap_, this.f_fromInclusive__java_util_TreeMap_SubMap_, this.f_toKey__java_util_TreeMap_SubMap_, this.f_toInclusive__java_util_TreeMap_SubMap_));\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entryIterator___$pp_java_util() {\n    return /**@type {!EntryIterator\x3cC_K, C_V\x3e} */ (EntryIterator.$create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean(this.f_$outer_this__java_util_TreeMap_SubMap, this.f_type__java_util_TreeMap_SubMap_, this.f_fromKey__java_util_TreeMap_SubMap_, this.f_fromInclusive__java_util_TreeMap_SubMap_, this.f_toKey__java_util_TreeMap_SubMap_, this.f_toInclusive__java_util_TreeMap_SubMap_));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(this.f_$outer_this__java_util_TreeMap_SubMap.m_getEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFirstEntry___$pp_java_util() {\n    let /** Entry\x3cC_K, C_V\x3e */ entry;\n    if (this.f_type__java_util_TreeMap_SubMap_.m_fromKeyValid__()) {\n      if (this.f_fromInclusive__java_util_TreeMap_SubMap_) {\n        entry \x3d this.f_$outer_this__java_util_TreeMap_SubMap.m_getCeilingEntry__java_lang_Object_$pp_java_util(this.f_fromKey__java_util_TreeMap_SubMap_);\n      } else {\n        entry \x3d this.f_$outer_this__java_util_TreeMap_SubMap.m_getHigherEntry__java_lang_Object_$pp_java_util(this.f_fromKey__java_util_TreeMap_SubMap_);\n      }\n    } else {\n      entry \x3d this.f_$outer_this__java_util_TreeMap_SubMap.m_getFirstEntry___$pp_java_util();\n    }\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(entry);\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLastEntry___$pp_java_util() {\n    let /** Entry\x3cC_K, C_V\x3e */ entry;\n    if (this.f_type__java_util_TreeMap_SubMap_.m_toKeyValid__()) {\n      if (this.f_toInclusive__java_util_TreeMap_SubMap_) {\n        entry \x3d this.f_$outer_this__java_util_TreeMap_SubMap.m_getFloorEntry__java_lang_Object_$pp_java_util(this.f_toKey__java_util_TreeMap_SubMap_);\n      } else {\n        entry \x3d this.f_$outer_this__java_util_TreeMap_SubMap.m_getLowerEntry__java_lang_Object_$pp_java_util(this.f_toKey__java_util_TreeMap_SubMap_);\n      }\n    } else {\n      entry \x3d this.f_$outer_this__java_util_TreeMap_SubMap.m_getLastEntry___$pp_java_util();\n    }\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(entry);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getCeilingEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(this.f_$outer_this__java_util_TreeMap_SubMap.m_getCeilingEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFloorEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(this.f_$outer_this__java_util_TreeMap_SubMap.m_getFloorEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getHigherEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(this.f_$outer_this__java_util_TreeMap_SubMap.m_getHigherEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLowerEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(this.f_$outer_this__java_util_TreeMap_SubMap.m_getLowerEntry__java_lang_Object_$pp_java_util(key));\n  }\n  \n  /**\n   * @override\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {boolean}\n   * @public\n   */\n  m_removeEntry__java_util_Map_Entry_$pp_java_util(entry) {\n    return this.m_inRange__java_lang_Object_$p_java_util_TreeMap_SubMap(entry.m_getKey__()) \x26\x26 this.f_$outer_this__java_util_TreeMap_SubMap.m_removeEntry__java_util_Map_Entry_$pp_java_util(entry);\n  }\n  \n  /**\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_guardInRange__java_util_Map_Entry_$p_java_util_TreeMap_SubMap(entry) {\n    return !$Equality.$same(entry, null) \x26\x26 this.m_inRange__java_lang_Object_$p_java_util_TreeMap_SubMap(entry.m_getKey__()) ? entry : null;\n  }\n  \n  /**\n   * @param {C_K} key\n   * @return {boolean}\n   * @public\n   */\n  m_inRange__java_lang_Object_$p_java_util_TreeMap_SubMap(key) {\n    return this.f_$outer_this__java_util_TreeMap_SubMap.m_inRange__java_util_TreeMap_SubMapType__java_lang_Object__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(this.f_type__java_util_TreeMap_SubMap_, key, this.f_fromKey__java_util_TreeMap_SubMap_, this.f_fromInclusive__java_util_TreeMap_SubMap_, this.f_toKey__java_util_TreeMap_SubMap_, this.f_toInclusive__java_util_TreeMap_SubMap_);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {C_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SubMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SubMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SubMap.$clinit \x3d function() {};\n    IllegalArgumentException \x3d goog.module.get('java.lang.IllegalArgumentException$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    EntrySet \x3d goog.module.get('java.util.AbstractNavigableMap.EntrySet$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    DescendingEntryIterator \x3d goog.module.get('java.util.TreeMap.DescendingEntryIterator$impl');\n    EntryIterator \x3d goog.module.get('java.util.TreeMap.EntryIterator$impl');\n    SubMapType \x3d goog.module.get('java.util.TreeMap.SubMapType$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    AbstractNavigableMap.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SubMap, $Util.$makeClassName('java.util.TreeMap$SubMap'));\n\n\n\n\nexports \x3d SubMap; \n//# sourceMappingURL\x3dTreeMap$SubMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap$SubMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap$SubMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap.SubMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _EntrySet \x3d goog.require('java.util.AbstractNavigableMap.EntrySet');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _NavigableMap \x3d goog.require('java.util.NavigableMap');\nconst _Set \x3d goog.require('java.util.Set');\nconst _TreeMap \x3d goog.require('java.util.TreeMap');\nconst _DescendingEntryIterator \x3d goog.require('java.util.TreeMap.DescendingEntryIterator');\nconst _EntryIterator \x3d goog.require('java.util.TreeMap.EntryIterator');\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar SubMap \x3d goog.require('java.util.TreeMap.SubMap$impl');\nexports \x3d SubMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.TreeMap$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet RuntimeException \x3d goog.forwardDeclare('java.lang.RuntimeException$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Comparators \x3d goog.forwardDeclare('java.util.Comparators$impl');\nlet Iterator \x3d goog.forwardDeclare('java.util.Iterator$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet Entry \x3d goog.forwardDeclare('java.util.Map.Entry$impl');\nlet NavigableMap \x3d goog.forwardDeclare('java.util.NavigableMap$impl');\nlet Objects \x3d goog.forwardDeclare('java.util.Objects$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet SortedMap \x3d goog.forwardDeclare('java.util.SortedMap$impl');\nlet DescendingEntryIterator \x3d goog.forwardDeclare('java.util.TreeMap.DescendingEntryIterator$impl');\nlet EntryIterator \x3d goog.forwardDeclare('java.util.TreeMap.EntryIterator$impl');\nlet EntrySet \x3d goog.forwardDeclare('java.util.TreeMap.EntrySet$impl');\nlet Node \x3d goog.forwardDeclare('java.util.TreeMap.Node$impl');\nlet State \x3d goog.forwardDeclare('java.util.TreeMap.State$impl');\nlet SubMap \x3d goog.forwardDeclare('java.util.TreeMap.SubMap$impl');\nlet SubMapType \x3d goog.forwardDeclare('java.util.TreeMap.SubMapType$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @template C_K, C_V\n * @extends {AbstractNavigableMap\x3cC_K, C_V\x3e}\n * @implements {Serializable}\n  */\nclass TreeMap extends AbstractNavigableMap {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Comparator\x3c?\x3e} */\n    this.f_cmp__java_util_TreeMap_;\n    /** @public {C_K} */\n    this.f_exposeKeyType__java_util_TreeMap_;\n    /** @public {C_V} */\n    this.f_exposeValueType__java_util_TreeMap_;\n    /** @public {Node\x3cC_K, C_V\x3e} */\n    this.f_root__java_util_TreeMap_;\n    /** @public {number} */\n    this.f_size__java_util_TreeMap_ \x3d 0;\n  }\n  \n  /**\n   * @param {number} child\n   * @return {number}\n   * @public\n   */\n  static m_otherChild__int_$p_java_util_TreeMap(child) {\n    TreeMap.$clinit();\n    $Asserts.$assert((child \x3d\x3d 0 || child \x3d\x3d 1));\n    return 1 - child;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'TreeMap()'.\n   * @template C_K, C_V\n   * @return {!TreeMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__() {\n    TreeMap.$clinit();\n    let $instance \x3d new TreeMap();\n    $instance.$ctor__java_util_TreeMap__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'TreeMap()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap__() {\n    this.$ctor__java_util_TreeMap__java_util_Comparator(/**@type {Comparator\x3c*\x3e} */ ($Casts.$to(null, Comparator)));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'TreeMap(Comparator)'.\n   * @template C_K, C_V\n   * @param {Comparator\x3c?\x3e} c\n   * @return {!TreeMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_Comparator(c) {\n    TreeMap.$clinit();\n    let $instance \x3d new TreeMap();\n    $instance.$ctor__java_util_TreeMap__java_util_Comparator(c);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'TreeMap(Comparator)'.\n   * @param {Comparator\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap__java_util_Comparator(c) {\n    this.$ctor__java_util_AbstractNavigableMap__();\n    this.$init__java_util_TreeMap();\n    this.f_root__java_util_TreeMap_ \x3d null;\n    this.f_cmp__java_util_TreeMap_ \x3d /**@type {Comparator\x3c?\x3e} */ (Comparators.m_nullToNaturalOrder__java_util_Comparator_$pp_java_util(c));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'TreeMap(Map)'.\n   * @template C_K, C_V\n   * @param {Map\x3c?, ?\x3e} map\n   * @return {!TreeMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_Map(map) {\n    TreeMap.$clinit();\n    let $instance \x3d new TreeMap();\n    $instance.$ctor__java_util_TreeMap__java_util_Map(map);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'TreeMap(Map)'.\n   * @param {Map\x3c?, ?\x3e} map\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap__java_util_Map(map) {\n    this.$ctor__java_util_TreeMap__();\n    this.putAll(map);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'TreeMap(SortedMap)'.\n   * @template C_K, C_V\n   * @param {SortedMap\x3cC_K, ?\x3e} map\n   * @return {!TreeMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  static $create__java_util_SortedMap(map) {\n    TreeMap.$clinit();\n    let $instance \x3d new TreeMap();\n    $instance.$ctor__java_util_TreeMap__java_util_SortedMap(map);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'TreeMap(SortedMap)'.\n   * @param {SortedMap\x3cC_K, ?\x3e} map\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_TreeMap__java_util_SortedMap(map) {\n    this.$ctor__java_util_TreeMap__java_util_Comparator(/**@type {SortedMap\x3cC_K, *\x3e} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(map), SortedMap)).m_comparator__());\n    this.putAll(map);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  clear() {\n    this.f_root__java_util_TreeMap_ \x3d null;\n    this.f_size__java_util_TreeMap_ \x3d 0;\n  }\n  \n  /**\n   * @override\n   * @return {Comparator\x3c?\x3e}\n   * @public\n   */\n  m_comparator__() {\n    return /**@type {Comparator\x3c?\x3e} */ (Comparators.m_naturalOrderToNull__java_util_Comparator_$pp_java_util(this.f_cmp__java_util_TreeMap_));\n  }\n  \n  /**\n   * @override\n   * @return {Set\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entrySet__() {\n    return /**@type {!EntrySet\x3cC_K, C_V\x3e} */ (EntrySet.$create__java_util_TreeMap(this));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} toKey\n   * @param {boolean} inclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_headMap__java_lang_Object__boolean(toKey, inclusive) {\n    return /**@type {!SubMap\x3cC_K, C_V\x3e} */ (SubMap.$create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean(this, SubMapType.f_Head__java_util_TreeMap_SubMapType, null, false, toKey, inclusive));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @param {C_V} value\n   * @return {C_V}\n   * @public\n   */\n  put(key, value) {\n    let node \x3d /**@type {!Node\x3cC_K, C_V\x3e} */ (Node.$create__java_lang_Object__java_lang_Object(key, value));\n    let state \x3d /**@type {!State\x3cC_V\x3e} */ (State.$create__());\n    this.f_root__java_util_TreeMap_ \x3d this.m_insert__java_util_TreeMap_Node__java_util_TreeMap_Node__java_util_TreeMap_State_$p_java_util_TreeMap(this.f_root__java_util_TreeMap_, node, state);\n    if (!state.f_found__java_util_TreeMap_State) {\n      ++this.f_size__java_util_TreeMap_;\n    }\n    this.f_root__java_util_TreeMap_.f_isRed__java_util_TreeMap_Node \x3d false;\n    return state.f_value__java_util_TreeMap_State;\n  }\n  \n  /**\n   * @override\n   * @param {*} k\n   * @return {C_V}\n   * @public\n   */\n  remove(k) {\n    let key \x3d /**@type {C_K} */ ($Casts.$to(k, j_l_Object));\n    let state \x3d /**@type {!State\x3cC_V\x3e} */ (State.$create__());\n    this.m_removeWithState__java_lang_Object__java_util_TreeMap_State_$p_java_util_TreeMap(key, state);\n    return state.f_value__java_util_TreeMap_State;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  size() {\n    return this.f_size__java_util_TreeMap_;\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_subMap__java_lang_Object__boolean__java_lang_Object__boolean(fromKey, fromInclusive, toKey, toInclusive) {\n    return /**@type {!SubMap\x3cC_K, C_V\x3e} */ (SubMap.$create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean(this, SubMapType.f_Range__java_util_TreeMap_SubMapType, fromKey, fromInclusive, toKey, toInclusive));\n  }\n  \n  /**\n   * @override\n   * @param {C_K} fromKey\n   * @param {boolean} inclusive\n   * @return {NavigableMap\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_tailMap__java_lang_Object__boolean(fromKey, inclusive) {\n    return /**@type {!SubMap\x3cC_K, C_V\x3e} */ (SubMap.$create__java_util_TreeMap__java_util_TreeMap_SubMapType__java_lang_Object__boolean__java_lang_Object__boolean(this, SubMapType.f_Tail__java_util_TreeMap_SubMapType, fromKey, inclusive, null, false));\n  }\n  \n  /**\n   * @param {C_K} key\n   * @param {boolean} inclusive\n   * @return {Node\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getNodeAfter__java_lang_Object__boolean_$p_java_util_TreeMap(key, inclusive) {\n    let foundNode \x3d null;\n    let node \x3d this.f_root__java_util_TreeMap_;\n    while (!$Equality.$same(node, null)) {\n      let c \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(key, node.m_getKey__());\n      if (inclusive \x26\x26 c \x3d\x3d 0) {\n        return node;\n      }\n      if (c \x3e\x3d 0) {\n        node \x3d node.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_];\n      } else {\n        foundNode \x3d node;\n        node \x3d node.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_];\n      }\n    }\n    return foundNode;\n  }\n  \n  /**\n   * @param {C_K} key\n   * @param {boolean} inclusive\n   * @return {Node\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getNodeBefore__java_lang_Object__boolean_$p_java_util_TreeMap(key, inclusive) {\n    let foundNode \x3d null;\n    let node \x3d this.f_root__java_util_TreeMap_;\n    while (!$Equality.$same(node, null)) {\n      let c \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(key, node.m_getKey__());\n      if (inclusive \x26\x26 c \x3d\x3d 0) {\n        return node;\n      }\n      if (c \x3c\x3d 0) {\n        node \x3d node.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_];\n      } else {\n        foundNode \x3d node;\n        node \x3d node.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_];\n      }\n    }\n    return foundNode;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_assertCorrectness___$pp_java_util() {\n    this.m_assertCorrectness__java_util_TreeMap_Node__boolean_$p_java_util_TreeMap(this.f_root__java_util_TreeMap_, true);\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_descendingEntryIterator___$pp_java_util() {\n    return /**@type {!DescendingEntryIterator\x3cC_K, C_V\x3e} */ (DescendingEntryIterator.$create__java_util_TreeMap(this));\n  }\n  \n  /**\n   * @override\n   * @return {Iterator\x3cEntry\x3cC_K, C_V\x3e\x3e}\n   * @public\n   */\n  m_entryIterator___$pp_java_util() {\n    return /**@type {!EntryIterator\x3cC_K, C_V\x3e} */ (EntryIterator.$create__java_util_TreeMap(this));\n  }\n  \n  /**\n   * @param {Node\x3cC_K, C_V\x3e} tree\n   * @param {boolean} isRed\n   * @return {number}\n   * @public\n   */\n  m_assertCorrectness__java_util_TreeMap_Node__boolean_$p_java_util_TreeMap(tree, isRed) {\n    if ($Equality.$same(tree, null)) {\n      return 0;\n    }\n    if (isRed \x26\x26 tree.f_isRed__java_util_TreeMap_Node) {\n      throw $Exceptions.toJs(RuntimeException.$create__java_lang_String(\"Two red nodes adjacent\"));\n    }\n    let leftNode \x3d tree.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_];\n    if (!$Equality.$same(leftNode, null) \x26\x26 this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(leftNode.m_getKey__(), tree.m_getKey__()) \x3e 0) {\n      throw $Exceptions.toJs(RuntimeException.$create__java_lang_String(\"Left child \" + j_l_String.m_valueOf__java_lang_Object(leftNode) + \" larger than \" + j_l_String.m_valueOf__java_lang_Object(tree)));\n    }\n    let rightNode \x3d tree.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_];\n    if (!$Equality.$same(rightNode, null) \x26\x26 this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(rightNode.m_getKey__(), tree.m_getKey__()) \x3c 0) {\n      throw $Exceptions.toJs(RuntimeException.$create__java_lang_String(\"Right child \" + j_l_String.m_valueOf__java_lang_Object(rightNode) + \" smaller than \" + j_l_String.m_valueOf__java_lang_Object(tree)));\n    }\n    let leftHeight \x3d this.m_assertCorrectness__java_util_TreeMap_Node__boolean_$p_java_util_TreeMap(leftNode, tree.f_isRed__java_util_TreeMap_Node);\n    let rightHeight \x3d this.m_assertCorrectness__java_util_TreeMap_Node__boolean_$p_java_util_TreeMap(rightNode, tree.f_isRed__java_util_TreeMap_Node);\n    if (leftHeight !\x3d 0 \x26\x26 rightHeight !\x3d 0 \x26\x26 leftHeight !\x3d rightHeight) {\n      throw $Exceptions.toJs(RuntimeException.$create__java_lang_String(\"Black heights don't match\"));\n    }\n    return tree.f_isRed__java_util_TreeMap_Node ? leftHeight : leftHeight + 1;\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getEntry__java_lang_Object_$pp_java_util(key) {\n    let tree \x3d this.f_root__java_util_TreeMap_;\n    while (!$Equality.$same(tree, null)) {\n      let c \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(key, tree.m_getKey__());\n      if (c \x3d\x3d 0) {\n        return tree;\n      }\n      let childNum \x3d c \x3c 0 ? TreeMap.f_LEFT__java_util_TreeMap_ : TreeMap.f_RIGHT__java_util_TreeMap_;\n      tree \x3d tree.f_child__java_util_TreeMap_Node[childNum];\n    }\n    return null;\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFirstEntry___$pp_java_util() {\n    if ($Equality.$same(this.f_root__java_util_TreeMap_, null)) {\n      return null;\n    }\n    let node \x3d this.f_root__java_util_TreeMap_;\n    let /** Node\x3cC_K, C_V\x3e */ nextNode;\n    while (!$Equality.$same((nextNode \x3d node.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_]), null)) {\n      node \x3d nextNode;\n    }\n    return node;\n  }\n  \n  /**\n   * @override\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLastEntry___$pp_java_util() {\n    if ($Equality.$same(this.f_root__java_util_TreeMap_, null)) {\n      return null;\n    }\n    let node \x3d this.f_root__java_util_TreeMap_;\n    let /** Node\x3cC_K, C_V\x3e */ nextNode;\n    while (!$Equality.$same((nextNode \x3d node.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_]), null)) {\n      node \x3d nextNode;\n    }\n    return node;\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getCeilingEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_getNodeAfter__java_lang_Object__boolean_$p_java_util_TreeMap(key, true);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getFloorEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_getNodeBefore__java_lang_Object__boolean_$p_java_util_TreeMap(key, true);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getHigherEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_getNodeAfter__java_lang_Object__boolean_$p_java_util_TreeMap(key, false);\n  }\n  \n  /**\n   * @override\n   * @param {C_K} key\n   * @return {Entry\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_getLowerEntry__java_lang_Object_$pp_java_util(key) {\n    return this.m_getNodeBefore__java_lang_Object__boolean_$p_java_util_TreeMap(key, false);\n  }\n  \n  /**\n   * @override\n   * @param {Entry\x3cC_K, C_V\x3e} entry\n   * @return {boolean}\n   * @public\n   */\n  m_removeEntry__java_util_Map_Entry_$pp_java_util(entry) {\n    let state \x3d /**@type {!State\x3cC_V\x3e} */ (State.$create__());\n    state.f_matchValue__java_util_TreeMap_State \x3d true;\n    state.f_value__java_util_TreeMap_State \x3d entry.m_getValue__();\n    return this.m_removeWithState__java_lang_Object__java_util_TreeMap_State_$p_java_util_TreeMap(entry.m_getKey__(), state);\n  }\n  \n  /**\n   * @param {List\x3cEntry\x3cC_K, C_V\x3e\x3e} list\n   * @param {SubMapType} type\n   * @param {Node\x3cC_K, C_V\x3e} current\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {void}\n   * @public\n   */\n  m_inOrderAdd__java_util_List__java_util_TreeMap_SubMapType__java_util_TreeMap_Node__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(list, type, current, fromKey, fromInclusive, toKey, toInclusive) {\n    if ($Equality.$same(current, null)) {\n      return;\n    }\n    let leftNode \x3d current.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_];\n    if (!$Equality.$same(leftNode, null)) {\n      this.m_inOrderAdd__java_util_List__java_util_TreeMap_SubMapType__java_util_TreeMap_Node__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(list, type, leftNode, fromKey, fromInclusive, toKey, toInclusive);\n    }\n    if (this.m_inRange__java_util_TreeMap_SubMapType__java_lang_Object__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(type, current.m_getKey__(), fromKey, fromInclusive, toKey, toInclusive)) {\n      list.add(current);\n    }\n    let rightNode \x3d current.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_];\n    if (!$Equality.$same(rightNode, null)) {\n      this.m_inOrderAdd__java_util_List__java_util_TreeMap_SubMapType__java_util_TreeMap_Node__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(list, type, rightNode, fromKey, fromInclusive, toKey, toInclusive);\n    }\n  }\n  \n  /**\n   * @param {SubMapType} type\n   * @param {C_K} key\n   * @param {C_K} fromKey\n   * @param {boolean} fromInclusive\n   * @param {C_K} toKey\n   * @param {boolean} toInclusive\n   * @return {boolean}\n   * @public\n   */\n  m_inRange__java_util_TreeMap_SubMapType__java_lang_Object__java_lang_Object__boolean__java_lang_Object__boolean_$p_java_util_TreeMap(type, key, fromKey, fromInclusive, toKey, toInclusive) {\n    if (type.m_fromKeyValid__() \x26\x26 this.m_smaller__java_lang_Object__java_lang_Object__boolean_$p_java_util_TreeMap(key, fromKey, !fromInclusive)) {\n      return false;\n    }\n    if (type.m_toKeyValid__() \x26\x26 this.m_larger__java_lang_Object__java_lang_Object__boolean_$p_java_util_TreeMap(key, toKey, !toInclusive)) {\n      return false;\n    }\n    return true;\n  }\n  \n  /**\n   * @param {Node\x3cC_K, C_V\x3e} tree\n   * @param {Node\x3cC_K, C_V\x3e} newNode\n   * @param {State\x3cC_V\x3e} state\n   * @return {Node\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_insert__java_util_TreeMap_Node__java_util_TreeMap_Node__java_util_TreeMap_State_$p_java_util_TreeMap(tree, newNode, state) {\n    if ($Equality.$same(tree, null)) {\n      return newNode;\n    } else {\n      let c \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(newNode.m_getKey__(), tree.m_getKey__());\n      if (c \x3d\x3d 0) {\n        state.f_value__java_util_TreeMap_State \x3d tree.m_setValue__java_lang_Object(newNode.m_getValue__());\n        state.f_found__java_util_TreeMap_State \x3d true;\n        return tree;\n      }\n      let childNum \x3d c \x3c 0 ? TreeMap.f_LEFT__java_util_TreeMap_ : TreeMap.f_RIGHT__java_util_TreeMap_;\n      $Arrays.$set(tree.f_child__java_util_TreeMap_Node, childNum, this.m_insert__java_util_TreeMap_Node__java_util_TreeMap_Node__java_util_TreeMap_State_$p_java_util_TreeMap(tree.f_child__java_util_TreeMap_Node[childNum], newNode, state));\n      if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(tree.f_child__java_util_TreeMap_Node[childNum])) {\n        if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(tree.f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(childNum)])) {\n          tree.f_isRed__java_util_TreeMap_Node \x3d true;\n          tree.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_].f_isRed__java_util_TreeMap_Node \x3d false;\n          tree.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_].f_isRed__java_util_TreeMap_Node \x3d false;\n        } else {\n          if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(tree.f_child__java_util_TreeMap_Node[childNum].f_child__java_util_TreeMap_Node[childNum])) {\n            tree \x3d this.m_rotateSingle__java_util_TreeMap_Node__int_$p_java_util_TreeMap(tree, TreeMap.m_otherChild__int_$p_java_util_TreeMap(childNum));\n          } else if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(tree.f_child__java_util_TreeMap_Node[childNum].f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(childNum)])) {\n            tree \x3d this.m_rotateDouble__java_util_TreeMap_Node__int_$p_java_util_TreeMap(tree, TreeMap.m_otherChild__int_$p_java_util_TreeMap(childNum));\n          }\n        }\n      }\n    }\n    return tree;\n  }\n  \n  /**\n   * @param {Node\x3cC_K, C_V\x3e} node\n   * @return {boolean}\n   * @public\n   */\n  m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(node) {\n    return !$Equality.$same(node, null) \x26\x26 node.f_isRed__java_util_TreeMap_Node;\n  }\n  \n  /**\n   * @param {C_K} a\n   * @param {C_K} b\n   * @param {boolean} orEqual\n   * @return {boolean}\n   * @public\n   */\n  m_larger__java_lang_Object__java_lang_Object__boolean_$p_java_util_TreeMap(a, b, orEqual) {\n    let compare \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(a, b);\n    return compare \x3e 0 || (orEqual \x26\x26 compare \x3d\x3d 0);\n  }\n  \n  /**\n   * @param {C_K} a\n   * @param {C_K} b\n   * @param {boolean} orEqual\n   * @return {boolean}\n   * @public\n   */\n  m_smaller__java_lang_Object__java_lang_Object__boolean_$p_java_util_TreeMap(a, b, orEqual) {\n    let compare \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(a, b);\n    return compare \x3c 0 || (orEqual \x26\x26 compare \x3d\x3d 0);\n  }\n  \n  /**\n   * @param {C_K} key\n   * @param {State\x3cC_V\x3e} state\n   * @return {boolean}\n   * @public\n   */\n  m_removeWithState__java_lang_Object__java_util_TreeMap_State_$p_java_util_TreeMap(key, state) {\n    if ($Equality.$same(this.f_root__java_util_TreeMap_, null)) {\n      return false;\n    }\n    let found \x3d null;\n    let parent \x3d null;\n    let head \x3d /**@type {!Node\x3cC_K, C_V\x3e} */ (Node.$create__java_lang_Object__java_lang_Object(null, null));\n    let dir \x3d TreeMap.f_RIGHT__java_util_TreeMap_;\n    $Arrays.$set(head.f_child__java_util_TreeMap_Node, TreeMap.f_RIGHT__java_util_TreeMap_, this.f_root__java_util_TreeMap_);\n    let node \x3d head;\n    while (!$Equality.$same(node.f_child__java_util_TreeMap_Node[dir], null)) {\n      let last \x3d dir;\n      let grandparent \x3d parent;\n      parent \x3d node;\n      node \x3d node.f_child__java_util_TreeMap_Node[dir];\n      let c \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(key, node.m_getKey__());\n      dir \x3d c \x3c 0 ? TreeMap.f_LEFT__java_util_TreeMap_ : TreeMap.f_RIGHT__java_util_TreeMap_;\n      if (c \x3d\x3d 0 \x26\x26 (!state.f_matchValue__java_util_TreeMap_State || Objects.m_equals__java_lang_Object__java_lang_Object(node.m_getValue__(), state.f_value__java_util_TreeMap_State))) {\n        found \x3d node;\n      }\n      if (!this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(node) \x26\x26 !this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(node.f_child__java_util_TreeMap_Node[dir])) {\n        if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(node.f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(dir)])) {\n          parent \x3d $Arrays.$set(parent.f_child__java_util_TreeMap_Node, last, this.m_rotateSingle__java_util_TreeMap_Node__int_$p_java_util_TreeMap(node, dir));\n        } else if (!this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(node.f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(dir)])) {\n          let sibling \x3d parent.f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(last)];\n          if (!$Equality.$same(sibling, null)) {\n            if (!this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(sibling.f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(last)]) \x26\x26 !this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(sibling.f_child__java_util_TreeMap_Node[last])) {\n              parent.f_isRed__java_util_TreeMap_Node \x3d false;\n              sibling.f_isRed__java_util_TreeMap_Node \x3d true;\n              node.f_isRed__java_util_TreeMap_Node \x3d true;\n            } else {\n              $Asserts.$assert(!$Equality.$same(grandparent, null));\n              let dir2 \x3d $Equality.$same(grandparent.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_], parent) ? TreeMap.f_RIGHT__java_util_TreeMap_ : TreeMap.f_LEFT__java_util_TreeMap_;\n              if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(sibling.f_child__java_util_TreeMap_Node[last])) {\n                $Arrays.$set(grandparent.f_child__java_util_TreeMap_Node, dir2, this.m_rotateDouble__java_util_TreeMap_Node__int_$p_java_util_TreeMap(parent, last));\n              } else if (this.m_isRed__java_util_TreeMap_Node_$p_java_util_TreeMap(sibling.f_child__java_util_TreeMap_Node[TreeMap.m_otherChild__int_$p_java_util_TreeMap(last)])) {\n                $Arrays.$set(grandparent.f_child__java_util_TreeMap_Node, dir2, this.m_rotateSingle__java_util_TreeMap_Node__int_$p_java_util_TreeMap(parent, last));\n              }\n              node.f_isRed__java_util_TreeMap_Node \x3d grandparent.f_child__java_util_TreeMap_Node[dir2].f_isRed__java_util_TreeMap_Node \x3d true;\n              grandparent.f_child__java_util_TreeMap_Node[dir2].f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_].f_isRed__java_util_TreeMap_Node \x3d false;\n              grandparent.f_child__java_util_TreeMap_Node[dir2].f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_].f_isRed__java_util_TreeMap_Node \x3d false;\n            }\n          }\n        }\n      }\n    }\n    if (!$Equality.$same(found, null)) {\n      state.f_found__java_util_TreeMap_State \x3d true;\n      state.f_value__java_util_TreeMap_State \x3d found.m_getValue__();\n      if (!$Equality.$same(node, found)) {\n        let newNode \x3d /**@type {!Node\x3cC_K, C_V\x3e} */ (Node.$create__java_lang_Object__java_lang_Object(node.m_getKey__(), node.m_getValue__()));\n        this.m_replaceNode__java_util_TreeMap_Node__java_util_TreeMap_Node__java_util_TreeMap_Node_$p_java_util_TreeMap(head, found, newNode);\n        if ($Equality.$same(parent, found)) {\n          parent \x3d newNode;\n        }\n      }\n      $Arrays.$set(parent.f_child__java_util_TreeMap_Node, $Equality.$same(parent.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_], node) ? TreeMap.f_RIGHT__java_util_TreeMap_ : TreeMap.f_LEFT__java_util_TreeMap_, node.f_child__java_util_TreeMap_Node[$Equality.$same(node.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_], null) ? TreeMap.f_RIGHT__java_util_TreeMap_ : TreeMap.f_LEFT__java_util_TreeMap_]);\n      this.f_size__java_util_TreeMap_--;\n    }\n    this.f_root__java_util_TreeMap_ \x3d head.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_];\n    if (!$Equality.$same(this.f_root__java_util_TreeMap_, null)) {\n      this.f_root__java_util_TreeMap_.f_isRed__java_util_TreeMap_Node \x3d false;\n    }\n    return state.f_found__java_util_TreeMap_State;\n  }\n  \n  /**\n   * @param {Node\x3cC_K, C_V\x3e} head\n   * @param {Node\x3cC_K, C_V\x3e} node\n   * @param {Node\x3cC_K, C_V\x3e} newNode\n   * @return {void}\n   * @public\n   */\n  m_replaceNode__java_util_TreeMap_Node__java_util_TreeMap_Node__java_util_TreeMap_Node_$p_java_util_TreeMap(head, node, newNode) {\n    let parent \x3d head;\n    let direction \x3d ($Equality.$same(parent.m_getKey__(), null) || this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(node.m_getKey__(), parent.m_getKey__()) \x3e 0) ? TreeMap.f_RIGHT__java_util_TreeMap_ : TreeMap.f_LEFT__java_util_TreeMap_;\n    while (!$Equality.$same(parent.f_child__java_util_TreeMap_Node[direction], node)) {\n      parent \x3d parent.f_child__java_util_TreeMap_Node[direction];\n      $Asserts.$assert(!$Equality.$same(parent, null));\n      direction \x3d this.f_cmp__java_util_TreeMap_.m_compare__java_lang_Object__java_lang_Object(node.m_getKey__(), parent.m_getKey__()) \x3e 0 ? TreeMap.f_RIGHT__java_util_TreeMap_ : TreeMap.f_LEFT__java_util_TreeMap_;\n    }\n    $Arrays.$set(parent.f_child__java_util_TreeMap_Node, direction, newNode);\n    newNode.f_isRed__java_util_TreeMap_Node \x3d node.f_isRed__java_util_TreeMap_Node;\n    $Arrays.$set(newNode.f_child__java_util_TreeMap_Node, TreeMap.f_LEFT__java_util_TreeMap_, node.f_child__java_util_TreeMap_Node[TreeMap.f_LEFT__java_util_TreeMap_]);\n    $Arrays.$set(newNode.f_child__java_util_TreeMap_Node, TreeMap.f_RIGHT__java_util_TreeMap_, node.f_child__java_util_TreeMap_Node[TreeMap.f_RIGHT__java_util_TreeMap_]);\n    $Arrays.$set(node.f_child__java_util_TreeMap_Node, TreeMap.f_LEFT__java_util_TreeMap_, null);\n    $Arrays.$set(node.f_child__java_util_TreeMap_Node, TreeMap.f_RIGHT__java_util_TreeMap_, null);\n  }\n  \n  /**\n   * @param {Node\x3cC_K, C_V\x3e} tree\n   * @param {number} rotateDirection\n   * @return {Node\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_rotateDouble__java_util_TreeMap_Node__int_$p_java_util_TreeMap(tree, rotateDirection) {\n    let otherChildDir \x3d TreeMap.m_otherChild__int_$p_java_util_TreeMap(rotateDirection);\n    $Arrays.$set(tree.f_child__java_util_TreeMap_Node, otherChildDir, this.m_rotateSingle__java_util_TreeMap_Node__int_$p_java_util_TreeMap(tree.f_child__java_util_TreeMap_Node[otherChildDir], otherChildDir));\n    return this.m_rotateSingle__java_util_TreeMap_Node__int_$p_java_util_TreeMap(tree, rotateDirection);\n  }\n  \n  /**\n   * @param {Node\x3cC_K, C_V\x3e} tree\n   * @param {number} rotateDirection\n   * @return {Node\x3cC_K, C_V\x3e}\n   * @public\n   */\n  m_rotateSingle__java_util_TreeMap_Node__int_$p_java_util_TreeMap(tree, rotateDirection) {\n    let otherChildDir \x3d TreeMap.m_otherChild__int_$p_java_util_TreeMap(rotateDirection);\n    let save \x3d tree.f_child__java_util_TreeMap_Node[otherChildDir];\n    $Arrays.$set(tree.f_child__java_util_TreeMap_Node, otherChildDir, save.f_child__java_util_TreeMap_Node[rotateDirection]);\n    $Arrays.$set(save.f_child__java_util_TreeMap_Node, rotateDirection, tree);\n    tree.f_isRed__java_util_TreeMap_Node \x3d true;\n    save.f_isRed__java_util_TreeMap_Node \x3d false;\n    return save;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_compute__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_compute__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {j_u_function_Function\x3c?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfAbsent__java_lang_Object__java_util_function_Function(arg0, arg1) {\n    return Map.m_computeIfAbsent__$default__java_util_Map__java_lang_Object__java_util_function_Function(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_computeIfPresent__java_lang_Object__java_util_function_BiFunction(arg0, arg1) {\n    return Map.m_computeIfPresent__$default__java_util_Map__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiConsumer\x3c?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_BiConsumer(arg0) {\n    Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  getOrDefault(arg0, arg1) {\n    return Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {*} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_getOrDefault__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.getOrDefault(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg2\n   * @return {C_V}\n   * @public\n   */\n  m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction(arg0, arg1, arg2) {\n    return Map.m_merge__$default__java_util_Map__java_lang_Object__java_lang_Object__java_util_function_BiFunction(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  putIfAbsent(arg0, arg1) {\n    return Map.m_putIfAbsent__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_putIfAbsent__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.putIfAbsent(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {*} arg0\n   * @param {*} arg1\n   * @return {boolean}\n   * @public\n   */\n  m_remove__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return Map.m_remove__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  replace(arg0, arg1) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object(this, arg0, arg1);\n  }\n  \n  /**\n   * Bridge to JsMethod.\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @return {C_V}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object(arg0, arg1) {\n    return this.replace(arg0, arg1);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {C_K} arg0\n   * @param {C_V} arg1\n   * @param {C_V} arg2\n   * @return {boolean}\n   * @public\n   */\n  m_replace__java_lang_Object__java_lang_Object__java_lang_Object(arg0, arg1, arg2) {\n    return Map.m_replace__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1, arg2);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {BiFunction\x3c?, ?, ?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_replaceAll__java_util_function_BiFunction(arg0) {\n    Map.m_replaceAll__$default__java_util_Map__java_util_function_BiFunction(this, arg0);\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__java_util_TreeMap() {\n    this.f_size__java_util_TreeMap_ \x3d 0;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof TreeMap;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, TreeMap);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    TreeMap.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    RuntimeException \x3d goog.module.get('java.lang.RuntimeException$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Comparator \x3d goog.module.get('java.util.Comparator$impl');\n    Comparators \x3d goog.module.get('java.util.Comparators$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    Objects \x3d goog.module.get('java.util.Objects$impl');\n    SortedMap \x3d goog.module.get('java.util.SortedMap$impl');\n    DescendingEntryIterator \x3d goog.module.get('java.util.TreeMap.DescendingEntryIterator$impl');\n    EntryIterator \x3d goog.module.get('java.util.TreeMap.EntryIterator$impl');\n    EntrySet \x3d goog.module.get('java.util.TreeMap.EntrySet$impl');\n    Node \x3d goog.module.get('java.util.TreeMap.Node$impl');\n    State \x3d goog.module.get('java.util.TreeMap.State$impl');\n    SubMap \x3d goog.module.get('java.util.TreeMap.SubMap$impl');\n    SubMapType \x3d goog.module.get('java.util.TreeMap.SubMapType$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    AbstractNavigableMap.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(TreeMap, $Util.$makeClassName('java.util.TreeMap'));\n\n\n/** @public {number} @const */\nTreeMap.f_LEFT__java_util_TreeMap_ \x3d 0;\n\n\n/** @public {number} @const */\nTreeMap.f_RIGHT__java_util_TreeMap_ \x3d 1;\n\n\nSerializable.$markImplementor(TreeMap);\n\n\nexports \x3d TreeMap; \n//# sourceMappingURL\x3dTreeMap.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/TreeMap.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.TreeMap.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.TreeMap');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _AbstractNavigableMap \x3d goog.require('java.util.AbstractNavigableMap');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Comparators \x3d goog.require('java.util.Comparators');\nconst _Iterator \x3d goog.require('java.util.Iterator');\nconst _List \x3d goog.require('java.util.List');\nconst _Map \x3d goog.require('java.util.Map');\nconst _Entry \x3d goog.require('java.util.Map.Entry');\nconst _NavigableMap \x3d goog.require('java.util.NavigableMap');\nconst _Objects \x3d goog.require('java.util.Objects');\nconst _Set \x3d goog.require('java.util.Set');\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _DescendingEntryIterator \x3d goog.require('java.util.TreeMap.DescendingEntryIterator');\nconst _EntryIterator \x3d goog.require('java.util.TreeMap.EntryIterator');\nconst _EntrySet \x3d goog.require('java.util.TreeMap.EntrySet');\nconst _Node \x3d goog.require('java.util.TreeMap.Node');\nconst _State \x3d goog.require('java.util.TreeMap.State');\nconst _SubMap \x3d goog.require('java.util.TreeMap.SubMap');\nconst _SubMapType \x3d goog.require('java.util.TreeMap.SubMapType');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar TreeMap \x3d goog.require('java.util.TreeMap$impl');\nexports \x3d TreeMap;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/Charset.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.Charset.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.nio.charset.Charset$impl');\n\n\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet AvailableCharsets \x3d goog.forwardDeclare('java.nio.charset.Charset.AvailableCharsets$impl');\nlet IllegalCharsetNameException \x3d goog.forwardDeclare('java.nio.charset.IllegalCharsetNameException$impl');\nlet UnsupportedCharsetException \x3d goog.forwardDeclare('java.nio.charset.UnsupportedCharsetException$impl');\nlet SortedMap \x3d goog.forwardDeclare('java.util.SortedMap$impl');\nlet EmulatedCharset \x3d goog.forwardDeclare('javaemul.internal.EmulatedCharset$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\n/**\n * @abstract\n * @implements {Comparable\x3cCharset\x3e}\n  */\nclass Charset extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_name__java_nio_charset_Charset_;\n  }\n  \n  /**\n   * @return {SortedMap\x3c?string, Charset\x3e}\n   * @public\n   */\n  static m_availableCharsets__() {\n    Charset.$clinit();\n    return AvailableCharsets.f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_;\n  }\n  \n  /**\n   * @param {?string} charsetName\n   * @return {Charset}\n   * @public\n   */\n  static m_forName__java_lang_String(charsetName) {\n    Charset.$clinit();\n    $InternalPreconditions.m_checkArgument__boolean__java_lang_Object(!$Equality.$same(charsetName, null), \"Null charset name\");\n    charsetName \x3d j_l_String.m_toUpperCase__java_lang_String(charsetName);\n    if (j_l_String.m_equals__java_lang_String__java_lang_Object(EmulatedCharset.f_ISO_8859_1__javaemul_internal_EmulatedCharset.m_name__(), charsetName)) {\n      return EmulatedCharset.f_ISO_8859_1__javaemul_internal_EmulatedCharset;\n    } else if (j_l_String.m_equals__java_lang_String__java_lang_Object(EmulatedCharset.f_ISO_LATIN_1__javaemul_internal_EmulatedCharset.m_name__(), charsetName)) {\n      return EmulatedCharset.f_ISO_LATIN_1__javaemul_internal_EmulatedCharset;\n    } else if (j_l_String.m_equals__java_lang_String__java_lang_Object(EmulatedCharset.f_UTF_8__javaemul_internal_EmulatedCharset.m_name__(), charsetName)) {\n      return EmulatedCharset.f_UTF_8__javaemul_internal_EmulatedCharset;\n    }\n    if (new RegExp(\"^[A-Za-z0-9][\\\\w-:\\\\.\\\\+]*$\").test(charsetName)) {\n      throw $Exceptions.toJs(UnsupportedCharsetException.$create__java_lang_String(charsetName));\n    } else {\n      throw $Exceptions.toJs(IllegalCharsetNameException.$create__java_lang_String(charsetName));\n    }\n  }\n  \n  /**\n   * Initialization from constructor 'Charset(String, String[])'.\n   * @param {?string} name\n   * @param {Array\x3c?string\x3e} aliasesIgnored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_nio_charset_Charset__java_lang_String__arrayOf_java_lang_String(name, aliasesIgnored) {\n    this.$ctor__java_lang_Object__();\n    this.f_name__java_nio_charset_Charset_ \x3d name;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_name__() {\n    return this.f_name__java_nio_charset_Charset_;\n  }\n  \n  /**\n   * @param {Charset} that\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_nio_charset_Charset(that) {\n    return j_l_String.m_compareToIgnoreCase__java_lang_String__java_lang_String(this.f_name__java_nio_charset_Charset_, that.f_name__java_nio_charset_Charset_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return j_l_String.m_hashCode__java_lang_String(this.f_name__java_nio_charset_Charset_);\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    if ($Equality.$same(o, this)) {\n      return true;\n    }\n    if (!Charset.$isInstance(o)) {\n      return false;\n    }\n    let that \x3d /**@type {Charset} */ ($Casts.$to(o, Charset));\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_name__java_nio_charset_Charset_, that.f_name__java_nio_charset_Charset_);\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return this.f_name__java_nio_charset_Charset_;\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Charset} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Charset;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Charset);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Charset.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    AvailableCharsets \x3d goog.module.get('java.nio.charset.Charset.AvailableCharsets$impl');\n    IllegalCharsetNameException \x3d goog.module.get('java.nio.charset.IllegalCharsetNameException$impl');\n    UnsupportedCharsetException \x3d goog.module.get('java.nio.charset.UnsupportedCharsetException$impl');\n    EmulatedCharset \x3d goog.module.get('javaemul.internal.EmulatedCharset$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Charset, $Util.$makeClassName('java.nio.charset.Charset'));\n\n\nComparable.$markImplementor(Charset);\n\n\nexports \x3d Charset; \n//# sourceMappingURL\x3dCharset.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/EmulatedCharset.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.EmulatedCharset.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.EmulatedCharset$impl');\n\n\nconst Charset \x3d goog.require('java.nio.charset.Charset$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet LatinCharset \x3d goog.forwardDeclare('javaemul.internal.EmulatedCharset.LatinCharset$impl');\nlet UtfCharset \x3d goog.forwardDeclare('javaemul.internal.EmulatedCharset.UtfCharset$impl');\n\n\n/**\n * @abstract\n  */\nclass EmulatedCharset extends Charset {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'EmulatedCharset(String)'.\n   * @param {?string} name\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_EmulatedCharset__java_lang_String(name) {\n    this.$ctor__java_nio_charset_Charset__java_lang_String__arrayOf_java_lang_String(name, null);\n  }\n  \n  /**\n   * @abstract\n   * @param {?string} string$1$\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_getBytes__java_lang_String(string$1$) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_decodeString__arrayOf_byte__int__int(bytes, ofs, len) {\n  }\n  \n  /**\n   * @return {EmulatedCharset}\n   * @public\n   */\n  static get f_UTF_8__javaemul_internal_EmulatedCharset() {\n    return (EmulatedCharset.$clinit(), EmulatedCharset.$f_UTF_8__javaemul_internal_EmulatedCharset);\n  }\n  \n  /**\n   * @param {EmulatedCharset} value\n   * @return {void}\n   * @public\n   */\n  static set f_UTF_8__javaemul_internal_EmulatedCharset(value) {\n    (EmulatedCharset.$clinit(), EmulatedCharset.$f_UTF_8__javaemul_internal_EmulatedCharset \x3d value);\n  }\n  \n  /**\n   * @return {EmulatedCharset}\n   * @public\n   */\n  static get f_ISO_LATIN_1__javaemul_internal_EmulatedCharset() {\n    return (EmulatedCharset.$clinit(), EmulatedCharset.$f_ISO_LATIN_1__javaemul_internal_EmulatedCharset);\n  }\n  \n  /**\n   * @param {EmulatedCharset} value\n   * @return {void}\n   * @public\n   */\n  static set f_ISO_LATIN_1__javaemul_internal_EmulatedCharset(value) {\n    (EmulatedCharset.$clinit(), EmulatedCharset.$f_ISO_LATIN_1__javaemul_internal_EmulatedCharset \x3d value);\n  }\n  \n  /**\n   * @return {EmulatedCharset}\n   * @public\n   */\n  static get f_ISO_8859_1__javaemul_internal_EmulatedCharset() {\n    return (EmulatedCharset.$clinit(), EmulatedCharset.$f_ISO_8859_1__javaemul_internal_EmulatedCharset);\n  }\n  \n  /**\n   * @param {EmulatedCharset} value\n   * @return {void}\n   * @public\n   */\n  static set f_ISO_8859_1__javaemul_internal_EmulatedCharset(value) {\n    (EmulatedCharset.$clinit(), EmulatedCharset.$f_ISO_8859_1__javaemul_internal_EmulatedCharset \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EmulatedCharset;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EmulatedCharset);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EmulatedCharset.$clinit \x3d function() {};\n    LatinCharset \x3d goog.module.get('javaemul.internal.EmulatedCharset.LatinCharset$impl');\n    UtfCharset \x3d goog.module.get('javaemul.internal.EmulatedCharset.UtfCharset$impl');\n    Charset.$clinit();\n    EmulatedCharset.$f_UTF_8__javaemul_internal_EmulatedCharset \x3d UtfCharset.$create__java_lang_String(\"UTF-8\");\n    EmulatedCharset.$f_ISO_LATIN_1__javaemul_internal_EmulatedCharset \x3d LatinCharset.$create__java_lang_String(\"ISO-LATIN-1\");\n    EmulatedCharset.$f_ISO_8859_1__javaemul_internal_EmulatedCharset \x3d LatinCharset.$create__java_lang_String(\"ISO-8859-1\");\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EmulatedCharset, $Util.$makeClassName('javaemul.internal.EmulatedCharset'));\n\n\n/** @private {EmulatedCharset} */\nEmulatedCharset.$f_UTF_8__javaemul_internal_EmulatedCharset;\n\n\n/** @private {EmulatedCharset} */\nEmulatedCharset.$f_ISO_LATIN_1__javaemul_internal_EmulatedCharset;\n\n\n/** @private {EmulatedCharset} */\nEmulatedCharset.$f_ISO_8859_1__javaemul_internal_EmulatedCharset;\n\n\n\n\nexports \x3d EmulatedCharset; \n//# sourceMappingURL\x3dEmulatedCharset.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/EmulatedCharset$LatinCharset.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.EmulatedCharset$LatinCharset.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.EmulatedCharset.LatinCharset$impl');\n\n\nconst EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Charset \x3d goog.forwardDeclare('java.nio.charset.Charset$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $byte \x3d goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\n\n\nclass LatinCharset extends EmulatedCharset {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LatinCharset(String)'.\n   * @param {?string} name\n   * @return {!LatinCharset}\n   * @public\n   */\n  static $create__java_lang_String(name) {\n    LatinCharset.$clinit();\n    let $instance \x3d new LatinCharset();\n    $instance.$ctor__javaemul_internal_EmulatedCharset_LatinCharset__java_lang_String(name);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LatinCharset(String)'.\n   * @param {?string} name\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_EmulatedCharset_LatinCharset__java_lang_String(name) {\n    this.$ctor__javaemul_internal_EmulatedCharset__java_lang_String(name);\n  }\n  \n  /**\n   * @override\n   * @param {?string} str\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_getBytes__java_lang_String(str) {\n    let n \x3d j_l_String.m_length__java_lang_String(str);\n    let bytes \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([n], $byte));\n    for (let i \x3d 0; i \x3c n; ++i) {\n      $Arrays.$set(bytes, i, $Primitives.$narrowIntToByte((j_l_String.m_charAt__java_lang_String__int(str, i) \x26 255)));\n    }\n    return bytes;\n  }\n  \n  /**\n   * @override\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_decodeString__arrayOf_byte__int__int(bytes, ofs, len) {\n    let chars \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([len], $char));\n    for (let i \x3d 0; i \x3c len; ++i) {\n      $Arrays.$set(chars, i, $Primitives.$narrowIntToChar((bytes[ofs + i] \x26 255)));\n    }\n    return chars;\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.m_compareTo__java_nio_charset_Charset(/**@type {Charset} */ ($Casts.$to(arg0, Charset)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LatinCharset;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LatinCharset);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LatinCharset.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Charset \x3d goog.module.get('java.nio.charset.Charset$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $byte \x3d goog.module.get('vmbootstrap.primitives.$byte$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    EmulatedCharset.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LatinCharset, $Util.$makeClassName('javaemul.internal.EmulatedCharset$LatinCharset'));\n\n\n\n\nexports \x3d LatinCharset; \n//# sourceMappingURL\x3dEmulatedCharset$LatinCharset.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/EmulatedCharset$LatinCharset.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.EmulatedCharset$LatinCharset.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.EmulatedCharset.LatinCharset');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Charset \x3d goog.require('java.nio.charset.Charset');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$byte \x3d goog.require('vmbootstrap.primitives.$byte');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\n\n\n// Re-exports the implementation.\nvar LatinCharset \x3d goog.require('javaemul.internal.EmulatedCharset.LatinCharset$impl');\nexports \x3d LatinCharset;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/EmulatedCharset$UtfCharset.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.EmulatedCharset$UtfCharset.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.EmulatedCharset.UtfCharset$impl');\n\n\nconst EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet IllegalArgumentException \x3d goog.forwardDeclare('java.lang.IllegalArgumentException$impl');\nlet IndexOutOfBoundsException \x3d goog.forwardDeclare('java.lang.IndexOutOfBoundsException$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Charset \x3d goog.forwardDeclare('java.nio.charset.Charset$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $byte \x3d goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\n\n\nclass UtfCharset extends EmulatedCharset {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UtfCharset(String)'.\n   * @param {?string} name\n   * @return {!UtfCharset}\n   * @public\n   */\n  static $create__java_lang_String(name) {\n    UtfCharset.$clinit();\n    let $instance \x3d new UtfCharset();\n    $instance.$ctor__javaemul_internal_EmulatedCharset_UtfCharset__java_lang_String(name);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UtfCharset(String)'.\n   * @param {?string} name\n   * @return {void}\n   * @public\n   */\n  $ctor__javaemul_internal_EmulatedCharset_UtfCharset__java_lang_String(name) {\n    this.$ctor__javaemul_internal_EmulatedCharset__java_lang_String(name);\n  }\n  \n  /**\n   * @override\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_decodeString__arrayOf_byte__int__int(bytes, ofs, len) {\n    let charCount \x3d 0;\n    for (let i \x3d 0; i \x3c len; ) {\n      ++charCount;\n      let ch \x3d bytes[ofs + i];\n      if ((ch \x26 192) \x3d\x3d 128) {\n        throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"Invalid UTF8 sequence\"));\n      } else if ((ch \x26 128) \x3d\x3d 0) {\n        ++i;\n      } else if ((ch \x26 224) \x3d\x3d 192) {\n        i +\x3d 2;\n      } else if ((ch \x26 240) \x3d\x3d 224) {\n        i +\x3d 3;\n      } else if ((ch \x26 248) \x3d\x3d 240) {\n        i +\x3d 4;\n      } else {\n        throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"Invalid UTF8 sequence\"));\n      }\n      if (i \x3e len) {\n        throw $Exceptions.toJs(IndexOutOfBoundsException.$create__java_lang_String(\"Invalid UTF8 sequence\"));\n      }\n    }\n    let chars \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([charCount], $char));\n    let outIdx \x3d 0;\n    let count \x3d 0;\n    for (let i$1$ \x3d 0; i$1$ \x3c len; ) {\n      let ch$1$ \x3d bytes[ofs + i$1$++];\n      if ((ch$1$ \x26 128) \x3d\x3d 0) {\n        count \x3d 1;\n        ch$1$ \x26\x3d 127;\n      } else if ((ch$1$ \x26 224) \x3d\x3d 192) {\n        count \x3d 2;\n        ch$1$ \x26\x3d 31;\n      } else if ((ch$1$ \x26 240) \x3d\x3d 224) {\n        count \x3d 3;\n        ch$1$ \x26\x3d 15;\n      } else if ((ch$1$ \x26 248) \x3d\x3d 240) {\n        count \x3d 4;\n        ch$1$ \x26\x3d 7;\n      } else if ((ch$1$ \x26 252) \x3d\x3d 248) {\n        count \x3d 5;\n        ch$1$ \x26\x3d 3;\n      }\n      while (--count \x3e 0) {\n        let b \x3d bytes[ofs + i$1$++];\n        if ((b \x26 192) !\x3d 128) {\n          throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"Invalid UTF8 sequence at \" + (ofs + i$1$ - 1) + \", byte\x3d\" + j_l_String.m_valueOf__java_lang_Object(Integer.m_toHexString__int(b))));\n        }\n        ch$1$ \x3d (ch$1$ \x3c\x3c 6) | (b \x26 63);\n      }\n      outIdx +\x3d Character.m_toChars__int__arrayOf_char__int(ch$1$, chars, outIdx);\n    }\n    return chars;\n  }\n  \n  /**\n   * @override\n   * @param {?string} str\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  m_getBytes__java_lang_String(str) {\n    let n \x3d j_l_String.m_length__java_lang_String(str);\n    let byteCount \x3d 0;\n    for (let i \x3d 0; i \x3c n; ) {\n      let ch \x3d j_l_String.m_codePointAt__java_lang_String__int(str, i);\n      i +\x3d Character.m_charCount__int(ch);\n      if (ch \x3c (1 \x3c\x3c 7)) {\n        byteCount++;\n      } else if (ch \x3c (1 \x3c\x3c 11)) {\n        byteCount +\x3d 2;\n      } else if (ch \x3c (1 \x3c\x3c 16)) {\n        byteCount +\x3d 3;\n      } else if (ch \x3c (1 \x3c\x3c 21)) {\n        byteCount +\x3d 4;\n      } else if (ch \x3c (1 \x3c\x3c 26)) {\n        byteCount +\x3d 5;\n      }\n    }\n    let bytes \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([byteCount], $byte));\n    let out \x3d 0;\n    for (let i$1$ \x3d 0; i$1$ \x3c n; ) {\n      let ch$1$ \x3d j_l_String.m_codePointAt__java_lang_String__int(str, i$1$);\n      i$1$ +\x3d Character.m_charCount__int(ch$1$);\n      out +\x3d this.m_encodeUtf8__arrayOf_byte__int__int_$p_javaemul_internal_EmulatedCharset_UtfCharset(bytes, out, ch$1$);\n    }\n    return bytes;\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} codePoint\n   * @return {number}\n   * @public\n   */\n  m_encodeUtf8__arrayOf_byte__int__int_$p_javaemul_internal_EmulatedCharset_UtfCharset(bytes, ofs, codePoint) {\n    if (codePoint \x3c (1 \x3c\x3c 7)) {\n      $Arrays.$set(bytes, ofs, $Primitives.$narrowIntToByte((codePoint \x26 127)));\n      return 1;\n    } else if (codePoint \x3c (1 \x3c\x3c 11)) {\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 6) \x26 31) | 192)));\n      $Arrays.$set(bytes, ofs, $Primitives.$narrowIntToByte(((codePoint \x26 63) | 128)));\n      return 2;\n    } else if (codePoint \x3c (1 \x3c\x3c 16)) {\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 12) \x26 15) | 224)));\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 6) \x26 63) | 128)));\n      $Arrays.$set(bytes, ofs, $Primitives.$narrowIntToByte(((codePoint \x26 63) | 128)));\n      return 3;\n    } else if (codePoint \x3c (1 \x3c\x3c 21)) {\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 18) \x26 7) | 240)));\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 12) \x26 63) | 128)));\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 6) \x26 63) | 128)));\n      $Arrays.$set(bytes, ofs, $Primitives.$narrowIntToByte(((codePoint \x26 63) | 128)));\n      return 4;\n    } else if (codePoint \x3c (1 \x3c\x3c 26)) {\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 24) \x26 3) | 248)));\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 18) \x26 63) | 128)));\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 12) \x26 63) | 128)));\n      $Arrays.$set(bytes, ofs++, $Primitives.$narrowIntToByte((((codePoint \x3e\x3e 6) \x26 63) | 128)));\n      $Arrays.$set(bytes, ofs, $Primitives.$narrowIntToByte(((codePoint \x26 63) | 128)));\n      return 5;\n    }\n    throw $Exceptions.toJs(IllegalArgumentException.$create__java_lang_String(\"Character out of range: \" + codePoint));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.m_compareTo__java_nio_charset_Charset(/**@type {Charset} */ ($Casts.$to(arg0, Charset)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UtfCharset;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UtfCharset);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UtfCharset.$clinit \x3d function() {};\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    IllegalArgumentException \x3d goog.module.get('java.lang.IllegalArgumentException$impl');\n    IndexOutOfBoundsException \x3d goog.module.get('java.lang.IndexOutOfBoundsException$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Charset \x3d goog.module.get('java.nio.charset.Charset$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $byte \x3d goog.module.get('vmbootstrap.primitives.$byte$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    EmulatedCharset.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UtfCharset, $Util.$makeClassName('javaemul.internal.EmulatedCharset$UtfCharset'));\n\n\n\n\nexports \x3d UtfCharset; \n//# sourceMappingURL\x3dEmulatedCharset$UtfCharset.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/EmulatedCharset$UtfCharset.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.EmulatedCharset$UtfCharset.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.EmulatedCharset.UtfCharset');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _IndexOutOfBoundsException \x3d goog.require('java.lang.IndexOutOfBoundsException');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Charset \x3d goog.require('java.nio.charset.Charset');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$byte \x3d goog.require('vmbootstrap.primitives.$byte');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\n\n\n// Re-exports the implementation.\nvar UtfCharset \x3d goog.require('javaemul.internal.EmulatedCharset.UtfCharset$impl');\nexports \x3d UtfCharset;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/EmulatedCharset.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.EmulatedCharset.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.EmulatedCharset');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Charset \x3d goog.require('java.nio.charset.Charset');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _LatinCharset \x3d goog.require('javaemul.internal.EmulatedCharset.LatinCharset');\nconst _UtfCharset \x3d goog.require('javaemul.internal.EmulatedCharset.UtfCharset');\n\n\n// Re-exports the implementation.\nvar EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset$impl');\nexports \x3d EmulatedCharset;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/Charset$AvailableCharsets.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.Charset$AvailableCharsets.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.nio.charset.Charset.AvailableCharsets$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Charset \x3d goog.forwardDeclare('java.nio.charset.Charset$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet SortedMap \x3d goog.forwardDeclare('java.util.SortedMap$impl');\nlet TreeMap \x3d goog.forwardDeclare('java.util.TreeMap$impl');\nlet EmulatedCharset \x3d goog.forwardDeclare('javaemul.internal.EmulatedCharset$impl');\n\n\nclass AvailableCharsets extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'AvailableCharsets()'.\n   * @return {!AvailableCharsets}\n   * @public\n   */\n  static $create__() {\n    AvailableCharsets.$clinit();\n    let $instance \x3d new AvailableCharsets();\n    $instance.$ctor__java_nio_charset_Charset_AvailableCharsets__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'AvailableCharsets()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_nio_charset_Charset_AvailableCharsets__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {SortedMap\x3c?string, Charset\x3e}\n   * @public\n   */\n  static get f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_() {\n    return (AvailableCharsets.$clinit(), AvailableCharsets.$f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_);\n  }\n  \n  /**\n   * @param {SortedMap\x3c?string, Charset\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_(value) {\n    (AvailableCharsets.$clinit(), AvailableCharsets.$f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof AvailableCharsets;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, AvailableCharsets);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AvailableCharsets.$clinit \x3d function() {};\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    TreeMap \x3d goog.module.get('java.util.TreeMap$impl');\n    EmulatedCharset \x3d goog.module.get('javaemul.internal.EmulatedCharset$impl');\n    j_l_Object.$clinit();\n    let map \x3d /**@type {!TreeMap\x3c?string, Charset\x3e} */ (TreeMap.$create__());\n    map.put(EmulatedCharset.f_ISO_8859_1__javaemul_internal_EmulatedCharset.m_name__(), EmulatedCharset.f_ISO_8859_1__javaemul_internal_EmulatedCharset);\n    map.put(EmulatedCharset.f_ISO_LATIN_1__javaemul_internal_EmulatedCharset.m_name__(), EmulatedCharset.f_ISO_LATIN_1__javaemul_internal_EmulatedCharset);\n    map.put(EmulatedCharset.f_UTF_8__javaemul_internal_EmulatedCharset.m_name__(), EmulatedCharset.f_UTF_8__javaemul_internal_EmulatedCharset);\n    AvailableCharsets.$f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_ \x3d /**@type {SortedMap\x3c?string, Charset\x3e} */ (Collections.m_unmodifiableSortedMap__java_util_SortedMap(map));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(AvailableCharsets, $Util.$makeClassName('java.nio.charset.Charset$AvailableCharsets'));\n\n\n/** @private {SortedMap\x3c?string, Charset\x3e} */\nAvailableCharsets.$f_CHARSETS__java_nio_charset_Charset_AvailableCharsets_;\n\n\n\n\nexports \x3d AvailableCharsets; \n//# sourceMappingURL\x3dCharset$AvailableCharsets.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/Charset$AvailableCharsets.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.Charset$AvailableCharsets.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.nio.charset.Charset.AvailableCharsets');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Charset \x3d goog.require('java.nio.charset.Charset');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _TreeMap \x3d goog.require('java.util.TreeMap');\nconst _EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset');\n\n\n// Re-exports the implementation.\nvar AvailableCharsets \x3d goog.require('java.nio.charset.Charset.AvailableCharsets$impl');\nexports \x3d AvailableCharsets;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/IllegalCharsetNameException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.IllegalCharsetNameException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.nio.charset.IllegalCharsetNameException$impl');\n\n\nconst IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\n\n\nclass IllegalCharsetNameException extends IllegalArgumentException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_charsetName__java_nio_charset_IllegalCharsetNameException_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IllegalCharsetNameException(String)'.\n   * @param {?string} charsetName\n   * @return {!IllegalCharsetNameException}\n   * @public\n   */\n  static $create__java_lang_String(charsetName) {\n    IllegalCharsetNameException.$clinit();\n    let $instance \x3d new IllegalCharsetNameException();\n    $instance.$ctor__java_nio_charset_IllegalCharsetNameException__java_lang_String(charsetName);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IllegalCharsetNameException(String)'.\n   * @param {?string} charsetName\n   * @return {void}\n   * @public\n   */\n  $ctor__java_nio_charset_IllegalCharsetNameException__java_lang_String(charsetName) {\n    this.$ctor__java_lang_IllegalArgumentException__java_lang_String(j_l_String.m_valueOf__java_lang_Object(charsetName));\n    this.f_charsetName__java_nio_charset_IllegalCharsetNameException_ \x3d charsetName;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getCharsetName__() {\n    return this.f_charsetName__java_nio_charset_IllegalCharsetNameException_;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IllegalCharsetNameException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IllegalCharsetNameException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IllegalCharsetNameException.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    IllegalArgumentException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IllegalCharsetNameException, $Util.$makeClassName('java.nio.charset.IllegalCharsetNameException'));\n\n\n\n\nexports \x3d IllegalCharsetNameException; \n//# sourceMappingURL\x3dIllegalCharsetNameException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/IllegalCharsetNameException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.IllegalCharsetNameException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.nio.charset.IllegalCharsetNameException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\n\n\n// Re-exports the implementation.\nvar IllegalCharsetNameException \x3d goog.require('java.nio.charset.IllegalCharsetNameException$impl');\nexports \x3d IllegalCharsetNameException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/UnsupportedCharsetException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.UnsupportedCharsetException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.nio.charset.UnsupportedCharsetException$impl');\n\n\nconst IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\n\n\nclass UnsupportedCharsetException extends IllegalArgumentException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_charsetName__java_nio_charset_UnsupportedCharsetException_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UnsupportedCharsetException(String)'.\n   * @param {?string} charsetName\n   * @return {!UnsupportedCharsetException}\n   * @public\n   */\n  static $create__java_lang_String(charsetName) {\n    UnsupportedCharsetException.$clinit();\n    let $instance \x3d new UnsupportedCharsetException();\n    $instance.$ctor__java_nio_charset_UnsupportedCharsetException__java_lang_String(charsetName);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UnsupportedCharsetException(String)'.\n   * @param {?string} charsetName\n   * @return {void}\n   * @public\n   */\n  $ctor__java_nio_charset_UnsupportedCharsetException__java_lang_String(charsetName) {\n    this.$ctor__java_lang_IllegalArgumentException__java_lang_String(j_l_String.m_valueOf__java_lang_Object(charsetName));\n    this.f_charsetName__java_nio_charset_UnsupportedCharsetException_ \x3d charsetName;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getCharsetName__() {\n    return this.f_charsetName__java_nio_charset_UnsupportedCharsetException_;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UnsupportedCharsetException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UnsupportedCharsetException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UnsupportedCharsetException.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    IllegalArgumentException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UnsupportedCharsetException, $Util.$makeClassName('java.nio.charset.UnsupportedCharsetException'));\n\n\n\n\nexports \x3d UnsupportedCharsetException; \n//# sourceMappingURL\x3dUnsupportedCharsetException.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/UnsupportedCharsetException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.UnsupportedCharsetException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.nio.charset.UnsupportedCharsetException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\n\n\n// Re-exports the implementation.\nvar UnsupportedCharsetException \x3d goog.require('java.nio.charset.UnsupportedCharsetException$impl');\nexports \x3d UnsupportedCharsetException;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/nio/charset/Charset.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.nio.charset.Charset.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.nio.charset.Charset');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _AvailableCharsets \x3d goog.require('java.nio.charset.Charset.AvailableCharsets');\nconst _IllegalCharsetNameException \x3d goog.require('java.nio.charset.IllegalCharsetNameException');\nconst _UnsupportedCharsetException \x3d goog.require('java.nio.charset.UnsupportedCharsetException');\nconst _SortedMap \x3d goog.require('java.util.SortedMap');\nconst _EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar Charset \x3d goog.require('java.nio.charset.Charset$impl');\nexports \x3d Charset;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Locale$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $1 \x3d goog.forwardDeclare('java.util.Locale.$1$impl');\nlet $2 \x3d goog.forwardDeclare('java.util.Locale.$2$impl');\nlet $3 \x3d goog.forwardDeclare('java.util.Locale.$3$impl');\nlet $4 \x3d goog.forwardDeclare('java.util.Locale.$4$impl');\n\n\nclass Locale extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @return {Locale}\n   * @public\n   */\n  static m_getDefault__() {\n    Locale.$clinit();\n    return Locale.$f_defaultLocale__java_util_Locale_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Locale()'.\n   * @return {!Locale}\n   * @public\n   */\n  static $create__() {\n    Locale.$clinit();\n    let $instance \x3d new Locale();\n    $instance.$ctor__java_util_Locale__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Locale()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Locale__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Locale}\n   * @public\n   */\n  static get f_ROOT__java_util_Locale() {\n    return (Locale.$clinit(), Locale.$f_ROOT__java_util_Locale);\n  }\n  \n  /**\n   * @param {Locale} value\n   * @return {void}\n   * @public\n   */\n  static set f_ROOT__java_util_Locale(value) {\n    (Locale.$clinit(), Locale.$f_ROOT__java_util_Locale \x3d value);\n  }\n  \n  /**\n   * @return {Locale}\n   * @public\n   */\n  static get f_ENGLISH__java_util_Locale() {\n    return (Locale.$clinit(), Locale.$f_ENGLISH__java_util_Locale);\n  }\n  \n  /**\n   * @param {Locale} value\n   * @return {void}\n   * @public\n   */\n  static set f_ENGLISH__java_util_Locale(value) {\n    (Locale.$clinit(), Locale.$f_ENGLISH__java_util_Locale \x3d value);\n  }\n  \n  /**\n   * @return {Locale}\n   * @public\n   */\n  static get f_US__java_util_Locale() {\n    return (Locale.$clinit(), Locale.$f_US__java_util_Locale);\n  }\n  \n  /**\n   * @param {Locale} value\n   * @return {void}\n   * @public\n   */\n  static set f_US__java_util_Locale(value) {\n    (Locale.$clinit(), Locale.$f_US__java_util_Locale \x3d value);\n  }\n  \n  /**\n   * @return {Locale}\n   * @public\n   */\n  static get f_defaultLocale__java_util_Locale_() {\n    return (Locale.$clinit(), Locale.$f_defaultLocale__java_util_Locale_);\n  }\n  \n  /**\n   * @param {Locale} value\n   * @return {void}\n   * @public\n   */\n  static set f_defaultLocale__java_util_Locale_(value) {\n    (Locale.$clinit(), Locale.$f_defaultLocale__java_util_Locale_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Locale;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Locale);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Locale.$clinit \x3d function() {};\n    $1 \x3d goog.module.get('java.util.Locale.$1$impl');\n    $2 \x3d goog.module.get('java.util.Locale.$2$impl');\n    $3 \x3d goog.module.get('java.util.Locale.$3$impl');\n    $4 \x3d goog.module.get('java.util.Locale.$4$impl');\n    j_l_Object.$clinit();\n    Locale.$f_ROOT__java_util_Locale \x3d $1.$create__();\n    Locale.$f_ENGLISH__java_util_Locale \x3d $2.$create__();\n    Locale.$f_US__java_util_Locale \x3d $3.$create__();\n    Locale.$f_defaultLocale__java_util_Locale_ \x3d $4.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Locale, $Util.$makeClassName('java.util.Locale'));\n\n\n/** @private {Locale} */\nLocale.$f_ROOT__java_util_Locale;\n\n\n/** @private {Locale} */\nLocale.$f_ENGLISH__java_util_Locale;\n\n\n/** @private {Locale} */\nLocale.$f_US__java_util_Locale;\n\n\n/** @private {Locale} */\nLocale.$f_defaultLocale__java_util_Locale_;\n\n\n\n\nexports \x3d Locale; \n//# sourceMappingURL\x3dLocale.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Locale.$1$impl');\n\n\nconst Locale \x3d goog.require('java.util.Locale$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $1 extends Locale {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Locale()'.\n   * @return {!$1}\n   * @public\n   */\n  static $create__() {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__java_util_Locale_1__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Locale()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Locale_1__() {\n    this.$ctor__java_util_Locale__();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"\";\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Locale.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('java.util.Locale$1'));\n\n\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dLocale$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Locale.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Locale \x3d goog.require('java.util.Locale');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('java.util.Locale.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Locale.$2$impl');\n\n\nconst Locale \x3d goog.require('java.util.Locale$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $2 extends Locale {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Locale()'.\n   * @return {!$2}\n   * @public\n   */\n  static $create__() {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__java_util_Locale_2__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Locale()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Locale_2__() {\n    this.$ctor__java_util_Locale__();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"en\";\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    Locale.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('java.util.Locale$2'));\n\n\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dLocale$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Locale.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Locale \x3d goog.require('java.util.Locale');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('java.util.Locale.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Locale.$3$impl');\n\n\nconst Locale \x3d goog.require('java.util.Locale$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $3 extends Locale {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Locale()'.\n   * @return {!$3}\n   * @public\n   */\n  static $create__() {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__java_util_Locale_3__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Locale()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Locale_3__() {\n    this.$ctor__java_util_Locale__();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"en_US\";\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    Locale.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('java.util.Locale$3'));\n\n\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dLocale$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Locale.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Locale \x3d goog.require('java.util.Locale');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('java.util.Locale.$3$impl');\nexports \x3d $3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$4.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$4.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Locale.$4$impl');\n\n\nconst Locale \x3d goog.require('java.util.Locale$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $4 extends Locale {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new Locale()'.\n   * @return {!$4}\n   * @public\n   */\n  static $create__() {\n    $4.$clinit();\n    let $instance \x3d new $4();\n    $instance.$ctor__java_util_Locale_4__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new Locale()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Locale_4__() {\n    this.$ctor__java_util_Locale__();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"unknown\";\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $4;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $4);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $4.$clinit \x3d function() {};\n    Locale.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($4, $Util.$makeClassName('java.util.Locale$4'));\n\n\n\n\nexports \x3d $4; \n//# sourceMappingURL\x3dLocale$4.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale$4.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale$4.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Locale.$4');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Locale \x3d goog.require('java.util.Locale');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $4 \x3d goog.require('java.util.Locale.$4$impl');\nexports \x3d $4;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Locale.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Locale.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Locale');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$1 \x3d goog.require('java.util.Locale.$1');\nconst _$2 \x3d goog.require('java.util.Locale.$2');\nconst _$3 \x3d goog.require('java.util.Locale.$3');\nconst _$4 \x3d goog.require('java.util.Locale.$4');\n\n\n// Re-exports the implementation.\nvar Locale \x3d goog.require('java.util.Locale$impl');\nexports \x3d Locale;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/NativeRegExp$Match$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.NativeRegExp$Match$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('javaemul.internal.NativeRegExp.Match.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {Array} $thisArg\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static m_asArray__javaemul_internal_NativeRegExp_Match($thisArg) {\n    $Overlay.$clinit();\n    return /**@type {Array\x3c?string\x3e} */ (JsUtils.m_uncheckedCast__java_lang_Object($thisArg));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('Array'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dNativeRegExp$Match$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/javaemul/internal/NativeRegExp$Match$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from javaemul.internal.NativeRegExp$Match$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('javaemul.internal.NativeRegExp.Match.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('javaemul.internal.NativeRegExp.Match.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.String$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst CharSequence \x3d goog.require('java.lang.CharSequence$impl');\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet UnsupportedEncodingException \x3d goog.forwardDeclare('java.io.UnsupportedEncodingException$impl');\nlet Character \x3d goog.forwardDeclare('java.lang.Character$impl');\nlet Integer \x3d goog.forwardDeclare('java.lang.Integer$impl');\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet $1 \x3d goog.forwardDeclare('java.lang.String.$1$impl');\nlet NativeFunction_$Overlay \x3d goog.forwardDeclare('java.lang.String.NativeFunction.$Overlay$impl');\nlet NativeString_$Overlay \x3d goog.forwardDeclare('java.lang.String.NativeString.$Overlay$impl');\nlet StringBuffer \x3d goog.forwardDeclare('java.lang.StringBuffer$impl');\nlet StringBuilder \x3d goog.forwardDeclare('java.lang.StringBuilder$impl');\nlet Charset \x3d goog.forwardDeclare('java.nio.charset.Charset$impl');\nlet UnsupportedCharsetException \x3d goog.forwardDeclare('java.nio.charset.UnsupportedCharsetException$impl');\nlet Comparator \x3d goog.forwardDeclare('java.util.Comparator$impl');\nlet Locale \x3d goog.forwardDeclare('java.util.Locale$impl');\nlet StringJoiner \x3d goog.forwardDeclare('java.util.StringJoiner$impl');\nlet IntStream \x3d goog.forwardDeclare('java.util.stream.IntStream$impl');\nlet ArrayHelper \x3d goog.forwardDeclare('javaemul.internal.ArrayHelper$impl');\nlet EmulatedCharset \x3d goog.forwardDeclare('javaemul.internal.EmulatedCharset$impl');\nlet HashCodes \x3d goog.forwardDeclare('javaemul.internal.HashCodes$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet JsUtils \x3d goog.forwardDeclare('javaemul.internal.JsUtils$impl');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.NativeRegExp.Match.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $CharSequences \x3d goog.forwardDeclare('vmbootstrap.CharSequences$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\nlet $char \x3d goog.forwardDeclare('vmbootstrap.primitives.$char$impl');\n\n\n/**\n * @abstract\n * @implements {Comparable\x3c?string\x3e}\n * @implements {CharSequence}\n * @implements {Serializable}\n  */\nclass j_l_String extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} v\n   * @return {?string}\n   * @public\n   */\n  static m_copyValueOf__arrayOf_char(v) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__arrayOf_char(v);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} v\n   * @param {number} offset\n   * @param {number} count\n   * @return {?string}\n   * @public\n   */\n  static m_copyValueOf__arrayOf_char__int__int(v, offset, count) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__arrayOf_char__int__int(v, offset, count);\n  }\n  \n  /**\n   * @param {(CharSequence|string)} delimiter\n   * @param {Array\x3c(CharSequence|string)\x3e} elements\n   * @return {?string}\n   * @public\n   */\n  static m_join__java_lang_CharSequence__arrayOf_java_lang_CharSequence(delimiter, elements) {\n    j_l_String.$clinit();\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence(delimiter);\n    for (let $array \x3d elements, $index \x3d 0; $index \x3c $array.length; $index++) {\n      let e \x3d $array[$index];\n      joiner.m_add__java_lang_CharSequence(e);\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {(CharSequence|string)} delimiter\n   * @param {Iterable\x3c?\x3e} elements\n   * @return {?string}\n   * @public\n   */\n  static m_join__java_lang_CharSequence__java_lang_Iterable(delimiter, elements) {\n    j_l_String.$clinit();\n    let joiner \x3d StringJoiner.$create__java_lang_CharSequence(delimiter);\n    for (let $iterator \x3d elements.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let e \x3d /**@type {(CharSequence|string)} */ ($Casts.$to($iterator.m_next__(), CharSequence));\n      joiner.m_add__java_lang_CharSequence(e);\n    }\n    return joiner.toString();\n  }\n  \n  /**\n   * @param {boolean} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__boolean(x) {\n    j_l_String.$clinit();\n    return \"\" + x;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__char(x) {\n    j_l_String.$clinit();\n    return String.fromCharCode(x);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @param {number} offset\n   * @param {number} count\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__arrayOf_char__int__int(x, offset, count) {\n    j_l_String.$clinit();\n    let end \x3d offset + count;\n    $InternalPreconditions.m_checkCriticalStringBounds__int__int__int(offset, end, x.length);\n    let batchSize \x3d ArrayHelper.f_ARRAY_PROCESS_BATCH_SIZE__javaemul_internal_ArrayHelper;\n    let s \x3d \"\";\n    for (let batchStart \x3d offset; batchStart \x3c end; ) {\n      let batchEnd \x3d Math.min(batchStart + batchSize, end);\n      s \x3d j_l_String.m_valueOf__java_lang_Object(s) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_fromCharCode__arrayOf_java_lang_Object_$p_java_lang_String(ArrayHelper.m_unsafeClone__java_lang_Object__int__int(x, batchStart, batchEnd)));\n      batchStart \x3d batchEnd;\n    }\n    return s;\n  }\n  \n  /**\n   * @param {Array\x3c*\x3e} array\n   * @return {?string}\n   * @public\n   */\n  static m_fromCharCode__arrayOf_java_lang_Object_$p_java_lang_String(array) {\n    j_l_String.$clinit();\n    return String.fromCharCode.apply(null, array);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__arrayOf_char(x) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__arrayOf_char__int__int(x, 0, x.length);\n  }\n  \n  /**\n   * @param {number} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__double(x) {\n    j_l_String.$clinit();\n    return \"\" + x;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__float(x) {\n    j_l_String.$clinit();\n    return \"\" + x;\n  }\n  \n  /**\n   * @param {number} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__int(x) {\n    j_l_String.$clinit();\n    return \"\" + x;\n  }\n  \n  /**\n   * @param {!$Long} x\n   * @return {?string}\n   * @public\n   */\n  static m_valueOf__long(x) {\n    j_l_String.$clinit();\n    return \"\" + x;\n  }\n  \n  /**\n   * @param {*} x\n   * @return {string}\n   * @public\n   */\n  static m_valueOf__java_lang_Object(x) {\n    j_l_String.$clinit();\n    return $Equality.$same(x, null) ? \"null\" : $Objects.m_toString__java_lang_Object(x);\n  }\n  \n  /**\n   * @param {?string} replaceStr\n   * @return {?string}\n   * @public\n   */\n  static m_translateReplaceString__java_lang_String_$p_java_lang_String(replaceStr) {\n    j_l_String.$clinit();\n    let pos \x3d 0;\n    while (0 \x3c\x3d (pos \x3d j_l_String.m_indexOf__java_lang_String__java_lang_String__int(replaceStr, \"\\\\\", pos))) {\n      if (j_l_String.m_charAt__java_lang_String__int(replaceStr, pos + 1) \x3d\x3d 36 /* '$' */) {\n        replaceStr \x3d j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int__int(replaceStr, 0, pos)) + \"$\" + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int(replaceStr, ++pos));\n      } else {\n        replaceStr \x3d j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int__int(replaceStr, 0, pos)) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int(replaceStr, ++pos));\n      }\n    }\n    return replaceStr;\n  }\n  \n  /**\n   * @param {?string} charsetName\n   * @return {Charset}\n   * @public\n   */\n  static m_getCharset__java_lang_String_$p_java_lang_String(charsetName) {\n    j_l_String.$clinit();\n    try {\n      return Charset.m_forName__java_lang_String(charsetName);\n    } catch (__$exc) {\n      __$exc \x3d $Exceptions.toJava(__$exc);\n      if (UnsupportedCharsetException.$isInstance(__$exc)) {\n        let e \x3d /**@type {UnsupportedCharsetException} */ (__$exc);\n        throw $Exceptions.toJs(UnsupportedEncodingException.$create__java_lang_String(charsetName));\n      } else {\n        throw $Exceptions.toJs(__$exc);\n      }\n    }\n  }\n  \n  /**\n   * @param {number} codePoint\n   * @return {?string}\n   * @public\n   */\n  static m_fromCodePoint__int_$pp_java_lang(codePoint) {\n    j_l_String.$clinit();\n    if (codePoint \x3e\x3d Character.f_MIN_SUPPLEMENTARY_CODE_POINT__java_lang_Character) {\n      let hiSurrogate \x3d Character.m_getHighSurrogate__int_$pp_java_lang(codePoint);\n      let loSurrogate \x3d Character.m_getLowSurrogate__int_$pp_java_lang(codePoint);\n      return j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__char(hiSurrogate)) + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_valueOf__char(loSurrogate));\n    } else {\n      return j_l_String.m_valueOf__char($Primitives.$narrowIntToChar(codePoint));\n    }\n  }\n  \n  /**\n   * Initialization from constructor 'String()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__() {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__();\n  }\n  \n  /**\n   * Initialization from constructor 'String(byte[])'.\n   * @param {Array\x3cnumber\x3e} bytes\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_byte(bytes) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_byte(bytes);\n  }\n  \n  /**\n   * Initialization from constructor 'String(byte[], int, int)'.\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_byte__int__int(bytes, ofs, len) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_byte__int__int(bytes, ofs, len);\n  }\n  \n  /**\n   * Initialization from constructor 'String(byte[], int, int, String)'.\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @param {?string} charsetName\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_byte__int__int__java_lang_String(bytes, ofs, len, charsetName) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_byte__int__int__java_lang_String(bytes, ofs, len, charsetName);\n  }\n  \n  /**\n   * Initialization from constructor 'String(byte[], int, int, Charset)'.\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @param {Charset} charset\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_byte__int__int__java_nio_charset_Charset(bytes, ofs, len, charset) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_byte__int__int__java_nio_charset_Charset(bytes, ofs, len, charset);\n  }\n  \n  /**\n   * Initialization from constructor 'String(byte[], String)'.\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {?string} charsetName\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_byte__java_lang_String(bytes, charsetName) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_byte__java_lang_String(bytes, charsetName);\n  }\n  \n  /**\n   * Initialization from constructor 'String(byte[], Charset)'.\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {Charset} charset\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_byte__java_nio_charset_Charset(bytes, charset) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_byte__java_nio_charset_Charset(bytes, charset);\n  }\n  \n  /**\n   * Initialization from constructor 'String(char[])'.\n   * @param {Array\x3cnumber\x3e} value\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_char(value) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_char(value);\n  }\n  \n  /**\n   * Initialization from constructor 'String(char[], int, int)'.\n   * @param {Array\x3cnumber\x3e} value\n   * @param {number} offset\n   * @param {number} count\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_char__int__int(value, offset, count) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_char__int__int(value, offset, count);\n  }\n  \n  /**\n   * Initialization from constructor 'String(int[], int, int)'.\n   * @param {Array\x3cnumber\x3e} codePoints\n   * @param {number} offset\n   * @param {number} count\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__arrayOf_int__int__int(codePoints, offset, count) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__arrayOf_int__int__int(codePoints, offset, count);\n  }\n  \n  /**\n   * Initialization from constructor 'String(String)'.\n   * @param {?string} other\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__java_lang_String(other) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__java_lang_String(other);\n  }\n  \n  /**\n   * Initialization from constructor 'String(StringBuffer)'.\n   * @param {StringBuffer} sb\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__java_lang_StringBuffer(sb) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__java_lang_StringBuffer(sb);\n  }\n  \n  /**\n   * Initialization from constructor 'String(StringBuilder)'.\n   * @param {StringBuilder} sb\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_String__java_lang_StringBuilder(sb) {\n    this.$ctor__java_lang_Object__();\n    j_l_String.$create__java_lang_StringBuilder(sb);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {String}\n   * @public\n   */\n  static m_asNativeString__java_lang_String_$p_java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return /**@type {String} */ (JsUtils.m_uncheckedCast__java_lang_Object($thisArg));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_charAt__java_lang_String__int($thisArg, index) {\n    j_l_String.$clinit();\n    $InternalPreconditions.m_checkStringElementIndex__int__int(index, j_l_String.m_length__java_lang_String($thisArg));\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).charCodeAt(index);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_codePointAt__java_lang_String__int($thisArg, index) {\n    j_l_String.$clinit();\n    return Character.m_codePointAt__java_lang_CharSequence__int__int_$pp_java_lang($thisArg, index, j_l_String.m_length__java_lang_String($thisArg));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} index\n   * @return {number}\n   * @public\n   */\n  static m_codePointBefore__java_lang_String__int($thisArg, index) {\n    j_l_String.$clinit();\n    return Character.m_codePointBefore__java_lang_CharSequence__int__int_$pp_java_lang($thisArg, index, 0);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} beginIndex\n   * @param {number} endIndex\n   * @return {number}\n   * @public\n   */\n  static m_codePointCount__java_lang_String__int__int($thisArg, beginIndex, endIndex) {\n    j_l_String.$clinit();\n    return Character.m_codePointCount__java_lang_CharSequence__int__int($thisArg, beginIndex, endIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} other\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_String__java_lang_String($thisArg, other) {\n    j_l_String.$clinit();\n    let a \x3d JsUtils.m_unsafeCastToDouble__java_lang_Object($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg));\n    let b \x3d JsUtils.m_unsafeCastToDouble__java_lang_Object($InternalPreconditions.m_checkNotNull__java_lang_Object(other));\n    return a \x3d\x3d b ? 0 : (a \x3c b ? -1 : 1);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} other\n   * @return {number}\n   * @public\n   */\n  static m_compareToIgnoreCase__java_lang_String__java_lang_String($thisArg, other) {\n    j_l_String.$clinit();\n    return j_l_String.m_compareTo__java_lang_String__java_lang_String(j_l_String.m_toLowerCase__java_lang_String($thisArg), j_l_String.m_toLowerCase__java_lang_String(other));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} str\n   * @return {?string}\n   * @public\n   */\n  static m_concat__java_lang_String__java_lang_String($thisArg, str) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__java_lang_Object(/**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg), j_l_String))) + j_l_String.m_valueOf__java_lang_Object(/**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(str), j_l_String)));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {(CharSequence|string)} s\n   * @return {boolean}\n   * @public\n   */\n  static m_contains__java_lang_String__java_lang_CharSequence($thisArg, s) {\n    j_l_String.$clinit();\n    return j_l_String.m_indexOf__java_lang_String__java_lang_String($thisArg, $CharSequences.m_toString__java_lang_CharSequence(s)) !\x3d -1;\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {(CharSequence|string)} cs\n   * @return {boolean}\n   * @public\n   */\n  static m_contentEquals__java_lang_String__java_lang_CharSequence($thisArg, cs) {\n    j_l_String.$clinit();\n    return j_l_String.m_equals__java_lang_String__java_lang_Object($thisArg, $CharSequences.m_toString__java_lang_CharSequence(cs));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {StringBuffer} sb\n   * @return {boolean}\n   * @public\n   */\n  static m_contentEquals__java_lang_String__java_lang_StringBuffer($thisArg, sb) {\n    j_l_String.$clinit();\n    return j_l_String.m_equals__java_lang_String__java_lang_Object($thisArg, sb.toString());\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} suffix\n   * @return {boolean}\n   * @public\n   */\n  static m_endsWith__java_lang_String__java_lang_String($thisArg, suffix) {\n    j_l_String.$clinit();\n    let suffixlength \x3d j_l_String.m_length__java_lang_String(suffix);\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).substr(j_l_String.m_length__java_lang_String($thisArg) - suffixlength, suffixlength), suffix);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  static m_equals__java_lang_String__java_lang_Object($thisArg, other) {\n    j_l_String.$clinit();\n    return $Equality.$same($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg), other);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} other\n   * @return {boolean}\n   * @public\n   */\n  static m_equalsIgnoreCase__java_lang_String__java_lang_String($thisArg, other) {\n    j_l_String.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg);\n    if ($Equality.$same(other, null)) {\n      return false;\n    }\n    if (j_l_String.m_equals__java_lang_String__java_lang_Object($thisArg, other)) {\n      return true;\n    }\n    return j_l_String.m_length__java_lang_String($thisArg) \x3d\x3d j_l_String.m_length__java_lang_String(other) \x26\x26 j_l_String.m_equals__java_lang_String__java_lang_Object(j_l_String.m_toLowerCase__java_lang_String($thisArg), j_l_String.m_toLowerCase__java_lang_String(other));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_getBytes__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return j_l_String.m_getBytes__java_lang_String__java_nio_charset_Charset($thisArg, EmulatedCharset.f_UTF_8__javaemul_internal_EmulatedCharset);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} charsetName\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_getBytes__java_lang_String__java_lang_String($thisArg, charsetName) {\n    j_l_String.$clinit();\n    return j_l_String.m_getBytes__java_lang_String__java_nio_charset_Charset($thisArg, j_l_String.m_getCharset__java_lang_String_$p_java_lang_String(charsetName));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {Charset} charset\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_getBytes__java_lang_String__java_nio_charset_Charset($thisArg, charset) {\n    j_l_String.$clinit();\n    return (/**@type {EmulatedCharset} */ ($Casts.$to(charset, EmulatedCharset))).m_getBytes__java_lang_String($thisArg);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} srcBegin\n   * @param {number} srcEnd\n   * @param {Array\x3cnumber\x3e} dst\n   * @param {number} dstBegin\n   * @return {void}\n   * @public\n   */\n  static m_getChars__java_lang_String__int__int__arrayOf_char__int($thisArg, srcBegin, srcEnd, dst, dstBegin) {\n    j_l_String.$clinit();\n    $InternalPreconditions.m_checkCriticalStringBounds__int__int__int(srcBegin, srcEnd, j_l_String.m_length__java_lang_String($thisArg));\n    $InternalPreconditions.m_checkCriticalStringBounds__int__int__int(dstBegin, dstBegin + (srcEnd - srcBegin), dst.length);\n    j_l_String.m_getChars0__java_lang_String__int__int__arrayOf_char__int_$p_java_lang_String($thisArg, srcBegin, srcEnd, dst, dstBegin);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} srcBegin\n   * @param {number} srcEnd\n   * @param {Array\x3cnumber\x3e} dst\n   * @param {number} dstBegin\n   * @return {void}\n   * @public\n   */\n  static m_getChars0__java_lang_String__int__int__arrayOf_char__int_$p_java_lang_String($thisArg, srcBegin, srcEnd, dst, dstBegin) {\n    j_l_String.$clinit();\n    while (srcBegin \x3c srcEnd) {\n      $Arrays.$set(dst, dstBegin++, j_l_String.m_charAt__java_lang_String__int($thisArg, srcBegin++));\n    }\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_hashCode__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return HashCodes.m_getStringHashCode__java_lang_String($thisArg);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} codePoint\n   * @return {number}\n   * @public\n   */\n  static m_indexOf__java_lang_String__int($thisArg, codePoint) {\n    j_l_String.$clinit();\n    return j_l_String.m_indexOf__java_lang_String__java_lang_String($thisArg, j_l_String.m_fromCodePoint__int_$pp_java_lang(codePoint));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} codePoint\n   * @param {number} startIndex\n   * @return {number}\n   * @public\n   */\n  static m_indexOf__java_lang_String__int__int($thisArg, codePoint, startIndex) {\n    j_l_String.$clinit();\n    return j_l_String.m_indexOf__java_lang_String__java_lang_String__int($thisArg, j_l_String.m_fromCodePoint__int_$pp_java_lang(codePoint), startIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} str\n   * @return {number}\n   * @public\n   */\n  static m_indexOf__java_lang_String__java_lang_String($thisArg, str) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).indexOf(str);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} str\n   * @param {number} startIndex\n   * @return {number}\n   * @public\n   */\n  static m_indexOf__java_lang_String__java_lang_String__int($thisArg, str, startIndex) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).indexOf(str, startIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_intern__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return /**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg), j_l_String));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isEmpty__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return j_l_String.m_length__java_lang_String($thisArg) \x3d\x3d 0;\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} codePoint\n   * @return {number}\n   * @public\n   */\n  static m_lastIndexOf__java_lang_String__int($thisArg, codePoint) {\n    j_l_String.$clinit();\n    return j_l_String.m_lastIndexOf__java_lang_String__java_lang_String($thisArg, j_l_String.m_fromCodePoint__int_$pp_java_lang(codePoint));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} codePoint\n   * @param {number} startIndex\n   * @return {number}\n   * @public\n   */\n  static m_lastIndexOf__java_lang_String__int__int($thisArg, codePoint, startIndex) {\n    j_l_String.$clinit();\n    return j_l_String.m_lastIndexOf__java_lang_String__java_lang_String__int($thisArg, j_l_String.m_fromCodePoint__int_$pp_java_lang(codePoint), startIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} str\n   * @return {number}\n   * @public\n   */\n  static m_lastIndexOf__java_lang_String__java_lang_String($thisArg, str) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).lastIndexOf(str);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} str\n   * @param {number} start\n   * @return {number}\n   * @public\n   */\n  static m_lastIndexOf__java_lang_String__java_lang_String__int($thisArg, str, start) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).lastIndexOf(str, start);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_length__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).length;\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} regex\n   * @return {boolean}\n   * @public\n   */\n  static m_matches__java_lang_String__java_lang_String($thisArg, regex) {\n    j_l_String.$clinit();\n    return new RegExp(\"^(\" + j_l_String.m_valueOf__java_lang_Object(regex) + \")$\").test($thisArg);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} index\n   * @param {number} codePointOffset\n   * @return {number}\n   * @public\n   */\n  static m_offsetByCodePoints__java_lang_String__int__int($thisArg, index, codePointOffset) {\n    j_l_String.$clinit();\n    return Character.m_offsetByCodePoints__java_lang_CharSequence__int__int($thisArg, index, codePointOffset);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {boolean} ignoreCase\n   * @param {number} toffset\n   * @param {?string} other\n   * @param {number} ooffset\n   * @param {number} len\n   * @return {boolean}\n   * @public\n   */\n  static m_regionMatches__java_lang_String__boolean__int__java_lang_String__int__int($thisArg, ignoreCase, toffset, other, ooffset, len) {\n    j_l_String.$clinit();\n    $InternalPreconditions.m_checkNotNull__java_lang_Object(other);\n    if (toffset \x3c 0 || ooffset \x3c 0) {\n      return false;\n    }\n    if (toffset + len \x3e j_l_String.m_length__java_lang_String($thisArg) || ooffset + len \x3e j_l_String.m_length__java_lang_String(other)) {\n      return false;\n    }\n    if (len \x3c\x3d 0) {\n      return true;\n    }\n    let left \x3d j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).substr(toffset, len);\n    let right \x3d j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String(other).substr(ooffset, len);\n    return ignoreCase ? j_l_String.m_equalsIgnoreCase__java_lang_String__java_lang_String(left, right) : j_l_String.m_equals__java_lang_String__java_lang_Object(left, right);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} toffset\n   * @param {?string} other\n   * @param {number} ooffset\n   * @param {number} len\n   * @return {boolean}\n   * @public\n   */\n  static m_regionMatches__java_lang_String__int__java_lang_String__int__int($thisArg, toffset, other, ooffset, len) {\n    j_l_String.$clinit();\n    return j_l_String.m_regionMatches__java_lang_String__boolean__int__java_lang_String__int__int($thisArg, false, toffset, other, ooffset, len);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} from\n   * @param {number} to\n   * @return {?string}\n   * @public\n   */\n  static m_replace__java_lang_String__char__char($thisArg, from, to) {\n    j_l_String.$clinit();\n    let hex \x3d Integer.m_toHexString__int(from);\n    let regex \x3d \"\\\\u\" + j_l_String.m_valueOf__java_lang_Object(j_l_String.m_substring__java_lang_String__int(\"0000\", j_l_String.m_length__java_lang_String(hex))) + j_l_String.m_valueOf__java_lang_Object(hex);\n    let replace \x3d String.fromCharCode(to);\n    return j_l_String.m_nativeReplaceAll__java_lang_String__java_lang_String__java_lang_String_$pp_java_lang($thisArg, regex, replace);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {(CharSequence|string)} from\n   * @param {(CharSequence|string)} to\n   * @return {?string}\n   * @public\n   */\n  static m_replace__java_lang_String__java_lang_CharSequence__java_lang_CharSequence($thisArg, from, to) {\n    j_l_String.$clinit();\n    let regex \x3d j_l_String.m_replaceAll__java_lang_String__java_lang_String__java_lang_String($CharSequences.m_toString__java_lang_CharSequence(from), \"([/\\\\\\\\\\\\.\\\\*\\\\+\\\\?\\\\|\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}$^])\", \"\\\\\\\\$1\");\n    let replacement \x3d j_l_String.m_replaceAll__java_lang_String__java_lang_String__java_lang_String(j_l_String.m_replaceAll__java_lang_String__java_lang_String__java_lang_String($CharSequences.m_toString__java_lang_CharSequence(to), \"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"), \"\\\\$\", \"\\\\\\\\$\");\n    return j_l_String.m_replaceAll__java_lang_String__java_lang_String__java_lang_String($thisArg, regex, replacement);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} regex\n   * @param {?string} replace\n   * @return {?string}\n   * @public\n   */\n  static m_replaceAll__java_lang_String__java_lang_String__java_lang_String($thisArg, regex, replace) {\n    j_l_String.$clinit();\n    replace \x3d j_l_String.m_translateReplaceString__java_lang_String_$p_java_lang_String(replace);\n    return j_l_String.m_nativeReplaceAll__java_lang_String__java_lang_String__java_lang_String_$pp_java_lang($thisArg, regex, replace);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} regex\n   * @param {?string} replace\n   * @return {?string}\n   * @public\n   */\n  static m_nativeReplaceAll__java_lang_String__java_lang_String__java_lang_String_$pp_java_lang($thisArg, regex, replace) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).replace(new RegExp(regex, \"g\"), replace);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} regex\n   * @param {?string} replace\n   * @return {?string}\n   * @public\n   */\n  static m_replaceFirst__java_lang_String__java_lang_String__java_lang_String($thisArg, regex, replace) {\n    j_l_String.$clinit();\n    replace \x3d j_l_String.m_translateReplaceString__java_lang_String_$p_java_lang_String(replace);\n    let jsRegEx \x3d new RegExp(regex);\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).replace(jsRegEx, replace);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} regex\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static m_split__java_lang_String__java_lang_String($thisArg, regex) {\n    j_l_String.$clinit();\n    return j_l_String.m_split__java_lang_String__java_lang_String__int($thisArg, regex, 0);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} regex\n   * @param {number} maxMatch\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static m_split__java_lang_String__java_lang_String__int($thisArg, regex, maxMatch) {\n    j_l_String.$clinit();\n    let compiled \x3d new RegExp(regex, \"g\");\n    let out \x3d /**@type {!Array\x3c?string\x3e} */ ($Arrays.$create([0], j_l_String));\n    let count \x3d 0;\n    let trail \x3d $thisArg;\n    let lastTrail \x3d null;\n    while (true) {\n      let matchObj \x3d compiled.exec(trail);\n      if ($Equality.$same(matchObj, null) || $Equality.$same(trail, \"\") || (count \x3d\x3d (maxMatch - 1) \x26\x26 maxMatch \x3e 0)) {\n        $Arrays.$set(out, count, trail);\n        break;\n      } else {\n        let matchIndex \x3d matchObj.index;\n        $Arrays.$set(out, count, j_l_String.m_substring__java_lang_String__int__int(trail, 0, matchIndex));\n        trail \x3d j_l_String.m_substring__java_lang_String__int__int(trail, matchIndex + j_l_String.m_length__java_lang_String($Overlay.m_asArray__javaemul_internal_NativeRegExp_Match(matchObj)[0]), j_l_String.m_length__java_lang_String(trail));\n        compiled.lastIndex \x3d 0;\n        if ($Equality.$same(lastTrail, trail)) {\n          $Arrays.$set(out, count, j_l_String.m_substring__java_lang_String__int__int(trail, 0, 1));\n          trail \x3d j_l_String.m_substring__java_lang_String__int(trail, 1);\n        }\n        lastTrail \x3d trail;\n        count++;\n      }\n    }\n    if (maxMatch \x3d\x3d 0 \x26\x26 j_l_String.m_length__java_lang_String($thisArg) \x3e 0) {\n      let lastNonEmpty \x3d out.length;\n      while (lastNonEmpty \x3e 0 \x26\x26 $Equality.$same(out[lastNonEmpty - 1], \"\")) {\n        --lastNonEmpty;\n      }\n      if (lastNonEmpty \x3c out.length) {\n        ArrayHelper.m_setLength__java_lang_Object__int(out, lastNonEmpty);\n      }\n    }\n    return out;\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} prefix\n   * @return {boolean}\n   * @public\n   */\n  static m_startsWith__java_lang_String__java_lang_String($thisArg, prefix) {\n    j_l_String.$clinit();\n    return j_l_String.m_startsWith__java_lang_String__java_lang_String__int($thisArg, prefix, 0);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {?string} prefix\n   * @param {number} toffset\n   * @return {boolean}\n   * @public\n   */\n  static m_startsWith__java_lang_String__java_lang_String__int($thisArg, prefix, toffset) {\n    j_l_String.$clinit();\n    return toffset \x3e\x3d 0 \x26\x26 j_l_String.m_equals__java_lang_String__java_lang_Object(j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).substr(toffset, j_l_String.m_length__java_lang_String(prefix)), prefix);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} beginIndex\n   * @param {number} endIndex\n   * @return {(CharSequence|string)}\n   * @public\n   */\n  static m_subSequence__java_lang_String__int__int($thisArg, beginIndex, endIndex) {\n    j_l_String.$clinit();\n    return j_l_String.m_substring__java_lang_String__int__int($thisArg, beginIndex, endIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} beginIndex\n   * @return {?string}\n   * @public\n   */\n  static m_substring__java_lang_String__int($thisArg, beginIndex) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).substr(beginIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {number} beginIndex\n   * @param {number} endIndex\n   * @return {?string}\n   * @public\n   */\n  static m_substring__java_lang_String__int__int($thisArg, beginIndex, endIndex) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).substr(beginIndex, endIndex - beginIndex);\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {Array\x3cnumber\x3e}\n   * @public\n   */\n  static m_toCharArray__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    let n \x3d j_l_String.m_length__java_lang_String($thisArg);\n    let charArr \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([n], $char));\n    j_l_String.m_getChars0__java_lang_String__int__int__arrayOf_char__int_$p_java_lang_String($thisArg, 0, n, charArr, 0);\n    return charArr;\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_toLowerCase__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).toLowerCase();\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {Locale} locale\n   * @return {?string}\n   * @public\n   */\n  static m_toLowerCase__java_lang_String__java_util_Locale($thisArg, locale) {\n    j_l_String.$clinit();\n    return $Equality.$same(locale, Locale.m_getDefault__()) ? j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).toLocaleLowerCase() : j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).toLowerCase();\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_toUpperCase__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).toUpperCase();\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {Locale} locale\n   * @return {?string}\n   * @public\n   */\n  static m_toUpperCase__java_lang_String__java_util_Locale($thisArg, locale) {\n    j_l_String.$clinit();\n    return $Equality.$same(locale, Locale.m_getDefault__()) ? j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).toLocaleUpperCase() : j_l_String.m_asNativeString__java_lang_String_$p_java_lang_String($thisArg).toUpperCase();\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_toString__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    return /**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object($thisArg), j_l_String));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_trim__java_lang_String($thisArg) {\n    j_l_String.$clinit();\n    let length \x3d j_l_String.m_length__java_lang_String($thisArg);\n    let start \x3d 0;\n    while (start \x3c length \x26\x26 j_l_String.m_charAt__java_lang_String__int($thisArg, start) \x3c\x3d 32 /* ' ' */) {\n      start++;\n    }\n    let end \x3d length;\n    while (end \x3e start \x26\x26 j_l_String.m_charAt__java_lang_String__int($thisArg, end - 1) \x3c\x3d 32 /* ' ' */) {\n      end--;\n    }\n    return start \x3e 0 || end \x3c length ? j_l_String.m_substring__java_lang_String__int__int($thisArg, start, end) : $thisArg;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  static $create__() {\n    j_l_String.$clinit();\n    return \"\";\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_byte(bytes) {\n    j_l_String.$clinit();\n    return j_l_String.$create__arrayOf_byte__int__int(bytes, 0, bytes.length);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_byte__int__int(bytes, ofs, len) {\n    j_l_String.$clinit();\n    return j_l_String.$create__arrayOf_byte__int__int__java_nio_charset_Charset(bytes, ofs, len, EmulatedCharset.f_UTF_8__javaemul_internal_EmulatedCharset);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @param {?string} charsetName\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_byte__int__int__java_lang_String(bytes, ofs, len, charsetName) {\n    j_l_String.$clinit();\n    return j_l_String.$create__arrayOf_byte__int__int__java_nio_charset_Charset(bytes, ofs, len, j_l_String.m_getCharset__java_lang_String_$p_java_lang_String(charsetName));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {number} ofs\n   * @param {number} len\n   * @param {Charset} charset\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_byte__int__int__java_nio_charset_Charset(bytes, ofs, len, charset) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__arrayOf_char((/**@type {EmulatedCharset} */ ($Casts.$to(charset, EmulatedCharset))).m_decodeString__arrayOf_byte__int__int(bytes, ofs, len));\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {?string} charsetName\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_byte__java_lang_String(bytes, charsetName) {\n    j_l_String.$clinit();\n    return j_l_String.$create__arrayOf_byte__int__int__java_lang_String(bytes, 0, bytes.length, charsetName);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} bytes\n   * @param {Charset} charset\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_byte__java_nio_charset_Charset(bytes, charset) {\n    j_l_String.$clinit();\n    return j_l_String.$create__arrayOf_byte__int__int__java_nio_charset_Charset(bytes, 0, bytes.length, charset);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_char(value) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__arrayOf_char(value);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} value\n   * @param {number} offset\n   * @param {number} count\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_char__int__int(value, offset, count) {\n    j_l_String.$clinit();\n    return j_l_String.m_valueOf__arrayOf_char__int__int(value, offset, count);\n  }\n  \n  /**\n   * @param {Array\x3cnumber\x3e} codePoints\n   * @param {number} offset\n   * @param {number} count\n   * @return {?string}\n   * @public\n   */\n  static $create__arrayOf_int__int__int(codePoints, offset, count) {\n    j_l_String.$clinit();\n    let chars \x3d /**@type {!Array\x3cnumber\x3e} */ ($Arrays.$create([count * 2], $char));\n    let charIdx \x3d 0;\n    while (count-- \x3e 0) {\n      charIdx +\x3d Character.m_toChars__int__arrayOf_char__int(codePoints[offset++], chars, charIdx);\n    }\n    return j_l_String.m_valueOf__arrayOf_char__int__int(chars, 0, charIdx);\n  }\n  \n  /**\n   * @param {?string} other\n   * @return {?string}\n   * @public\n   */\n  static $create__java_lang_String(other) {\n    j_l_String.$clinit();\n    return /**@type {?string} */ ($Casts.$to($InternalPreconditions.m_checkNotNull__java_lang_Object(other), j_l_String));\n  }\n  \n  /**\n   * @param {StringBuffer} sb\n   * @return {?string}\n   * @public\n   */\n  static $create__java_lang_StringBuffer(sb) {\n    j_l_String.$clinit();\n    return sb.toString();\n  }\n  \n  /**\n   * @param {StringBuilder} sb\n   * @return {?string}\n   * @public\n   */\n  static $create__java_lang_StringBuilder(sb) {\n    j_l_String.$clinit();\n    return sb.toString();\n  }\n  \n  /**\n   * @param {*} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    j_l_String.$clinit();\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(\"string\", typeof(instance));\n  }\n  \n  /**\n   * @param {?string} $thisArg\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  static m_compareTo__java_lang_String__java_lang_Object($thisArg, arg0) {\n    j_l_String.$clinit();\n    return j_l_String.m_compareTo__java_lang_String__java_lang_String($thisArg, /**@type {?string} */ ($Casts.$to(arg0, j_l_String)));\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {?string} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @return {number}\n   * @public\n   */\n  m_charAt__int(arg0) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {IntStream}\n   * @public\n   */\n  m_chars__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @return {number}\n   * @public\n   */\n  m_length__() {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {number} arg0\n   * @param {number} arg1\n   * @return {(CharSequence|string)}\n   * @public\n   */\n  m_subSequence__int__int(arg0, arg1) {\n  }\n  \n  /**\n   * @return {Comparator\x3c?string\x3e}\n   * @public\n   */\n  static get f_CASE_INSENSITIVE_ORDER__java_lang_String() {\n    return (j_l_String.$clinit(), j_l_String.$f_CASE_INSENSITIVE_ORDER__java_lang_String);\n  }\n  \n  /**\n   * @param {Comparator\x3c?string\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_CASE_INSENSITIVE_ORDER__java_lang_String(value) {\n    (j_l_String.$clinit(), j_l_String.$f_CASE_INSENSITIVE_ORDER__java_lang_String \x3d value);\n  }\n  \n  /**\n   * $isInstance() function implementation is provided separately.\n   */\n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, j_l_String);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    j_l_String.$clinit \x3d function() {};\n    UnsupportedEncodingException \x3d goog.module.get('java.io.UnsupportedEncodingException$impl');\n    Character \x3d goog.module.get('java.lang.Character$impl');\n    Integer \x3d goog.module.get('java.lang.Integer$impl');\n    $1 \x3d goog.module.get('java.lang.String.$1$impl');\n    Charset \x3d goog.module.get('java.nio.charset.Charset$impl');\n    UnsupportedCharsetException \x3d goog.module.get('java.nio.charset.UnsupportedCharsetException$impl');\n    Locale \x3d goog.module.get('java.util.Locale$impl');\n    StringJoiner \x3d goog.module.get('java.util.StringJoiner$impl');\n    ArrayHelper \x3d goog.module.get('javaemul.internal.ArrayHelper$impl');\n    EmulatedCharset \x3d goog.module.get('javaemul.internal.EmulatedCharset$impl');\n    HashCodes \x3d goog.module.get('javaemul.internal.HashCodes$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    JsUtils \x3d goog.module.get('javaemul.internal.JsUtils$impl');\n    $Overlay \x3d goog.module.get('javaemul.internal.NativeRegExp.Match.$Overlay$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $CharSequences \x3d goog.module.get('vmbootstrap.CharSequences$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    $char \x3d goog.module.get('vmbootstrap.primitives.$char$impl');\n    j_l_Object.$clinit();\n    CharSequence.$clinit();\n    j_l_String.$f_CASE_INSENSITIVE_ORDER__java_lang_String \x3d $1.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(j_l_String, $Util.$makeClassName('java.lang.String'));\n\n\n/** @private {Comparator\x3c?string\x3e} */\nj_l_String.$f_CASE_INSENSITIVE_ORDER__java_lang_String;\n\n\nComparable.$markImplementor(j_l_String);\nCharSequence.$markImplementor(j_l_String);\nSerializable.$markImplementor(j_l_String);\n\n\nexports \x3d j_l_String; \n//# sourceMappingURL\x3dString.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/String.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.String.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.String');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _CharSequence \x3d goog.require('java.lang.CharSequence');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _UnsupportedEncodingException \x3d goog.require('java.io.UnsupportedEncodingException');\nconst _Character \x3d goog.require('java.lang.Character');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _$1 \x3d goog.require('java.lang.String.$1');\nconst _NativeFunction_$Overlay \x3d goog.require('java.lang.String.NativeFunction.$Overlay');\nconst _NativeString_$Overlay \x3d goog.require('java.lang.String.NativeString.$Overlay');\nconst _StringBuffer \x3d goog.require('java.lang.StringBuffer');\nconst _StringBuilder \x3d goog.require('java.lang.StringBuilder');\nconst _Charset \x3d goog.require('java.nio.charset.Charset');\nconst _UnsupportedCharsetException \x3d goog.require('java.nio.charset.UnsupportedCharsetException');\nconst _Comparator \x3d goog.require('java.util.Comparator');\nconst _Locale \x3d goog.require('java.util.Locale');\nconst _StringJoiner \x3d goog.require('java.util.StringJoiner');\nconst _IntStream \x3d goog.require('java.util.stream.IntStream');\nconst _ArrayHelper \x3d goog.require('javaemul.internal.ArrayHelper');\nconst _EmulatedCharset \x3d goog.require('javaemul.internal.EmulatedCharset');\nconst _HashCodes \x3d goog.require('javaemul.internal.HashCodes');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _JsUtils \x3d goog.require('javaemul.internal.JsUtils');\nconst _$Overlay \x3d goog.require('javaemul.internal.NativeRegExp.Match.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$CharSequences \x3d goog.require('vmbootstrap.CharSequences');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\nconst _$char \x3d goog.require('vmbootstrap.primitives.$char');\n\n\n// Re-exports the implementation.\nvar j_l_String \x3d goog.require('java.lang.String$impl');\nexports \x3d j_l_String;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/io/Serializable.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.io.Serializable.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.io.Serializable');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('java.io.HasSerializableTypeMarker.$Overlay');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar Serializable \x3d goog.require('java.io.Serializable$impl');\nexports \x3d Serializable;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/reflect/Type.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.reflect.Type.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.reflect.Type$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @interface\n */\nclass Type {\n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__java_lang_reflect_Type \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__java_lang_reflect_Type;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__java_lang_reflect_Type;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Type.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Type, $Util.$makeClassName('java.lang.reflect.Type'));\n\n\nType.$markImplementor(/** @type {Function} */ (Type));\n\n\nexports \x3d Type; \n//# sourceMappingURL\x3dType.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/reflect/Type.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.reflect.Type.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.reflect.Type');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Type \x3d goog.require('java.lang.reflect.Type$impl');\nexports \x3d Type;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Class.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Class.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.lang.Class$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst Type \x3d goog.require('java.lang.reflect.Type$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Constructor \x3d goog.forwardDeclare('javaemul.internal.Constructor');\nlet $Overlay \x3d goog.forwardDeclare('javaemul.internal.Constructor.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet Util \x3d goog.forwardDeclare('nativebootstrap.Util');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_T\n * @implements {Type}\n * @implements {Serializable}\n  */\nclass Class extends j_l_Object {\n  /**\n   * JsConstructor 'Class(Constructor, int)'.\n   * @param {Constructor} ctor\n   * @param {number} dimensionCount\n   * @public\n   */\n  constructor(ctor, dimensionCount) {\n    Class.$clinit();\n    super();\n    /** @public {Constructor} */\n    this.f_ctor__java_lang_Class_;\n    /** @public {number} */\n    this.f_dimensionCount__java_lang_Class_ \x3d 0;\n    this.$ctor__java_lang_Class__javaemul_internal_Constructor__int(ctor, dimensionCount);\n  }\n  \n  /**\n   * @param {Constructor} ctor\n   * @param {number} dimensionCount\n   * @return {Class\x3c?\x3e}\n   * @public\n   */\n  // native static $get(ctor, dimensionCount) \n  \n  /**\n   * @param {Constructor} ctor\n   * @return {Class\x3c?\x3e}\n   * @public\n   */\n  // native static $get(ctor) \n  \n  /**\n   * Initialization from constructor 'Class(Constructor, int)'.\n   * @param {Constructor} ctor\n   * @param {number} dimensionCount\n   * @return {void}\n   * @public\n   */\n  $ctor__java_lang_Class__javaemul_internal_Constructor__int(ctor, dimensionCount) {\n    this.$ctor__java_lang_Object__();\n    this.f_ctor__java_lang_Class_ \x3d ctor;\n    this.f_dimensionCount__java_lang_Class_ \x3d dimensionCount;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getName__() {\n    let className \x3d Util.$extractClassName(this.f_ctor__java_lang_Class_);\n    if (this.m_isArray__()) {\n      if (Util.$extractClassType(this.f_ctor__java_lang_Class_) !\x3d Util.TYPE_PRIMITIVE) {\n        className \x3d \"L\" + j_l_String.m_valueOf__java_lang_Object(className) + \";\";\n      } else {\n        className \x3d Util.$extractPrimitiveShortName(this.f_ctor__java_lang_Class_);\n      }\n    }\n    return j_l_String.m_valueOf__java_lang_Object(Class.m_repeatString__java_lang_String__int_$p_java_lang_Class(\"[\", this.f_dimensionCount__java_lang_Class_)) + j_l_String.m_valueOf__java_lang_Object(className);\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getCanonicalName__() {\n    return j_l_String.m_valueOf__java_lang_Object(Util.$extractClassName(this.f_ctor__java_lang_Class_)) + j_l_String.m_valueOf__java_lang_Object(Class.m_repeatString__java_lang_String__int_$p_java_lang_Class(\"[]\", this.f_dimensionCount__java_lang_Class_));\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getSimpleName__() {\n    let canonicalName \x3d this.m_getCanonicalName__();\n    return j_l_String.m_substring__java_lang_String__int(canonicalName, j_l_String.m_lastIndexOf__java_lang_String__java_lang_String(canonicalName, \".\") + 1);\n  }\n  \n  /**\n   * @return {Class\x3c?\x3e}\n   * @public\n   */\n  m_getComponentType__() {\n    return this.m_isArray__() ? Class.$get(this.f_ctor__java_lang_Class_, this.f_dimensionCount__java_lang_Class_ - 1) : null;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isArray__() {\n    return this.f_dimensionCount__java_lang_Class_ !\x3d 0;\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isEnum__() {\n    return this.m_isOfType__int_$p_java_lang_Class(Util.TYPE_ENUM);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isInterface__() {\n    return this.m_isOfType__int_$p_java_lang_Class(Util.TYPE_INTERFACE);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_isPrimitive__() {\n    return this.m_isOfType__int_$p_java_lang_Class(Util.TYPE_PRIMITIVE);\n  }\n  \n  /**\n   * @param {number} type\n   * @return {boolean}\n   * @public\n   */\n  m_isOfType__int_$p_java_lang_Class(type) {\n    return !this.m_isArray__() \x26\x26 Util.$extractClassType(this.f_ctor__java_lang_Class_) \x3d\x3d type;\n  }\n  \n  /**\n   * @return {Array\x3cC_T\x3e}\n   * @public\n   */\n  m_getEnumConstants__() {\n    return null;\n  }\n  \n  /**\n   * @return {Class\x3c?\x3e}\n   * @public\n   */\n  m_getSuperclass__() {\n    let superCtor \x3d $Overlay.m_getSuperConstructor__javaemul_internal_Constructor(this.f_ctor__java_lang_Class_);\n    return $Equality.$same(superCtor, null) ? null : /**@type {Class\x3c*\x3e} */ ($Casts.$to(Class.$get(superCtor, 0), Class));\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  m_desiredAssertionStatus__() {\n    return false;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return j_l_String.m_valueOf__java_lang_Object((this.m_isInterface__() ? \"interface \" : this.m_isPrimitive__() ? \"\" : \"class \")) + j_l_String.m_valueOf__java_lang_Object(this.m_getName__());\n  }\n  \n  /**\n   * @param {?string} str\n   * @param {number} count\n   * @return {?string}\n   * @public\n   */\n  static m_repeatString__java_lang_String__int_$p_java_lang_Class(str, count) {\n    Class.$clinit();\n    let rv \x3d \"\";\n    for (let i \x3d 0; i \x3c count; i++) {\n      rv \x3d j_l_String.m_valueOf__java_lang_Object(rv) + j_l_String.m_valueOf__java_lang_Object(str);\n    }\n    return rv;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Class;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Class);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Class.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Overlay \x3d goog.module.get('javaemul.internal.Constructor.$Overlay$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    Util \x3d goog.module.get('nativebootstrap.Util');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Class, $Util.$makeClassName('java.lang.Class'));\n\n\nType.$markImplementor(Class);\nSerializable.$markImplementor(Class);\n\n\n/* NATIVE.JS EPILOG */\n\nconst java_lang_Class \x3d Class;\n\n// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst Reflect \x3d goog.require('goog.reflect');\n\n/**\n * // TODO(b/79389970): change classConstructor to Function.\n * @param {Object} classConstructor\n * @param {number\x3d} opt_dimensionCount\n * @return {Class}\n * @public\n */\nClass.$get \x3d function(classConstructor, opt_dimensionCount) {\n  let dimensionCount \x3d opt_dimensionCount || 0;\n  return Reflect.cache(\n      classConstructor.prototype, '$$class/' + dimensionCount, function() {\n        return new Class(\n            /** @type {Constructor} */ (classConstructor), dimensionCount);\n      });\n};\n\n\nexports \x3d Class; \n//# sourceMappingURL\x3dClass.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Class.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Class.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Class');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Type \x3d goog.require('java.lang.reflect.Type');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Constructor \x3d goog.require('javaemul.internal.Constructor');\nconst _$Overlay \x3d goog.require('javaemul.internal.Constructor.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Class \x3d goog.require('java.lang.Class$impl');\nexports \x3d Class;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/lang/Object.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.lang.Object.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.lang.Object');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Integer \x3d goog.require('java.lang.Integer');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Constructor \x3d goog.require('javaemul.internal.Constructor');\nconst _$Overlay \x3d goog.require('javaemul.internal.Constructor.$Overlay');\nconst _HashCodes \x3d goog.require('javaemul.internal.HashCodes');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar j_l_Object \x3d goog.require('java.lang.Object$impl');\nexports \x3d j_l_Object;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/google/gwt/core/client/EntryPoint.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.google.gwt.core.client.EntryPoint.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.google.gwt.core.client.EntryPoint$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('com.google.gwt.core.client.EntryPoint.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass EntryPoint {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_onModuleLoad__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {EntryPoint}\n   * @public\n   */\n  static $adapt(fn) {\n    EntryPoint.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__com_google_gwt_core_client_EntryPoint \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__com_google_gwt_core_client_EntryPoint;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__com_google_gwt_core_client_EntryPoint;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EntryPoint.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('com.google.gwt.core.client.EntryPoint.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(EntryPoint, $Util.$makeClassName('com.google.gwt.core.client.EntryPoint'));\n\n\nEntryPoint.$markImplementor(/** @type {Function} */ (EntryPoint));\n\n\nexports \x3d EntryPoint; \n//# sourceMappingURL\x3dEntryPoint.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/google/gwt/core/client/EntryPoint$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.google.gwt.core.client.EntryPoint$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.google.gwt.core.client.EntryPoint.$LambdaAdaptor$impl');\n\n\nconst EntryPoint \x3d goog.require('com.google.gwt.core.client.EntryPoint$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @implements {EntryPoint}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__com_google_gwt_core_client_EntryPoint_$LambdaAdaptor;\n    this.$ctor__com_google_gwt_core_client_EntryPoint_$LambdaAdaptor__com_google_gwt_core_client_EntryPoint_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__com_google_gwt_core_client_EntryPoint_$LambdaAdaptor__com_google_gwt_core_client_EntryPoint_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__com_google_gwt_core_client_EntryPoint_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_onModuleLoad__() {\n    {\n      let $function \x3d this.f_$$fn__com_google_gwt_core_client_EntryPoint_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('com.google.gwt.core.client.EntryPoint$$LambdaAdaptor'));\n\n\nEntryPoint.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dEntryPoint$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/google/gwt/core/client/EntryPoint$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.google.gwt.core.client.EntryPoint$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.google.gwt.core.client.EntryPoint.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _EntryPoint \x3d goog.require('com.google.gwt.core.client.EntryPoint');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('com.google.gwt.core.client.EntryPoint.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/google/gwt/core/client/EntryPoint.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.google.gwt.core.client.EntryPoint.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.google.gwt.core.client.EntryPoint');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('com.google.gwt.core.client.EntryPoint.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar EntryPoint \x3d goog.require('com.google.gwt.core.client.EntryPoint$impl');\nexports \x3d EntryPoint;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/DateTimeFormat$PredefinedFormat.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.DateTimeFormat$PredefinedFormat.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat$impl');\n\n\nconst Enum \x3d goog.require('java.lang.Enum$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Enums \x3d goog.forwardDeclare('vmbootstrap.Enums$impl');\n\n\n/**\n * @extends {Enum\x3cPredefinedFormat\x3e}\n  */\nclass PredefinedFormat extends Enum {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'PredefinedFormat(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!PredefinedFormat}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    let $instance \x3d new PredefinedFormat();\n    $instance.$ctor__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'PredefinedFormat(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat__java_lang_String__int($name, $ordinal) {\n    this.f_name__java_lang_Enum_ \x3d $name;\n    this.f_ordinal__java_lang_Enum_ \x3d $ordinal;\n    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @param {string} name\n   * @return {!PredefinedFormat}\n   * @public\n   */\n  static m_valueOf__java_lang_String(name) {\n    PredefinedFormat.$clinit();\n    if ($Equality.$same(PredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_, null)) {\n      PredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_ \x3d $Enums.createMapFromValues(PredefinedFormat.m_values__());\n    }\n    return $Enums.getValueFromNameAndMap(name, PredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_);\n  }\n  \n  /**\n   * @return {!Array\x3c!PredefinedFormat\x3e}\n   * @public\n   */\n  static m_values__() {\n    PredefinedFormat.$clinit();\n    return /**@type {!Array\x3cPredefinedFormat\x3e} */ ($Arrays.$init([PredefinedFormat.$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat], PredefinedFormat));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {PredefinedFormat} */ ($Casts.$to(arg0, PredefinedFormat)));\n  }\n  \n  /**\n   * @return {!PredefinedFormat}\n   * @public\n   */\n  static get f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat() {\n    return (PredefinedFormat.$clinit(), PredefinedFormat.$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat);\n  }\n  \n  /**\n   * @param {!PredefinedFormat} value\n   * @return {void}\n   * @public\n   */\n  static set f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat(value) {\n    (PredefinedFormat.$clinit(), PredefinedFormat.$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat \x3d value);\n  }\n  \n  /**\n   * @return {Map\x3c?string, !PredefinedFormat\x3e}\n   * @public\n   */\n  static get f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_() {\n    return (PredefinedFormat.$clinit(), PredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_);\n  }\n  \n  /**\n   * @param {Map\x3c?string, !PredefinedFormat\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_(value) {\n    (PredefinedFormat.$clinit(), PredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof PredefinedFormat;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, PredefinedFormat);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PredefinedFormat.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Enums \x3d goog.module.get('vmbootstrap.Enums$impl');\n    Enum.$clinit();\n    PredefinedFormat.$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat \x3d PredefinedFormat.$create__java_lang_String__int($Util.$makeEnumName(\"DATE_SHORT\"), PredefinedFormat.$ordinal$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat);\n    PredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_ \x3d null;\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForEnum(PredefinedFormat, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.DateTimeFormat$PredefinedFormat'));\n\n\n/** @private {!PredefinedFormat} */\nPredefinedFormat.$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat;\n\n\n/** @private {Map\x3c?string, !PredefinedFormat\x3e} */\nPredefinedFormat.$f_namesToValuesMap__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat_;\n\n\n/** @public {number} @const */\nPredefinedFormat.$ordinal$f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat \x3d 0;\n\n\n\n\nexports \x3d PredefinedFormat; \n//# sourceMappingURL\x3dDateTimeFormat$PredefinedFormat.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/DateTimeFormat$PredefinedFormat.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.DateTimeFormat$PredefinedFormat.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Enum \x3d goog.require('java.lang.Enum');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Enums \x3d goog.require('vmbootstrap.Enums');\n\n\n// Re-exports the implementation.\nvar PredefinedFormat \x3d goog.require('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat$impl');\nexports \x3d PredefinedFormat;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Date$NativeDate$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Date$NativeDate$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Date.NativeDate.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Date;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Date'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDate$NativeDate$$Overlay.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Date$NativeDate$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Date$NativeDate$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Date.NativeDate.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('java.util.Date.NativeDate.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Date$StringData.impl.java.js
goog.loadModule("'use strict'"+'/**\n * @fileoverview transpiled from java.util.Date$StringData.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module(\'java.util.Date.StringData$impl\');\n\n\nconst j_l_Object \x3d goog.require(\'java.lang.Object$impl\');\nconst $Util \x3d goog.require(\'nativebootstrap.Util$impl\');\n\nlet j_l_String \x3d goog.forwardDeclare(\'java.lang.String$impl\');\nlet $Arrays \x3d goog.forwardDeclare(\'vmbootstrap.Arrays$impl\');\n\n\nclass StringData extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor \'StringData()\'.\n   * @return {!StringData}\n   * @public\n   */\n  static $create__() {\n    StringData.$clinit();\n    let $instance \x3d new StringData();\n    $instance.$ctor__java_util_Date_StringData__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor \'StringData()\'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date_StringData__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static get f_DAYS__java_util_Date_StringData() {\n    return (StringData.$clinit(), StringData.$f_DAYS__java_util_Date_StringData);\n  }\n  \n  /**\n   * @param {Array\x3c?string\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_DAYS__java_util_Date_StringData(value) {\n    (StringData.$clinit(), StringData.$f_DAYS__java_util_Date_StringData \x3d value);\n  }\n  \n  /**\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static get f_MONTHS__java_util_Date_StringData() {\n    return (StringData.$clinit(), StringData.$f_MONTHS__java_util_Date_StringData);\n  }\n  \n  /**\n   * @param {Array\x3c?string\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_MONTHS__java_util_Date_StringData(value) {\n    (StringData.$clinit(), StringData.$f_MONTHS__java_util_Date_StringData \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StringData;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StringData);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StringData.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get(\'java.lang.String$impl\');\n    $Arrays \x3d goog.module.get(\'vmbootstrap.Arrays$impl\');\n    j_l_Object.$clinit();\n    StringData.$f_DAYS__java_util_Date_StringData \x3d /**@type {!Array\x3c?string\x3e} */ ($Arrays.$init(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], j_l_String));\n    StringData.$f_MONTHS__java_util_Date_StringData \x3d /**@type {!Array\x3c?string\x3e} */ ($Arrays.$init(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], j_l_String));\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StringData, $Util.$makeClassName(\'java.util.Date$StringData\'));\n\n\n/** @private {Array\x3c?string\x3e} */\nStringData.$f_DAYS__java_util_Date_StringData;\n\n\n/** @private {Array\x3c?string\x3e} */\nStringData.$f_MONTHS__java_util_Date_StringData;\n\n\n\n\nexports \x3d StringData; \n//# sourceMappingURL\x3dDate$StringData.js.map');

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Date$StringData.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Date$StringData.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Date.StringData');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\n\n\n// Re-exports the implementation.\nvar StringData \x3d goog.require('java.util.Date.StringData$impl');\nexports \x3d StringData;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Date.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Date.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.Date$impl');\n\n\nconst Serializable \x3d goog.require('java.io.Serializable$impl');\nconst Cloneable \x3d goog.require('java.lang.Cloneable$impl');\nconst Comparable \x3d goog.require('java.lang.Comparable$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Long \x3d goog.require('nativebootstrap.Long$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet IllegalArgumentException \x3d goog.forwardDeclare('java.lang.IllegalArgumentException$impl');\nlet Long \x3d goog.forwardDeclare('java.lang.Long$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Overlay \x3d goog.forwardDeclare('java.util.Date.NativeDate.$Overlay$impl');\nlet StringData \x3d goog.forwardDeclare('java.util.Date.StringData$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\nlet $LongUtils \x3d goog.forwardDeclare('vmbootstrap.LongUtils$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @implements {Cloneable}\n * @implements {Comparable\x3cj_u_Date\x3e}\n * @implements {Serializable}\n  */\nclass j_u_Date extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Date} */\n    this.f_jsdate__java_util_Date_;\n  }\n  \n  /**\n   * @param {?string} s\n   * @return {!$Long}\n   * @public\n   */\n  static m_parse__java_lang_String(s) {\n    j_u_Date.$clinit();\n    let parsed \x3d Date.parse(s);\n    if (isNaN(parsed)) {\n      throw $Exceptions.toJs(IllegalArgumentException.$create__());\n    }\n    return $Primitives.$narrowDoubleToLong(parsed);\n  }\n  \n  /**\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @param {number} hrs\n   * @param {number} min\n   * @param {number} sec\n   * @return {!$Long}\n   * @public\n   */\n  static m_UTC__int__int__int__int__int__int(year, month, date, hrs, min, sec) {\n    j_u_Date.$clinit();\n    return $Primitives.$narrowDoubleToLong(Date.UTC(year + 1900, month, date, hrs, min, sec, 0));\n  }\n  \n  /**\n   * @param {number} number$1$\n   * @return {?string}\n   * @public\n   */\n  static m_padTwo__int(number$1$) {\n    j_u_Date.$clinit();\n    if (number$1$ \x3c 10) {\n      return \"0\" + number$1$;\n    } else {\n      return j_l_String.m_valueOf__int(number$1$);\n    }\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Date()'.\n   * @return {!j_u_Date}\n   * @public\n   */\n  static $create__() {\n    j_u_Date.$clinit();\n    let $instance \x3d new j_u_Date();\n    $instance.$ctor__java_util_Date__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Date()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date__() {\n    this.$ctor__java_lang_Object__();\n    this.f_jsdate__java_util_Date_ \x3d new Date();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Date(int, int, int)'.\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @return {!j_u_Date}\n   * @public\n   */\n  static $create__int__int__int(year, month, date) {\n    j_u_Date.$clinit();\n    let $instance \x3d new j_u_Date();\n    $instance.$ctor__java_util_Date__int__int__int(year, month, date);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Date(int, int, int)'.\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date__int__int__int(year, month, date) {\n    this.$ctor__java_util_Date__int__int__int__int__int__int(year, month, date, 0, 0, 0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Date(int, int, int, int, int)'.\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @param {number} hrs\n   * @param {number} min\n   * @return {!j_u_Date}\n   * @public\n   */\n  static $create__int__int__int__int__int(year, month, date, hrs, min) {\n    j_u_Date.$clinit();\n    let $instance \x3d new j_u_Date();\n    $instance.$ctor__java_util_Date__int__int__int__int__int(year, month, date, hrs, min);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Date(int, int, int, int, int)'.\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @param {number} hrs\n   * @param {number} min\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date__int__int__int__int__int(year, month, date, hrs, min) {\n    this.$ctor__java_util_Date__int__int__int__int__int__int(year, month, date, hrs, min, 0);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Date(int, int, int, int, int, int)'.\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @param {number} hrs\n   * @param {number} min\n   * @param {number} sec\n   * @return {!j_u_Date}\n   * @public\n   */\n  static $create__int__int__int__int__int__int(year, month, date, hrs, min, sec) {\n    j_u_Date.$clinit();\n    let $instance \x3d new j_u_Date();\n    $instance.$ctor__java_util_Date__int__int__int__int__int__int(year, month, date, hrs, min, sec);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Date(int, int, int, int, int, int)'.\n   * @param {number} year\n   * @param {number} month\n   * @param {number} date\n   * @param {number} hrs\n   * @param {number} min\n   * @param {number} sec\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date__int__int__int__int__int__int(year, month, date, hrs, min, sec) {\n    this.$ctor__java_lang_Object__();\n    this.f_jsdate__java_util_Date_ \x3d new Date();\n    this.f_jsdate__java_util_Date_.setFullYear(year + 1900, month, date);\n    this.f_jsdate__java_util_Date_.setHours(hrs, min, sec, 0);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hrs);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Date(long)'.\n   * @param {!$Long} date\n   * @return {!j_u_Date}\n   * @public\n   */\n  static $create__long(date) {\n    j_u_Date.$clinit();\n    let $instance \x3d new j_u_Date();\n    $instance.$ctor__java_util_Date__long(date);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Date(long)'.\n   * @param {!$Long} date\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date__long(date) {\n    this.$ctor__java_lang_Object__();\n    this.f_jsdate__java_util_Date_ \x3d new Date($Primitives.$widenLongToDouble(date));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Date(String)'.\n   * @param {?string} date\n   * @return {!j_u_Date}\n   * @public\n   */\n  static $create__java_lang_String(date) {\n    j_u_Date.$clinit();\n    let $instance \x3d new j_u_Date();\n    $instance.$ctor__java_util_Date__java_lang_String(date);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Date(String)'.\n   * @param {?string} date\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_Date__java_lang_String(date) {\n    this.$ctor__java_util_Date__long(j_u_Date.m_parse__java_lang_String(date));\n  }\n  \n  /**\n   * @param {j_u_Date} when\n   * @return {boolean}\n   * @public\n   */\n  m_after__java_util_Date(when) {\n    return $LongUtils.$greater(this.m_getTime__(), when.m_getTime__());\n  }\n  \n  /**\n   * @param {j_u_Date} when\n   * @return {boolean}\n   * @public\n   */\n  m_before__java_util_Date(when) {\n    return $LongUtils.$less(this.m_getTime__(), when.m_getTime__());\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  m_clone__() {\n    return j_u_Date.$create__long(this.m_getTime__());\n  }\n  \n  /**\n   * @param {j_u_Date} other\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_util_Date(other) {\n    return Long.m_compare__long__long(this.m_getTime__(), other.m_getTime__());\n  }\n  \n  /**\n   * @override\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  equals(obj) {\n    return (j_u_Date.$isInstance(obj) \x26\x26 $LongUtils.$equals(this.m_getTime__(), (/**@type {j_u_Date} */ ($Casts.$to(obj, j_u_Date))).m_getTime__()));\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getDate__() {\n    return this.f_jsdate__java_util_Date_.getDate();\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getDay__() {\n    return this.f_jsdate__java_util_Date_.getDay();\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getHours__() {\n    return this.f_jsdate__java_util_Date_.getHours();\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getMinutes__() {\n    return this.f_jsdate__java_util_Date_.getMinutes();\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getMonth__() {\n    return this.f_jsdate__java_util_Date_.getMonth();\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getSeconds__() {\n    return this.f_jsdate__java_util_Date_.getSeconds();\n  }\n  \n  /**\n   * @return {!$Long}\n   * @public\n   */\n  m_getTime__() {\n    return $Primitives.$narrowDoubleToLong(this.f_jsdate__java_util_Date_.getTime());\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getTimezoneOffset__() {\n    return this.f_jsdate__java_util_Date_.getTimezoneOffset();\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getYear__() {\n    return this.f_jsdate__java_util_Date_.getFullYear() - 1900;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    let time \x3d this.m_getTime__();\n    return $Primitives.$narrowLongToInt($LongUtils.$xor(time, $LongUtils.$rightShiftUnsigned(time, 32)));\n  }\n  \n  /**\n   * @param {number} date\n   * @return {void}\n   * @public\n   */\n  m_setDate__int(date) {\n    let hours \x3d this.f_jsdate__java_util_Date_.getHours();\n    this.f_jsdate__java_util_Date_.setDate(date);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hours);\n  }\n  \n  /**\n   * @param {number} hours\n   * @return {void}\n   * @public\n   */\n  m_setHours__int(hours) {\n    this.f_jsdate__java_util_Date_.setHours(hours);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hours);\n  }\n  \n  /**\n   * @param {number} minutes\n   * @return {void}\n   * @public\n   */\n  m_setMinutes__int(minutes) {\n    let hours \x3d this.m_getHours__() + $Primitives.$coerceDivision(minutes / 60);\n    this.f_jsdate__java_util_Date_.setMinutes(minutes);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hours);\n  }\n  \n  /**\n   * @param {number} month\n   * @return {void}\n   * @public\n   */\n  m_setMonth__int(month) {\n    let hours \x3d this.f_jsdate__java_util_Date_.getHours();\n    this.f_jsdate__java_util_Date_.setMonth(month);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hours);\n  }\n  \n  /**\n   * @param {number} seconds\n   * @return {void}\n   * @public\n   */\n  m_setSeconds__int(seconds) {\n    let hours \x3d this.m_getHours__() + $Primitives.$coerceDivision(seconds / (60 * 60));\n    this.f_jsdate__java_util_Date_.setSeconds(seconds);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hours);\n  }\n  \n  /**\n   * @param {!$Long} time\n   * @return {void}\n   * @public\n   */\n  m_setTime__long(time) {\n    this.f_jsdate__java_util_Date_.setTime($Primitives.$widenLongToDouble(time));\n  }\n  \n  /**\n   * @param {number} year\n   * @return {void}\n   * @public\n   */\n  m_setYear__int(year) {\n    let hours \x3d this.f_jsdate__java_util_Date_.getHours();\n    this.f_jsdate__java_util_Date_.setFullYear(year + 1900);\n    this.m_fixDaylightSavings__int_$p_java_util_Date(hours);\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_toGMTString__() {\n    return this.f_jsdate__java_util_Date_.getUTCDate() + \" \" + j_l_String.m_valueOf__java_lang_Object(StringData.f_MONTHS__java_util_Date_StringData[this.f_jsdate__java_util_Date_.getUTCMonth()]) + \" \" + this.f_jsdate__java_util_Date_.getUTCFullYear() + \" \" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getUTCHours())) + \":\" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getUTCMinutes())) + \":\" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getUTCSeconds())) + \" GMT\";\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_toLocaleString__() {\n    return this.f_jsdate__java_util_Date_.toLocaleString();\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    let offset \x3d -this.f_jsdate__java_util_Date_.getTimezoneOffset();\n    let hourOffset \x3d j_l_String.m_valueOf__java_lang_Object(((offset \x3e\x3d 0) ? \"+\" : \"\")) + $Primitives.$coerceDivision(offset / 60);\n    let minuteOffset \x3d j_u_Date.m_padTwo__int($Primitives.$coerceDivision(Math.abs(offset) % 60));\n    return j_l_String.m_valueOf__java_lang_Object(StringData.f_DAYS__java_util_Date_StringData[this.f_jsdate__java_util_Date_.getDay()]) + \" \" + j_l_String.m_valueOf__java_lang_Object(StringData.f_MONTHS__java_util_Date_StringData[this.f_jsdate__java_util_Date_.getMonth()]) + \" \" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getDate())) + \" \" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getHours())) + \":\" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getMinutes())) + \":\" + j_l_String.m_valueOf__java_lang_Object(j_u_Date.m_padTwo__int(this.f_jsdate__java_util_Date_.getSeconds())) + \" GMT\" + j_l_String.m_valueOf__java_lang_Object(hourOffset) + j_l_String.m_valueOf__java_lang_Object(minuteOffset) + \" \" + this.f_jsdate__java_util_Date_.getFullYear();\n  }\n  \n  /**\n   * @param {number} requestedHours\n   * @return {void}\n   * @public\n   */\n  m_fixDaylightSavings__int_$p_java_util_Date(requestedHours) {\n    requestedHours \x3d $Primitives.$coerceDivision(requestedHours % 24);\n    if (this.f_jsdate__java_util_Date_.getHours() !\x3d requestedHours) {\n      let copy \x3d new Date(this.f_jsdate__java_util_Date_.getTime());\n      copy.setDate(copy.getDate() + 1);\n      let timeDiff \x3d this.f_jsdate__java_util_Date_.getTimezoneOffset() - copy.getTimezoneOffset();\n      if (timeDiff \x3e 0) {\n        let timeDiffHours \x3d $Primitives.$coerceDivision(timeDiff / 60);\n        let timeDiffMinutes \x3d $Primitives.$coerceDivision(timeDiff % 60);\n        let day \x3d this.f_jsdate__java_util_Date_.getDate();\n        let badHours \x3d this.f_jsdate__java_util_Date_.getHours();\n        if (badHours + timeDiffHours \x3e\x3d 24) {\n          day++;\n        }\n        let newTime \x3d new Date(this.f_jsdate__java_util_Date_.getFullYear(), this.f_jsdate__java_util_Date_.getMonth(), day, requestedHours + timeDiffHours, this.f_jsdate__java_util_Date_.getMinutes() + timeDiffMinutes, this.f_jsdate__java_util_Date_.getSeconds(), this.f_jsdate__java_util_Date_.getMilliseconds());\n        this.f_jsdate__java_util_Date_.setTime(newTime.getTime());\n      }\n    }\n    let originalTimeInMillis \x3d this.f_jsdate__java_util_Date_.getTime();\n    this.f_jsdate__java_util_Date_.setTime(originalTimeInMillis + $Primitives.$widenLongToDouble(j_u_Date.f_ONE_HOUR_IN_MILLISECONDS__java_util_Date_));\n    if (this.f_jsdate__java_util_Date_.getHours() !\x3d requestedHours) {\n      this.f_jsdate__java_util_Date_.setTime(originalTimeInMillis);\n    }\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return this.m_compareTo__java_util_Date(/**@type {j_u_Date} */ ($Casts.$to(arg0, j_u_Date)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof j_u_Date;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, j_u_Date);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    j_u_Date.$clinit \x3d function() {};\n    IllegalArgumentException \x3d goog.module.get('java.lang.IllegalArgumentException$impl');\n    Long \x3d goog.module.get('java.lang.Long$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    StringData \x3d goog.module.get('java.util.Date.StringData$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    $LongUtils \x3d goog.module.get('vmbootstrap.LongUtils$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(j_u_Date, $Util.$makeClassName('java.util.Date'));\n\n\n/** @public {!$Long} @const */\nj_u_Date.f_ONE_HOUR_IN_MILLISECONDS__java_util_Date_ \x3d $Long.fromInt(3600000);\n\n\nCloneable.$markImplementor(j_u_Date);\nComparable.$markImplementor(j_u_Date);\nSerializable.$markImplementor(j_u_Date);\n\n\nexports \x3d j_u_Date; \n//# sourceMappingURL\x3dDate.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/Date.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.Date.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.Date');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Serializable \x3d goog.require('java.io.Serializable');\nconst _Cloneable \x3d goog.require('java.lang.Cloneable');\nconst _Comparable \x3d goog.require('java.lang.Comparable');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _IllegalArgumentException \x3d goog.require('java.lang.IllegalArgumentException');\nconst _Long \x3d goog.require('java.lang.Long');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Overlay \x3d goog.require('java.util.Date.NativeDate.$Overlay');\nconst _StringData \x3d goog.require('java.util.Date.StringData');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\nconst _$LongUtils \x3d goog.require('vmbootstrap.LongUtils');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar j_u_Date \x3d goog.require('java.util.Date$impl');\nexports \x3d j_u_Date;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/DateTimeFormat.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.DateTimeFormat.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.DateTimeFormat$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet PredefinedFormat \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat$impl');\nlet Date \x3d goog.forwardDeclare('java.util.Date$impl');\n\n\nclass DateTimeFormat extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DateTimeFormat()'.\n   * @return {!DateTimeFormat}\n   * @public\n   */\n  static $create__() {\n    DateTimeFormat.$clinit();\n    let $instance \x3d new DateTimeFormat();\n    $instance.$ctor__com_vertispan_draw_connected_client_blank_DateTimeFormat__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DateTimeFormat()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_DateTimeFormat__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {PredefinedFormat} dateShort\n   * @return {DateTimeFormat}\n   * @public\n   */\n  static m_getFormat__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat(dateShort) {\n    DateTimeFormat.$clinit();\n    return DateTimeFormat.$create__();\n  }\n  \n  /**\n   * @param {Date} date\n   * @return {?string}\n   * @public\n   */\n  m_format__java_util_Date(date) {\n    return \"TODO\";\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DateTimeFormat;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DateTimeFormat);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DateTimeFormat.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DateTimeFormat, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.DateTimeFormat'));\n\n\n\n\nexports \x3d DateTimeFormat; \n//# sourceMappingURL\x3dDateTimeFormat.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/DateTimeFormat.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.DateTimeFormat.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.DateTimeFormat');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _PredefinedFormat \x3d goog.require('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat');\nconst _Date \x3d goog.require('java.util.Date');\n\n\n// Re-exports the implementation.\nvar DateTimeFormat \x3d goog.require('com.vertispan.draw.connected.client.blank.DateTimeFormat$impl');\nexports \x3d DateTimeFormat;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/Event$Type.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.Event$Type.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.Event.Type$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\n/**\n * @template C_Type_H\n  */\nclass Type extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_index__org_gwtproject_event_shared_Event_Type_ \x3d 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Type()'.\n   * @template C_Type_H\n   * @return {!Type\x3cC_Type_H\x3e}\n   * @public\n   */\n  static $create__() {\n    Type.$clinit();\n    let $instance \x3d new Type();\n    $instance.$ctor__org_gwtproject_event_shared_Event_Type__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Type()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_Event_Type__() {\n    this.$ctor__java_lang_Object__();\n    this.f_index__org_gwtproject_event_shared_Event_Type_ \x3d ++Type.$f_nextHashCode__org_gwtproject_event_shared_Event_Type_;\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    return this.f_index__org_gwtproject_event_shared_Event_Type_;\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"Event type\";\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_nextHashCode__org_gwtproject_event_shared_Event_Type_() {\n    return (Type.$clinit(), Type.$f_nextHashCode__org_gwtproject_event_shared_Event_Type_);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_nextHashCode__org_gwtproject_event_shared_Event_Type_(value) {\n    (Type.$clinit(), Type.$f_nextHashCode__org_gwtproject_event_shared_Event_Type_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Type;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Type);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Type.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Type, $Util.$makeClassName('org.gwtproject.event.shared.Event$Type'));\n\n\n/** @private {number} */\nType.$f_nextHashCode__org_gwtproject_event_shared_Event_Type_ \x3d 0;\n\n\n\n\nexports \x3d Type; \n//# sourceMappingURL\x3dEvent$Type.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/Event$Type.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.Event$Type.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.Event.Type');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Type \x3d goog.require('org.gwtproject.event.shared.Event.Type$impl');\nexports \x3d Type;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/Event.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.Event.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.Event$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Type \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event.Type$impl');\n\n\n/**\n * @abstract\n * @template C_H\n  */\nclass Event extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {*} */\n    this.f_source__org_gwtproject_event_shared_Event_;\n  }\n  \n  /**\n   * Initialization from constructor 'Event()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_Event__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @abstract\n   * @return {Type\x3cC_H\x3e}\n   * @public\n   */\n  m_getAssociatedType__() {\n  }\n  \n  /**\n   * @return {*}\n   * @public\n   */\n  m_getSource__() {\n    return this.f_source__org_gwtproject_event_shared_Event_;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_toDebugString__() {\n    let name \x3d this.m_getClass__().m_getName__();\n    name \x3d j_l_String.m_substring__java_lang_String__int(name, j_l_String.m_lastIndexOf__java_lang_String__java_lang_String(name, \".\") + 1);\n    return \"event: \" + j_l_String.m_valueOf__java_lang_Object(name) + \":\";\n  }\n  \n  /**\n   * @override\n   * @return {?string}\n   * @public\n   */\n  toString() {\n    return \"An event type\";\n  }\n  \n  /**\n   * @abstract\n   * @param {C_H} handler\n   * @return {void}\n   * @public\n   */\n  m_dispatch__java_lang_Object(handler) {\n  }\n  \n  /**\n   * @param {*} source\n   * @return {void}\n   * @public\n   */\n  m_setSource__java_lang_Object(source) {\n    this.f_source__org_gwtproject_event_shared_Event_ \x3d source;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Event;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Event);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Event.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Event, $Util.$makeClassName('org.gwtproject.event.shared.Event'));\n\n\n\n\nexports \x3d Event; \n//# sourceMappingURL\x3dEvent.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/Event.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.Event.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.Event');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Type \x3d goog.require('org.gwtproject.event.shared.Event.Type');\n\n\n// Re-exports the implementation.\nvar Event \x3d goog.require('org.gwtproject.event.shared.Event$impl');\nexports \x3d Event;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent$SelectionHandler.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent$SelectionHandler.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet SelectionEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\nlet $LambdaAdaptor \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n * @template C_SelectionHandler_T\n */\nclass SelectionHandler {\n  /**\n   * @abstract\n   * @param {SelectionEvent\x3cC_SelectionHandler_T\x3e} var1\n   * @return {void}\n   * @public\n   */\n  m_onSelection__com_vertispan_draw_connected_client_blank_SelectionEvent(var1) {\n  }\n  \n  /**\n   * @template C_SelectionHandler_T\n   * @param {?function(SelectionEvent\x3cC_SelectionHandler_T\x3e):void} fn\n   * @return {SelectionHandler\x3cC_SelectionHandler_T\x3e}\n   * @public\n   */\n  static $adapt(fn) {\n    SelectionHandler.$clinit();\n    return /**@type {!$LambdaAdaptor\x3c*\x3e} */ (new $LambdaAdaptor(fn));\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SelectionHandler.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(SelectionHandler, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.SelectionEvent$SelectionHandler'));\n\n\nSelectionHandler.$markImplementor(/** @type {Function} */ (SelectionHandler));\n\n\nexports \x3d SelectionHandler; \n//# sourceMappingURL\x3dSelectionEvent$SelectionHandler.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent$SelectionHandler$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent$SelectionHandler$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler.$LambdaAdaptor$impl');\n\n\nconst SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet SelectionEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\n\n\n/**\n * @template C_SelectionHandler_T\n * @implements {SelectionHandler\x3cC_SelectionHandler_T\x3e}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(SelectionEvent\x3cC_SelectionHandler_T\x3e):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(SelectionEvent\x3cC_SelectionHandler_T\x3e):void} */\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$LambdaAdaptor;\n    this.$ctor__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$LambdaAdaptor__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(SelectionEvent\x3cC_SelectionHandler_T\x3e):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$LambdaAdaptor__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {SelectionEvent\x3cC_SelectionHandler_T\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_onSelection__com_vertispan_draw_connected_client_blank_SelectionEvent(arg0) {\n    {\n      let $function \x3d this.f_$$fn__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.SelectionEvent$SelectionHandler$$LambdaAdaptor'));\n\n\nSelectionHandler.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dSelectionEvent$SelectionHandler$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent$SelectionHandler$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent$SelectionHandler$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _SelectionEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent$SelectionHandler.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent$SelectionHandler.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _SelectionEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent');\nconst _$LambdaAdaptor \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\nexports \x3d SelectionHandler;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HandlerRegistration.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HandlerRegistration.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.HandlerRegistration$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass HandlerRegistration {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_removeHandler__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {HandlerRegistration}\n   * @public\n   */\n  static $adapt(fn) {\n    HandlerRegistration.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__org_gwtproject_event_shared_HandlerRegistration \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__org_gwtproject_event_shared_HandlerRegistration;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__org_gwtproject_event_shared_HandlerRegistration;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HandlerRegistration.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('org.gwtproject.event.shared.HandlerRegistration.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(HandlerRegistration, $Util.$makeClassName('org.gwtproject.event.shared.HandlerRegistration'));\n\n\nHandlerRegistration.$markImplementor(/** @type {Function} */ (HandlerRegistration));\n\n\nexports \x3d HandlerRegistration; \n//# sourceMappingURL\x3dHandlerRegistration.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HandlerRegistration$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HandlerRegistration$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.HandlerRegistration.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration$impl');\n\n\n/**\n * @implements {HandlerRegistration}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__org_gwtproject_event_shared_HandlerRegistration_$LambdaAdaptor;\n    this.$ctor__org_gwtproject_event_shared_HandlerRegistration_$LambdaAdaptor__org_gwtproject_event_shared_HandlerRegistration_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_HandlerRegistration_$LambdaAdaptor__org_gwtproject_event_shared_HandlerRegistration_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__org_gwtproject_event_shared_HandlerRegistration_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_removeHandler__() {\n    {\n      let $function \x3d this.f_$$fn__org_gwtproject_event_shared_HandlerRegistration_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('org.gwtproject.event.shared.HandlerRegistration$$LambdaAdaptor'));\n\n\nHandlerRegistration.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dHandlerRegistration$$LambdaAdaptor.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HandlerRegistration$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HandlerRegistration$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.HandlerRegistration.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HandlerRegistration.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HandlerRegistration.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.HandlerRegistration');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration$impl');\nexports \x3d HandlerRegistration;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent$HasSelectionHandlers.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent$HasSelectionHandlers.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet SelectionEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\nlet SelectionHandler \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\nlet HandlerRegistration \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration$impl');\n\n\n/**\n * @interface\n * @template C_HasSelectionHandlers_T\n */\nclass HasSelectionHandlers {\n  /**\n   * @abstract\n   * @param {SelectionHandler\x3cC_HasSelectionHandlers_T\x3e} var1\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_addSelectionHandler__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler(var1) {\n  }\n  \n  /**\n   * @abstract\n   * @param {SelectionEvent\x3cC_HasSelectionHandlers_T\x3e} event\n   * @return {void}\n   * @public\n   */\n  m_fireEvent__com_vertispan_draw_connected_client_blank_SelectionEvent(event) {\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__com_vertispan_draw_connected_client_blank_SelectionEvent_HasSelectionHandlers \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__com_vertispan_draw_connected_client_blank_SelectionEvent_HasSelectionHandlers;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__com_vertispan_draw_connected_client_blank_SelectionEvent_HasSelectionHandlers;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HasSelectionHandlers.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(HasSelectionHandlers, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.SelectionEvent$HasSelectionHandlers'));\n\n\nHasSelectionHandlers.$markImplementor(/** @type {Function} */ (HasSelectionHandlers));\n\n\nexports \x3d HasSelectionHandlers; \n//# sourceMappingURL\x3dSelectionEvent$HasSelectionHandlers.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent$HasSelectionHandlers.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent$HasSelectionHandlers.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _SelectionEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent');\nconst _SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\n\n\n// Re-exports the implementation.\nvar HasSelectionHandlers \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers$impl');\nexports \x3d HasSelectionHandlers;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst Event \x3d goog.require('org.gwtproject.event.shared.Event$impl');\n\nlet HasSelectionHandlers \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers$impl');\nlet SelectionHandler \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\nlet Type \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event.Type$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @template C_T\n * @extends {Event\x3cSelectionHandler\x3cC_T\x3e\x3e}\n  */\nclass SelectionEvent extends Event {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {C_T} */\n    this.f_selectedItem__com_vertispan_draw_connected_client_blank_SelectionEvent_;\n  }\n  \n  /**\n   * @return {Type\x3cSelectionHandler\x3c?\x3e\x3e}\n   * @public\n   */\n  static m_getType__() {\n    SelectionEvent.$clinit();\n    return /**@type {Type} */ ($Casts.$to(SelectionEvent.$f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_, Type));\n  }\n  \n  /**\n   * @template M_T\n   * @param {HasSelectionHandlers\x3cM_T\x3e} source\n   * @param {M_T} selectedItem\n   * @return {void}\n   * @public\n   */\n  static m_fire__com_vertispan_draw_connected_client_blank_SelectionEvent_HasSelectionHandlers__java_lang_Object(source, selectedItem) {\n    SelectionEvent.$clinit();\n    let event \x3d /**@type {!SelectionEvent\x3c*\x3e} */ (SelectionEvent.$create__java_lang_Object(selectedItem));\n    source.m_fireEvent__com_vertispan_draw_connected_client_blank_SelectionEvent(event);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SelectionEvent(Object)'.\n   * @template C_T\n   * @param {C_T} selectedItem\n   * @return {!SelectionEvent\x3cC_T\x3e}\n   * @public\n   */\n  static $create__java_lang_Object(selectedItem) {\n    SelectionEvent.$clinit();\n    let $instance \x3d new SelectionEvent();\n    $instance.$ctor__com_vertispan_draw_connected_client_blank_SelectionEvent__java_lang_Object(selectedItem);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SelectionEvent(Object)'.\n   * @param {C_T} selectedItem\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_SelectionEvent__java_lang_Object(selectedItem) {\n    this.$ctor__org_gwtproject_event_shared_Event__();\n    this.f_selectedItem__com_vertispan_draw_connected_client_blank_SelectionEvent_ \x3d selectedItem;\n  }\n  \n  /**\n   * @return {C_T}\n   * @public\n   */\n  m_getSelectedItem__() {\n    return this.f_selectedItem__com_vertispan_draw_connected_client_blank_SelectionEvent_;\n  }\n  \n  /**\n   * @param {SelectionHandler\x3cC_T\x3e} handler\n   * @return {void}\n   * @public\n   */\n  m_dispatch__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler(handler) {\n    handler.m_onSelection__com_vertispan_draw_connected_client_blank_SelectionEvent(this);\n  }\n  \n  /**\n   * @override\n   * @return {Type\x3cSelectionHandler\x3cC_T\x3e\x3e}\n   * @public\n   */\n  m_getAssociatedType__() {\n    return /**@type {Type} */ ($Casts.$to(SelectionEvent.$f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_, Type));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {void}\n   * @public\n   */\n  m_dispatch__java_lang_Object(arg0) {\n    this.m_dispatch__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler(/**@type {SelectionHandler\x3cC_T\x3e} */ ($Casts.$to(arg0, SelectionHandler)));\n  }\n  \n  /**\n   * @return {Type\x3cSelectionEvent\x3c?\x3e\x3e}\n   * @public\n   */\n  static get f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_() {\n    return (SelectionEvent.$clinit(), SelectionEvent.$f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_);\n  }\n  \n  /**\n   * @param {Type\x3cSelectionEvent\x3c?\x3e\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_(value) {\n    (SelectionEvent.$clinit(), SelectionEvent.$f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SelectionEvent;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SelectionEvent);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SelectionEvent.$clinit \x3d function() {};\n    SelectionHandler \x3d goog.module.get('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\n    Type \x3d goog.module.get('org.gwtproject.event.shared.Event.Type$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    Event.$clinit();\n    SelectionEvent.$f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_ \x3d /**@type {!Type\x3cSelectionEvent\x3c?\x3e\x3e} */ (Type.$create__());\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SelectionEvent, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.SelectionEvent'));\n\n\n/** @private {Type\x3cSelectionEvent\x3c?\x3e\x3e} */\nSelectionEvent.$f_TYPE__com_vertispan_draw_connected_client_blank_SelectionEvent_;\n\n\n\n\nexports \x3d SelectionEvent; \n//# sourceMappingURL\x3dSelectionEvent.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/SelectionEvent.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.SelectionEvent.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.SelectionEvent');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Event \x3d goog.require('org.gwtproject.event.shared.Event');\nconst _HasSelectionHandlers \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers');\nconst _SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler');\nconst _Type \x3d goog.require('org.gwtproject.event.shared.Event.Type');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar SelectionEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\nexports \x3d SelectionEvent;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/data/IsParentRelationship.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.data.IsParentRelationship.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.data.IsParentRelationship$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\nclass IsParentRelationship extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_;\n    /** @public {?string} */\n    this.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IsParentRelationship(String, String)'.\n   * @param {?string} childId\n   * @param {?string} parentId\n   * @return {!IsParentRelationship}\n   * @public\n   */\n  static $create__java_lang_String__java_lang_String(childId, parentId) {\n    IsParentRelationship.$clinit();\n    let $instance \x3d new IsParentRelationship();\n    $instance.$ctor__com_vertispan_draw_connected_client_data_IsParentRelationship__java_lang_String__java_lang_String(childId, parentId);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IsParentRelationship(String, String)'.\n   * @param {?string} childId\n   * @param {?string} parentId\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_data_IsParentRelationship__java_lang_String__java_lang_String(childId, parentId) {\n    this.$ctor__java_lang_Object__();\n    this.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_ \x3d childId;\n    this.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_ \x3d parentId;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'IsParentRelationship()'.\n   * @return {!IsParentRelationship}\n   * @public\n   */\n  static $create__() {\n    IsParentRelationship.$clinit();\n    let $instance \x3d new IsParentRelationship();\n    $instance.$ctor__com_vertispan_draw_connected_client_data_IsParentRelationship__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'IsParentRelationship()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_data_IsParentRelationship__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getChildId__() {\n    return this.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_;\n  }\n  \n  /**\n   * @param {?string} childId\n   * @return {void}\n   * @public\n   */\n  m_setChildId__java_lang_String(childId) {\n    this.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_ \x3d childId;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getParentId__() {\n    return this.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_;\n  }\n  \n  /**\n   * @param {?string} parentId\n   * @return {void}\n   * @public\n   */\n  m_setParentId__java_lang_String(parentId) {\n    this.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_ \x3d parentId;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    if ($Equality.$same(this, o)) {\n      return true;\n    }\n    if ($Equality.$same(o, null) || !$Equality.$same(this.m_getClass__(), $Objects.m_getClass__java_lang_Object(o))) {\n      return false;\n    }\n    let that \x3d /**@type {IsParentRelationship} */ ($Casts.$to(o, IsParentRelationship));\n    if (!j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_, that.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_)) {\n      return false;\n    }\n    return j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_, that.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_);\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    let result \x3d j_l_String.m_hashCode__java_lang_String(this.f_childId__com_vertispan_draw_connected_client_data_IsParentRelationship_);\n    result \x3d 31 * result + j_l_String.m_hashCode__java_lang_String(this.f_parentId__com_vertispan_draw_connected_client_data_IsParentRelationship_);\n    return result;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof IsParentRelationship;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, IsParentRelationship);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    IsParentRelationship.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(IsParentRelationship, $Util.$makeClassName('com.vertispan.draw.connected.client.data.IsParentRelationship'));\n\n\n\n\nexports \x3d IsParentRelationship; \n//# sourceMappingURL\x3dIsParentRelationship.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/data/IsParentRelationship.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.data.IsParentRelationship.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.data.IsParentRelationship');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar IsParentRelationship \x3d goog.require('com.vertispan.draw.connected.client.data.IsParentRelationship$impl');\nexports \x3d IsParentRelationship;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/Point.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.Point.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.Point$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass Point extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_x__com_vertispan_draw_connected_client_lib_Point_ \x3d 0.0;\n    /** @public {number} */\n    this.f_y__com_vertispan_draw_connected_client_lib_Point_ \x3d 0.0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Point(double, double)'.\n   * @param {number} x\n   * @param {number} y\n   * @return {!Point}\n   * @public\n   */\n  static $create__double__double(x, y) {\n    Point.$clinit();\n    let $instance \x3d new Point();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_Point__double__double(x, y);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Point(double, double)'.\n   * @param {number} x\n   * @param {number} y\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_Point__double__double(x, y) {\n    this.$ctor__java_lang_Object__();\n    this.f_x__com_vertispan_draw_connected_client_lib_Point_ \x3d x;\n    this.f_y__com_vertispan_draw_connected_client_lib_Point_ \x3d y;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getX__() {\n    return this.f_x__com_vertispan_draw_connected_client_lib_Point_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getY__() {\n    return this.f_y__com_vertispan_draw_connected_client_lib_Point_;\n  }\n  \n  /**\n   * @param {number} x\n   * @param {number} y\n   * @return {Point}\n   * @public\n   */\n  m_relativeTo__double__double(x, y) {\n    return Point.$create__double__double(x - this.f_x__com_vertispan_draw_connected_client_lib_Point_, y - this.f_y__com_vertispan_draw_connected_client_lib_Point_);\n  }\n  \n  /**\n   * @param {Point} other\n   * @return {Point}\n   * @public\n   */\n  m_relativeTo__com_vertispan_draw_connected_client_lib_Point(other) {\n    return Point.$create__double__double(other.m_getX__() - this.m_getX__(), other.m_getY__() - this.m_getY__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Point;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Point);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Point.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Point, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.Point'));\n\n\n\n\nexports \x3d Point; \n//# sourceMappingURL\x3dPoint.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/Point.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.Point.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.Point');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar Point \x3d goog.require('com.vertispan.draw.connected.client.lib.Point$impl');\nexports \x3d Point;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/data/Person.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.data.Person.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.data.Person$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Point \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Point$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Date \x3d goog.forwardDeclare('java.util.Date$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Objects \x3d goog.forwardDeclare('vmbootstrap.Objects$impl');\n\n\nclass Person extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {?string} */\n    this.f_id__com_vertispan_draw_connected_client_data_Person_;\n    /** @public {?string} */\n    this.f_name__com_vertispan_draw_connected_client_data_Person_;\n    /** @public {?string} */\n    this.f_sex__com_vertispan_draw_connected_client_data_Person_;\n    /** @public {?string} */\n    this.f_birthplace__com_vertispan_draw_connected_client_data_Person_;\n    /** @public {Date} */\n    this.f_birthday__com_vertispan_draw_connected_client_data_Person_;\n    /** @public {Point} */\n    this.f_pos__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Person()'.\n   * @return {!Person}\n   * @public\n   */\n  static $create__() {\n    Person.$clinit();\n    let $instance \x3d new Person();\n    $instance.$ctor__com_vertispan_draw_connected_client_data_Person__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Person()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_data_Person__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getId__() {\n    return this.f_id__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * @param {?string} id\n   * @return {void}\n   * @public\n   */\n  m_setId__java_lang_String(id) {\n    this.f_id__com_vertispan_draw_connected_client_data_Person_ \x3d id;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getName__() {\n    return this.f_name__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * @param {?string} name\n   * @return {void}\n   * @public\n   */\n  m_setName__java_lang_String(name) {\n    this.f_name__com_vertispan_draw_connected_client_data_Person_ \x3d name;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getSex__() {\n    return this.f_sex__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * @param {?string} sex\n   * @return {void}\n   * @public\n   */\n  m_setSex__java_lang_String(sex) {\n    this.f_sex__com_vertispan_draw_connected_client_data_Person_ \x3d sex;\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  m_getBirthplace__() {\n    return this.f_birthplace__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * @param {?string} birthplace\n   * @return {void}\n   * @public\n   */\n  m_setBirthplace__java_lang_String(birthplace) {\n    this.f_birthplace__com_vertispan_draw_connected_client_data_Person_ \x3d birthplace;\n  }\n  \n  /**\n   * @return {Date}\n   * @public\n   */\n  m_getBirthday__() {\n    return this.f_birthday__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * @param {Date} birthday\n   * @return {void}\n   * @public\n   */\n  m_setBirthday__java_util_Date(birthday) {\n    this.f_birthday__com_vertispan_draw_connected_client_data_Person_ \x3d birthday;\n  }\n  \n  /**\n   * @return {Point}\n   * @public\n   */\n  m_getPos__() {\n    return this.f_pos__com_vertispan_draw_connected_client_data_Person_;\n  }\n  \n  /**\n   * @param {Point} pos\n   * @return {void}\n   * @public\n   */\n  m_setPos__com_vertispan_draw_connected_client_lib_Point(pos) {\n    this.f_pos__com_vertispan_draw_connected_client_data_Person_ \x3d pos;\n  }\n  \n  /**\n   * @override\n   * @param {*} o\n   * @return {boolean}\n   * @public\n   */\n  equals(o) {\n    if ($Equality.$same(this, o)) {\n      return true;\n    }\n    if ($Equality.$same(o, null) || !$Equality.$same(this.m_getClass__(), $Objects.m_getClass__java_lang_Object(o))) {\n      return false;\n    }\n    let person \x3d /**@type {Person} */ ($Casts.$to(o, Person));\n    if (!$Equality.$same(this.f_id__com_vertispan_draw_connected_client_data_Person_, null) ? !j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_id__com_vertispan_draw_connected_client_data_Person_, person.f_id__com_vertispan_draw_connected_client_data_Person_) : !$Equality.$same(person.f_id__com_vertispan_draw_connected_client_data_Person_, null)) {\n      return false;\n    }\n    if (!$Equality.$same(this.f_name__com_vertispan_draw_connected_client_data_Person_, null) ? !j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_name__com_vertispan_draw_connected_client_data_Person_, person.f_name__com_vertispan_draw_connected_client_data_Person_) : !$Equality.$same(person.f_name__com_vertispan_draw_connected_client_data_Person_, null)) {\n      return false;\n    }\n    if (!$Equality.$same(this.f_sex__com_vertispan_draw_connected_client_data_Person_, null) ? !j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_sex__com_vertispan_draw_connected_client_data_Person_, person.f_sex__com_vertispan_draw_connected_client_data_Person_) : !$Equality.$same(person.f_sex__com_vertispan_draw_connected_client_data_Person_, null)) {\n      return false;\n    }\n    if (!$Equality.$same(this.f_birthplace__com_vertispan_draw_connected_client_data_Person_, null) ? !j_l_String.m_equals__java_lang_String__java_lang_Object(this.f_birthplace__com_vertispan_draw_connected_client_data_Person_, person.f_birthplace__com_vertispan_draw_connected_client_data_Person_) : !$Equality.$same(person.f_birthplace__com_vertispan_draw_connected_client_data_Person_, null)) {\n      return false;\n    }\n    return !(!$Equality.$same(this.f_birthday__com_vertispan_draw_connected_client_data_Person_, null) ? !this.f_birthday__com_vertispan_draw_connected_client_data_Person_.equals(person.f_birthday__com_vertispan_draw_connected_client_data_Person_) : !$Equality.$same(person.f_birthday__com_vertispan_draw_connected_client_data_Person_, null));\n  }\n  \n  /**\n   * @override\n   * @return {number}\n   * @public\n   */\n  hashCode() {\n    let result \x3d !$Equality.$same(this.f_id__com_vertispan_draw_connected_client_data_Person_, null) ? j_l_String.m_hashCode__java_lang_String(this.f_id__com_vertispan_draw_connected_client_data_Person_) : 0;\n    result \x3d 31 * result + (!$Equality.$same(this.f_name__com_vertispan_draw_connected_client_data_Person_, null) ? j_l_String.m_hashCode__java_lang_String(this.f_name__com_vertispan_draw_connected_client_data_Person_) : 0);\n    result \x3d 31 * result + (!$Equality.$same(this.f_sex__com_vertispan_draw_connected_client_data_Person_, null) ? j_l_String.m_hashCode__java_lang_String(this.f_sex__com_vertispan_draw_connected_client_data_Person_) : 0);\n    result \x3d 31 * result + (!$Equality.$same(this.f_birthplace__com_vertispan_draw_connected_client_data_Person_, null) ? j_l_String.m_hashCode__java_lang_String(this.f_birthplace__com_vertispan_draw_connected_client_data_Person_) : 0);\n    result \x3d 31 * result + (!$Equality.$same(this.f_birthday__com_vertispan_draw_connected_client_data_Person_, null) ? this.f_birthday__com_vertispan_draw_connected_client_data_Person_.hashCode() : 0);\n    return result;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Person;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Person);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Person.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Objects \x3d goog.module.get('vmbootstrap.Objects$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Person, $Util.$makeClassName('com.vertispan.draw.connected.client.data.Person'));\n\n\n\n\nexports \x3d Person; \n//# sourceMappingURL\x3dPerson.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/data/Person.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.data.Person.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.data.Person');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Point \x3d goog.require('com.vertispan.draw.connected.client.lib.Point');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Date \x3d goog.require('java.util.Date');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Objects \x3d goog.require('vmbootstrap.Objects');\n\n\n// Re-exports the implementation.\nvar Person \x3d goog.require('com.vertispan.draw.connected.client.data.Person$impl');\nexports \x3d Person;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/jsinterop.js
/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 */

/**
 * This file provides the @defines for jsinterop configuration options.
 * See InternalPreconditions.java for details.
 */

goog.provide('jsinterop');

// Note that disabling checking only disables it for production.

/** @define {string} */
goog.define('jsinterop.checks', 'DISABLED');

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/InternalPreconditions.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.InternalPreconditions.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.InternalPreconditions$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AssertionError \x3d goog.forwardDeclare('java.lang.AssertionError$impl');\nlet ClassCastException \x3d goog.forwardDeclare('java.lang.ClassCastException$impl');\nlet Exception \x3d goog.forwardDeclare('java.lang.Exception$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass InternalPreconditions extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkType__boolean(expression) {\n    InternalPreconditions.$clinit();\n    if (InternalPreconditions.$f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_) {\n      InternalPreconditions.m_checkCriticalType__boolean(expression);\n    } else if (InternalPreconditions.$f_IS_ASSERTED__jsinterop_base_InternalPreconditions_) {\n      try {\n        InternalPreconditions.m_checkCriticalType__boolean(expression);\n      } catch (__$exc) {\n        __$exc \x3d $Exceptions.toJava(__$exc);\n        if (Exception.$isInstance(__$exc)) {\n          let e \x3d /**@type {Exception} */ (__$exc);\n          throw $Exceptions.toJs(AssertionError.$create__java_lang_Object(e));\n        } else {\n          throw $Exceptions.toJs(__$exc);\n        }\n      }\n    }\n  }\n  \n  /**\n   * @param {boolean} expression\n   * @return {void}\n   * @public\n   */\n  static m_checkCriticalType__boolean(expression) {\n    InternalPreconditions.$clinit();\n    if (!expression) {\n      throw $Exceptions.toJs(ClassCastException.$create__());\n    }\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'InternalPreconditions()'.\n   * @return {!InternalPreconditions}\n   * @public\n   */\n  static $create__() {\n    InternalPreconditions.$clinit();\n    let $instance \x3d new InternalPreconditions();\n    $instance.$ctor__jsinterop_base_InternalPreconditions__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'InternalPreconditions()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__jsinterop_base_InternalPreconditions__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_() {\n    return (InternalPreconditions.$clinit(), InternalPreconditions.$f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_(value) {\n    (InternalPreconditions.$clinit(), InternalPreconditions.$f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_IS_ASSERTED__jsinterop_base_InternalPreconditions_() {\n    return (InternalPreconditions.$clinit(), InternalPreconditions.$f_IS_ASSERTED__jsinterop_base_InternalPreconditions_);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_IS_ASSERTED__jsinterop_base_InternalPreconditions_(value) {\n    (InternalPreconditions.$clinit(), InternalPreconditions.$f_IS_ASSERTED__jsinterop_base_InternalPreconditions_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof InternalPreconditions;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, InternalPreconditions);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    InternalPreconditions.$clinit \x3d function() {};\n    AssertionError \x3d goog.module.get('java.lang.AssertionError$impl');\n    ClassCastException \x3d goog.module.get('java.lang.ClassCastException$impl');\n    Exception \x3d goog.module.get('java.lang.Exception$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    j_l_Object.$clinit();\n    InternalPreconditions.$f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_ \x3d j_l_String.m_equals__java_lang_String__java_lang_Object($Util.$getDefine(\"jsinterop.checks\"), \"ENABLED\");\n    InternalPreconditions.$f_IS_ASSERTED__jsinterop_base_InternalPreconditions_ \x3d j_l_String.m_equals__java_lang_String__java_lang_Object($Util.$getDefine(\"jre.checkedMode\"), \"ENABLED\");\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(InternalPreconditions, $Util.$makeClassName('jsinterop.base.InternalPreconditions'));\n\n\n/** @private {boolean} */\nInternalPreconditions.$f_IS_TYPE_CHECKED__jsinterop_base_InternalPreconditions_ \x3d false;\n\n\n/** @private {boolean} */\nInternalPreconditions.$f_IS_ASSERTED__jsinterop_base_InternalPreconditions_ \x3d false;\n\n\n\n\n/* NATIVE.JS EPILOG */\n\nconst jsinterop_base_InternalPreconditions \x3d InternalPreconditions;\n\n// Ensure that jsinterop @defines are included.\n/** @suppress {extraRequire} */\nlet jsinterop \x3d goog.require('jsinterop');\n\n\nexports \x3d InternalPreconditions; \n//# sourceMappingURL\x3dInternalPreconditions.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/InternalPreconditions.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.InternalPreconditions.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.InternalPreconditions');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AssertionError \x3d goog.require('java.lang.AssertionError');\nconst _ClassCastException \x3d goog.require('java.lang.ClassCastException');\nconst _Exception \x3d goog.require('java.lang.Exception');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar InternalPreconditions \x3d goog.require('jsinterop.base.InternalPreconditions$impl');\nexports \x3d InternalPreconditions;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/JsConstructorFn$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.JsConstructorFn$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.JsConstructorFn.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class');\nlet j_l_Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet InternalPreconditions \x3d goog.forwardDeclare('jsinterop.base.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\nclass $Overlay {\n  /**\n   * @template C_T\n   * @param {?function(...*):void} $thisArg\n   * @param {Array\x3c*\x3e} args\n   * @return {C_T}\n   * @public\n   */\n  static m_construct__jsinterop_base_JsConstructorFn__arrayOf_java_lang_Object($thisArg, args) {\n    $Overlay.$clinit();\n    return Reflect.construct($thisArg, args);\n  }\n  \n  /**\n   * @template C_T\n   * @param {?function(...*):void} $thisArg\n   * @return {j_l_Class\x3cC_T\x3e}\n   * @public\n   */\n  static m_asClass__jsinterop_base_JsConstructorFn($thisArg) {\n    $Overlay.$clinit();\n    let clazz \x3d /**@type {j_l_Class\x3c*\x3e} */ (Class.$get($thisArg));\n    InternalPreconditions.m_checkType__boolean(!$Equality.$same(clazz, null));\n    return clazz;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class');\n    InternalPreconditions \x3d goog.module.get('jsinterop.base.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n  }\n  \n  \n};\n\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dJsConstructorFn$$Overlay.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/JsConstructorFn$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.JsConstructorFn$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.JsConstructorFn.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _InternalPreconditions \x3d goog.require('jsinterop.base.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('jsinterop.base.JsConstructorFn.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/JsPropertyMap$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.JsPropertyMap$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.Any.$Overlay$impl');\nlet InternalJsUtil \x3d goog.forwardDeclare('jsinterop.base.InternalJsUtil$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass JsPropertyMap_$Overlay {\n  /**\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  static m_of__() {\n    JsPropertyMap_$Overlay.$clinit();\n    return InternalJsUtil.emptyObjectLiteral();\n  }\n  \n  /**\n   * @param {?string} k\n   * @param {*} v\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  static m_of__java_lang_String__java_lang_Object(k, v) {\n    JsPropertyMap_$Overlay.$clinit();\n    let map \x3d JsPropertyMap_$Overlay.m_of__();\n    JsPropertyMap_$Overlay.m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object(map, k, v);\n    return map;\n  }\n  \n  /**\n   * @param {?string} k1\n   * @param {*} v1\n   * @param {?string} k2\n   * @param {*} v2\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  static m_of__java_lang_String__java_lang_Object__java_lang_String__java_lang_Object(k1, v1, k2, v2) {\n    JsPropertyMap_$Overlay.$clinit();\n    let map \x3d JsPropertyMap_$Overlay.m_of__();\n    JsPropertyMap_$Overlay.m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object(map, k1, v1);\n    JsPropertyMap_$Overlay.m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object(map, k2, v2);\n    return map;\n  }\n  \n  /**\n   * @param {?string} k1\n   * @param {*} v1\n   * @param {?string} k2\n   * @param {*} v2\n   * @param {?string} k3\n   * @param {*} v3\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  static m_of__java_lang_String__java_lang_Object__java_lang_String__java_lang_Object__java_lang_String__java_lang_Object(k1, v1, k2, v2, k3, v3) {\n    JsPropertyMap_$Overlay.$clinit();\n    let map \x3d JsPropertyMap_$Overlay.m_of__();\n    JsPropertyMap_$Overlay.m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object(map, k1, v1);\n    JsPropertyMap_$Overlay.m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object(map, k2, v2);\n    JsPropertyMap_$Overlay.m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object(map, k3, v3);\n    return map;\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} propertyName\n   * @return {C_T}\n   * @public\n   */\n  static m_get__jsinterop_base_JsPropertyMap__java_lang_String($thisArg, propertyName) {\n    JsPropertyMap_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to(InternalJsUtil.getIndexed($thisArg, propertyName), j_l_Object));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} qualifiedName\n   * @return {*}\n   * @public\n   */\n  static m_nestedGet__jsinterop_base_JsPropertyMap__java_lang_String($thisArg, qualifiedName) {\n    JsPropertyMap_$Overlay.$clinit();\n    return goog.getObjectByName(qualifiedName, $thisArg);\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} propertyName\n   * @return {*}\n   * @public\n   */\n  static m_getAsAny__jsinterop_base_JsPropertyMap__java_lang_String($thisArg, propertyName) {\n    JsPropertyMap_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to(InternalJsUtil.getIndexed($thisArg, propertyName), $Overlay));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} qualifiedName\n   * @return {*}\n   * @public\n   */\n  static m_nestedGetAsAny__jsinterop_base_JsPropertyMap__java_lang_String($thisArg, qualifiedName) {\n    JsPropertyMap_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to(goog.getObjectByName(qualifiedName, $thisArg), $Overlay));\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} propertyName\n   * @return {boolean}\n   * @public\n   */\n  static m_has__jsinterop_base_JsPropertyMap__java_lang_String($thisArg, propertyName) {\n    JsPropertyMap_$Overlay.$clinit();\n    return InternalJsUtil.hasIndexed($thisArg, propertyName);\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} propertyName\n   * @return {void}\n   * @public\n   */\n  static m_delete__jsinterop_base_JsPropertyMap__java_lang_String($thisArg, propertyName) {\n    JsPropertyMap_$Overlay.$clinit();\n    InternalJsUtil.deleteIndexed($thisArg, propertyName);\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?string} propertyName\n   * @param {C_T} value\n   * @return {void}\n   * @public\n   */\n  static m_set__jsinterop_base_JsPropertyMap__java_lang_String__java_lang_Object($thisArg, propertyName, value) {\n    JsPropertyMap_$Overlay.$clinit();\n    InternalJsUtil.setIndexed($thisArg, propertyName, value);\n  }\n  \n  /**\n   * @template C_T\n   * @param {Object\x3cstring, C_T\x3e} $thisArg\n   * @param {?function(?string):void} cb\n   * @return {void}\n   * @public\n   */\n  static m_forEach__jsinterop_base_JsPropertyMap__jsinterop_base_JsForEachCallbackFn($thisArg, cb) {\n    JsPropertyMap_$Overlay.$clinit();\n    InternalJsUtil.forEach($thisArg, cb);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    JsPropertyMap_$Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.Any.$Overlay$impl');\n    InternalJsUtil \x3d goog.module.get('jsinterop.base.InternalJsUtil$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(JsPropertyMap_$Overlay, $Util.$makeClassName('Object'));\n\n\nexports \x3d JsPropertyMap_$Overlay; \n//# sourceMappingURL\x3dJsPropertyMap$$Overlay.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/JsPropertyMap$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.JsPropertyMap$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Overlay \x3d goog.require('jsinterop.base.Any.$Overlay');\nconst _InternalJsUtil \x3d goog.require('jsinterop.base.InternalJsUtil');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar JsPropertyMap_$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay$impl');\nexports \x3d JsPropertyMap_$Overlay;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/InternalJsUtil.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.InternalJsUtil.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.InternalJsUtil$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class');\nlet j_l_Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet JsArrayLike_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsArrayLike.$Overlay$impl');\nlet JsConstructorFn_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsConstructorFn.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\n\n\nclass InternalJsUtil extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  // native static emptyObjectLiteral() \n  \n  /**\n   * @param {*} obj\n   * @param {?string} key\n   * @return {*}\n   * @public\n   */\n  // native static getIndexed(obj, key) \n  \n  /**\n   * @param {*} obj\n   * @param {?string} key\n   * @return {boolean}\n   * @public\n   */\n  // native static hasIndexed(obj, key) \n  \n  /**\n   * @param {*} obj\n   * @param {?string} key\n   * @return {*}\n   * @public\n   */\n  // native static deleteIndexed(obj, key) \n  \n  /**\n   * @param {*} obj\n   * @param {?string} key\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  // native static setIndexed(obj, key, value) \n  \n  /**\n   * @param {*} obj\n   * @param {number} key\n   * @return {*}\n   * @public\n   */\n  // native static getIndexed(obj, key) \n  \n  /**\n   * @param {*} obj\n   * @param {number} key\n   * @return {boolean}\n   * @public\n   */\n  // native static hasIndexed(obj, key) \n  \n  /**\n   * @param {*} obj\n   * @param {number} key\n   * @return {void}\n   * @public\n   */\n  // native static deleteIndexed(obj, key) \n  \n  /**\n   * @param {*} obj\n   * @param {number} key\n   * @param {*} value\n   * @return {void}\n   * @public\n   */\n  // native static setIndexed(obj, key, value) \n  \n  /**\n   * @param {*} obj\n   * @param {?function(?string):void} cb\n   * @return {void}\n   * @public\n   */\n  // native static forEach(obj, cb) \n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {!$Long}\n   * @public\n   */\n  // native static castToAny(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  // native static isLong(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  // native static isInt(obj) \n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  // native static hasLength(obj) \n  \n  /**\n   * @param {IArrayLike\x3c?\x3e} obj\n   * @return {number}\n   * @public\n   */\n  // native static getLength(obj) \n  \n  /**\n   * @param {IArrayLike\x3c?\x3e} obj\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  // native static setLength(obj, length) \n  \n  /**\n   * @template M_T\n   * @param {j_l_Class\x3cM_T\x3e} clazz\n   * @return {?function(...*):void}\n   * @public\n   */\n  // native static toCtor(clazz) \n  \n  /**\n   * Factory method corresponding to constructor 'InternalJsUtil()'.\n   * @return {!InternalJsUtil}\n   * @public\n   */\n  static $create__() {\n    InternalJsUtil.$clinit();\n    let $instance \x3d new InternalJsUtil();\n    $instance.$ctor__jsinterop_base_InternalJsUtil__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'InternalJsUtil()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__jsinterop_base_InternalJsUtil__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof InternalJsUtil;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, InternalJsUtil);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    InternalJsUtil.$clinit \x3d function() {};\n    Class \x3d goog.module.get('java.lang.Class');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(InternalJsUtil, $Util.$makeClassName('jsinterop.base.InternalJsUtil'));\n\n\n\n\n/* NATIVE.JS EPILOG */\n\nconst jsinterop_base_InternalJsUtil \x3d InternalJsUtil;\n\n/*\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *\n */\n\n/**\n * @return {Object}\n * @public\n */\nInternalJsUtil.emptyObjectLiteral \x3d function() {\n  return {};\n};\n\n/**\n * @template T\n * @param {*} obj\n * @param {string|number} key\n * @return {T}\n * @public\n */\nInternalJsUtil.getIndexed \x3d function(obj, key) {\n  return obj[key];\n};\n\n/**\n * @param {*} obj\n * @param {string|number} key\n * @return {boolean}\n * @public\n */\nInternalJsUtil.hasIndexed \x3d function(obj, key) {\n  return key in obj;\n};\n\n/**\n * @param {*} obj\n * @param {string|number} key\n * @return {void}\n * @public\n */\nInternalJsUtil.deleteIndexed \x3d function(obj, key) {\n  delete obj[key];\n};\n\n/**\n * @param {*} obj\n * @param {string|number} key\n * @param {*} value\n * @return {void}\n * @public\n */\nInternalJsUtil.setIndexed \x3d function(obj, key, value) {\n  obj[key] \x3d value;\n};\n\n\n/**\n * @param {*} obj\n * @param {function(?string):void} cb\n * @return {void}\n * @public\n */\nInternalJsUtil.forEach \x3d function(obj, cb) {\n  for (let key in obj) {\n    cb(key);\n  }\n};\n\n/**\n * @template T\n * @param {*} obj\n * @return {T}\n * @public\n */\nInternalJsUtil.castToAny \x3d function(obj) {\n  return obj;\n};\n\nconst $Long_ \x3d goog.require('nativebootstrap.Long');\n\n/**\n * @param {*} obj\n * @return {boolean}\n * @public\n */\nInternalJsUtil.isLong \x3d function(obj) {\n  return obj instanceof $Long_;\n};\n\n/**\n * @param {*} obj\n * @return {boolean}\n * @public\n */\nInternalJsUtil.isInt \x3d function(obj) {\n  return ( /** @type {?} */ (obj) | 0) \x3d\x3d\x3d obj;\n};\n\n/**\n * @param {*} obj\n * @return {boolean}\n * @public\n */\nInternalJsUtil.hasLength \x3d function(obj) {\n  return typeof obj \x3d\x3d 'object' \x26\x26 typeof obj.length \x3d\x3d 'number';\n};\n\n/**\n * @param {IArrayLike} obj\n * @return {number}\n * @public\n */\nInternalJsUtil.getLength \x3d function(obj) {\n  return obj.length;\n};\n\n/**\n * @param {IArrayLike} obj\n * @param {number} length\n * @public\n */\nInternalJsUtil.setLength \x3d function(obj, length) {\n  obj.length \x3d length;\n};\n\nconst javaLangClass \x3d goog.forwardDeclare('java.lang.Class');\n\n/**\n * @param {javaLangClass\x3cT\x3e} clazz\n * @return {function(new:T)}\n * @template T\n * @public\n */\nInternalJsUtil.toCtor \x3d function(clazz) {\n  return /** @type {?} */ (clazz.f_ctor__java_lang_Class_);\n};\n\n\nexports \x3d InternalJsUtil; \n//# sourceMappingURL\x3dInternalJsUtil.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/InternalJsUtil.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.InternalJsUtil.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.InternalJsUtil');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _JsArrayLike_$Overlay \x3d goog.require('jsinterop.base.JsArrayLike.$Overlay');\nconst _JsConstructorFn_$Overlay \x3d goog.require('jsinterop.base.JsConstructorFn.$Overlay');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\n\n\n// Re-exports the implementation.\nvar InternalJsUtil \x3d goog.require('jsinterop.base.InternalJsUtil$impl');\nexports \x3d InternalJsUtil;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/JsArrayLike$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.JsArrayLike$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.JsArrayLike.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Arrays \x3d goog.forwardDeclare('java.util.Arrays$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.Any.$Overlay$impl');\nlet InternalJsUtil \x3d goog.forwardDeclare('jsinterop.base.InternalJsUtil$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass JsArrayLike_$Overlay {\n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_getLength__jsinterop_base_JsArrayLike($thisArg) {\n    JsArrayLike_$Overlay.$clinit();\n    return InternalJsUtil.getLength($thisArg);\n  }\n  \n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @param {number} length\n   * @return {void}\n   * @public\n   */\n  static m_setLength__jsinterop_base_JsArrayLike__int($thisArg, length) {\n    JsArrayLike_$Overlay.$clinit();\n    InternalJsUtil.setLength($thisArg, length);\n  }\n  \n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @param {number} index\n   * @return {C_T}\n   * @public\n   */\n  static m_getAt__jsinterop_base_JsArrayLike__int($thisArg, index) {\n    JsArrayLike_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to(InternalJsUtil.getIndexed($thisArg, index), j_l_Object));\n  }\n  \n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @param {number} index\n   * @return {*}\n   * @public\n   */\n  static m_getAtAsAny__jsinterop_base_JsArrayLike__int($thisArg, index) {\n    JsArrayLike_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to(InternalJsUtil.getIndexed($thisArg, index), $Overlay));\n  }\n  \n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @param {number} index\n   * @param {C_T} value\n   * @return {void}\n   * @public\n   */\n  static m_setAt__jsinterop_base_JsArrayLike__int__java_lang_Object($thisArg, index, value) {\n    JsArrayLike_$Overlay.$clinit();\n    InternalJsUtil.setIndexed($thisArg, index, value);\n  }\n  \n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @param {number} index\n   * @return {void}\n   * @public\n   */\n  static m_delete__jsinterop_base_JsArrayLike__int($thisArg, index) {\n    JsArrayLike_$Overlay.$clinit();\n    InternalJsUtil.deleteIndexed($thisArg, index);\n  }\n  \n  /**\n   * @template C_T\n   * @param {IArrayLike\x3cC_T\x3e} $thisArg\n   * @return {List\x3cC_T\x3e}\n   * @public\n   */\n  static m_asList__jsinterop_base_JsArrayLike($thisArg) {\n    JsArrayLike_$Overlay.$clinit();\n    let asArray \x3d /**@type {Array\x3c*\x3e} */ (Js.m_uncheckedCast__java_lang_Object($thisArg));\n    return /**@type {List\x3c*\x3e} */ (Arrays.m_asList__arrayOf_java_lang_Object(asArray));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    JsArrayLike_$Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Arrays \x3d goog.module.get('java.util.Arrays$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.Any.$Overlay$impl');\n    InternalJsUtil \x3d goog.module.get('jsinterop.base.InternalJsUtil$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(JsArrayLike_$Overlay, $Util.$makeClassName('IArrayLike'));\n\n\nexports \x3d JsArrayLike_$Overlay; \n//# sourceMappingURL\x3dJsArrayLike$$Overlay.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/JsArrayLike$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.JsArrayLike$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.JsArrayLike.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Arrays \x3d goog.require('java.util.Arrays');\nconst _List \x3d goog.require('java.util.List');\nconst _$Overlay \x3d goog.require('jsinterop.base.Any.$Overlay');\nconst _InternalJsUtil \x3d goog.require('jsinterop.base.InternalJsUtil');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar JsArrayLike_$Overlay \x3d goog.require('jsinterop.base.JsArrayLike.$Overlay$impl');\nexports \x3d JsArrayLike_$Overlay;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/Any$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.Any$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.Any.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet JsArrayLike_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsArrayLike.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass Any_$Overlay {\n  /**\n   * @param {*} $thisArg\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  static m_asPropertyMap__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asPropertyMap__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {IArrayLike\x3c*\x3e}\n   * @public\n   */\n  static m_asArrayLike__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asArrayLike__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static m_asArray__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asArray__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asBoolean__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asFloat__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asFloat__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {!$Long}\n   * @public\n   */\n  static m_asLong__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asLong__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asInt__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asInt__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asShort__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asShort__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asChar__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asChar__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {*} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asByte__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return Js.m_asByte__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @template M_T\n   * @param {*} $thisArg\n   * @return {M_T}\n   * @public\n   */\n  static m_cast__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to($thisArg, j_l_Object));\n  }\n  \n  /**\n   * @template M_T\n   * @param {*} $thisArg\n   * @return {M_T}\n   * @public\n   */\n  static m_uncheckedCast__jsinterop_base_Any($thisArg) {\n    Any_$Overlay.$clinit();\n    return /**@type {*} */ ($Casts.$to($thisArg, j_l_Object));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Any_$Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Any_$Overlay, $Util.$makeClassName('*'));\n\n\nexports \x3d Any_$Overlay; \n//# sourceMappingURL\x3dAny$$Overlay.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/Any$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.Any$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.Any.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _JsArrayLike_$Overlay \x3d goog.require('jsinterop.base.JsArrayLike.$Overlay');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar Any_$Overlay \x3d goog.require('jsinterop.base.Any.$Overlay$impl');\nexports \x3d Any_$Overlay;\n ");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/Js.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.Js.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('jsinterop.base.Js$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Class \x3d goog.forwardDeclare('java.lang.Class$impl');\nlet Any_$Overlay \x3d goog.forwardDeclare('jsinterop.base.Any.$Overlay$impl');\nlet InternalJsUtil \x3d goog.forwardDeclare('jsinterop.base.InternalJsUtil$impl');\nlet InternalPreconditions \x3d goog.forwardDeclare('jsinterop.base.InternalPreconditions$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsArrayLike.$Overlay$impl');\nlet JsConstructorFn_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsConstructorFn.$Overlay$impl');\nlet JsPropertyMap_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Long \x3d goog.forwardDeclare('nativebootstrap.Long$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\nclass Js extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * @template M_T\n   * @param {Class\x3cM_T\x3e} clazz\n   * @return {?function(...*):void}\n   * @public\n   */\n  static m_asConstructorFn__java_lang_Class(clazz) {\n    Js.$clinit();\n    let fn \x3d /**@type {?function(...*):void} */ (InternalJsUtil.toCtor(clazz));\n    InternalPreconditions.m_checkType__boolean(!$Equality.$same(fn, null));\n    return fn;\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {*}\n   * @public\n   */\n  static m_asAny__java_lang_Object(obj) {\n    Js.$clinit();\n    return /**@type {*} */ (Js.m_uncheckedCast__java_lang_Object(obj));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Object\x3cstring, *\x3e}\n   * @public\n   */\n  static m_asPropertyMap__java_lang_Object(obj) {\n    Js.$clinit();\n    return /**@type {Object\x3cstring, *\x3e} */ (Js.m_uncheckedCast__java_lang_Object(obj));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {IArrayLike\x3c*\x3e}\n   * @public\n   */\n  static m_asArrayLike__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean($Equality.$same(obj, null) || InternalJsUtil.hasLength(obj));\n    return /**@type {IArrayLike\x3c*\x3e} */ (Js.m_uncheckedCast__java_lang_Object(obj));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static m_asArray__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean($Arrays.$instanceIsOfNative(obj));\n    return /**@type {Array\x3c*\x3e} */ (Js.m_uncheckedCast__java_lang_Object(obj));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {?string}\n   * @public\n   */\n  static m_asString__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean($Equality.$same(typeof(obj), \"string\"));\n    return /**@type {?string} */ (Js.m_uncheckedCast__java_lang_Object(obj));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean($Equality.$same(typeof(obj), \"boolean\"));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean($Equality.$same(typeof(obj), \"number\"));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_asFloat__java_lang_Object(obj) {\n    Js.$clinit();\n    return Js.m_asDouble__java_lang_Object(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {!$Long}\n   * @public\n   */\n  static m_asLong__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean(InternalJsUtil.isLong(obj));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_asInt__java_lang_Object(obj) {\n    Js.$clinit();\n    InternalPreconditions.m_checkType__boolean(InternalJsUtil.isInt(obj));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_asShort__java_lang_Object(obj) {\n    Js.$clinit();\n    let num \x3d Js.m_asInt__java_lang_Object(obj);\n    InternalPreconditions.m_checkType__boolean(num \x3d\x3d $Primitives.$narrowIntToShort(num));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_asChar__java_lang_Object(obj) {\n    Js.$clinit();\n    let num \x3d Js.m_asInt__java_lang_Object(obj);\n    InternalPreconditions.m_checkType__boolean(num \x3d\x3d $Primitives.$narrowIntToChar(num));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {number}\n   * @public\n   */\n  static m_asByte__java_lang_Object(obj) {\n    Js.$clinit();\n    let num \x3d Js.m_asInt__java_lang_Object(obj);\n    InternalPreconditions.m_checkType__boolean(num \x3d\x3d $Primitives.$narrowIntToByte(num));\n    return InternalJsUtil.castToAny(obj);\n  }\n  \n  /**\n   * @template M_T\n   * @param {*} obj\n   * @return {M_T}\n   * @public\n   */\n  static m_cast__java_lang_Object(obj) {\n    Js.$clinit();\n    return /**@type {*} */ ($Casts.$to(obj, j_l_Object));\n  }\n  \n  /**\n   * @template M_T\n   * @param {*} obj\n   * @return {M_T}\n   * @public\n   */\n  static m_uncheckedCast__java_lang_Object(obj) {\n    Js.$clinit();\n    return /**@type {*} */ ($Casts.$to(obj, j_l_Object));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_isTruthy__java_lang_Object(obj) {\n    Js.$clinit();\n    return !Js.isFalsy(obj);\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  // native static isFalsy(obj) \n  \n  /**\n   * @param {*} o1\n   * @param {*} o2\n   * @return {boolean}\n   * @public\n   */\n  // native static isTripleEqual(o1, o2) \n  \n  /**\n   * @param {*} d\n   * @return {number}\n   * @public\n   */\n  // native static coerceToDouble(d) \n  \n  /**\n   * @param {*} d\n   * @return {number}\n   * @public\n   */\n  static m_coerceToInt__java_lang_Object(d) {\n    Js.$clinit();\n    return InternalJsUtil.castToAny(d) | 0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Js()'.\n   * @return {!Js}\n   * @public\n   */\n  static $create__() {\n    Js.$clinit();\n    let $instance \x3d new Js();\n    $instance.$ctor__jsinterop_base_Js__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Js()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__jsinterop_base_Js__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Js;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Js);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Js.$clinit \x3d function() {};\n    InternalJsUtil \x3d goog.module.get('jsinterop.base.InternalJsUtil$impl');\n    InternalPreconditions \x3d goog.module.get('jsinterop.base.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Js, $Util.$makeClassName('jsinterop.base.Js'));\n\n\n\n\n/* NATIVE.JS EPILOG */\n\nconst jsinterop_base_Js \x3d Js;\n\n/*\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *\n */\n\n/**\n * @param {*} obj\n * @return {boolean}\n * @public\n */\nJs.isFalsy \x3d function(obj) {\n  return !obj;\n};\n\n/**\n * @param {*} obj1\n * @param {*} obj2\n * @return {boolean}\n * @public\n */\nJs.isTripleEqual \x3d function(obj1, obj2) {\n  return obj1 \x3d\x3d\x3d obj2;\n};\n\n/**\n * @param {*} d\n * @return {number}\n * @public\n */\nJs.coerceToDouble \x3d function(d) {\n  return +/** @type {?} */ (d);\n};\n\n\nexports \x3d Js; \n//# sourceMappingURL\x3dJs.js.map");

//jsZipCache/bb19e9355546da6cdff8b4dce4246fb2-base-1.0.0-SNAPSHOT.jar.js.zip!/jsinterop/base/Js.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from jsinterop.base.Js.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('jsinterop.base.Js');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Class \x3d goog.require('java.lang.Class');\nconst _Any_$Overlay \x3d goog.require('jsinterop.base.Any.$Overlay');\nconst _InternalJsUtil \x3d goog.require('jsinterop.base.InternalJsUtil');\nconst _InternalPreconditions \x3d goog.require('jsinterop.base.InternalPreconditions');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsArrayLike.$Overlay');\nconst _JsConstructorFn_$Overlay \x3d goog.require('jsinterop.base.JsConstructorFn.$Overlay');\nconst _JsPropertyMap_$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Long \x3d goog.require('nativebootstrap.Long');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar Js \x3d goog.require('jsinterop.base.Js$impl');\nexports \x3d Js;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/JsObject$DefinePropertyPropUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.JsObject$DefinePropertyPropUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.JsObject.DefinePropertyPropUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {*}\n   * @public\n   */\n  static m_asObject__elemental2_core_JsObject_DefinePropertyPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_cast__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_core_JsObject_DefinePropertyPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isObject__elemental2_core_JsObject_DefinePropertyPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return !$Equality.$same(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)), null);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_core_JsObject_DefinePropertyPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dJsObject$DefinePropertyPropUnionType$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/JsObject$DefinePropertyPropUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.JsObject$DefinePropertyPropUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.JsObject.DefinePropertyPropUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.core.JsObject.DefinePropertyPropUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/JsObject$GetOwnPropertyDescriptorPropUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.JsObject$GetOwnPropertyDescriptorPropUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.JsObject.GetOwnPropertyDescriptorPropUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {*}\n   * @public\n   */\n  static m_asObject__elemental2_core_JsObject_GetOwnPropertyDescriptorPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_cast__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_core_JsObject_GetOwnPropertyDescriptorPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isObject__elemental2_core_JsObject_GetOwnPropertyDescriptorPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return !$Equality.$same(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)), null);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_core_JsObject_GetOwnPropertyDescriptorPropUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dJsObject$GetOwnPropertyDescriptorPropUnionType$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/JsObject$GetOwnPropertyDescriptorPropUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.JsObject$GetOwnPropertyDescriptorPropUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.JsObject.GetOwnPropertyDescriptorPropUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.core.JsObject.GetOwnPropertyDescriptorPropUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/ObjectPropertyDescriptor$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.ObjectPropertyDescriptor$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.ObjectPropertyDescriptor.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass ObjectPropertyDescriptor_$Overlay {\n  /**\n   * @return {ObjectPropertyDescriptor}\n   * @public\n   */\n  static m_create__() {\n    ObjectPropertyDescriptor_$Overlay.$clinit();\n    return /**@type {ObjectPropertyDescriptor} */ (Js.m_uncheckedCast__java_lang_Object($Overlay.m_of__()));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ObjectPropertyDescriptor_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ObjectPropertyDescriptor_$Overlay, $Util.$makeClassName('ObjectPropertyDescriptor'));\n\n\nexports \x3d ObjectPropertyDescriptor_$Overlay; \n//# sourceMappingURL\x3dObjectPropertyDescriptor$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/ObjectPropertyDescriptor$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.ObjectPropertyDescriptor$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.ObjectPropertyDescriptor.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar ObjectPropertyDescriptor_$Overlay \x3d goog.require('elemental2.core.ObjectPropertyDescriptor.$Overlay$impl');\nexports \x3d ObjectPropertyDescriptor_$Overlay;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/JsObject$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.JsObject$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.JsObject.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.core.JsObject.DefinePropertyPropUnionType.$Overlay$impl');\nlet GetOwnPropertyDescriptorPropUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.core.JsObject.GetOwnPropertyDescriptorPropUnionType.$Overlay$impl');\nlet ObjectPropertyDescriptor_$Overlay \x3d goog.forwardDeclare('elemental2.core.ObjectPropertyDescriptor.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet JsPropertyMap_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass JsObject_$Overlay {\n  /**\n   * @param {*} target\n   * @param {Array\x3c*\x3e} var_args\n   * @return {Object}\n   * @public\n   */\n  static m_assign__java_lang_Object__arrayOf_java_lang_Object(target, var_args) {\n    JsObject_$Overlay.$clinit();\n    return Object.assign(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(target)), /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(var_args)));\n  }\n  \n  /**\n   * @param {*} proto\n   * @param {*} properties\n   * @return {Object}\n   * @public\n   */\n  static m_create__java_lang_Object__java_lang_Object(proto, properties) {\n    JsObject_$Overlay.$clinit();\n    return Object.create(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(proto)), /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(properties)));\n  }\n  \n  /**\n   * @param {*} proto\n   * @return {Object}\n   * @public\n   */\n  static m_create__java_lang_Object(proto) {\n    JsObject_$Overlay.$clinit();\n    return Object.create(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(proto)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @param {*} props\n   * @return {Object}\n   * @public\n   */\n  static m_defineProperties__java_lang_Object__java_lang_Object(obj, props) {\n    JsObject_$Overlay.$clinit();\n    return Object.defineProperties(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)), /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(props)));\n  }\n  \n  /**\n   * @param {Object} obj\n   * @param {*} prop\n   * @param {Object} descriptor\n   * @return {Object}\n   * @public\n   */\n  static m_defineProperty__elemental2_core_JsObject__java_lang_Object__elemental2_core_JsObject(obj, prop, descriptor) {\n    JsObject_$Overlay.$clinit();\n    return Object.defineProperty(obj, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(prop)), descriptor);\n  }\n  \n  /**\n   * @param {Object} obj\n   * @param {?string} prop\n   * @param {Object} descriptor\n   * @return {Object}\n   * @public\n   */\n  static m_defineProperty__elemental2_core_JsObject__java_lang_String__elemental2_core_JsObject(obj, prop, descriptor) {\n    JsObject_$Overlay.$clinit();\n    return Object.defineProperty(obj, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(prop)), descriptor);\n  }\n  \n  /**\n   * @param {*} obj\n   * @param {?} prop\n   * @param {*} descriptor\n   * @return {Object}\n   * @public\n   */\n  static m_defineProperty__java_lang_Object__elemental2_core_JsObject_DefinePropertyPropUnionType__java_lang_Object(obj, prop, descriptor) {\n    JsObject_$Overlay.$clinit();\n    return Object.defineProperty(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)), prop, /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(descriptor)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @param {*} prop\n   * @param {*} descriptor\n   * @return {Object}\n   * @public\n   */\n  static m_defineProperty__java_lang_Object__java_lang_Object__java_lang_Object(obj, prop, descriptor) {\n    JsObject_$Overlay.$clinit();\n    return JsObject_$Overlay.m_defineProperty__elemental2_core_JsObject__java_lang_Object__elemental2_core_JsObject(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)), prop, /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(descriptor)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @param {?string} prop\n   * @param {*} descriptor\n   * @return {Object}\n   * @public\n   */\n  static m_defineProperty__java_lang_Object__java_lang_String__java_lang_Object(obj, prop, descriptor) {\n    JsObject_$Overlay.$clinit();\n    return JsObject_$Overlay.m_defineProperty__elemental2_core_JsObject__java_lang_String__elemental2_core_JsObject(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)), prop, /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(descriptor)));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} obj\n   * @param {*} prop\n   * @return {ObjectPropertyDescriptor\x3cM_T\x3e}\n   * @public\n   */\n  static m_getOwnPropertyDescriptor__java_lang_Object__java_lang_Object(obj, prop) {\n    JsObject_$Overlay.$clinit();\n    return /**@type {ObjectPropertyDescriptor\x3c*\x3e} */ (Object.getOwnPropertyDescriptor(obj, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(prop))));\n  }\n  \n  /**\n   * @template M_T\n   * @param {M_T} obj\n   * @param {?string} prop\n   * @return {ObjectPropertyDescriptor\x3cM_T\x3e}\n   * @public\n   */\n  static m_getOwnPropertyDescriptor__java_lang_Object__java_lang_String(obj, prop) {\n    JsObject_$Overlay.$clinit();\n    return /**@type {ObjectPropertyDescriptor\x3c*\x3e} */ (Object.getOwnPropertyDescriptor(obj, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(prop))));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Object\x3cstring, ObjectPropertyDescriptor\x3e}\n   * @public\n   */\n  static m_getOwnPropertyDescriptors__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.getOwnPropertyDescriptors(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static m_getOwnPropertyNames__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.getOwnPropertyNames(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static m_getOwnPropertySymbols__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.getOwnPropertySymbols(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Object}\n   * @public\n   */\n  static m_getPrototypeOf__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.getPrototypeOf(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_isExtensible__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.isExtensible(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_isFrozen__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.isFrozen(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {boolean}\n   * @public\n   */\n  static m_isSealed__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.isSealed(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @return {Array\x3c?string\x3e}\n   * @public\n   */\n  static m_keys__java_lang_Object(obj) {\n    JsObject_$Overlay.$clinit();\n    return Object.keys(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)));\n  }\n  \n  /**\n   * @param {*} obj\n   * @param {*} proto\n   * @return {Object}\n   * @public\n   */\n  static m_setPrototypeOf__java_lang_Object__java_lang_Object(obj, proto) {\n    JsObject_$Overlay.$clinit();\n    return Object.setPrototypeOf(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(obj)), proto);\n  }\n  \n  /**\n   * @param {Object} $thisArg\n   * @param {*} other\n   * @return {boolean}\n   * @public\n   */\n  static m_isPrototypeOf__elemental2_core_JsObject__java_lang_Object($thisArg, other) {\n    JsObject_$Overlay.$clinit();\n    return $thisArg.isPrototypeOf(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(other)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Object;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    JsObject_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(JsObject_$Overlay, $Util.$makeClassName('Object'));\n\n\nexports \x3d JsObject_$Overlay; \n//# sourceMappingURL\x3dJsObject$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/JsObject$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.JsObject$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.JsObject.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.core.JsObject.DefinePropertyPropUnionType.$Overlay');\nconst _GetOwnPropertyDescriptorPropUnionType_$Overlay \x3d goog.require('elemental2.core.JsObject.GetOwnPropertyDescriptorPropUnionType.$Overlay');\nconst _ObjectPropertyDescriptor_$Overlay \x3d goog.require('elemental2.core.ObjectPropertyDescriptor.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _JsPropertyMap_$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar JsObject_$Overlay \x3d goog.require('elemental2.core.JsObject.$Overlay$impl');\nexports \x3d JsObject_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/UserDataHandler$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.UserDataHandler$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.UserDataHandler.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UserDataHandler;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('UserDataHandler'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dUserDataHandler$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/UserDataHandler$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.UserDataHandler$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.UserDataHandler.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.UserDataHandler.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Node$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Node$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Node.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.core.JsObject.$Overlay$impl');\nlet UserDataHandler_$Overlay \x3d goog.forwardDeclare('elemental2.dom.UserDataHandler.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass Node_$Overlay {\n  /**\n   * @param {Node} $thisArg\n   * @param {*} key\n   * @param {*} data\n   * @param {UserDataHandler} handler\n   * @return {Object}\n   * @public\n   */\n  static m_setUserData__elemental2_dom_Node__java_lang_Object__java_lang_Object__elemental2_dom_UserDataHandler($thisArg, key, data, handler) {\n    Node_$Overlay.$clinit();\n    return $thisArg.setUserData(/**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(key)), /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(data)), handler);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Node;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Node_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Node_$Overlay, $Util.$makeClassName('Node'));\n\n\nexports \x3d Node_$Overlay; \n//# sourceMappingURL\x3dNode$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Node$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Node$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Node.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.core.JsObject.$Overlay');\nconst _UserDataHandler_$Overlay \x3d goog.require('elemental2.dom.UserDataHandler.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar Node_$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay$impl');\nexports \x3d Node_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$AppendNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$AppendNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Document.AppendNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass AppendNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), AppendNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Document_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Document_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Document_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Document_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AppendNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AppendNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d AppendNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dDocument$AppendNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$AppendNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$AppendNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Document.AppendNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AppendNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Document.AppendNodesUnionType.$Overlay$impl');\nexports \x3d AppendNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$CreateTextNodeDataUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$CreateTextNodeDataUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Document.CreateTextNodeDataUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__elemental2_dom_Document_CreateTextNodeDataUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Document_CreateTextNodeDataUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isDouble__elemental2_dom_Document_CreateTextNodeDataUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Double.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Document_CreateTextNodeDataUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDocument$CreateTextNodeDataUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$CreateTextNodeDataUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$CreateTextNodeDataUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Document.CreateTextNodeDataUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Document.CreateTextNodeDataUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$PrependNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$PrependNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Document.PrependNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass PrependNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), PrependNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Document_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Document_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Document_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Document_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PrependNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(PrependNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d PrependNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dDocument$PrependNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$PrependNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$PrependNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Document.PrependNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar PrependNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Document.PrependNodesUnionType.$Overlay$impl');\nexports \x3d PrependNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Text$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Text$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Text.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Text;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Text'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dText$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Text$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Text$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Text.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Text.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Document.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Document.AppendNodesUnionType.$Overlay$impl');\nlet CreateTextNodeDataUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Document.CreateTextNodeDataUnionType.$Overlay$impl');\nlet PrependNodesUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Document.PrependNodesUnionType.$Overlay$impl');\nlet Node_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet Text_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Text.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass Document_$Overlay {\n  /**\n   * @param {Document} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_Document__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Document_$Overlay.$clinit();\n    $thisArg.append(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Document} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_Document__arrayOf_java_lang_String($thisArg, nodes) {\n    Document_$Overlay.$clinit();\n    $thisArg.append(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Document} $thisArg\n   * @param {?string} data\n   * @return {Text}\n   * @public\n   */\n  static m_createTextNode__elemental2_dom_Document__java_lang_String($thisArg, data) {\n    Document_$Overlay.$clinit();\n    return $thisArg.createTextNode(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(data)));\n  }\n  \n  /**\n   * @param {Document} $thisArg\n   * @param {number} data\n   * @return {Text}\n   * @public\n   */\n  static m_createTextNode__elemental2_dom_Document__double($thisArg, data) {\n    Document_$Overlay.$clinit();\n    return $thisArg.createTextNode(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(data)));\n  }\n  \n  /**\n   * @param {Document} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_prepend__elemental2_dom_Document__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Document_$Overlay.$clinit();\n    $thisArg.prepend(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Document} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_prepend__elemental2_dom_Document__arrayOf_java_lang_String($thisArg, nodes) {\n    Document_$Overlay.$clinit();\n    $thisArg.prepend(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Document;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Document_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Document_$Overlay, $Util.$makeClassName('Document'));\n\n\nexports \x3d Document_$Overlay; \n//# sourceMappingURL\x3dDocument$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Document$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Document$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Document.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Document.AppendNodesUnionType.$Overlay');\nconst _CreateTextNodeDataUnionType_$Overlay \x3d goog.require('elemental2.dom.Document.CreateTextNodeDataUnionType.$Overlay');\nconst _PrependNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Document.PrependNodesUnionType.$Overlay');\nconst _Node_$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _Text_$Overlay \x3d goog.require('elemental2.dom.Text.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar Document_$Overlay \x3d goog.require('elemental2.dom.Document.$Overlay$impl');\nexports \x3d Document_$Overlay;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/Transferable$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.Transferable$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.Transferable.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('Transferable'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dTransferable$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/Transferable$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.Transferable$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.Transferable.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.core.Transferable.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Blob$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Blob$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Blob.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Blob;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Blob'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dBlob$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Blob$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Blob$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Blob.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasPattern$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasPattern$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasPattern.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof CanvasPattern;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('CanvasPattern'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dCanvasPattern$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasPattern$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasPattern$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasPattern.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.CanvasPattern.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Path2D$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Path2D$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Path2D.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Path2D;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Path2D'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dPath2D$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Path2D$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Path2D$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Path2D.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Path2D.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$ClipOptFillRuleOrPathUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$ClipOptFillRuleOrPathUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.ClipOptFillRuleOrPathUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Path2D.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass ClipOptFillRuleOrPathUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    ClipOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), ClipOptFillRuleOrPathUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Path2D}\n   * @public\n   */\n  static m_asPath2D__elemental2_dom_CanvasRenderingContext2D_ClipOptFillRuleOrPathUnionType($thisArg) {\n    ClipOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return /**@type {Path2D} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_CanvasRenderingContext2D_ClipOptFillRuleOrPathUnionType($thisArg) {\n    ClipOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isPath2D__elemental2_dom_CanvasRenderingContext2D_ClipOptFillRuleOrPathUnionType($thisArg) {\n    ClipOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_CanvasRenderingContext2D_ClipOptFillRuleOrPathUnionType($thisArg) {\n    ClipOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ClipOptFillRuleOrPathUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Path2D.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ClipOptFillRuleOrPathUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ClipOptFillRuleOrPathUnionType_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$ClipOptFillRuleOrPathUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$ClipOptFillRuleOrPathUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$ClipOptFillRuleOrPathUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.ClipOptFillRuleOrPathUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Path2D.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ClipOptFillRuleOrPathUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.ClipOptFillRuleOrPathUnionType.$Overlay$impl');\nexports \x3d ClipOptFillRuleOrPathUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLCanvasElement$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLCanvasElement$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.core.JsObject.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass HTMLCanvasElement_$Overlay {\n  /**\n   * @param {HTMLCanvasElement} $thisArg\n   * @param {?string} contextId\n   * @param {*} args\n   * @return {Object}\n   * @public\n   */\n  static m_getContext__elemental2_dom_HTMLCanvasElement__java_lang_String__java_lang_Object($thisArg, contextId, args) {\n    HTMLCanvasElement_$Overlay.$clinit();\n    return $thisArg.getContext(contextId, /**@type {Object} */ (Js.m_uncheckedCast__java_lang_Object(args)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HTMLCanvasElement;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HTMLCanvasElement_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(HTMLCanvasElement_$Overlay, $Util.$makeClassName('HTMLCanvasElement'));\n\n\nexports \x3d HTMLCanvasElement_$Overlay; \n//# sourceMappingURL\x3dHTMLCanvasElement$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLCanvasElement$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLCanvasElement$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.HTMLCanvasElement.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.core.JsObject.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar HTMLCanvasElement_$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nexports \x3d HTMLCanvasElement_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLImageElement$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLImageElement$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.HTMLImageElement.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HTMLImageElement;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('HTMLImageElement'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHTMLImageElement$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLImageElement$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLImageElement$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.HTMLImageElement.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.HTMLImageElement.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLVideoElement$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLVideoElement$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.HTMLVideoElement.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HTMLVideoElement;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('HTMLVideoElement'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHTMLVideoElement$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLVideoElement$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLVideoElement$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.HTMLVideoElement.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.HTMLVideoElement.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/ImageBitmap$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.ImageBitmap$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.ImageBitmap.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('ImageBitmap'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dImageBitmap$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/ImageBitmap$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.ImageBitmap$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.ImageBitmap.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.ImageBitmap.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$CreatePatternImageUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$CreatePatternImageUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.CreatePatternImageUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nlet HTMLImageElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLImageElement.$Overlay$impl');\nlet HTMLVideoElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLVideoElement.$Overlay$impl');\nlet ImageBitmap_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageBitmap.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass CreatePatternImageUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), CreatePatternImageUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLCanvasElement}\n   * @public\n   */\n  static m_asHTMLCanvasElement__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLCanvasElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLImageElement}\n   * @public\n   */\n  static m_asHTMLImageElement__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLImageElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLImageElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLVideoElement}\n   * @public\n   */\n  static m_asHTMLVideoElement__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLVideoElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLVideoElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {ImageBitmap}\n   * @public\n   */\n  static m_asImageBitmap__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return /**@type {ImageBitmap} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), ImageBitmap_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLCanvasElement__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLImageElement__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return HTMLImageElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLVideoElement__elemental2_dom_CanvasRenderingContext2D_CreatePatternImageUnionType($thisArg) {\n    CreatePatternImageUnionType_$Overlay.$clinit();\n    return HTMLVideoElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    CreatePatternImageUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\n    HTMLImageElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLImageElement.$Overlay$impl');\n    HTMLVideoElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLVideoElement.$Overlay$impl');\n    ImageBitmap_$Overlay \x3d goog.module.get('elemental2.dom.ImageBitmap.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(CreatePatternImageUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d CreatePatternImageUnionType_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$CreatePatternImageUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$CreatePatternImageUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$CreatePatternImageUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.CreatePatternImageUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay');\nconst _HTMLImageElement_$Overlay \x3d goog.require('elemental2.dom.HTMLImageElement.$Overlay');\nconst _HTMLVideoElement_$Overlay \x3d goog.require('elemental2.dom.HTMLVideoElement.$Overlay');\nconst _ImageBitmap_$Overlay \x3d goog.require('elemental2.dom.ImageBitmap.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar CreatePatternImageUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.CreatePatternImageUnionType.$Overlay$impl');\nexports \x3d CreatePatternImageUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$DrawImageImageUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$DrawImageImageUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.DrawImageImageUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nlet HTMLImageElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLImageElement.$Overlay$impl');\nlet HTMLVideoElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLVideoElement.$Overlay$impl');\nlet ImageBitmap_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageBitmap.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass DrawImageImageUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), DrawImageImageUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLCanvasElement}\n   * @public\n   */\n  static m_asHTMLCanvasElement__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLCanvasElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLImageElement}\n   * @public\n   */\n  static m_asHTMLImageElement__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLImageElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLImageElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLVideoElement}\n   * @public\n   */\n  static m_asHTMLVideoElement__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLVideoElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLVideoElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {ImageBitmap}\n   * @public\n   */\n  static m_asImageBitmap__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return /**@type {ImageBitmap} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), ImageBitmap_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLCanvasElement__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLImageElement__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return HTMLImageElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLVideoElement__elemental2_dom_CanvasRenderingContext2D_DrawImageImageUnionType($thisArg) {\n    DrawImageImageUnionType_$Overlay.$clinit();\n    return HTMLVideoElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DrawImageImageUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\n    HTMLImageElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLImageElement.$Overlay$impl');\n    HTMLVideoElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLVideoElement.$Overlay$impl');\n    ImageBitmap_$Overlay \x3d goog.module.get('elemental2.dom.ImageBitmap.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DrawImageImageUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d DrawImageImageUnionType_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$DrawImageImageUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$DrawImageImageUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$DrawImageImageUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.DrawImageImageUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay');\nconst _HTMLImageElement_$Overlay \x3d goog.require('elemental2.dom.HTMLImageElement.$Overlay');\nconst _HTMLVideoElement_$Overlay \x3d goog.require('elemental2.dom.HTMLVideoElement.$Overlay');\nconst _ImageBitmap_$Overlay \x3d goog.require('elemental2.dom.ImageBitmap.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar DrawImageImageUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.DrawImageImageUnionType.$Overlay$impl');\nexports \x3d DrawImageImageUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$FillOptFillRuleOrPathUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$FillOptFillRuleOrPathUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.FillOptFillRuleOrPathUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Path2D.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FillOptFillRuleOrPathUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    FillOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), FillOptFillRuleOrPathUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Path2D}\n   * @public\n   */\n  static m_asPath2D__elemental2_dom_CanvasRenderingContext2D_FillOptFillRuleOrPathUnionType($thisArg) {\n    FillOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return /**@type {Path2D} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_CanvasRenderingContext2D_FillOptFillRuleOrPathUnionType($thisArg) {\n    FillOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isPath2D__elemental2_dom_CanvasRenderingContext2D_FillOptFillRuleOrPathUnionType($thisArg) {\n    FillOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_CanvasRenderingContext2D_FillOptFillRuleOrPathUnionType($thisArg) {\n    FillOptFillRuleOrPathUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FillOptFillRuleOrPathUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Path2D.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(FillOptFillRuleOrPathUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d FillOptFillRuleOrPathUnionType_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$FillOptFillRuleOrPathUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$FillOptFillRuleOrPathUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$FillOptFillRuleOrPathUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.FillOptFillRuleOrPathUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Path2D.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FillOptFillRuleOrPathUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.FillOptFillRuleOrPathUnionType.$Overlay$impl');\nexports \x3d FillOptFillRuleOrPathUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$SetFillColorP0UnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$SetFillColorP0UnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.SetFillColorP0UnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__elemental2_dom_CanvasRenderingContext2D_SetFillColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_CanvasRenderingContext2D_SetFillColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isDouble__elemental2_dom_CanvasRenderingContext2D_SetFillColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return Double.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_CanvasRenderingContext2D_SetFillColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$SetFillColorP0UnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$SetFillColorP0UnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$SetFillColorP0UnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.SetFillColorP0UnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.SetFillColorP0UnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$SetStrokeColorP0UnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$SetStrokeColorP0UnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.SetStrokeColorP0UnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__elemental2_dom_CanvasRenderingContext2D_SetStrokeColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_CanvasRenderingContext2D_SetStrokeColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isDouble__elemental2_dom_CanvasRenderingContext2D_SetStrokeColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return Double.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_CanvasRenderingContext2D_SetStrokeColorP0UnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$SetStrokeColorP0UnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$SetStrokeColorP0UnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$SetStrokeColorP0UnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.SetStrokeColorP0UnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.SetStrokeColorP0UnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet CanvasPattern_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasPattern.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.ClipOptFillRuleOrPathUnionType.$Overlay$impl');\nlet CreatePatternImageUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.CreatePatternImageUnionType.$Overlay$impl');\nlet DrawImageImageUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.DrawImageImageUnionType.$Overlay$impl');\nlet FillOptFillRuleOrPathUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.FillOptFillRuleOrPathUnionType.$Overlay$impl');\nlet SetFillColorP0UnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.SetFillColorP0UnionType.$Overlay$impl');\nlet SetStrokeColorP0UnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.SetStrokeColorP0UnionType.$Overlay$impl');\nlet HTMLCanvasElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nlet HTMLImageElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLImageElement.$Overlay$impl');\nlet HTMLVideoElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLVideoElement.$Overlay$impl');\nlet ImageBitmap_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageBitmap.$Overlay$impl');\nlet Path2D_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Path2D.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass CanvasRenderingContext2D_$Overlay {\n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {Path2D} optFillRuleOrPath\n   * @param {?string} optFillRule\n   * @return {void}\n   * @public\n   */\n  static m_clip__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_Path2D__java_lang_String($thisArg, optFillRuleOrPath, optFillRule) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.clip(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)), optFillRule);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {Path2D} optFillRuleOrPath\n   * @return {void}\n   * @public\n   */\n  static m_clip__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_Path2D($thisArg, optFillRuleOrPath) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.clip(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} optFillRuleOrPath\n   * @param {?string} optFillRule\n   * @return {void}\n   * @public\n   */\n  static m_clip__elemental2_dom_CanvasRenderingContext2D__java_lang_String__java_lang_String($thisArg, optFillRuleOrPath, optFillRule) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.clip(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)), optFillRule);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} optFillRuleOrPath\n   * @return {void}\n   * @public\n   */\n  static m_clip__elemental2_dom_CanvasRenderingContext2D__java_lang_String($thisArg, optFillRuleOrPath) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.clip(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {?string} repetition\n   * @return {CanvasPattern}\n   * @public\n   */\n  static m_createPattern__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__java_lang_String($thisArg, image, repetition) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    return $thisArg.createPattern(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), repetition);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {?string} repetition\n   * @return {CanvasPattern}\n   * @public\n   */\n  static m_createPattern__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__java_lang_String($thisArg, image, repetition) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    return $thisArg.createPattern(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), repetition);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {?string} repetition\n   * @return {CanvasPattern}\n   * @public\n   */\n  static m_createPattern__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__java_lang_String($thisArg, image, repetition) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    return $thisArg.createPattern(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), repetition);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {?string} repetition\n   * @return {CanvasPattern}\n   * @public\n   */\n  static m_createPattern__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__java_lang_String($thisArg, image, repetition) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    return $thisArg.createPattern(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), repetition);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw, sh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double__double__double($thisArg, image, dx, dy, dw, dh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double__double($thisArg, image, dx, dy, dw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLCanvasElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLCanvasElement__double__double($thisArg, image, dx, dy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw, sh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double__double__double($thisArg, image, dx, dy, dw, dh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double__double($thisArg, image, dx, dy, dw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLImageElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLImageElement__double__double($thisArg, image, dx, dy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw, sh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double__double__double($thisArg, image, dx, dy, dw, dh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double__double($thisArg, image, dx, dy, dw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {HTMLVideoElement} image\n   * @param {number} dx\n   * @param {number} dy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_HTMLVideoElement__double__double($thisArg, image, dx, dy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw, sh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy, sw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy, sw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @param {number} sy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx, sy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx, sy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @param {number} sx\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double__double__double__double($thisArg, image, dx, dy, dw, dh, sx) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh, sx);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @param {number} dh\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double__double__double($thisArg, image, dx, dy, dw, dh) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw, dh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dw\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double__double($thisArg, image, dx, dy, dw) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy, dw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {ImageBitmap} image\n   * @param {number} dx\n   * @param {number} dy\n   * @return {void}\n   * @public\n   */\n  static m_drawImage__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_ImageBitmap__double__double($thisArg, image, dx, dy) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.drawImage(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), dx, dy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {Path2D} optFillRuleOrPath\n   * @param {?string} optFillRule\n   * @return {void}\n   * @public\n   */\n  static m_fill__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_Path2D__java_lang_String($thisArg, optFillRuleOrPath, optFillRule) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.fill(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)), optFillRule);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {Path2D} optFillRuleOrPath\n   * @return {void}\n   * @public\n   */\n  static m_fill__elemental2_dom_CanvasRenderingContext2D__elemental2_dom_Path2D($thisArg, optFillRuleOrPath) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.fill(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} optFillRuleOrPath\n   * @param {?string} optFillRule\n   * @return {void}\n   * @public\n   */\n  static m_fill__elemental2_dom_CanvasRenderingContext2D__java_lang_String__java_lang_String($thisArg, optFillRuleOrPath, optFillRule) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.fill(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)), optFillRule);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} optFillRuleOrPath\n   * @return {void}\n   * @public\n   */\n  static m_fill__elemental2_dom_CanvasRenderingContext2D__java_lang_String($thisArg, optFillRuleOrPath) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.fill(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(optFillRuleOrPath)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @param {number} p4\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double__double__double__double($thisArg, p0, p1, p2, p3, p4) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3, p4);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double__double__double($thisArg, p0, p1, p2, p3) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double__double($thisArg, p0, p1, p2) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double($thisArg, p0, p1) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String($thisArg, p0) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @param {number} p4\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__double__double__double__double__double($thisArg, p0, p1, p2, p3, p4) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3, p4);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__double__double__double__double($thisArg, p0, p1, p2, p3) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__double__double__double($thisArg, p0, p1, p2) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__double__double($thisArg, p0, p1) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @return {void}\n   * @public\n   */\n  static m_setFillColor__elemental2_dom_CanvasRenderingContext2D__double($thisArg, p0) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setFillColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @param {number} p4\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double__double__double__double($thisArg, p0, p1, p2, p3, p4) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3, p4);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double__double__double($thisArg, p0, p1, p2, p3) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double__double($thisArg, p0, p1, p2) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @param {number} p1\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String__double($thisArg, p0, p1) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {?string} p0\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__java_lang_String($thisArg, p0) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @param {number} p4\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__double__double__double__double__double($thisArg, p0, p1, p2, p3, p4) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3, p4);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @param {number} p3\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__double__double__double__double($thisArg, p0, p1, p2, p3) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2, p3);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @param {number} p2\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__double__double__double($thisArg, p0, p1, p2) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1, p2);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @param {number} p1\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__double__double($thisArg, p0, p1) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)), p1);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} $thisArg\n   * @param {number} p0\n   * @return {void}\n   * @public\n   */\n  static m_setStrokeColor__elemental2_dom_CanvasRenderingContext2D__double($thisArg, p0) {\n    CanvasRenderingContext2D_$Overlay.$clinit();\n    $thisArg.setStrokeColor(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(p0)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof CanvasRenderingContext2D;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    CanvasRenderingContext2D_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(CanvasRenderingContext2D_$Overlay, $Util.$makeClassName('CanvasRenderingContext2D'));\n\n\nexports \x3d CanvasRenderingContext2D_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _CanvasPattern_$Overlay \x3d goog.require('elemental2.dom.CanvasPattern.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.ClipOptFillRuleOrPathUnionType.$Overlay');\nconst _CreatePatternImageUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.CreatePatternImageUnionType.$Overlay');\nconst _DrawImageImageUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.DrawImageImageUnionType.$Overlay');\nconst _FillOptFillRuleOrPathUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.FillOptFillRuleOrPathUnionType.$Overlay');\nconst _SetFillColorP0UnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.SetFillColorP0UnionType.$Overlay');\nconst _SetStrokeColorP0UnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.SetStrokeColorP0UnionType.$Overlay');\nconst _HTMLCanvasElement_$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay');\nconst _HTMLImageElement_$Overlay \x3d goog.require('elemental2.dom.HTMLImageElement.$Overlay');\nconst _HTMLVideoElement_$Overlay \x3d goog.require('elemental2.dom.HTMLVideoElement.$Overlay');\nconst _ImageBitmap_$Overlay \x3d goog.require('elemental2.dom.ImageBitmap.$Overlay');\nconst _Path2D_$Overlay \x3d goog.require('elemental2.dom.Path2D.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar CanvasRenderingContext2D_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\nexports \x3d CanvasRenderingContext2D_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Database$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Database$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Database.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Database;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Database'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDatabase$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Database$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Database$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Database.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Database.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DatabaseCallback$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DatabaseCallback$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DatabaseCallback.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('DatabaseCallback'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDatabaseCallback$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DatabaseCallback$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DatabaseCallback$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DatabaseCallback.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.DatabaseCallback.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/ImageData$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.ImageData$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.ImageData.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ImageData;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('ImageData'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dImageData$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/ImageData$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.ImageData$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.ImageData.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.ImageData.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$CreateImageBitmapImageUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$CreateImageBitmapImageUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.CreateImageBitmapImageUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Blob.$Overlay$impl');\nlet CanvasRenderingContext2D_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\nlet HTMLCanvasElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nlet HTMLImageElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLImageElement.$Overlay$impl');\nlet HTMLVideoElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLVideoElement.$Overlay$impl');\nlet ImageBitmap_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageBitmap.$Overlay$impl');\nlet ImageData_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageData.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass CreateImageBitmapImageUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), CreateImageBitmapImageUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Blob}\n   * @public\n   */\n  static m_asBlob__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {Blob} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {CanvasRenderingContext2D}\n   * @public\n   */\n  static m_asCanvasRenderingContext2D__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {CanvasRenderingContext2D} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), CanvasRenderingContext2D_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLCanvasElement}\n   * @public\n   */\n  static m_asHTMLCanvasElement__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLCanvasElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLCanvasElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLImageElement}\n   * @public\n   */\n  static m_asHTMLImageElement__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLImageElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLImageElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {HTMLVideoElement}\n   * @public\n   */\n  static m_asHTMLVideoElement__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {HTMLVideoElement} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), HTMLVideoElement_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {ImageBitmap}\n   * @public\n   */\n  static m_asImageBitmap__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {ImageBitmap} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), ImageBitmap_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {ImageData}\n   * @public\n   */\n  static m_asImageData__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return /**@type {ImageData} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), ImageData_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBlob__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isCanvasRenderingContext2D__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return CanvasRenderingContext2D_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLCanvasElement__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return HTMLCanvasElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLImageElement__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return HTMLImageElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHTMLVideoElement__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return HTMLVideoElement_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isImageData__elemental2_dom_DomGlobal_CreateImageBitmapImageUnionType($thisArg) {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit();\n    return ImageData_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    CreateImageBitmapImageUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Blob.$Overlay$impl');\n    CanvasRenderingContext2D_$Overlay \x3d goog.module.get('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\n    HTMLCanvasElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\n    HTMLImageElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLImageElement.$Overlay$impl');\n    HTMLVideoElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLVideoElement.$Overlay$impl');\n    ImageBitmap_$Overlay \x3d goog.module.get('elemental2.dom.ImageBitmap.$Overlay$impl');\n    ImageData_$Overlay \x3d goog.module.get('elemental2.dom.ImageData.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(CreateImageBitmapImageUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d CreateImageBitmapImageUnionType_$Overlay; \n//# sourceMappingURL\x3dDomGlobal$CreateImageBitmapImageUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$CreateImageBitmapImageUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$CreateImageBitmapImageUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.CreateImageBitmapImageUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay');\nconst _CanvasRenderingContext2D_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.$Overlay');\nconst _HTMLCanvasElement_$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay');\nconst _HTMLImageElement_$Overlay \x3d goog.require('elemental2.dom.HTMLImageElement.$Overlay');\nconst _HTMLVideoElement_$Overlay \x3d goog.require('elemental2.dom.HTMLVideoElement.$Overlay');\nconst _ImageBitmap_$Overlay \x3d goog.require('elemental2.dom.ImageBitmap.$Overlay');\nconst _ImageData_$Overlay \x3d goog.require('elemental2.dom.ImageData.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar CreateImageBitmapImageUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.CreateImageBitmapImageUnionType.$Overlay$impl');\nexports \x3d CreateImageBitmapImageUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Request$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Request$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Request.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Request;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Request'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dRequest$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Request$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Request$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Request.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Request.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$FetchInputUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$FetchInputUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.FetchInputUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Request.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FetchInputUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), FetchInputUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Request}\n   * @public\n   */\n  static m_asRequest__elemental2_dom_DomGlobal_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return /**@type {Request} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_DomGlobal_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isRequest__elemental2_dom_DomGlobal_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_DomGlobal_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FetchInputUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Request.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(FetchInputUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d FetchInputUnionType_$Overlay; \n//# sourceMappingURL\x3dDomGlobal$FetchInputUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$FetchInputUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$FetchInputUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.FetchInputUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Request.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FetchInputUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.FetchInputUnionType.$Overlay$impl');\nexports \x3d FetchInputUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$OpenDatabaseCallbackUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$OpenDatabaseCallbackUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.OpenDatabaseCallbackUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Database_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Database.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.DatabaseCallback.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $JavaScriptFunction \x3d goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');\n\n\nclass OpenDatabaseCallbackUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), OpenDatabaseCallbackUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {DatabaseCallback}\n   * @public\n   */\n  static m_asDatabaseCallback__elemental2_dom_DomGlobal_OpenDatabaseCallbackUnionType($thisArg) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return /**@type {DatabaseCallback} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?function(Database):*}\n   * @public\n   */\n  static m_asOpenDatabaseCallbackFn__elemental2_dom_DomGlobal_OpenDatabaseCallbackUnionType($thisArg) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return /**@type {?function(Database):*} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $JavaScriptFunction));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isOpenDatabaseCallbackFn__elemental2_dom_DomGlobal_OpenDatabaseCallbackUnionType($thisArg) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return $JavaScriptFunction.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.DatabaseCallback.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $JavaScriptFunction \x3d goog.module.get('vmbootstrap.JavaScriptFunction$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OpenDatabaseCallbackUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d OpenDatabaseCallbackUnionType_$Overlay; \n//# sourceMappingURL\x3dDomGlobal$OpenDatabaseCallbackUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$OpenDatabaseCallbackUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$OpenDatabaseCallbackUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.OpenDatabaseCallbackUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Database_$Overlay \x3d goog.require('elemental2.dom.Database.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.DatabaseCallback.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction');\n\n\n// Re-exports the implementation.\nvar OpenDatabaseCallbackUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.OpenDatabaseCallbackUnionType.$Overlay$impl');\nexports \x3d OpenDatabaseCallbackUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$PostMessageTargetOriginOrPortsOrTransferUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$PostMessageTargetOriginOrPortsOrTransferUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.PostMessageTargetOriginOrPortsOrTransferUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Array\x3c*\x3e}\n   * @public\n   */\n  static m_asObjectArray__elemental2_dom_DomGlobal_PostMessageTargetOriginOrPortsOrTransferUnionType($thisArg) {\n    $Overlay.$clinit();\n    return /**@type {Array\x3c*\x3e} */ ($Arrays.$castTo(Js.m_cast__java_lang_Object($thisArg), j_l_Object, 1));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_DomGlobal_PostMessageTargetOriginOrPortsOrTransferUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isObjectArray__elemental2_dom_DomGlobal_PostMessageTargetOriginOrPortsOrTransferUnionType($thisArg) {\n    $Overlay.$clinit();\n    return $Arrays.$instanceIsOfType(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)), j_l_Object, 1);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_DomGlobal_PostMessageTargetOriginOrPortsOrTransferUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDomGlobal$PostMessageTargetOriginOrPortsOrTransferUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$PostMessageTargetOriginOrPortsOrTransferUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$PostMessageTargetOriginOrPortsOrTransferUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.PostMessageTargetOriginOrPortsOrTransferUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.DomGlobal.PostMessageTargetOriginOrPortsOrTransferUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$PostMessageTargetOriginOrTransferUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$PostMessageTargetOriginOrTransferUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.PostMessageTargetOriginOrTransferUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.core.Transferable.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass PostMessageTargetOriginOrTransferUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    PostMessageTargetOriginOrTransferUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), PostMessageTargetOriginOrTransferUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_DomGlobal_PostMessageTargetOriginOrTransferUnionType($thisArg) {\n    PostMessageTargetOriginOrTransferUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Array\x3cTransferable\x3e}\n   * @public\n   */\n  static m_asTransferableArray__elemental2_dom_DomGlobal_PostMessageTargetOriginOrTransferUnionType($thisArg) {\n    PostMessageTargetOriginOrTransferUnionType_$Overlay.$clinit();\n    return /**@type {Array\x3cTransferable\x3e} */ ($Arrays.$castToNative(Js.m_cast__java_lang_Object($thisArg)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_DomGlobal_PostMessageTargetOriginOrTransferUnionType($thisArg) {\n    PostMessageTargetOriginOrTransferUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isTransferableArray__elemental2_dom_DomGlobal_PostMessageTargetOriginOrTransferUnionType($thisArg) {\n    PostMessageTargetOriginOrTransferUnionType_$Overlay.$clinit();\n    return $Arrays.$instanceIsOfType(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)), j_l_Object, 1);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PostMessageTargetOriginOrTransferUnionType_$Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(PostMessageTargetOriginOrTransferUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d PostMessageTargetOriginOrTransferUnionType_$Overlay; \n//# sourceMappingURL\x3dDomGlobal$PostMessageTargetOriginOrTransferUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$PostMessageTargetOriginOrTransferUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$PostMessageTargetOriginOrTransferUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.PostMessageTargetOriginOrTransferUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.core.Transferable.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar PostMessageTargetOriginOrTransferUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.PostMessageTargetOriginOrTransferUnionType.$Overlay$impl');\nexports \x3d PostMessageTargetOriginOrTransferUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$SetIntervalCallbackUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$SetIntervalCallbackUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.SetIntervalCallbackUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $JavaScriptFunction \x3d goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?function(...*):void}\n   * @public\n   */\n  static m_asSetIntervalCallbackFn__elemental2_dom_DomGlobal_SetIntervalCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return /**@type {?function(...*):void} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $JavaScriptFunction));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_DomGlobal_SetIntervalCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isSetIntervalCallbackFn__elemental2_dom_DomGlobal_SetIntervalCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return $JavaScriptFunction.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_DomGlobal_SetIntervalCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $JavaScriptFunction \x3d goog.module.get('vmbootstrap.JavaScriptFunction$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDomGlobal$SetIntervalCallbackUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$SetIntervalCallbackUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$SetIntervalCallbackUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.SetIntervalCallbackUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.DomGlobal.SetIntervalCallbackUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$SetTimeoutCallbackUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$SetTimeoutCallbackUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.SetTimeoutCallbackUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $JavaScriptFunction \x3d goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?function(...*):void}\n   * @public\n   */\n  static m_asSetTimeoutCallbackFn__elemental2_dom_DomGlobal_SetTimeoutCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return /**@type {?function(...*):void} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $JavaScriptFunction));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_DomGlobal_SetTimeoutCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isSetTimeoutCallbackFn__elemental2_dom_DomGlobal_SetTimeoutCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return $JavaScriptFunction.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_DomGlobal_SetTimeoutCallbackUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $JavaScriptFunction \x3d goog.module.get('vmbootstrap.JavaScriptFunction$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dDomGlobal$SetTimeoutCallbackUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$SetTimeoutCallbackUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$SetTimeoutCallbackUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.SetTimeoutCallbackUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.DomGlobal.SetTimeoutCallbackUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLDocument$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLDocument$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.HTMLDocument.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HTMLDocument;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('HTMLDocument'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHTMLDocument$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLDocument$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLDocument$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.HTMLDocument.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.HTMLDocument.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Location$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Location$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Location.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('Location'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dLocation$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Location$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Location$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Location.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Location.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Navigator$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Navigator$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Navigator.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Navigator;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Navigator'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dNavigator$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Navigator$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Navigator$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Navigator.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Navigator.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/ArrayBuffer$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.ArrayBuffer$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.ArrayBuffer.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayBuffer;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('ArrayBuffer'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dArrayBuffer$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/ArrayBuffer$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.ArrayBuffer$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.ArrayBuffer.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.core.ArrayBuffer.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/ArrayBufferView$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.ArrayBufferView$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.core.ArrayBufferView.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ArrayBufferView;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('ArrayBufferView'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dArrayBufferView$$Overlay.js.map");

//jsZipCache/86044b80c45bdc76f980497d61f5c011-elemental2-core-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/core/ArrayBufferView$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.core.ArrayBufferView$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.core.ArrayBufferView.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.core.ArrayBufferView.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/FormData$AppendValueUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.FormData$AppendValueUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.FormData.AppendValueUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Blob.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass AppendValueUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    AppendValueUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), AppendValueUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Blob}\n   * @public\n   */\n  static m_asBlob__elemental2_dom_FormData_AppendValueUnionType($thisArg) {\n    AppendValueUnionType_$Overlay.$clinit();\n    return /**@type {Blob} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_FormData_AppendValueUnionType($thisArg) {\n    AppendValueUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBlob__elemental2_dom_FormData_AppendValueUnionType($thisArg) {\n    AppendValueUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_FormData_AppendValueUnionType($thisArg) {\n    AppendValueUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AppendValueUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Blob.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AppendValueUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d AppendValueUnionType_$Overlay; \n//# sourceMappingURL\x3dFormData$AppendValueUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/FormData$AppendValueUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.FormData$AppendValueUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.FormData.AppendValueUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AppendValueUnionType_$Overlay \x3d goog.require('elemental2.dom.FormData.AppendValueUnionType.$Overlay$impl');\nexports \x3d AppendValueUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/FormData$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.FormData$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.FormData.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Blob_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Blob.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.FormData.AppendValueUnionType.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass FormData_$Overlay {\n  /**\n   * @param {FormData} $thisArg\n   * @param {?string} name\n   * @param {Blob} value\n   * @param {?string} filename\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_FormData__java_lang_String__elemental2_dom_Blob__java_lang_String($thisArg, name, value, filename) {\n    FormData_$Overlay.$clinit();\n    $thisArg.append(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)), filename);\n  }\n  \n  /**\n   * @param {FormData} $thisArg\n   * @param {?string} name\n   * @param {Blob} value\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_FormData__java_lang_String__elemental2_dom_Blob($thisArg, name, value) {\n    FormData_$Overlay.$clinit();\n    $thisArg.append(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {FormData} $thisArg\n   * @param {?string} name\n   * @param {?string} value\n   * @param {?string} filename\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_FormData__java_lang_String__java_lang_String__java_lang_String($thisArg, name, value, filename) {\n    FormData_$Overlay.$clinit();\n    $thisArg.append(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)), filename);\n  }\n  \n  /**\n   * @param {FormData} $thisArg\n   * @param {?string} name\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_FormData__java_lang_String__java_lang_String($thisArg, name, value) {\n    FormData_$Overlay.$clinit();\n    $thisArg.append(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FormData;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FormData_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FormData_$Overlay, $Util.$makeClassName('FormData'));\n\n\nexports \x3d FormData_$Overlay; \n//# sourceMappingURL\x3dFormData$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/FormData$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.FormData$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.FormData.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Blob_$Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.FormData.AppendValueUnionType.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar FormData_$Overlay \x3d goog.require('elemental2.dom.FormData.$Overlay$impl');\nexports \x3d FormData_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Headers$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Headers$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Headers.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Headers;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Headers'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHeaders$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Headers$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Headers$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Headers.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Headers.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/RequestInit$GetBodyUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.RequestInit$GetBodyUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.RequestInit.GetBodyUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.core.ArrayBuffer.$Overlay$impl');\nlet ArrayBufferView_$Overlay \x3d goog.forwardDeclare('elemental2.core.ArrayBufferView.$Overlay$impl');\nlet Blob_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Blob.$Overlay$impl');\nlet FormData_$Overlay \x3d goog.forwardDeclare('elemental2.dom.FormData.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass GetBodyUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), GetBodyUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {ArrayBuffer}\n   * @public\n   */\n  static m_asArrayBuffer__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return /**@type {ArrayBuffer} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {ArrayBufferView}\n   * @public\n   */\n  static m_asArrayBufferView__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return /**@type {ArrayBufferView} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), ArrayBufferView_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Blob}\n   * @public\n   */\n  static m_asBlob__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return /**@type {Blob} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), Blob_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {FormData}\n   * @public\n   */\n  static m_asFormData__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return /**@type {FormData} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), FormData_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isArrayBuffer__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isArrayBufferView__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return ArrayBufferView_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBlob__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return Blob_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isFormData__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return FormData_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_RequestInit_GetBodyUnionType($thisArg) {\n    GetBodyUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    GetBodyUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.core.ArrayBuffer.$Overlay$impl');\n    ArrayBufferView_$Overlay \x3d goog.module.get('elemental2.core.ArrayBufferView.$Overlay$impl');\n    Blob_$Overlay \x3d goog.module.get('elemental2.dom.Blob.$Overlay$impl');\n    FormData_$Overlay \x3d goog.module.get('elemental2.dom.FormData.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(GetBodyUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d GetBodyUnionType_$Overlay; \n//# sourceMappingURL\x3dRequestInit$GetBodyUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/RequestInit$GetBodyUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.RequestInit$GetBodyUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.RequestInit.GetBodyUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.core.ArrayBuffer.$Overlay');\nconst _ArrayBufferView_$Overlay \x3d goog.require('elemental2.core.ArrayBufferView.$Overlay');\nconst _Blob_$Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay');\nconst _FormData_$Overlay \x3d goog.require('elemental2.dom.FormData.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar GetBodyUnionType_$Overlay \x3d goog.require('elemental2.dom.RequestInit.GetBodyUnionType.$Overlay$impl');\nexports \x3d GetBodyUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/RequestInit$GetHeadersUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.RequestInit$GetHeadersUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.RequestInit.GetHeadersUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Headers.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet JsPropertyMap_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass GetHeadersUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    GetHeadersUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), GetHeadersUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Headers}\n   * @public\n   */\n  static m_asHeaders__elemental2_dom_RequestInit_GetHeadersUnionType($thisArg) {\n    GetHeadersUnionType_$Overlay.$clinit();\n    return /**@type {Headers} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Object\x3cstring, ?string\x3e}\n   * @public\n   */\n  static m_asJsPropertyMap__elemental2_dom_RequestInit_GetHeadersUnionType($thisArg) {\n    GetHeadersUnionType_$Overlay.$clinit();\n    return /**@type {Object\x3cstring, ?string\x3e} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), JsPropertyMap_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Array\x3cArray\x3c?string\x3e\x3e}\n   * @public\n   */\n  static m_asStringArrayArray__elemental2_dom_RequestInit_GetHeadersUnionType($thisArg) {\n    GetHeadersUnionType_$Overlay.$clinit();\n    return /**@type {Array\x3cArray\x3c?string\x3e\x3e} */ ($Arrays.$castTo(Js.m_cast__java_lang_Object($thisArg), j_l_String, 2));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isHeaders__elemental2_dom_RequestInit_GetHeadersUnionType($thisArg) {\n    GetHeadersUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isStringArrayArray__elemental2_dom_RequestInit_GetHeadersUnionType($thisArg) {\n    GetHeadersUnionType_$Overlay.$clinit();\n    return $Arrays.$instanceIsOfType(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)), j_l_Object, 1);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    GetHeadersUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Headers.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    JsPropertyMap_$Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(GetHeadersUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d GetHeadersUnionType_$Overlay; \n//# sourceMappingURL\x3dRequestInit$GetHeadersUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/RequestInit$GetHeadersUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.RequestInit$GetHeadersUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.RequestInit.GetHeadersUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Headers.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _JsPropertyMap_$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar GetHeadersUnionType_$Overlay \x3d goog.require('elemental2.dom.RequestInit.GetHeadersUnionType.$Overlay$impl');\nexports \x3d GetHeadersUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/RequestInit$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.RequestInit$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.RequestInit.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ArrayBuffer_$Overlay \x3d goog.forwardDeclare('elemental2.core.ArrayBuffer.$Overlay$impl');\nlet ArrayBufferView_$Overlay \x3d goog.forwardDeclare('elemental2.core.ArrayBufferView.$Overlay$impl');\nlet Blob_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Blob.$Overlay$impl');\nlet FormData_$Overlay \x3d goog.forwardDeclare('elemental2.dom.FormData.$Overlay$impl');\nlet Headers_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Headers.$Overlay$impl');\nlet GetBodyUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.RequestInit.GetBodyUnionType.$Overlay$impl');\nlet GetHeadersUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.RequestInit.GetHeadersUnionType.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass RequestInit_$Overlay {\n  /**\n   * @return {RequestInit}\n   * @public\n   */\n  static m_create__() {\n    RequestInit_$Overlay.$clinit();\n    return /**@type {RequestInit} */ (Js.m_uncheckedCast__java_lang_Object($Overlay.m_of__()));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {ArrayBuffer} body\n   * @return {void}\n   * @public\n   */\n  static m_setBody__elemental2_dom_RequestInit__elemental2_core_ArrayBuffer($thisArg, body) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.body \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(body));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {ArrayBufferView} body\n   * @return {void}\n   * @public\n   */\n  static m_setBody__elemental2_dom_RequestInit__elemental2_core_ArrayBufferView($thisArg, body) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.body \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(body));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {Blob} body\n   * @return {void}\n   * @public\n   */\n  static m_setBody__elemental2_dom_RequestInit__elemental2_dom_Blob($thisArg, body) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.body \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(body));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {FormData} body\n   * @return {void}\n   * @public\n   */\n  static m_setBody__elemental2_dom_RequestInit__elemental2_dom_FormData($thisArg, body) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.body \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(body));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {?string} body\n   * @return {void}\n   * @public\n   */\n  static m_setBody__elemental2_dom_RequestInit__java_lang_String($thisArg, body) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.body \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(body));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {Headers} headers\n   * @return {void}\n   * @public\n   */\n  static m_setHeaders__elemental2_dom_RequestInit__elemental2_dom_Headers($thisArg, headers) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.headers \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(headers));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {Object\x3cstring, ?string\x3e} headers\n   * @return {void}\n   * @public\n   */\n  static m_setHeaders__elemental2_dom_RequestInit__jsinterop_base_JsPropertyMap($thisArg, headers) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.headers \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(headers));\n  }\n  \n  /**\n   * @param {RequestInit} $thisArg\n   * @param {Array\x3cArray\x3c?string\x3e\x3e} headers\n   * @return {void}\n   * @public\n   */\n  static m_setHeaders__elemental2_dom_RequestInit__arrayOf_arrayOf_java_lang_String($thisArg, headers) {\n    RequestInit_$Overlay.$clinit();\n    $thisArg.headers \x3d /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(headers));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    RequestInit_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(RequestInit_$Overlay, $Util.$makeClassName('RequestInit'));\n\n\nexports \x3d RequestInit_$Overlay; \n//# sourceMappingURL\x3dRequestInit$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/RequestInit$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.RequestInit$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.RequestInit.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ArrayBuffer_$Overlay \x3d goog.require('elemental2.core.ArrayBuffer.$Overlay');\nconst _ArrayBufferView_$Overlay \x3d goog.require('elemental2.core.ArrayBufferView.$Overlay');\nconst _Blob_$Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay');\nconst _FormData_$Overlay \x3d goog.require('elemental2.dom.FormData.$Overlay');\nconst _Headers_$Overlay \x3d goog.require('elemental2.dom.Headers.$Overlay');\nconst _GetBodyUnionType_$Overlay \x3d goog.require('elemental2.dom.RequestInit.GetBodyUnionType.$Overlay');\nconst _GetHeadersUnionType_$Overlay \x3d goog.require('elemental2.dom.RequestInit.GetHeadersUnionType.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar RequestInit_$Overlay \x3d goog.require('elemental2.dom.RequestInit.$Overlay$impl');\nexports \x3d RequestInit_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Response$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Response$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Response.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Response;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Response'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dResponse$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Response$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Response$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Response.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Response.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Screen$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Screen$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Screen.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Screen;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Screen'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dScreen$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Screen$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Screen$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Screen.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Screen.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/VisualViewport$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.VisualViewport$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.VisualViewport.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof VisualViewport;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('VisualViewport'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dVisualViewport$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/VisualViewport$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.VisualViewport$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.VisualViewport.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.VisualViewport.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Window$FetchInputUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Window$FetchInputUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Window.FetchInputUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Request.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FetchInputUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), FetchInputUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Request}\n   * @public\n   */\n  static m_asRequest__elemental2_dom_Window_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return /**@type {Request} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Window_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isRequest__elemental2_dom_Window_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Window_FetchInputUnionType($thisArg) {\n    FetchInputUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FetchInputUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Request.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(FetchInputUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d FetchInputUnionType_$Overlay; \n//# sourceMappingURL\x3dWindow$FetchInputUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Window$FetchInputUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Window$FetchInputUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Window.FetchInputUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Request.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FetchInputUnionType_$Overlay \x3d goog.require('elemental2.dom.Window.FetchInputUnionType.$Overlay$impl');\nexports \x3d FetchInputUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Window$OpenDatabaseCallbackUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Window$OpenDatabaseCallbackUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Window.OpenDatabaseCallbackUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Database_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Database.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.DatabaseCallback.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $JavaScriptFunction \x3d goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');\n\n\nclass OpenDatabaseCallbackUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), OpenDatabaseCallbackUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {DatabaseCallback}\n   * @public\n   */\n  static m_asDatabaseCallback__elemental2_dom_Window_OpenDatabaseCallbackUnionType($thisArg) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return /**@type {DatabaseCallback} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?function(Database):*}\n   * @public\n   */\n  static m_asOpenDatabaseCallbackFn__elemental2_dom_Window_OpenDatabaseCallbackUnionType($thisArg) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return /**@type {?function(Database):*} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $JavaScriptFunction));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isOpenDatabaseCallbackFn__elemental2_dom_Window_OpenDatabaseCallbackUnionType($thisArg) {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit();\n    return $JavaScriptFunction.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    OpenDatabaseCallbackUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.DatabaseCallback.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $JavaScriptFunction \x3d goog.module.get('vmbootstrap.JavaScriptFunction$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(OpenDatabaseCallbackUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d OpenDatabaseCallbackUnionType_$Overlay; \n//# sourceMappingURL\x3dWindow$OpenDatabaseCallbackUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Window$OpenDatabaseCallbackUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Window$OpenDatabaseCallbackUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Window.OpenDatabaseCallbackUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Database_$Overlay \x3d goog.require('elemental2.dom.Database.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.DatabaseCallback.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$JavaScriptFunction \x3d goog.require('vmbootstrap.JavaScriptFunction');\n\n\n// Re-exports the implementation.\nvar OpenDatabaseCallbackUnionType_$Overlay \x3d goog.require('elemental2.dom.Window.OpenDatabaseCallbackUnionType.$Overlay$impl');\nexports \x3d OpenDatabaseCallbackUnionType_$Overlay;\n ");

//jsZipCache/39a4dc0a6f6752268881bc8d1540f37a-elemental2-promise-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/promise/IThenable$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.promise.IThenable$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.promise.IThenable.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('IThenable'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dIThenable$$Overlay.js.map");

//jsZipCache/39a4dc0a6f6752268881bc8d1540f37a-elemental2-promise-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/promise/IThenable$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.promise.IThenable$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.promise.IThenable.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.promise.IThenable.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/39a4dc0a6f6752268881bc8d1540f37a-elemental2-promise-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/promise/Promise$ResolveValueUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.promise.Promise$ResolveValueUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.promise.Promise.ResolveValueUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.promise.IThenable.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass ResolveValueUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    ResolveValueUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), ResolveValueUnionType_$Overlay));\n  }\n  \n  /**\n   * @template C_ResolveValueUnionType_V\n   * @param {?} $thisArg\n   * @return {IThenable\x3cC_ResolveValueUnionType_V\x3e}\n   * @public\n   */\n  static m_asIThenable__elemental2_promise_Promise_ResolveValueUnionType($thisArg) {\n    ResolveValueUnionType_$Overlay.$clinit();\n    return /**@type {IThenable\x3c*\x3e} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @template C_ResolveValueUnionType_V\n   * @param {?} $thisArg\n   * @return {C_ResolveValueUnionType_V}\n   * @public\n   */\n  static m_asV__elemental2_promise_Promise_ResolveValueUnionType($thisArg) {\n    ResolveValueUnionType_$Overlay.$clinit();\n    return Js.m_cast__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ResolveValueUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.promise.IThenable.$Overlay$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ResolveValueUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ResolveValueUnionType_$Overlay; \n//# sourceMappingURL\x3dPromise$ResolveValueUnionType$$Overlay.js.map");

//jsZipCache/39a4dc0a6f6752268881bc8d1540f37a-elemental2-promise-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/promise/Promise$ResolveValueUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.promise.Promise$ResolveValueUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.promise.Promise.ResolveValueUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.promise.IThenable.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ResolveValueUnionType_$Overlay \x3d goog.require('elemental2.promise.Promise.ResolveValueUnionType.$Overlay$impl');\nexports \x3d ResolveValueUnionType_$Overlay;\n ");

//jsZipCache/39a4dc0a6f6752268881bc8d1540f37a-elemental2-promise-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/promise/Promise$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.promise.Promise$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.promise.Promise.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.promise.IThenable.$Overlay$impl');\nlet ResolveValueUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.promise.Promise.ResolveValueUnionType.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass Promise_$Overlay {\n  /**\n   * @template M_V\n   * @param {Array\x3cIThenable\x3c?\x3e\x3e} promises\n   * @return {Promise\x3cArray\x3cM_V\x3e\x3e}\n   * @public\n   */\n  static m_all__arrayOf_elemental2_promise_IThenable(promises) {\n    Promise_$Overlay.$clinit();\n    return /**@type {Promise\x3cArray\x3c*\x3e\x3e} */ (Promise.all(promises));\n  }\n  \n  /**\n   * @template M_V\n   * @param {Array\x3cIThenable\x3c?\x3e\x3e} promises\n   * @return {Promise\x3cM_V\x3e}\n   * @public\n   */\n  static m_race__arrayOf_elemental2_promise_IThenable(promises) {\n    Promise_$Overlay.$clinit();\n    return /**@type {Promise\x3c*\x3e} */ (Promise.race(promises));\n  }\n  \n  /**\n   * @template M_V\n   * @param {IThenable\x3cM_V\x3e} value\n   * @return {Promise\x3cM_V\x3e}\n   * @public\n   */\n  static m_resolve__elemental2_promise_IThenable(value) {\n    Promise_$Overlay.$clinit();\n    return /**@type {Promise\x3c*\x3e} */ (Promise.resolve(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value))));\n  }\n  \n  /**\n   * @template M_V\n   * @param {M_V} value\n   * @return {Promise\x3cM_V\x3e}\n   * @public\n   */\n  static m_resolve__java_lang_Object(value) {\n    Promise_$Overlay.$clinit();\n    return /**@type {Promise\x3c*\x3e} */ (Promise.resolve(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value))));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Promise;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Promise_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Promise_$Overlay, $Util.$makeClassName('Promise'));\n\n\nexports \x3d Promise_$Overlay; \n//# sourceMappingURL\x3dPromise$$Overlay.js.map");

//jsZipCache/39a4dc0a6f6752268881bc8d1540f37a-elemental2-promise-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/promise/Promise$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.promise.Promise$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.promise.Promise.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.promise.IThenable.$Overlay');\nconst _ResolveValueUnionType_$Overlay \x3d goog.require('elemental2.promise.Promise.ResolveValueUnionType.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar Promise_$Overlay \x3d goog.require('elemental2.promise.Promise.$Overlay$impl');\nexports \x3d Promise_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Window$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Window$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Window.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Database_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Database.$Overlay$impl');\nlet DatabaseCallback_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DatabaseCallback.$Overlay$impl');\nlet Request_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Request.$Overlay$impl');\nlet RequestInit_$Overlay \x3d goog.forwardDeclare('elemental2.dom.RequestInit.$Overlay$impl');\nlet Response_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Response.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Window.FetchInputUnionType.$Overlay$impl');\nlet OpenDatabaseCallbackUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Window.OpenDatabaseCallbackUnionType.$Overlay$impl');\nlet Promise_$Overlay \x3d goog.forwardDeclare('elemental2.promise.Promise.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass Window_$Overlay {\n  /**\n   * @param {Window} $thisArg\n   * @param {Request} input\n   * @param {RequestInit} init\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__elemental2_dom_Window__elemental2_dom_Request__elemental2_dom_RequestInit($thisArg, input, init) {\n    Window_$Overlay.$clinit();\n    return $thisArg.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)), init);\n  }\n  \n  /**\n   * @param {Window} $thisArg\n   * @param {Request} input\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__elemental2_dom_Window__elemental2_dom_Request($thisArg, input) {\n    Window_$Overlay.$clinit();\n    return $thisArg.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)));\n  }\n  \n  /**\n   * @param {Window} $thisArg\n   * @param {?string} input\n   * @param {RequestInit} init\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__elemental2_dom_Window__java_lang_String__elemental2_dom_RequestInit($thisArg, input, init) {\n    Window_$Overlay.$clinit();\n    return $thisArg.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)), init);\n  }\n  \n  /**\n   * @param {Window} $thisArg\n   * @param {?string} input\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__elemental2_dom_Window__java_lang_String($thisArg, input) {\n    Window_$Overlay.$clinit();\n    return $thisArg.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)));\n  }\n  \n  /**\n   * @param {Window} $thisArg\n   * @param {?string} name\n   * @param {?string} version\n   * @param {?string} description\n   * @param {number} size\n   * @param {DatabaseCallback} callback\n   * @return {Database}\n   * @public\n   */\n  static m_openDatabase__elemental2_dom_Window__java_lang_String__java_lang_String__java_lang_String__int__elemental2_dom_DatabaseCallback($thisArg, name, version, description, size, callback) {\n    Window_$Overlay.$clinit();\n    return $thisArg.openDatabase(name, version, description, size, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {Window} $thisArg\n   * @param {?string} name\n   * @param {?string} version\n   * @param {?string} description\n   * @param {number} size\n   * @param {?function(Database):*} callback\n   * @return {Database}\n   * @public\n   */\n  static m_openDatabase__elemental2_dom_Window__java_lang_String__java_lang_String__java_lang_String__int__elemental2_dom_Window_OpenDatabaseCallbackFn($thisArg, name, version, description, size, callback) {\n    Window_$Overlay.$clinit();\n    return $thisArg.openDatabase(name, version, description, size, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Window;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Window_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Window_$Overlay, $Util.$makeClassName('Window'));\n\n\nexports \x3d Window_$Overlay; \n//# sourceMappingURL\x3dWindow$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Window$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Window$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Window.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Database_$Overlay \x3d goog.require('elemental2.dom.Database.$Overlay');\nconst _DatabaseCallback_$Overlay \x3d goog.require('elemental2.dom.DatabaseCallback.$Overlay');\nconst _Request_$Overlay \x3d goog.require('elemental2.dom.Request.$Overlay');\nconst _RequestInit_$Overlay \x3d goog.require('elemental2.dom.RequestInit.$Overlay');\nconst _Response_$Overlay \x3d goog.require('elemental2.dom.Response.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.Window.FetchInputUnionType.$Overlay');\nconst _OpenDatabaseCallbackUnionType_$Overlay \x3d goog.require('elemental2.dom.Window.OpenDatabaseCallbackUnionType.$Overlay');\nconst _Promise_$Overlay \x3d goog.require('elemental2.promise.Promise.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar Window_$Overlay \x3d goog.require('elemental2.dom.Window.$Overlay$impl');\nexports \x3d Window_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.DomGlobal.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Transferable_$Overlay \x3d goog.forwardDeclare('elemental2.core.Transferable.$Overlay$impl');\nlet Blob_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Blob.$Overlay$impl');\nlet CanvasRenderingContext2D_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\nlet Database_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Database.$Overlay$impl');\nlet DatabaseCallback_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DatabaseCallback.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.CreateImageBitmapImageUnionType.$Overlay$impl');\nlet FetchInputUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.FetchInputUnionType.$Overlay$impl');\nlet OpenDatabaseCallbackUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.OpenDatabaseCallbackUnionType.$Overlay$impl');\nlet PostMessageTargetOriginOrPortsOrTransferUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.PostMessageTargetOriginOrPortsOrTransferUnionType.$Overlay$impl');\nlet PostMessageTargetOriginOrTransferUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.PostMessageTargetOriginOrTransferUnionType.$Overlay$impl');\nlet SetIntervalCallbackUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.SetIntervalCallbackUnionType.$Overlay$impl');\nlet SetTimeoutCallbackUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.SetTimeoutCallbackUnionType.$Overlay$impl');\nlet HTMLCanvasElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nlet HTMLDocument_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLDocument.$Overlay$impl');\nlet HTMLImageElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLImageElement.$Overlay$impl');\nlet HTMLVideoElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLVideoElement.$Overlay$impl');\nlet ImageBitmap_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageBitmap.$Overlay$impl');\nlet ImageData_$Overlay \x3d goog.forwardDeclare('elemental2.dom.ImageData.$Overlay$impl');\nlet Location_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Location.$Overlay$impl');\nlet Navigator_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Navigator.$Overlay$impl');\nlet Request_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Request.$Overlay$impl');\nlet RequestInit_$Overlay \x3d goog.forwardDeclare('elemental2.dom.RequestInit.$Overlay$impl');\nlet Response_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Response.$Overlay$impl');\nlet Screen_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Screen.$Overlay$impl');\nlet VisualViewport_$Overlay \x3d goog.forwardDeclare('elemental2.dom.VisualViewport.$Overlay$impl');\nlet Window_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Window.$Overlay$impl');\nlet Promise_$Overlay \x3d goog.forwardDeclare('elemental2.promise.Promise.$Overlay$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass DomGlobal_$Overlay {\n  /**\n   * @param {Blob} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_Blob__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {Blob} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_Blob__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {Blob} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_Blob__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {Blob} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_Blob__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {Blob} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_Blob(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_CanvasRenderingContext2D__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_CanvasRenderingContext2D__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_CanvasRenderingContext2D__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_CanvasRenderingContext2D__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {CanvasRenderingContext2D} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_CanvasRenderingContext2D(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {HTMLCanvasElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLCanvasElement__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {HTMLCanvasElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLCanvasElement__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {HTMLCanvasElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLCanvasElement__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {HTMLCanvasElement} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLCanvasElement__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {HTMLCanvasElement} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLCanvasElement(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {HTMLImageElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLImageElement__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {HTMLImageElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLImageElement__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {HTMLImageElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLImageElement__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {HTMLImageElement} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLImageElement__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {HTMLImageElement} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLImageElement(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {HTMLVideoElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLVideoElement__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {HTMLVideoElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLVideoElement__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {HTMLVideoElement} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLVideoElement__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {HTMLVideoElement} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLVideoElement__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {HTMLVideoElement} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_HTMLVideoElement(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {ImageBitmap} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageBitmap__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {ImageBitmap} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageBitmap__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {ImageBitmap} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageBitmap__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {ImageBitmap} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageBitmap__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {ImageBitmap} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageBitmap(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {ImageData} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @param {number} sh\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageData__double__double__double__double(image, sx, sy, sw, sh) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw, sh);\n  }\n  \n  /**\n   * @param {ImageData} image\n   * @param {number} sx\n   * @param {number} sy\n   * @param {number} sw\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageData__double__double__double(image, sx, sy, sw) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy, sw);\n  }\n  \n  /**\n   * @param {ImageData} image\n   * @param {number} sx\n   * @param {number} sy\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageData__double__double(image, sx, sy) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx, sy);\n  }\n  \n  /**\n   * @param {ImageData} image\n   * @param {number} sx\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageData__double(image, sx) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)), sx);\n  }\n  \n  /**\n   * @param {ImageData} image\n   * @return {Promise\x3cImageBitmap\x3e}\n   * @public\n   */\n  static m_createImageBitmap__elemental2_dom_ImageData(image) {\n    DomGlobal_$Overlay.$clinit();\n    return window.createImageBitmap(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(image)));\n  }\n  \n  /**\n   * @param {Request} input\n   * @param {RequestInit} init\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__elemental2_dom_Request__elemental2_dom_RequestInit(input, init) {\n    DomGlobal_$Overlay.$clinit();\n    return window.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)), init);\n  }\n  \n  /**\n   * @param {Request} input\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__elemental2_dom_Request(input) {\n    DomGlobal_$Overlay.$clinit();\n    return window.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)));\n  }\n  \n  /**\n   * @param {?string} input\n   * @param {RequestInit} init\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__java_lang_String__elemental2_dom_RequestInit(input, init) {\n    DomGlobal_$Overlay.$clinit();\n    return window.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)), init);\n  }\n  \n  /**\n   * @param {?string} input\n   * @return {Promise\x3cResponse\x3e}\n   * @public\n   */\n  static m_fetch__java_lang_String(input) {\n    DomGlobal_$Overlay.$clinit();\n    return window.fetch(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(input)));\n  }\n  \n  /**\n   * @param {?string} name\n   * @param {?string} version\n   * @param {?string} description\n   * @param {number} size\n   * @param {DatabaseCallback} callback\n   * @return {Database}\n   * @public\n   */\n  static m_openDatabase__java_lang_String__java_lang_String__java_lang_String__int__elemental2_dom_DatabaseCallback(name, version, description, size, callback) {\n    DomGlobal_$Overlay.$clinit();\n    return window.openDatabase(name, version, description, size, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {?string} name\n   * @param {?string} version\n   * @param {?string} description\n   * @param {number} size\n   * @param {?function(Database):*} callback\n   * @return {Database}\n   * @public\n   */\n  static m_openDatabase__java_lang_String__java_lang_String__java_lang_String__int__elemental2_dom_DomGlobal_OpenDatabaseCallbackFn(name, version, description, size, callback) {\n    DomGlobal_$Overlay.$clinit();\n    return window.openDatabase(name, version, description, size, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {?} targetOriginOrTransfer\n   * @param {Array\x3c*\x3e} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__elemental2_dom_DomGlobal_PostMessageTargetOriginOrTransferUnionType__arrayOf_java_lang_Object(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, targetOriginOrTransfer, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrPortsOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {?} targetOriginOrTransfer\n   * @param {?string} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__elemental2_dom_DomGlobal_PostMessageTargetOriginOrTransferUnionType__java_lang_String(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, targetOriginOrTransfer, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrPortsOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {?string} targetOriginOrTransfer\n   * @param {Array\x3c*\x3e} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__java_lang_String__arrayOf_java_lang_Object(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)), /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrPortsOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {?string} targetOriginOrTransfer\n   * @param {?} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__java_lang_String__elemental2_dom_DomGlobal_PostMessageTargetOriginOrPortsOrTransferUnionType(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)), targetOriginOrPortsOrTransfer);\n  }\n  \n  /**\n   * @param {*} message\n   * @param {?string} targetOriginOrTransfer\n   * @param {?string} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__java_lang_String__java_lang_String(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)), /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrPortsOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {?string} targetOriginOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__java_lang_String(message, targetOriginOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {Array\x3cTransferable\x3e} targetOriginOrTransfer\n   * @param {Array\x3c*\x3e} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__arrayOf_elemental2_core_Transferable__arrayOf_java_lang_Object(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)), /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrPortsOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {Array\x3cTransferable\x3e} targetOriginOrTransfer\n   * @param {?} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__arrayOf_elemental2_core_Transferable__elemental2_dom_DomGlobal_PostMessageTargetOriginOrPortsOrTransferUnionType(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)), targetOriginOrPortsOrTransfer);\n  }\n  \n  /**\n   * @param {*} message\n   * @param {Array\x3cTransferable\x3e} targetOriginOrTransfer\n   * @param {?string} targetOriginOrPortsOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__arrayOf_elemental2_core_Transferable__java_lang_String(message, targetOriginOrTransfer, targetOriginOrPortsOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)), /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrPortsOrTransfer)));\n  }\n  \n  /**\n   * @param {*} message\n   * @param {Array\x3cTransferable\x3e} targetOriginOrTransfer\n   * @return {void}\n   * @public\n   */\n  static m_postMessage__java_lang_Object__arrayOf_elemental2_core_Transferable(message, targetOriginOrTransfer) {\n    DomGlobal_$Overlay.$clinit();\n    window.postMessage(message, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(targetOriginOrTransfer)));\n  }\n  \n  /**\n   * @param {?function(...*):void} callback\n   * @param {number} delay\n   * @param {Array\x3c*\x3e} var_args\n   * @return {number}\n   * @public\n   */\n  static m_setInterval__elemental2_dom_DomGlobal_SetIntervalCallbackFn__double__arrayOf_java_lang_Object(callback, delay, var_args) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setInterval(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)), delay, ...$InternalPreconditions.m_checkNotNull__java_lang_Object(var_args));\n  }\n  \n  /**\n   * @param {?function(...*):void} callback\n   * @return {number}\n   * @public\n   */\n  static m_setInterval__elemental2_dom_DomGlobal_SetIntervalCallbackFn(callback) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setInterval(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {?string} callback\n   * @param {number} delay\n   * @param {Array\x3c*\x3e} var_args\n   * @return {number}\n   * @public\n   */\n  static m_setInterval__java_lang_String__double__arrayOf_java_lang_Object(callback, delay, var_args) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setInterval(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)), delay, ...$InternalPreconditions.m_checkNotNull__java_lang_Object(var_args));\n  }\n  \n  /**\n   * @param {?string} callback\n   * @return {number}\n   * @public\n   */\n  static m_setInterval__java_lang_String(callback) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setInterval(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {?function(...*):void} callback\n   * @param {number} delay\n   * @param {Array\x3c*\x3e} var_args\n   * @return {number}\n   * @public\n   */\n  static m_setTimeout__elemental2_dom_DomGlobal_SetTimeoutCallbackFn__double__arrayOf_java_lang_Object(callback, delay, var_args) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setTimeout(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)), delay, ...$InternalPreconditions.m_checkNotNull__java_lang_Object(var_args));\n  }\n  \n  /**\n   * @param {?function(...*):void} callback\n   * @return {number}\n   * @public\n   */\n  static m_setTimeout__elemental2_dom_DomGlobal_SetTimeoutCallbackFn(callback) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setTimeout(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @param {?string} callback\n   * @param {number} delay\n   * @param {Array\x3c*\x3e} var_args\n   * @return {number}\n   * @public\n   */\n  static m_setTimeout__java_lang_String__double__arrayOf_java_lang_Object(callback, delay, var_args) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setTimeout(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)), delay, ...$InternalPreconditions.m_checkNotNull__java_lang_Object(var_args));\n  }\n  \n  /**\n   * @param {?string} callback\n   * @return {number}\n   * @public\n   */\n  static m_setTimeout__java_lang_String(callback) {\n    DomGlobal_$Overlay.$clinit();\n    return window.setTimeout(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(callback)));\n  }\n  \n  /**\n   * @return {HTMLDocument}\n   * @public\n   */\n  static get f_document__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_document__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {HTMLDocument} value\n   * @return {void}\n   * @public\n   */\n  static set f_document__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_document__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {boolean}\n   * @public\n   */\n  static get f_isSecureContext__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_isSecureContext__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static set f_isSecureContext__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_isSecureContext__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {Location}\n   * @public\n   */\n  static get f_location__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_location__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {Location} value\n   * @return {void}\n   * @public\n   */\n  static set f_location__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_location__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {Navigator}\n   * @public\n   */\n  static get f_navigator__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_navigator__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {Navigator} value\n   * @return {void}\n   * @public\n   */\n  static set f_navigator__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_navigator__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {Screen}\n   * @public\n   */\n  static get f_screen__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_screen__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {Screen} value\n   * @return {void}\n   * @public\n   */\n  static set f_screen__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_screen__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {Window}\n   * @public\n   */\n  static get f_self__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_self__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {Window} value\n   * @return {void}\n   * @public\n   */\n  static set f_self__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_self__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {Window}\n   * @public\n   */\n  static get f_top__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_top__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {Window} value\n   * @return {void}\n   * @public\n   */\n  static set f_top__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_top__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {VisualViewport}\n   * @public\n   */\n  static get f_visualViewport__elemental2_dom_DomGlobal_$Overlay() {\n    return (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_visualViewport__elemental2_dom_DomGlobal_$Overlay);\n  }\n  \n  /**\n   * @param {VisualViewport} value\n   * @return {void}\n   * @public\n   */\n  static set f_visualViewport__elemental2_dom_DomGlobal_$Overlay(value) {\n    (DomGlobal_$Overlay.$clinit(), DomGlobal_$Overlay.$f_visualViewport__elemental2_dom_DomGlobal_$Overlay \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof window;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DomGlobal_$Overlay.$clinit \x3d function() {};\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    DomGlobal_$Overlay.$f_document__elemental2_dom_DomGlobal_$Overlay \x3d window.document;\n    DomGlobal_$Overlay.$f_isSecureContext__elemental2_dom_DomGlobal_$Overlay \x3d window.isSecureContext;\n    DomGlobal_$Overlay.$f_location__elemental2_dom_DomGlobal_$Overlay \x3d window.location;\n    DomGlobal_$Overlay.$f_navigator__elemental2_dom_DomGlobal_$Overlay \x3d window.navigator;\n    DomGlobal_$Overlay.$f_screen__elemental2_dom_DomGlobal_$Overlay \x3d window.screen;\n    DomGlobal_$Overlay.$f_self__elemental2_dom_DomGlobal_$Overlay \x3d window.self;\n    DomGlobal_$Overlay.$f_top__elemental2_dom_DomGlobal_$Overlay \x3d window.top;\n    DomGlobal_$Overlay.$f_visualViewport__elemental2_dom_DomGlobal_$Overlay \x3d window.visualViewport;\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DomGlobal_$Overlay, $Util.$makeClassName('window'));\n\n\n/** @private {HTMLDocument} */\nDomGlobal_$Overlay.$f_document__elemental2_dom_DomGlobal_$Overlay;\n\n\n/** @private {boolean} */\nDomGlobal_$Overlay.$f_isSecureContext__elemental2_dom_DomGlobal_$Overlay \x3d false;\n\n\n/** @private {Location} */\nDomGlobal_$Overlay.$f_location__elemental2_dom_DomGlobal_$Overlay;\n\n\n/** @private {Navigator} */\nDomGlobal_$Overlay.$f_navigator__elemental2_dom_DomGlobal_$Overlay;\n\n\n/** @private {Screen} */\nDomGlobal_$Overlay.$f_screen__elemental2_dom_DomGlobal_$Overlay;\n\n\n/** @private {Window} */\nDomGlobal_$Overlay.$f_self__elemental2_dom_DomGlobal_$Overlay;\n\n\n/** @private {Window} */\nDomGlobal_$Overlay.$f_top__elemental2_dom_DomGlobal_$Overlay;\n\n\n/** @private {VisualViewport} */\nDomGlobal_$Overlay.$f_visualViewport__elemental2_dom_DomGlobal_$Overlay;\n\n\nexports \x3d DomGlobal_$Overlay; \n//# sourceMappingURL\x3dDomGlobal$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/DomGlobal$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.DomGlobal$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.DomGlobal.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Transferable_$Overlay \x3d goog.require('elemental2.core.Transferable.$Overlay');\nconst _Blob_$Overlay \x3d goog.require('elemental2.dom.Blob.$Overlay');\nconst _CanvasRenderingContext2D_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.$Overlay');\nconst _Database_$Overlay \x3d goog.require('elemental2.dom.Database.$Overlay');\nconst _DatabaseCallback_$Overlay \x3d goog.require('elemental2.dom.DatabaseCallback.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.DomGlobal.CreateImageBitmapImageUnionType.$Overlay');\nconst _FetchInputUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.FetchInputUnionType.$Overlay');\nconst _OpenDatabaseCallbackUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.OpenDatabaseCallbackUnionType.$Overlay');\nconst _PostMessageTargetOriginOrPortsOrTransferUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.PostMessageTargetOriginOrPortsOrTransferUnionType.$Overlay');\nconst _PostMessageTargetOriginOrTransferUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.PostMessageTargetOriginOrTransferUnionType.$Overlay');\nconst _SetIntervalCallbackUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.SetIntervalCallbackUnionType.$Overlay');\nconst _SetTimeoutCallbackUnionType_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.SetTimeoutCallbackUnionType.$Overlay');\nconst _HTMLCanvasElement_$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay');\nconst _HTMLDocument_$Overlay \x3d goog.require('elemental2.dom.HTMLDocument.$Overlay');\nconst _HTMLImageElement_$Overlay \x3d goog.require('elemental2.dom.HTMLImageElement.$Overlay');\nconst _HTMLVideoElement_$Overlay \x3d goog.require('elemental2.dom.HTMLVideoElement.$Overlay');\nconst _ImageBitmap_$Overlay \x3d goog.require('elemental2.dom.ImageBitmap.$Overlay');\nconst _ImageData_$Overlay \x3d goog.require('elemental2.dom.ImageData.$Overlay');\nconst _Location_$Overlay \x3d goog.require('elemental2.dom.Location.$Overlay');\nconst _Navigator_$Overlay \x3d goog.require('elemental2.dom.Navigator.$Overlay');\nconst _Request_$Overlay \x3d goog.require('elemental2.dom.Request.$Overlay');\nconst _RequestInit_$Overlay \x3d goog.require('elemental2.dom.RequestInit.$Overlay');\nconst _Response_$Overlay \x3d goog.require('elemental2.dom.Response.$Overlay');\nconst _Screen_$Overlay \x3d goog.require('elemental2.dom.Screen.$Overlay');\nconst _VisualViewport_$Overlay \x3d goog.require('elemental2.dom.VisualViewport.$Overlay');\nconst _Window_$Overlay \x3d goog.require('elemental2.dom.Window.$Overlay');\nconst _Promise_$Overlay \x3d goog.require('elemental2.promise.Promise.$Overlay');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar DomGlobal_$Overlay \x3d goog.require('elemental2.dom.DomGlobal.$Overlay$impl');\nexports \x3d DomGlobal_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLStyleElement$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLStyleElement$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.HTMLStyleElement.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HTMLStyleElement;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('HTMLStyleElement'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHTMLStyleElement$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLStyleElement$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLStyleElement$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.HTMLStyleElement.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.HTMLStyleElement.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/StyleInjector.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.StyleInjector.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.StyleInjector$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Document_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Document.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.$Overlay$impl');\nlet HTMLStyleElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLStyleElement.$Overlay$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass StyleInjector extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'StyleInjector()'.\n   * @return {!StyleInjector}\n   * @public\n   */\n  static $create__() {\n    StyleInjector.$clinit();\n    let $instance \x3d new StyleInjector();\n    $instance.$ctor__com_vertispan_draw_connected_client_blank_StyleInjector__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'StyleInjector()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_StyleInjector__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {?string} cssContent\n   * @return {void}\n   * @public\n   */\n  static m_inject__java_lang_String(cssContent) {\n    StyleInjector.$clinit();\n    let style \x3d /**@type {HTMLStyleElement} */ ($Casts.$to($Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"style\"), HTMLStyleElement_$Overlay));\n    style.appendChild(Document_$Overlay.m_createTextNode__elemental2_dom_Document__java_lang_String($Overlay.f_document__elemental2_dom_DomGlobal_$Overlay, cssContent));\n    $Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.head.appendChild(style);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof StyleInjector;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, StyleInjector);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StyleInjector.$clinit \x3d function() {};\n    Document_$Overlay \x3d goog.module.get('elemental2.dom.Document.$Overlay$impl');\n    $Overlay \x3d goog.module.get('elemental2.dom.DomGlobal.$Overlay$impl');\n    HTMLStyleElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLStyleElement.$Overlay$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(StyleInjector, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.StyleInjector'));\n\n\n\n\nexports \x3d StyleInjector; \n//# sourceMappingURL\x3dStyleInjector.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/StyleInjector.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.StyleInjector.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.StyleInjector');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Document_$Overlay \x3d goog.require('elemental2.dom.Document.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.DomGlobal.$Overlay');\nconst _HTMLStyleElement_$Overlay \x3d goog.require('elemental2.dom.HTMLStyleElement.$Overlay');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar StyleInjector \x3d goog.require('com.vertispan.draw.connected.client.blank.StyleInjector$impl');\nexports \x3d StyleInjector;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/MouseEvent$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.MouseEvent$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.MouseEvent.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof MouseEvent;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('MouseEvent'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dMouseEvent$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/MouseEvent$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.MouseEvent$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.MouseEvent.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/DragTracker$DragHandling.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.DragTracker$DragHandling.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.MouseEvent.$Overlay$impl');\n\n\n/**\n * @interface\n */\nclass DragHandling {\n  /**\n   * @abstract\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_click__elemental2_dom_MouseEvent(event) {\n  }\n  \n  /**\n   * @abstract\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_startDrag__elemental2_dom_MouseEvent(event) {\n  }\n  \n  /**\n   * @abstract\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_moveDrag__elemental2_dom_MouseEvent(event) {\n  }\n  \n  /**\n   * @abstract\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_endDrag__elemental2_dom_MouseEvent(event) {\n  }\n  \n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_cancelDrag__() {\n  }\n  \n  /**\n   * @param {DragHandling} $thisArg\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  static m_click__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent($thisArg, event) {\n    DragHandling.$clinit();\n  }\n  \n  /**\n   * @param {DragHandling} $thisArg\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  static m_startDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent($thisArg, event) {\n    DragHandling.$clinit();\n  }\n  \n  /**\n   * @param {DragHandling} $thisArg\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  static m_moveDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent($thisArg, event) {\n    DragHandling.$clinit();\n  }\n  \n  /**\n   * @param {DragHandling} $thisArg\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  static m_endDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent($thisArg, event) {\n    DragHandling.$clinit();\n  }\n  \n  /**\n   * @param {DragHandling} $thisArg\n   * @return {void}\n   * @public\n   */\n  static m_cancelDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling($thisArg) {\n    DragHandling.$clinit();\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DragHandling.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(DragHandling, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.DragTracker$DragHandling'));\n\n\nDragHandling.$markImplementor(/** @type {Function} */ (DragHandling));\n\n\nexports \x3d DragHandling; \n//# sourceMappingURL\x3dDragTracker$DragHandling.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/DragTracker$DragHandling.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.DragTracker$DragHandling.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay');\n\n\n// Re-exports the implementation.\nvar DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling$impl');\nexports \x3d DragHandling;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/Rect.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.Rect.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.Rect$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Point \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Point$impl');\n\n\nclass Rect extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_x__com_vertispan_draw_connected_client_lib_Rect_ \x3d 0.0;\n    /** @public {number} */\n    this.f_y__com_vertispan_draw_connected_client_lib_Rect_ \x3d 0.0;\n    /** @public {number} */\n    this.f_w__com_vertispan_draw_connected_client_lib_Rect_ \x3d 0.0;\n    /** @public {number} */\n    this.f_h__com_vertispan_draw_connected_client_lib_Rect_ \x3d 0.0;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Rect(double, double, double, double)'.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   * @return {!Rect}\n   * @public\n   */\n  static $create__double__double__double__double(x, y, w, h) {\n    Rect.$clinit();\n    let $instance \x3d new Rect();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_Rect__double__double__double__double(x, y, w, h);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Rect(double, double, double, double)'.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_Rect__double__double__double__double(x, y, w, h) {\n    this.$ctor__java_lang_Object__();\n    this.f_x__com_vertispan_draw_connected_client_lib_Rect_ \x3d x;\n    this.f_y__com_vertispan_draw_connected_client_lib_Rect_ \x3d y;\n    this.f_w__com_vertispan_draw_connected_client_lib_Rect_ \x3d w;\n    this.f_h__com_vertispan_draw_connected_client_lib_Rect_ \x3d h;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getX__() {\n    return this.f_x__com_vertispan_draw_connected_client_lib_Rect_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getY__() {\n    return this.f_y__com_vertispan_draw_connected_client_lib_Rect_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getW__() {\n    return this.f_w__com_vertispan_draw_connected_client_lib_Rect_;\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  m_getH__() {\n    return this.f_h__com_vertispan_draw_connected_client_lib_Rect_;\n  }\n  \n  /**\n   * @return {Point}\n   * @public\n   */\n  m_center__() {\n    return Point.$create__double__double(this.f_x__com_vertispan_draw_connected_client_lib_Rect_ + this.f_w__com_vertispan_draw_connected_client_lib_Rect_ / 2, this.f_y__com_vertispan_draw_connected_client_lib_Rect_ + this.f_h__com_vertispan_draw_connected_client_lib_Rect_ / 2);\n  }\n  \n  /**\n   * @param {Point} point\n   * @return {boolean}\n   * @public\n   */\n  m_contains__com_vertispan_draw_connected_client_lib_Point(point) {\n    return this.f_x__com_vertispan_draw_connected_client_lib_Rect_ \x3c\x3d point.m_getX__() \x26\x26 this.f_x__com_vertispan_draw_connected_client_lib_Rect_ + this.f_w__com_vertispan_draw_connected_client_lib_Rect_ \x3e\x3d point.m_getX__() \x26\x26 this.f_y__com_vertispan_draw_connected_client_lib_Rect_ \x3c\x3d point.m_getY__() \x26\x26 this.f_y__com_vertispan_draw_connected_client_lib_Rect_ + this.f_h__com_vertispan_draw_connected_client_lib_Rect_ \x3e\x3d point.m_getY__();\n  }\n  \n  /**\n   * @param {Point} point\n   * @return {Rect}\n   * @public\n   */\n  m_translate__com_vertispan_draw_connected_client_lib_Point(point) {\n    return Rect.$create__double__double__double__double(this.f_x__com_vertispan_draw_connected_client_lib_Rect_ + point.m_getX__(), this.f_y__com_vertispan_draw_connected_client_lib_Rect_ + point.m_getY__(), this.f_w__com_vertispan_draw_connected_client_lib_Rect_, this.f_h__com_vertispan_draw_connected_client_lib_Rect_);\n  }\n  \n  /**\n   * @return {Point}\n   * @public\n   */\n  m_getTopLeft__() {\n    return Point.$create__double__double(this.f_x__com_vertispan_draw_connected_client_lib_Rect_, this.f_y__com_vertispan_draw_connected_client_lib_Rect_);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Rect;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, Rect);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Rect.$clinit \x3d function() {};\n    Point \x3d goog.module.get('com.vertispan.draw.connected.client.lib.Point$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Rect, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.Rect'));\n\n\n\n\nexports \x3d Rect; \n//# sourceMappingURL\x3dRect.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/Rect.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.Rect.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.Rect');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Point \x3d goog.require('com.vertispan.draw.connected.client.lib.Point');\n\n\n// Re-exports the implementation.\nvar Rect \x3d goog.require('com.vertispan.draw.connected.client.lib.Rect$impl');\nexports \x3d Rect;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$1$impl');\n\n\nconst DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ConnectedComponent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\nlet Rect \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Rect$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.MouseEvent.$Overlay$impl');\n\n\n/**\n * @template C_B, C_L\n * @implements {DragHandling}\n  */\nclass $1 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ConnectedComponent\x3cC_B, C_L\x3e} */\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_1;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new DragHandling(ConnectedComponent)'.\n   * @template C_B, C_L\n   * @param {ConnectedComponent\x3cC_B, C_L\x3e} $outer_this\n   * @return {!$1\x3cC_B, C_L\x3e}\n   * @public\n   */\n  static $create__com_vertispan_draw_connected_client_lib_ConnectedComponent($outer_this) {\n    $1.$clinit();\n    let $instance \x3d new $1();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_1__com_vertispan_draw_connected_client_lib_ConnectedComponent($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new DragHandling(ConnectedComponent)'.\n   * @param {ConnectedComponent\x3cC_B, C_L\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_1__com_vertispan_draw_connected_client_lib_ConnectedComponent($outer_this) {\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_1 \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_click__elemental2_dom_MouseEvent(event) {\n    let mouse \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_1.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event);\n    let box \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_1.f_boxCreator__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(Rect.$create__double__double__double__double(mouse.m_getX__(), mouse.m_getY__(), 10, 10));\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_1.m_addBox__java_lang_Object(box);\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_1.m_editBox__java_lang_Object_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(box);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_cancelDrag__() {\n    DragHandling.m_cancelDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {MouseEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_endDrag__elemental2_dom_MouseEvent(arg0) {\n    DragHandling.m_endDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {MouseEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_moveDrag__elemental2_dom_MouseEvent(arg0) {\n    DragHandling.m_moveDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {MouseEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_startDrag__elemental2_dom_MouseEvent(arg0) {\n    DragHandling.m_startDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $1.$clinit \x3d function() {};\n    Rect \x3d goog.module.get('com.vertispan.draw.connected.client.lib.Rect$impl');\n    j_l_Object.$clinit();\n    DragHandling.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($1, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.ConnectedComponent$1'));\n\n\nDragHandling.$markImplementor($1);\n\n\nexports \x3d $1; \n//# sourceMappingURL\x3dConnectedComponent$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ConnectedComponent \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent');\nconst _Rect \x3d goog.require('com.vertispan.draw.connected.client.lib.Rect');\nconst _$Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay');\n\n\n// Re-exports the implementation.\nvar $1 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$1$impl');\nexports \x3d $1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$2$impl');\n\n\nconst DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ConnectedComponent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.MouseEvent.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\n/**\n * @template C_B, C_L\n * @implements {DragHandling}\n  */\nclass $2 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ConnectedComponent\x3cC_B, C_L\x3e} */\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new DragHandling(ConnectedComponent)'.\n   * @template C_B, C_L\n   * @param {ConnectedComponent\x3cC_B, C_L\x3e} $outer_this\n   * @return {!$2\x3cC_B, C_L\x3e}\n   * @public\n   */\n  static $create__com_vertispan_draw_connected_client_lib_ConnectedComponent($outer_this) {\n    $2.$clinit();\n    let $instance \x3d new $2();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_2__com_vertispan_draw_connected_client_lib_ConnectedComponent($outer_this);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new DragHandling(ConnectedComponent)'.\n   * @param {ConnectedComponent\x3cC_B, C_L\x3e} $outer_this\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_2__com_vertispan_draw_connected_client_lib_ConnectedComponent($outer_this) {\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2 \x3d $outer_this;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_click__elemental2_dom_MouseEvent(event) {\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d null;\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d null;\n    let box \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_boxAtPoint__com_vertispan_draw_connected_client_lib_Point_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event));\n    if (!$Equality.$same(box, null)) {\n      this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_editBox__java_lang_Object_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(box);\n    }\n  }\n  \n  /**\n   * @override\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_moveDrag__elemental2_dom_MouseEvent(event) {\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event);\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @override\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_endDrag__elemental2_dom_MouseEvent(event) {\n    let box \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_boxAtPoint__com_vertispan_draw_connected_client_lib_Point_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event));\n    if (!$Equality.$same(box, null)) {\n      let line \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_lineCreator__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object__java_lang_Object(this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_, box);\n      this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_addLine__java_lang_Object(line);\n    }\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d null;\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d null;\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_cancelDrag__() {\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d null;\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_2.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d null;\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {MouseEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_startDrag__elemental2_dom_MouseEvent(arg0) {\n    DragHandling.m_startDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $2.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    j_l_Object.$clinit();\n    DragHandling.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($2, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.ConnectedComponent$2'));\n\n\nDragHandling.$markImplementor($2);\n\n\nexports \x3d $2; \n//# sourceMappingURL\x3dConnectedComponent$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ConnectedComponent \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent');\nconst _$Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar $2 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$2$impl');\nexports \x3d $2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$3$impl');\n\n\nconst DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet ConnectedComponent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\nlet Point \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Point$impl');\nlet Rect \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Rect$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.MouseEvent.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\n\n\n/**\n * @template C_B, C_L\n * @implements {DragHandling}\n  */\nclass $3 extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {ConnectedComponent\x3cC_B, C_L\x3e} */\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3;\n    /** @public {Rect} */\n    this.$c_start;\n    /** @public {Point} */\n    this.$c_mouseStartPosition;\n    /** @public {C_B} */\n    this.$c_box;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'new DragHandling(ConnectedComponent, Rect, Point, Object)'.\n   * @template C_B, C_L\n   * @param {ConnectedComponent\x3cC_B, C_L\x3e} $outer_this\n   * @param {Rect} $c_start\n   * @param {Point} $c_mouseStartPosition\n   * @param {C_B} $c_box\n   * @return {!$3\x3cC_B, C_L\x3e}\n   * @public\n   */\n  static $create__com_vertispan_draw_connected_client_lib_ConnectedComponent__com_vertispan_draw_connected_client_lib_Rect__com_vertispan_draw_connected_client_lib_Point__java_lang_Object($outer_this, $c_start, $c_mouseStartPosition, $c_box) {\n    $3.$clinit();\n    let $instance \x3d new $3();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_3__com_vertispan_draw_connected_client_lib_ConnectedComponent__com_vertispan_draw_connected_client_lib_Rect__com_vertispan_draw_connected_client_lib_Point__java_lang_Object($outer_this, $c_start, $c_mouseStartPosition, $c_box);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'new DragHandling(ConnectedComponent, Rect, Point, Object)'.\n   * @param {ConnectedComponent\x3cC_B, C_L\x3e} $outer_this\n   * @param {Rect} $c_start\n   * @param {Point} $c_mouseStartPosition\n   * @param {C_B} $c_box\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_3__com_vertispan_draw_connected_client_lib_ConnectedComponent__com_vertispan_draw_connected_client_lib_Rect__com_vertispan_draw_connected_client_lib_Point__java_lang_Object($outer_this, $c_start, $c_mouseStartPosition, $c_box) {\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3 \x3d $outer_this;\n    this.$c_start \x3d $c_start;\n    this.$c_mouseStartPosition \x3d $c_mouseStartPosition;\n    this.$c_box \x3d $c_box;\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @override\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_click__elemental2_dom_MouseEvent(event) {\n    let box \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3.m_boxAtPoint__com_vertispan_draw_connected_client_lib_Point_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event));\n    if (!$Equality.$same(box, null)) {\n      this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3.m_editBox__java_lang_Object_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(box);\n    }\n  }\n  \n  /**\n   * @override\n   * @param {MouseEvent} event\n   * @return {void}\n   * @public\n   */\n  m_moveDrag__elemental2_dom_MouseEvent(event) {\n    if ($Equality.$same(this.$c_start, null)) {\n      return;\n    }\n    let currentMousePosition \x3d this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event);\n    let newBounds \x3d this.$c_start.m_translate__com_vertispan_draw_connected_client_lib_Point(this.$c_mouseStartPosition.m_relativeTo__com_vertispan_draw_connected_client_lib_Point(currentMousePosition));\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3.f_boxPositionUpdater__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_accept__java_lang_Object__java_lang_Object(this.$c_box, newBounds);\n    this.f_$outer_this__com_vertispan_draw_connected_client_lib_ConnectedComponent_3.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_cancelDrag__() {\n    DragHandling.m_cancelDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling(this);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {MouseEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_endDrag__elemental2_dom_MouseEvent(arg0) {\n    DragHandling.m_endDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {MouseEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_startDrag__elemental2_dom_MouseEvent(arg0) {\n    DragHandling.m_startDrag__$default__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling__elemental2_dom_MouseEvent(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $3.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    j_l_Object.$clinit();\n    DragHandling.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($3, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.ConnectedComponent$3'));\n\n\nDragHandling.$markImplementor($3);\n\n\nexports \x3d $3; \n//# sourceMappingURL\x3dConnectedComponent$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _ConnectedComponent \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent');\nconst _Point \x3d goog.require('com.vertispan.draw.connected.client.lib.Point');\nconst _Rect \x3d goog.require('com.vertispan.draw.connected.client.lib.Rect');\nconst _$Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\n\n\n// Re-exports the implementation.\nvar $3 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$3$impl');\nexports \x3d $3;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Event$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Event$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Event.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_AT_TARGET__elemental2_dom_Event_$Overlay() {\n    return ($Overlay.$clinit(), $Overlay.$f_AT_TARGET__elemental2_dom_Event_$Overlay);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_AT_TARGET__elemental2_dom_Event_$Overlay(value) {\n    ($Overlay.$clinit(), $Overlay.$f_AT_TARGET__elemental2_dom_Event_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_BUBBLING_PHASE__elemental2_dom_Event_$Overlay() {\n    return ($Overlay.$clinit(), $Overlay.$f_BUBBLING_PHASE__elemental2_dom_Event_$Overlay);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_BUBBLING_PHASE__elemental2_dom_Event_$Overlay(value) {\n    ($Overlay.$clinit(), $Overlay.$f_BUBBLING_PHASE__elemental2_dom_Event_$Overlay \x3d value);\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_CAPTURING_PHASE__elemental2_dom_Event_$Overlay() {\n    return ($Overlay.$clinit(), $Overlay.$f_CAPTURING_PHASE__elemental2_dom_Event_$Overlay);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_CAPTURING_PHASE__elemental2_dom_Event_$Overlay(value) {\n    ($Overlay.$clinit(), $Overlay.$f_CAPTURING_PHASE__elemental2_dom_Event_$Overlay \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Event;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    $Overlay.$f_AT_TARGET__elemental2_dom_Event_$Overlay \x3d Event.AT_TARGET;\n    $Overlay.$f_BUBBLING_PHASE__elemental2_dom_Event_$Overlay \x3d Event.BUBBLING_PHASE;\n    $Overlay.$f_CAPTURING_PHASE__elemental2_dom_Event_$Overlay \x3d Event.CAPTURING_PHASE;\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('Event'));\n\n\n/** @private {number} */\n$Overlay.$f_AT_TARGET__elemental2_dom_Event_$Overlay \x3d 0.0;\n\n\n/** @private {number} */\n$Overlay.$f_BUBBLING_PHASE__elemental2_dom_Event_$Overlay \x3d 0.0;\n\n\n/** @private {number} */\n$Overlay.$f_CAPTURING_PHASE__elemental2_dom_Event_$Overlay \x3d 0.0;\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dEvent$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Event$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Event$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Event.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Event.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventListener$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventListener$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.EventListener.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('EventListener'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dEventListener$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventListener$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventListener$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.EventListener.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.EventListener.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$$LambdaAdaptor$3.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$$LambdaAdaptor$3.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$LambdaAdaptor$3$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\nlet EventListener_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListener.$Overlay$impl');\n\n\n/**\n * @implements {EventListener}\n  */\nclass $LambdaAdaptor$3 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$3($JsFunction)'.\n   * @param {?function(Event):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$3.$clinit();\n    super();\n    /** @public {?function(Event):void} */\n    this.f_$$fn__com_vertispan_draw_connected_client_lib_ConnectedComponent_$LambdaAdaptor$3;\n    this.$ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_$LambdaAdaptor$3__elemental2_dom_EventListener_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$3($JsFunction)'.\n   * @param {?function(Event):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_$LambdaAdaptor$3__elemental2_dom_EventListener_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__com_vertispan_draw_connected_client_lib_ConnectedComponent_$LambdaAdaptor$3 \x3d fn;\n  }\n  \n  /**\n   * @param {Event} arg0\n   * @return {void}\n   * @public\n   */\n  handleEvent(arg0) {\n    {\n      let $function \x3d this.f_$$fn__com_vertispan_draw_connected_client_lib_ConnectedComponent_$LambdaAdaptor$3;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$3;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$3);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$3.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$3, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.ConnectedComponent$$LambdaAdaptor$3'));\n\n\n\n\nexports \x3d $LambdaAdaptor$3; \n//# sourceMappingURL\x3dConnectedComponent$$LambdaAdaptor$3.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$$LambdaAdaptor$3.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$$LambdaAdaptor$3.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.$LambdaAdaptor$3');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\nconst _EventListener_$Overlay \x3d goog.require('elemental2.dom.EventListener.$Overlay');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$3 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$LambdaAdaptor$3$impl');\nexports \x3d $LambdaAdaptor$3;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$DrawMode.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$DrawMode.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.DrawMode$impl');\n\n\nconst Enum \x3d goog.require('java.lang.Enum$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Arrays \x3d goog.forwardDeclare('vmbootstrap.Arrays$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Enums \x3d goog.forwardDeclare('vmbootstrap.Enums$impl');\n\n\n/**\n * @extends {Enum\x3cDrawMode\x3e}\n  */\nclass DrawMode extends Enum {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DrawMode(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {!DrawMode}\n   * @public\n   */\n  static $create__java_lang_String__int($name, $ordinal) {\n    let $instance \x3d new DrawMode();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode__java_lang_String__int($name, $ordinal);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DrawMode(String, int)'.\n   * @param {?string} $name\n   * @param {number} $ordinal\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode__java_lang_String__int($name, $ordinal) {\n    this.f_name__java_lang_Enum_ \x3d $name;\n    this.f_ordinal__java_lang_Enum_ \x3d $ordinal;\n    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);\n  }\n  \n  /**\n   * @param {string} name\n   * @return {!DrawMode}\n   * @public\n   */\n  static m_valueOf__java_lang_String(name) {\n    DrawMode.$clinit();\n    if ($Equality.$same(DrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_, null)) {\n      DrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_ \x3d $Enums.createMapFromValues(DrawMode.m_values__());\n    }\n    return $Enums.getValueFromNameAndMap(name, DrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_);\n  }\n  \n  /**\n   * @return {!Array\x3c!DrawMode\x3e}\n   * @public\n   */\n  static m_values__() {\n    DrawMode.$clinit();\n    return /**@type {!Array\x3cDrawMode\x3e} */ ($Arrays.$init([DrawMode.$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode, DrawMode.$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode, DrawMode.$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode], DrawMode));\n  }\n  \n  /**\n   * Bridge method.\n   * @override\n   * @param {*} arg0\n   * @return {number}\n   * @public\n   */\n  m_compareTo__java_lang_Object(arg0) {\n    return super.compareTo(/**@type {DrawMode} */ ($Casts.$to(arg0, DrawMode)));\n  }\n  \n  /**\n   * @return {!DrawMode}\n   * @public\n   */\n  static get f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode() {\n    return (DrawMode.$clinit(), DrawMode.$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n  }\n  \n  /**\n   * @param {!DrawMode} value\n   * @return {void}\n   * @public\n   */\n  static set f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(value) {\n    (DrawMode.$clinit(), DrawMode.$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d value);\n  }\n  \n  /**\n   * @return {!DrawMode}\n   * @public\n   */\n  static get f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode() {\n    return (DrawMode.$clinit(), DrawMode.$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n  }\n  \n  /**\n   * @param {!DrawMode} value\n   * @return {void}\n   * @public\n   */\n  static set f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(value) {\n    (DrawMode.$clinit(), DrawMode.$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d value);\n  }\n  \n  /**\n   * @return {!DrawMode}\n   * @public\n   */\n  static get f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode() {\n    return (DrawMode.$clinit(), DrawMode.$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n  }\n  \n  /**\n   * @param {!DrawMode} value\n   * @return {void}\n   * @public\n   */\n  static set f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(value) {\n    (DrawMode.$clinit(), DrawMode.$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d value);\n  }\n  \n  /**\n   * @return {Map\x3c?string, !DrawMode\x3e}\n   * @public\n   */\n  static get f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_() {\n    return (DrawMode.$clinit(), DrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_);\n  }\n  \n  /**\n   * @param {Map\x3c?string, !DrawMode\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_(value) {\n    (DrawMode.$clinit(), DrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DrawMode;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DrawMode);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DrawMode.$clinit \x3d function() {};\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Arrays \x3d goog.module.get('vmbootstrap.Arrays$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Enums \x3d goog.module.get('vmbootstrap.Enums$impl');\n    Enum.$clinit();\n    DrawMode.$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d DrawMode.$create__java_lang_String__int($Util.$makeEnumName(\"MOVE\"), DrawMode.$ordinal$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    DrawMode.$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d DrawMode.$create__java_lang_String__int($Util.$makeEnumName(\"DRAW_BOX\"), DrawMode.$ordinal$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    DrawMode.$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d DrawMode.$create__java_lang_String__int($Util.$makeEnumName(\"DRAW_LINE\"), DrawMode.$ordinal$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    DrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_ \x3d null;\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForEnum(DrawMode, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.ConnectedComponent$DrawMode'));\n\n\n/** @private {!DrawMode} */\nDrawMode.$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode;\n\n\n/** @private {!DrawMode} */\nDrawMode.$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode;\n\n\n/** @private {!DrawMode} */\nDrawMode.$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode;\n\n\n/** @private {Map\x3c?string, !DrawMode\x3e} */\nDrawMode.$f_namesToValuesMap__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode_;\n\n\n/** @public {number} @const */\nDrawMode.$ordinal$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d 0;\n\n\n/** @public {number} @const */\nDrawMode.$ordinal$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d 1;\n\n\n/** @public {number} @const */\nDrawMode.$ordinal$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode \x3d 2;\n\n\n\n\nexports \x3d DrawMode; \n//# sourceMappingURL\x3dConnectedComponent$DrawMode.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent$DrawMode.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent$DrawMode.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent.DrawMode');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Enum \x3d goog.require('java.lang.Enum');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Arrays \x3d goog.require('vmbootstrap.Arrays');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Enums \x3d goog.require('vmbootstrap.Enums');\n\n\n// Re-exports the implementation.\nvar DrawMode \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.DrawMode$impl');\nexports \x3d DrawMode;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$$LambdaAdaptor$1.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$$LambdaAdaptor$1.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$1$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\nlet EventListener_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListener.$Overlay$impl');\n\n\n/**\n * @implements {EventListener}\n  */\nclass $LambdaAdaptor$1 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$1($JsFunction)'.\n   * @param {?function(Event):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$1.$clinit();\n    super();\n    /** @public {?function(Event):void} */\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$1;\n    this.$ctor__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$1__elemental2_dom_EventListener_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$1($JsFunction)'.\n   * @param {?function(Event):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$1__elemental2_dom_EventListener_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$1 \x3d fn;\n  }\n  \n  /**\n   * @param {Event} arg0\n   * @return {void}\n   * @public\n   */\n  handleEvent(arg0) {\n    {\n      let $function \x3d this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$1;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$1;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$1);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$1.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$1, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.Event$$LambdaAdaptor$1'));\n\n\n\n\nexports \x3d $LambdaAdaptor$1; \n//# sourceMappingURL\x3dEvent$$LambdaAdaptor$1.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$$LambdaAdaptor$1.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$$LambdaAdaptor$1.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$1');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\nconst _EventListener_$Overlay \x3d goog.require('elemental2.dom.EventListener.$Overlay');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$1 \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$1$impl');\nexports \x3d $LambdaAdaptor$1;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$$LambdaAdaptor$2.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$$LambdaAdaptor$2.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$2$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\nlet EventListener_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListener.$Overlay$impl');\n\n\n/**\n * @implements {EventListener}\n  */\nclass $LambdaAdaptor$2 extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor$2($JsFunction)'.\n   * @param {?function(Event):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor$2.$clinit();\n    super();\n    /** @public {?function(Event):void} */\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$2;\n    this.$ctor__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$2__elemental2_dom_EventListener_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor$2($JsFunction)'.\n   * @param {?function(Event):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$2__elemental2_dom_EventListener_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$2 \x3d fn;\n  }\n  \n  /**\n   * @param {Event} arg0\n   * @return {void}\n   * @public\n   */\n  handleEvent(arg0) {\n    {\n      let $function \x3d this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_$LambdaAdaptor$2;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor$2;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$2);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor$2.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor$2, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.Event$$LambdaAdaptor$2'));\n\n\n\n\nexports \x3d $LambdaAdaptor$2; \n//# sourceMappingURL\x3dEvent$$LambdaAdaptor$2.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$$LambdaAdaptor$2.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$$LambdaAdaptor$2.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$2');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\nconst _EventListener_$Overlay \x3d goog.require('elemental2.dom.EventListener.$Overlay');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor$2 \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$2$impl');\nexports \x3d $LambdaAdaptor$2;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$NativePreviewEvent.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$NativePreviewEvent.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\n\n\nclass NativePreviewEvent extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {boolean} */\n    this.f_isCanceled__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d false;\n    /** @public {boolean} */\n    this.f_isConsumed__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d false;\n    /** @public {boolean} */\n    this.f_isFirstHandler__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d false;\n    /** @public {Event} */\n    this.f_nativeEvent__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'NativePreviewEvent()'.\n   * @return {!NativePreviewEvent}\n   * @public\n   */\n  static $create__() {\n    NativePreviewEvent.$clinit();\n    let $instance \x3d new NativePreviewEvent();\n    $instance.$ctor__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'NativePreviewEvent()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent();\n  }\n  \n  /**\n   * @return {Event}\n   * @public\n   */\n  m_getNativeEvent__() {\n    return this.f_nativeEvent__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_;\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent() {\n    this.f_isCanceled__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d false;\n    this.f_isConsumed__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d false;\n    this.f_isFirstHandler__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d false;\n  }\n  \n  /**\n   * @return {NativePreviewEvent}\n   * @public\n   */\n  static get f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_() {\n    return (NativePreviewEvent.$clinit(), NativePreviewEvent.$f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_);\n  }\n  \n  /**\n   * @param {NativePreviewEvent} value\n   * @return {void}\n   * @public\n   */\n  static set f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_(value) {\n    (NativePreviewEvent.$clinit(), NativePreviewEvent.$f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NativePreviewEvent;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, NativePreviewEvent);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NativePreviewEvent.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n    NativePreviewEvent.$f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d NativePreviewEvent.$create__();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(NativePreviewEvent, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.Event$NativePreviewEvent'));\n\n\n/** @private {NativePreviewEvent} */\nNativePreviewEvent.$f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_;\n\n\n\n\nexports \x3d NativePreviewEvent; \n//# sourceMappingURL\x3dEvent$NativePreviewEvent.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$NativePreviewEvent.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$NativePreviewEvent.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\n\n\n// Re-exports the implementation.\nvar NativePreviewEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\nexports \x3d NativePreviewEvent;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$NativePreviewHandler.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$NativePreviewHandler.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet NativePreviewEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\nlet $LambdaAdaptor \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass NativePreviewHandler {\n  /**\n   * @abstract\n   * @param {NativePreviewEvent} var1\n   * @return {void}\n   * @public\n   */\n  m_onPreviewNativeEvent__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent(var1) {\n  }\n  \n  /**\n   * @param {?function(NativePreviewEvent):void} fn\n   * @return {NativePreviewHandler}\n   * @public\n   */\n  static $adapt(fn) {\n    NativePreviewHandler.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    NativePreviewHandler.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(NativePreviewHandler, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.Event$NativePreviewHandler'));\n\n\nNativePreviewHandler.$markImplementor(/** @type {Function} */ (NativePreviewHandler));\n\n\nexports \x3d NativePreviewHandler; \n//# sourceMappingURL\x3dEvent$NativePreviewHandler.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$NativePreviewHandler$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$NativePreviewHandler$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler.$LambdaAdaptor$impl');\n\n\nconst NativePreviewHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet NativePreviewEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\n\n\n/**\n * @implements {NativePreviewHandler}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(NativePreviewEvent):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(NativePreviewEvent):void} */\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$LambdaAdaptor;\n    this.$ctor__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$LambdaAdaptor__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(NativePreviewEvent):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$LambdaAdaptor__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {NativePreviewEvent} arg0\n   * @return {void}\n   * @public\n   */\n  m_onPreviewNativeEvent__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent(arg0) {\n    {\n      let $function \x3d this.f_$$fn__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.Event$NativePreviewHandler$$LambdaAdaptor'));\n\n\nNativePreviewHandler.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dEvent$NativePreviewHandler$$LambdaAdaptor.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$NativePreviewHandler$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$NativePreviewHandler$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _NativePreviewHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _NativePreviewEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event$NativePreviewHandler.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event$NativePreviewHandler.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _NativePreviewEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent');\nconst _$LambdaAdaptor \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar NativePreviewHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\nexports \x3d NativePreviewHandler;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/AddEventListenerOptions$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.AddEventListenerOptions$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.AddEventListenerOptions.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass AddEventListenerOptions_$Overlay {\n  /**\n   * @return {AddEventListenerOptions}\n   * @public\n   */\n  static m_create__() {\n    AddEventListenerOptions_$Overlay.$clinit();\n    return /**@type {AddEventListenerOptions} */ (Js.m_uncheckedCast__java_lang_Object($Overlay.m_of__()));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AddEventListenerOptions_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AddEventListenerOptions_$Overlay, $Util.$makeClassName('AddEventListenerOptions'));\n\n\nexports \x3d AddEventListenerOptions_$Overlay; \n//# sourceMappingURL\x3dAddEventListenerOptions$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/AddEventListenerOptions$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.AddEventListenerOptions$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.AddEventListenerOptions.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar AddEventListenerOptions_$Overlay \x3d goog.require('elemental2.dom.AddEventListenerOptions.$Overlay$impl');\nexports \x3d AddEventListenerOptions_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventListenerOptions$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventListenerOptions$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.EventListenerOptions.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass EventListenerOptions_$Overlay {\n  /**\n   * @return {EventListenerOptions}\n   * @public\n   */\n  static m_create__() {\n    EventListenerOptions_$Overlay.$clinit();\n    return /**@type {EventListenerOptions} */ (Js.m_uncheckedCast__java_lang_Object($Overlay.m_of__()));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EventListenerOptions_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(EventListenerOptions_$Overlay, $Util.$makeClassName('EventListenerOptions'));\n\n\nexports \x3d EventListenerOptions_$Overlay; \n//# sourceMappingURL\x3dEventListenerOptions$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventListenerOptions$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventListenerOptions$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.EventListenerOptions.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar EventListenerOptions_$Overlay \x3d goog.require('elemental2.dom.EventListenerOptions.$Overlay$impl');\nexports \x3d EventListenerOptions_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventTarget$AddEventListenerOptionsUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventTarget$AddEventListenerOptionsUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.EventTarget.AddEventListenerOptionsUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.AddEventListenerOptions.$Overlay$impl');\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass AddEventListenerOptionsUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    AddEventListenerOptionsUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), AddEventListenerOptionsUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {AddEventListenerOptions}\n   * @public\n   */\n  static m_asAddEventListenerOptions__elemental2_dom_EventTarget_AddEventListenerOptionsUnionType($thisArg) {\n    AddEventListenerOptionsUnionType_$Overlay.$clinit();\n    return /**@type {AddEventListenerOptions} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__elemental2_dom_EventTarget_AddEventListenerOptionsUnionType($thisArg) {\n    AddEventListenerOptionsUnionType_$Overlay.$clinit();\n    return Js.m_asBoolean__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBoolean__elemental2_dom_EventTarget_AddEventListenerOptionsUnionType($thisArg) {\n    AddEventListenerOptionsUnionType_$Overlay.$clinit();\n    return Boolean.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AddEventListenerOptionsUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.AddEventListenerOptions.$Overlay$impl');\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AddEventListenerOptionsUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d AddEventListenerOptionsUnionType_$Overlay; \n//# sourceMappingURL\x3dEventTarget$AddEventListenerOptionsUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventTarget$AddEventListenerOptionsUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventTarget$AddEventListenerOptionsUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.EventTarget.AddEventListenerOptionsUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.AddEventListenerOptions.$Overlay');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AddEventListenerOptionsUnionType_$Overlay \x3d goog.require('elemental2.dom.EventTarget.AddEventListenerOptionsUnionType.$Overlay$impl');\nexports \x3d AddEventListenerOptionsUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventTarget$RemoveEventListenerOptionsUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventTarget$RemoveEventListenerOptionsUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.EventTarget.RemoveEventListenerOptionsUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListenerOptions.$Overlay$impl');\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass RemoveEventListenerOptionsUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    RemoveEventListenerOptionsUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), RemoveEventListenerOptionsUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__elemental2_dom_EventTarget_RemoveEventListenerOptionsUnionType($thisArg) {\n    RemoveEventListenerOptionsUnionType_$Overlay.$clinit();\n    return Js.m_asBoolean__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {EventListenerOptions}\n   * @public\n   */\n  static m_asEventListenerOptions__elemental2_dom_EventTarget_RemoveEventListenerOptionsUnionType($thisArg) {\n    RemoveEventListenerOptionsUnionType_$Overlay.$clinit();\n    return /**@type {EventListenerOptions} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBoolean__elemental2_dom_EventTarget_RemoveEventListenerOptionsUnionType($thisArg) {\n    RemoveEventListenerOptionsUnionType_$Overlay.$clinit();\n    return Boolean.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    RemoveEventListenerOptionsUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.EventListenerOptions.$Overlay$impl');\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(RemoveEventListenerOptionsUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d RemoveEventListenerOptionsUnionType_$Overlay; \n//# sourceMappingURL\x3dEventTarget$RemoveEventListenerOptionsUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventTarget$RemoveEventListenerOptionsUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventTarget$RemoveEventListenerOptionsUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.EventTarget.RemoveEventListenerOptionsUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.EventListenerOptions.$Overlay');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar RemoveEventListenerOptionsUnionType_$Overlay \x3d goog.require('elemental2.dom.EventTarget.RemoveEventListenerOptionsUnionType.$Overlay$impl');\nexports \x3d RemoveEventListenerOptionsUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventTarget$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventTarget$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.EventTarget.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet AddEventListenerOptions_$Overlay \x3d goog.forwardDeclare('elemental2.dom.AddEventListenerOptions.$Overlay$impl');\nlet EventListener_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListener.$Overlay$impl');\nlet EventListenerOptions_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListenerOptions.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.EventTarget.AddEventListenerOptionsUnionType.$Overlay$impl');\nlet RemoveEventListenerOptionsUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventTarget.RemoveEventListenerOptionsUnionType.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass EventTarget_$Overlay {\n  /**\n   * @param {EventTarget} $thisArg\n   * @param {?string} type\n   * @param {EventListener} listener\n   * @param {AddEventListenerOptions} options\n   * @return {void}\n   * @public\n   */\n  static m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__elemental2_dom_AddEventListenerOptions($thisArg, type, listener, options) {\n    EventTarget_$Overlay.$clinit();\n    $thisArg.addEventListener(type, listener, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(options)));\n  }\n  \n  /**\n   * @param {EventTarget} $thisArg\n   * @param {?string} type\n   * @param {EventListener} listener\n   * @param {boolean} options\n   * @return {void}\n   * @public\n   */\n  static m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean($thisArg, type, listener, options) {\n    EventTarget_$Overlay.$clinit();\n    $thisArg.addEventListener(type, listener, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(options)));\n  }\n  \n  /**\n   * @param {EventTarget} $thisArg\n   * @param {?string} type\n   * @param {EventListener} listener\n   * @param {EventListenerOptions} options\n   * @return {void}\n   * @public\n   */\n  static m_removeEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__elemental2_dom_EventListenerOptions($thisArg, type, listener, options) {\n    EventTarget_$Overlay.$clinit();\n    $thisArg.removeEventListener(type, listener, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(options)));\n  }\n  \n  /**\n   * @param {EventTarget} $thisArg\n   * @param {?string} type\n   * @param {EventListener} listener\n   * @param {boolean} options\n   * @return {void}\n   * @public\n   */\n  static m_removeEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean($thisArg, type, listener, options) {\n    EventTarget_$Overlay.$clinit();\n    $thisArg.removeEventListener(type, listener, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(options)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EventTarget_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(EventTarget_$Overlay, $Util.$makeClassName('EventTarget'));\n\n\nexports \x3d EventTarget_$Overlay; \n//# sourceMappingURL\x3dEventTarget$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/EventTarget$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.EventTarget$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.EventTarget.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _AddEventListenerOptions_$Overlay \x3d goog.require('elemental2.dom.AddEventListenerOptions.$Overlay');\nconst _EventListener_$Overlay \x3d goog.require('elemental2.dom.EventListener.$Overlay');\nconst _EventListenerOptions_$Overlay \x3d goog.require('elemental2.dom.EventListenerOptions.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.EventTarget.AddEventListenerOptionsUnionType.$Overlay');\nconst _RemoveEventListenerOptionsUnionType_$Overlay \x3d goog.require('elemental2.dom.EventTarget.RemoveEventListenerOptionsUnionType.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar EventTarget_$Overlay \x3d goog.require('elemental2.dom.EventTarget.$Overlay$impl');\nexports \x3d EventTarget_$Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor$1 \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$1$impl');\nlet $LambdaAdaptor$2 \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$2$impl');\nlet NativePreviewEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\nlet NativePreviewHandler \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\nlet Event_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\nlet EventListener_$Overlay \x3d goog.forwardDeclare('elemental2.dom.EventListener.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.EventTarget.$Overlay$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet HandlerRegistration \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass com_vertispan_draw_connected_client_blank_Event extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'Event()'.\n   * @return {!com_vertispan_draw_connected_client_blank_Event}\n   * @public\n   */\n  static $create__() {\n    com_vertispan_draw_connected_client_blank_Event.$clinit();\n    let $instance \x3d new com_vertispan_draw_connected_client_blank_Event();\n    $instance.$ctor__com_vertispan_draw_connected_client_blank_Event__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'Event()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_blank_Event__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @param {NativePreviewHandler} handler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  static m_addNativePreviewHandler__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler(handler) {\n    com_vertispan_draw_connected_client_blank_Event.$clinit();\n    com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_.add(handler);\n    return HandlerRegistration.$adapt((() \x3d\x3e{\n      com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_.remove(handler);\n    }));\n  }\n  \n  /**\n   * @param {Event} event\n   * @return {void}\n   * @public\n   */\n  static m_dispatchCapturedEvent__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_blank_Event(event) {\n    com_vertispan_draw_connected_client_blank_Event.$clinit();\n    NativePreviewEvent.f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_.f_nativeEvent__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ \x3d event;\n    for (let i \x3d 0; i \x3c com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_.size(); i++) {\n      /**@type {NativePreviewHandler} */ ($Casts.$to(com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_.getAtIndex(i), NativePreviewHandler)).m_onPreviewNativeEvent__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent(NativePreviewEvent.f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_);\n    }\n    let ret \x3d !NativePreviewEvent.f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_.f_isCanceled__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_ || NativePreviewEvent.f_singleton__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_.f_isConsumed__com_vertispan_draw_connected_client_blank_Event_NativePreviewEvent_;\n    if (!ret) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n  \n  /**\n   * @return {EventListener}\n   * @public\n   */\n  static get f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_() {\n    return (com_vertispan_draw_connected_client_blank_Event.$clinit(), com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_);\n  }\n  \n  /**\n   * @param {EventListener} value\n   * @return {void}\n   * @public\n   */\n  static set f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_(value) {\n    (com_vertispan_draw_connected_client_blank_Event.$clinit(), com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_ \x3d value);\n  }\n  \n  /**\n   * @return {EventListener}\n   * @public\n   */\n  static get f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_() {\n    return (com_vertispan_draw_connected_client_blank_Event.$clinit(), com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_);\n  }\n  \n  /**\n   * @param {EventListener} value\n   * @return {void}\n   * @public\n   */\n  static set f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_(value) {\n    (com_vertispan_draw_connected_client_blank_Event.$clinit(), com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_ \x3d value);\n  }\n  \n  /**\n   * @return {List\x3cNativePreviewHandler\x3e}\n   * @public\n   */\n  static get f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_() {\n    return (com_vertispan_draw_connected_client_blank_Event.$clinit(), com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_);\n  }\n  \n  /**\n   * @param {List\x3cNativePreviewHandler\x3e} value\n   * @return {void}\n   * @public\n   */\n  static set f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_(value) {\n    (com_vertispan_draw_connected_client_blank_Event.$clinit(), com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof com_vertispan_draw_connected_client_blank_Event;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, com_vertispan_draw_connected_client_blank_Event);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    com_vertispan_draw_connected_client_blank_Event.$clinit \x3d function() {};\n    $LambdaAdaptor$1 \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$1$impl');\n    $LambdaAdaptor$2 \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$2$impl');\n    NativePreviewEvent \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\n    NativePreviewHandler \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\n    $Overlay \x3d goog.module.get('elemental2.dom.EventTarget.$Overlay$impl');\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    HandlerRegistration \x3d goog.module.get('org.gwtproject.event.shared.HandlerRegistration$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    com_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_ \x3d /**@type {!ArrayList\x3cNativePreviewHandler\x3e} */ (ArrayList.$create__());\n    com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_ \x3d new $LambdaAdaptor$1(((/** Event */ arg0) \x3d\x3e{\n      com_vertispan_draw_connected_client_blank_Event.m_dispatchCapturedEvent__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_blank_Event(arg0);\n    }));\n    com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_ \x3d new $LambdaAdaptor$2(((/** Event */ arg0$1$) \x3d\x3e{\n      com_vertispan_draw_connected_client_blank_Event.m_dispatchCapturedEvent__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_blank_Event(arg0$1$);\n    }));\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"click\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"dblclick\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"mousedown\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"mouseup\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"mousemove\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"mouseover\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"mouseout\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"mousewheel\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"keydown\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"keyup\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"keypress\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"touchstart\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"touchend\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"touchmove\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"touchcancel\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"gesturestart\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"gestureend\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n    $Overlay.m_addEventListener__elemental2_dom_EventTarget__java_lang_String__elemental2_dom_EventListener__boolean(window.window, \"gesturechange\", com_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_, true);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(com_vertispan_draw_connected_client_blank_Event, $Util.$makeClassName('com.vertispan.draw.connected.client.blank.Event'));\n\n\n/** @private {EventListener} */\ncom_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedMouseEvent__com_vertispan_draw_connected_client_blank_Event_;\n\n\n/** @private {EventListener} */\ncom_vertispan_draw_connected_client_blank_Event.$f_dispatchCapturedEvent__com_vertispan_draw_connected_client_blank_Event_;\n\n\n/** @private {List\x3cNativePreviewHandler\x3e} */\ncom_vertispan_draw_connected_client_blank_Event.$f_previewHandlers__com_vertispan_draw_connected_client_blank_Event_;\n\n\n\n\nexports \x3d com_vertispan_draw_connected_client_blank_Event; \n//# sourceMappingURL\x3dEvent.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/blank/Event.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.blank.Event.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.blank.Event');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor$1 \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$1');\nconst _$LambdaAdaptor$2 \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.$LambdaAdaptor$2');\nconst _NativePreviewEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent');\nconst _NativePreviewHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler');\nconst _Event_$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\nconst _EventListener_$Overlay \x3d goog.require('elemental2.dom.EventListener.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.EventTarget.$Overlay');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _List \x3d goog.require('java.util.List');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar com_vertispan_draw_connected_client_blank_Event \x3d goog.require('com.vertispan.draw.connected.client.blank.Event$impl');\nexports \x3d com_vertispan_draw_connected_client_blank_Event;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/DragTracker.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.DragTracker.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.DragTracker$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet com_vertispan_draw_connected_client_blank_Event \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event$impl');\nlet NativePreviewEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent$impl');\nlet NativePreviewHandler \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\nlet DragHandling \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling$impl');\nlet Event_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.MouseEvent.$Overlay$impl');\nlet $InternalPreconditions \x3d goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet HandlerRegistration \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass DragTracker extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {HandlerRegistration} */\n    this.f_mouseEventPreview__com_vertispan_draw_connected_client_lib_DragTracker_;\n    /** @public {boolean} */\n    this.f_moved__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n    /** @public {boolean} */\n    this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n    /** @public {DragHandling} */\n    this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'DragTracker()'.\n   * @return {!DragTracker}\n   * @public\n   */\n  static $create__() {\n    DragTracker.$clinit();\n    let $instance \x3d new DragTracker();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_DragTracker__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'DragTracker()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_DragTracker__() {\n    this.$ctor__java_lang_Object__();\n    this.$init__com_vertispan_draw_connected_client_lib_DragTracker();\n  }\n  \n  /**\n   * @param {Event} event\n   * @param {DragHandling} handler\n   * @return {void}\n   * @public\n   */\n  m_start__elemental2_dom_Event__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling(event, handler) {\n    this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d handler;\n    $Asserts.$assert(!this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_);\n    this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d true;\n    this.f_moved__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n    handler.m_startDrag__elemental2_dom_MouseEvent(/**@type {MouseEvent} */ ($Casts.$to(event, $Overlay)));\n    this.f_mouseEventPreview__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d com_vertispan_draw_connected_client_blank_Event.m_addNativePreviewHandler__com_vertispan_draw_connected_client_blank_Event_NativePreviewHandler(NativePreviewHandler.$adapt(((/** NativePreviewEvent */ captured) \x3d\x3e{\n      let nativeEvent \x3d captured.m_getNativeEvent__();\n      switch ($InternalPreconditions.m_checkNotNull__java_lang_Object(nativeEvent.type)) {\n        case \"mousemove\": \n          this.m_move__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_DragTracker(/**@type {MouseEvent} */ ($Casts.$to(nativeEvent, $Overlay)));\n          break;\n        case \"mouseup\": \n          if (this.f_moved__com_vertispan_draw_connected_client_lib_DragTracker_) {\n            this.m_endDrag__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_DragTracker(/**@type {MouseEvent} */ ($Casts.$to(nativeEvent, $Overlay)));\n          } else {\n            this.m_endClick__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_DragTracker(/**@type {MouseEvent} */ ($Casts.$to(nativeEvent, $Overlay)));\n          }\n          break;\n      }\n    })));\n    event.preventDefault();\n  }\n  \n  /**\n   * @param {MouseEvent} nativeEvent\n   * @return {void}\n   * @public\n   */\n  m_endClick__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_DragTracker(nativeEvent) {\n    $Asserts.$assert(this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_);\n    $Asserts.$assert(!this.f_moved__com_vertispan_draw_connected_client_lib_DragTracker_);\n    if (!$Equality.$same(this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_, null)) {\n      this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_.m_click__elemental2_dom_MouseEvent(nativeEvent);\n    }\n    this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n    this.f_mouseEventPreview__com_vertispan_draw_connected_client_lib_DragTracker_.m_removeHandler__();\n  }\n  \n  /**\n   * @param {MouseEvent} nativeEvent\n   * @return {void}\n   * @public\n   */\n  m_endDrag__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_DragTracker(nativeEvent) {\n    $Asserts.$assert(this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_);\n    $Asserts.$assert(this.f_moved__com_vertispan_draw_connected_client_lib_DragTracker_);\n    if (!$Equality.$same(this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_, null)) {\n      this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_.m_endDrag__elemental2_dom_MouseEvent(nativeEvent);\n    }\n    this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n    this.f_mouseEventPreview__com_vertispan_draw_connected_client_lib_DragTracker_.m_removeHandler__();\n  }\n  \n  /**\n   * @param {MouseEvent} nativeEvent\n   * @return {void}\n   * @public\n   */\n  m_move__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_DragTracker(nativeEvent) {\n    $Asserts.$assert(this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_);\n    this.f_moved__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d true;\n    if (!$Equality.$same(this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_, null)) {\n      this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_.m_moveDrag__elemental2_dom_MouseEvent(nativeEvent);\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_cancel__() {\n    this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n    this.f_mouseEventPreview__com_vertispan_draw_connected_client_lib_DragTracker_.m_removeHandler__();\n    if (!$Equality.$same(this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_, null)) {\n      this.f_handler__com_vertispan_draw_connected_client_lib_DragTracker_.m_cancelDrag__();\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__com_vertispan_draw_connected_client_lib_DragTracker() {\n    this.f_dragging__com_vertispan_draw_connected_client_lib_DragTracker_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof DragTracker;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, DragTracker);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    DragTracker.$clinit \x3d function() {};\n    com_vertispan_draw_connected_client_blank_Event \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event$impl');\n    NativePreviewHandler \x3d goog.module.get('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler$impl');\n    $Overlay \x3d goog.module.get('elemental2.dom.MouseEvent.$Overlay$impl');\n    $InternalPreconditions \x3d goog.module.get('javaemul.internal.InternalPreconditions$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(DragTracker, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.DragTracker'));\n\n\n\n\nexports \x3d DragTracker; \n//# sourceMappingURL\x3dDragTracker.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/DragTracker.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.DragTracker.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.DragTracker');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _com_vertispan_draw_connected_client_blank_Event \x3d goog.require('com.vertispan.draw.connected.client.blank.Event');\nconst _NativePreviewEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewEvent');\nconst _NativePreviewHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.Event.NativePreviewHandler');\nconst _DragHandling \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker.DragHandling');\nconst _Event_$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay');\nconst _$InternalPreconditions \x3d goog.require('javaemul.internal.InternalPreconditions');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar DragTracker \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker$impl');\nexports \x3d DragTracker;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasGradient$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasGradient$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasGradient.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof CanvasGradient;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('CanvasGradient'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dCanvasGradient$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasGradient$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasGradient$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasGradient.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.CanvasGradient.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$FillStyleUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$FillStyleUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.FillStyleUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasGradient.$Overlay$impl');\nlet CanvasPattern_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasPattern.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass FillStyleUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), FillStyleUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {CanvasGradient}\n   * @public\n   */\n  static m_asCanvasGradient__elemental2_dom_CanvasRenderingContext2D_FillStyleUnionType($thisArg) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return /**@type {CanvasGradient} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {CanvasPattern}\n   * @public\n   */\n  static m_asCanvasPattern__elemental2_dom_CanvasRenderingContext2D_FillStyleUnionType($thisArg) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return /**@type {CanvasPattern} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), CanvasPattern_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_CanvasRenderingContext2D_FillStyleUnionType($thisArg) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isCanvasGradient__elemental2_dom_CanvasRenderingContext2D_FillStyleUnionType($thisArg) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isCanvasPattern__elemental2_dom_CanvasRenderingContext2D_FillStyleUnionType($thisArg) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return CanvasPattern_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_CanvasRenderingContext2D_FillStyleUnionType($thisArg) {\n    FillStyleUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FillStyleUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.CanvasGradient.$Overlay$impl');\n    CanvasPattern_$Overlay \x3d goog.module.get('elemental2.dom.CanvasPattern.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(FillStyleUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d FillStyleUnionType_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$FillStyleUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$FillStyleUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$FillStyleUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.FillStyleUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.CanvasGradient.$Overlay');\nconst _CanvasPattern_$Overlay \x3d goog.require('elemental2.dom.CanvasPattern.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FillStyleUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.FillStyleUnionType.$Overlay$impl');\nexports \x3d FillStyleUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$StrokeStyleUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$StrokeStyleUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.StrokeStyleUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasGradient.$Overlay$impl');\nlet CanvasPattern_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasPattern.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass StrokeStyleUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), StrokeStyleUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {CanvasGradient}\n   * @public\n   */\n  static m_asCanvasGradient__elemental2_dom_CanvasRenderingContext2D_StrokeStyleUnionType($thisArg) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return /**@type {CanvasGradient} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {CanvasPattern}\n   * @public\n   */\n  static m_asCanvasPattern__elemental2_dom_CanvasRenderingContext2D_StrokeStyleUnionType($thisArg) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return /**@type {CanvasPattern} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), CanvasPattern_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_CanvasRenderingContext2D_StrokeStyleUnionType($thisArg) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isCanvasGradient__elemental2_dom_CanvasRenderingContext2D_StrokeStyleUnionType($thisArg) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isCanvasPattern__elemental2_dom_CanvasRenderingContext2D_StrokeStyleUnionType($thisArg) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return CanvasPattern_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_CanvasRenderingContext2D_StrokeStyleUnionType($thisArg) {\n    StrokeStyleUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    StrokeStyleUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.CanvasGradient.$Overlay$impl');\n    CanvasPattern_$Overlay \x3d goog.module.get('elemental2.dom.CanvasPattern.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(StrokeStyleUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d StrokeStyleUnionType_$Overlay; \n//# sourceMappingURL\x3dCanvasRenderingContext2D$StrokeStyleUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/CanvasRenderingContext2D$StrokeStyleUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.CanvasRenderingContext2D$StrokeStyleUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.CanvasRenderingContext2D.StrokeStyleUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.CanvasGradient.$Overlay');\nconst _CanvasPattern_$Overlay \x3d goog.require('elemental2.dom.CanvasPattern.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar StrokeStyleUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.StrokeStyleUnionType.$Overlay$impl');\nexports \x3d StrokeStyleUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$AfterNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$AfterNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.AfterNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass AfterNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    AfterNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), AfterNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Element_AfterNodesUnionType($thisArg) {\n    AfterNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_AfterNodesUnionType($thisArg) {\n    AfterNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Element_AfterNodesUnionType($thisArg) {\n    AfterNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_AfterNodesUnionType($thisArg) {\n    AfterNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AfterNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AfterNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d AfterNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$AfterNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$AfterNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$AfterNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.AfterNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AfterNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.AfterNodesUnionType.$Overlay$impl');\nexports \x3d AfterNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$AppendNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$AppendNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.AppendNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass AppendNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), AppendNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Element_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Element_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_AppendNodesUnionType($thisArg) {\n    AppendNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    AppendNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(AppendNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d AppendNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$AppendNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$AppendNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$AppendNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.AppendNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar AppendNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.AppendNodesUnionType.$Overlay$impl');\nexports \x3d AppendNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$BeforeNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$BeforeNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.BeforeNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass BeforeNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    BeforeNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), BeforeNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Element_BeforeNodesUnionType($thisArg) {\n    BeforeNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_BeforeNodesUnionType($thisArg) {\n    BeforeNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Element_BeforeNodesUnionType($thisArg) {\n    BeforeNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_BeforeNodesUnionType($thisArg) {\n    BeforeNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    BeforeNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(BeforeNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d BeforeNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$BeforeNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$BeforeNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$BeforeNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.BeforeNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar BeforeNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.BeforeNodesUnionType.$Overlay$impl');\nexports \x3d BeforeNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/NodeList$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.NodeList$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.NodeList.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof NodeList;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('NodeList'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dNodeList$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/NodeList$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.NodeList$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.NodeList.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.NodeList.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$MatchesSelectorRefNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$MatchesSelectorRefNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.MatchesSelectorRefNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet NodeList_$Overlay \x3d goog.forwardDeclare('elemental2.dom.NodeList.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass MatchesSelectorRefNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    MatchesSelectorRefNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), MatchesSelectorRefNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Element_MatchesSelectorRefNodesUnionType($thisArg) {\n    MatchesSelectorRefNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {NodeList\x3c*\x3e}\n   * @public\n   */\n  static m_asNodeList__elemental2_dom_Element_MatchesSelectorRefNodesUnionType($thisArg) {\n    MatchesSelectorRefNodesUnionType_$Overlay.$clinit();\n    return /**@type {NodeList\x3c*\x3e} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), NodeList_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Element_MatchesSelectorRefNodesUnionType($thisArg) {\n    MatchesSelectorRefNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNodeList__elemental2_dom_Element_MatchesSelectorRefNodesUnionType($thisArg) {\n    MatchesSelectorRefNodesUnionType_$Overlay.$clinit();\n    return NodeList_$Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    MatchesSelectorRefNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    NodeList_$Overlay \x3d goog.module.get('elemental2.dom.NodeList.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(MatchesSelectorRefNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d MatchesSelectorRefNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$MatchesSelectorRefNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$MatchesSelectorRefNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$MatchesSelectorRefNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.MatchesSelectorRefNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _NodeList_$Overlay \x3d goog.require('elemental2.dom.NodeList.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar MatchesSelectorRefNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.MatchesSelectorRefNodesUnionType.$Overlay$impl');\nexports \x3d MatchesSelectorRefNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$PrependNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$PrependNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.PrependNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass PrependNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), PrependNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Element_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Element_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_PrependNodesUnionType($thisArg) {\n    PrependNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    PrependNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(PrependNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d PrependNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$PrependNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$PrependNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$PrependNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.PrependNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar PrependNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.PrependNodesUnionType.$Overlay$impl');\nexports \x3d PrependNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ReplaceWithNodesUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ReplaceWithNodesUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.ReplaceWithNodesUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass ReplaceWithNodesUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    ReplaceWithNodesUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), ReplaceWithNodesUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {Node}\n   * @public\n   */\n  static m_asNode__elemental2_dom_Element_ReplaceWithNodesUnionType($thisArg) {\n    ReplaceWithNodesUnionType_$Overlay.$clinit();\n    return /**@type {Node} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_ReplaceWithNodesUnionType($thisArg) {\n    ReplaceWithNodesUnionType_$Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isNode__elemental2_dom_Element_ReplaceWithNodesUnionType($thisArg) {\n    ReplaceWithNodesUnionType_$Overlay.$clinit();\n    return $Overlay.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_ReplaceWithNodesUnionType($thisArg) {\n    ReplaceWithNodesUnionType_$Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ReplaceWithNodesUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Node.$Overlay$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ReplaceWithNodesUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ReplaceWithNodesUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$ReplaceWithNodesUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ReplaceWithNodesUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ReplaceWithNodesUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.ReplaceWithNodesUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ReplaceWithNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.ReplaceWithNodesUnionType.$Overlay$impl');\nexports \x3d ReplaceWithNodesUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollIntoViewTopType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollIntoViewTopType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass ScrollIntoViewTopType_$Overlay {\n  /**\n   * @return {?}\n   * @public\n   */\n  static m_create__() {\n    ScrollIntoViewTopType_$Overlay.$clinit();\n    return /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object($Overlay.m_of__()));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ScrollIntoViewTopType_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ScrollIntoViewTopType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ScrollIntoViewTopType_$Overlay; \n//# sourceMappingURL\x3dElement$ScrollIntoViewTopType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollIntoViewTopType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollIntoViewTopType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar ScrollIntoViewTopType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay$impl');\nexports \x3d ScrollIntoViewTopType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollIntoViewTopUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollIntoViewTopUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.ScrollIntoViewTopUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay$impl');\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass ScrollIntoViewTopUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    ScrollIntoViewTopUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), ScrollIntoViewTopUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__elemental2_dom_Element_ScrollIntoViewTopUnionType($thisArg) {\n    ScrollIntoViewTopUnionType_$Overlay.$clinit();\n    return Js.m_asBoolean__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?}\n   * @public\n   */\n  static m_asScrollIntoViewTopType__elemental2_dom_Element_ScrollIntoViewTopUnionType($thisArg) {\n    ScrollIntoViewTopUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBoolean__elemental2_dom_Element_ScrollIntoViewTopUnionType($thisArg) {\n    ScrollIntoViewTopUnionType_$Overlay.$clinit();\n    return Boolean.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ScrollIntoViewTopUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay$impl');\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ScrollIntoViewTopUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ScrollIntoViewTopUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$ScrollIntoViewTopUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollIntoViewTopUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollIntoViewTopUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.ScrollIntoViewTopUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ScrollIntoViewTopUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollIntoViewTopUnionType.$Overlay$impl');\nexports \x3d ScrollIntoViewTopUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollToScrollToOptionsOrXType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollToScrollToOptionsOrXType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Overlay \x3d goog.forwardDeclare('jsinterop.base.JsPropertyMap.$Overlay$impl');\n\n\nclass ScrollToScrollToOptionsOrXType_$Overlay {\n  /**\n   * @return {?}\n   * @public\n   */\n  static m_create__() {\n    ScrollToScrollToOptionsOrXType_$Overlay.$clinit();\n    return /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object($Overlay.m_of__()));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ScrollToScrollToOptionsOrXType_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Overlay \x3d goog.module.get('jsinterop.base.JsPropertyMap.$Overlay$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ScrollToScrollToOptionsOrXType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ScrollToScrollToOptionsOrXType_$Overlay; \n//# sourceMappingURL\x3dElement$ScrollToScrollToOptionsOrXType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollToScrollToOptionsOrXType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollToScrollToOptionsOrXType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Overlay \x3d goog.require('jsinterop.base.JsPropertyMap.$Overlay');\n\n\n// Re-exports the implementation.\nvar ScrollToScrollToOptionsOrXType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay$impl');\nexports \x3d ScrollToScrollToOptionsOrXType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollToScrollToOptionsOrXUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollToScrollToOptionsOrXUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.ScrollToScrollToOptionsOrXUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass ScrollToScrollToOptionsOrXUnionType_$Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    ScrollToScrollToOptionsOrXUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), ScrollToScrollToOptionsOrXUnionType_$Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__elemental2_dom_Element_ScrollToScrollToOptionsOrXUnionType($thisArg) {\n    ScrollToScrollToOptionsOrXUnionType_$Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?}\n   * @public\n   */\n  static m_asScrollToScrollToOptionsOrXType__elemental2_dom_Element_ScrollToScrollToOptionsOrXUnionType($thisArg) {\n    ScrollToScrollToOptionsOrXUnionType_$Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object($thisArg), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isDouble__elemental2_dom_Element_ScrollToScrollToOptionsOrXUnionType($thisArg) {\n    ScrollToScrollToOptionsOrXUnionType_$Overlay.$clinit();\n    return Double.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ScrollToScrollToOptionsOrXUnionType_$Overlay.$clinit \x3d function() {};\n    $Overlay \x3d goog.module.get('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(ScrollToScrollToOptionsOrXUnionType_$Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d ScrollToScrollToOptionsOrXUnionType_$Overlay; \n//# sourceMappingURL\x3dElement$ScrollToScrollToOptionsOrXUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$ScrollToScrollToOptionsOrXUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$ScrollToScrollToOptionsOrXUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.ScrollToScrollToOptionsOrXUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar ScrollToScrollToOptionsOrXUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollToScrollToOptionsOrXUnionType.$Overlay$impl');\nexports \x3d ScrollToScrollToOptionsOrXUnionType_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$SetAttributeNSValueUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$SetAttributeNSValueUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.SetAttributeNSValueUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__elemental2_dom_Element_SetAttributeNSValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asBoolean__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__elemental2_dom_Element_SetAttributeNSValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_SetAttributeNSValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBoolean__elemental2_dom_Element_SetAttributeNSValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Boolean.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isDouble__elemental2_dom_Element_SetAttributeNSValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Double.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_SetAttributeNSValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dElement$SetAttributeNSValueUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$SetAttributeNSValueUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$SetAttributeNSValueUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.SetAttributeNSValueUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Element.SetAttributeNSValueUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$SetAttributeValueUnionType$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$SetAttributeValueUnionType$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.SetAttributeValueUnionType.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Boolean \x3d goog.forwardDeclare('java.lang.Boolean$impl');\nlet Double \x3d goog.forwardDeclare('java.lang.Double$impl');\nlet j_l_Object \x3d goog.forwardDeclare('java.lang.Object$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {*} o\n   * @return {?}\n   * @public\n   */\n  static m_of__java_lang_Object(o) {\n    $Overlay.$clinit();\n    return /**@type {?} */ ($Casts.$to(Js.m_cast__java_lang_Object(o), $Overlay));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_asBoolean__elemental2_dom_Element_SetAttributeValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asBoolean__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {number}\n   * @public\n   */\n  static m_asDouble__elemental2_dom_Element_SetAttributeValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asDouble__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {?string}\n   * @public\n   */\n  static m_asString__elemental2_dom_Element_SetAttributeValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Js.m_asString__java_lang_Object($thisArg);\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isBoolean__elemental2_dom_Element_SetAttributeValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Boolean.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isDouble__elemental2_dom_Element_SetAttributeValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return Double.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} $thisArg\n   * @return {boolean}\n   * @public\n   */\n  static m_isString__elemental2_dom_Element_SetAttributeValueUnionType($thisArg) {\n    $Overlay.$clinit();\n    return j_l_String.$isInstance(/**@type {*} */ ($Casts.$to($thisArg, j_l_Object)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return true;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n    Boolean \x3d goog.module.get('java.lang.Boolean$impl');\n    Double \x3d goog.module.get('java.lang.Double$impl');\n    j_l_Object \x3d goog.module.get('java.lang.Object$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface($Overlay, $Util.$makeClassName('?'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dElement$SetAttributeValueUnionType$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$SetAttributeValueUnionType$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$SetAttributeValueUnionType$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.SetAttributeValueUnionType.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Boolean \x3d goog.require('java.lang.Boolean');\nconst _Double \x3d goog.require('java.lang.Double');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Js \x3d goog.require('jsinterop.base.Js');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.Element.SetAttributeValueUnionType.$Overlay$impl');\nexports \x3d $Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.Element.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.AfterNodesUnionType.$Overlay$impl');\nlet AppendNodesUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.AppendNodesUnionType.$Overlay$impl');\nlet BeforeNodesUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.BeforeNodesUnionType.$Overlay$impl');\nlet MatchesSelectorRefNodesUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.MatchesSelectorRefNodesUnionType.$Overlay$impl');\nlet PrependNodesUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.PrependNodesUnionType.$Overlay$impl');\nlet ReplaceWithNodesUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ReplaceWithNodesUnionType.$Overlay$impl');\nlet ScrollIntoViewTopType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay$impl');\nlet ScrollIntoViewTopUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ScrollIntoViewTopUnionType.$Overlay$impl');\nlet ScrollToScrollToOptionsOrXType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay$impl');\nlet ScrollToScrollToOptionsOrXUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.ScrollToScrollToOptionsOrXUnionType.$Overlay$impl');\nlet SetAttributeNSValueUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.SetAttributeNSValueUnionType.$Overlay$impl');\nlet SetAttributeValueUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.SetAttributeValueUnionType.$Overlay$impl');\nlet Node_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Node.$Overlay$impl');\nlet NodeList_$Overlay \x3d goog.forwardDeclare('elemental2.dom.NodeList.$Overlay$impl');\nlet Js \x3d goog.forwardDeclare('jsinterop.base.Js$impl');\n\n\nclass Element_$Overlay {\n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_after__elemental2_dom_Element__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.after(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_after__elemental2_dom_Element__arrayOf_java_lang_String($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.after(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_Element__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.append(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_append__elemental2_dom_Element__arrayOf_java_lang_String($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.append(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_before__elemental2_dom_Element__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.before(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_before__elemental2_dom_Element__arrayOf_java_lang_String($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.before(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} selectors\n   * @param {Node} refNodes\n   * @return {boolean}\n   * @public\n   */\n  static m_matchesSelector__elemental2_dom_Element__java_lang_String__elemental2_dom_Node($thisArg, selectors, refNodes) {\n    Element_$Overlay.$clinit();\n    return $thisArg.matchesSelector(selectors, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(refNodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} selectors\n   * @param {NodeList\x3c*\x3e} refNodes\n   * @return {boolean}\n   * @public\n   */\n  static m_matchesSelector__elemental2_dom_Element__java_lang_String__elemental2_dom_NodeList($thisArg, selectors, refNodes) {\n    Element_$Overlay.$clinit();\n    return $thisArg.matchesSelector(selectors, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(refNodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_prepend__elemental2_dom_Element__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.prepend(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_prepend__elemental2_dom_Element__arrayOf_java_lang_String($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.prepend(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3cNode\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_replaceWith__elemental2_dom_Element__arrayOf_elemental2_dom_Node($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.replaceWith(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {Array\x3c?string\x3e} nodes\n   * @return {void}\n   * @public\n   */\n  static m_replaceWith__elemental2_dom_Element__arrayOf_java_lang_String($thisArg, nodes) {\n    Element_$Overlay.$clinit();\n    $thisArg.replaceWith(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(nodes)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?} top\n   * @return {void}\n   * @public\n   */\n  static m_scrollIntoView__elemental2_dom_Element__elemental2_dom_Element_ScrollIntoViewTopType($thisArg, top) {\n    Element_$Overlay.$clinit();\n    $thisArg.scrollIntoView(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(top)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {boolean} top\n   * @return {void}\n   * @public\n   */\n  static m_scrollIntoView__elemental2_dom_Element__boolean($thisArg, top) {\n    Element_$Overlay.$clinit();\n    $thisArg.scrollIntoView(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(top)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?} scrollToOptionsOrX\n   * @param {number} y\n   * @return {void}\n   * @public\n   */\n  static m_scrollTo__elemental2_dom_Element__elemental2_dom_Element_ScrollToScrollToOptionsOrXType__double($thisArg, scrollToOptionsOrX, y) {\n    Element_$Overlay.$clinit();\n    $thisArg.scrollTo(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(scrollToOptionsOrX)), y);\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?} scrollToOptionsOrX\n   * @return {void}\n   * @public\n   */\n  static m_scrollTo__elemental2_dom_Element__elemental2_dom_Element_ScrollToScrollToOptionsOrXType($thisArg, scrollToOptionsOrX) {\n    Element_$Overlay.$clinit();\n    $thisArg.scrollTo(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(scrollToOptionsOrX)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {number} scrollToOptionsOrX\n   * @param {number} y\n   * @return {void}\n   * @public\n   */\n  static m_scrollTo__elemental2_dom_Element__double__double($thisArg, scrollToOptionsOrX, y) {\n    Element_$Overlay.$clinit();\n    $thisArg.scrollTo(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(scrollToOptionsOrX)), y);\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {number} scrollToOptionsOrX\n   * @return {void}\n   * @public\n   */\n  static m_scrollTo__elemental2_dom_Element__double($thisArg, scrollToOptionsOrX) {\n    Element_$Overlay.$clinit();\n    $thisArg.scrollTo(/**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(scrollToOptionsOrX)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} name\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static m_setAttribute__elemental2_dom_Element__java_lang_String__java_lang_String($thisArg, name, value) {\n    Element_$Overlay.$clinit();\n    $thisArg.setAttribute(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} name\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static m_setAttribute__elemental2_dom_Element__java_lang_String__boolean($thisArg, name, value) {\n    Element_$Overlay.$clinit();\n    $thisArg.setAttribute(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} name\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static m_setAttribute__elemental2_dom_Element__java_lang_String__double($thisArg, name, value) {\n    Element_$Overlay.$clinit();\n    $thisArg.setAttribute(name, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} namespaceURI\n   * @param {?string} qualifiedName\n   * @param {?string} value\n   * @return {void}\n   * @public\n   */\n  static m_setAttributeNS__elemental2_dom_Element__java_lang_String__java_lang_String__java_lang_String($thisArg, namespaceURI, qualifiedName, value) {\n    Element_$Overlay.$clinit();\n    $thisArg.setAttributeNS(namespaceURI, qualifiedName, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} namespaceURI\n   * @param {?string} qualifiedName\n   * @param {boolean} value\n   * @return {void}\n   * @public\n   */\n  static m_setAttributeNS__elemental2_dom_Element__java_lang_String__java_lang_String__boolean($thisArg, namespaceURI, qualifiedName, value) {\n    Element_$Overlay.$clinit();\n    $thisArg.setAttributeNS(namespaceURI, qualifiedName, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {Element} $thisArg\n   * @param {?string} namespaceURI\n   * @param {?string} qualifiedName\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static m_setAttributeNS__elemental2_dom_Element__java_lang_String__java_lang_String__double($thisArg, namespaceURI, qualifiedName, value) {\n    Element_$Overlay.$clinit();\n    $thisArg.setAttributeNS(namespaceURI, qualifiedName, /**@type {?} */ (Js.m_uncheckedCast__java_lang_Object(value)));\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof Element;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Element_$Overlay.$clinit \x3d function() {};\n    Js \x3d goog.module.get('jsinterop.base.Js$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(Element_$Overlay, $Util.$makeClassName('Element'));\n\n\nexports \x3d Element_$Overlay; \n//# sourceMappingURL\x3dElement$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/Element$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.Element$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.Element.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$Overlay \x3d goog.require('elemental2.dom.Element.AfterNodesUnionType.$Overlay');\nconst _AppendNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.AppendNodesUnionType.$Overlay');\nconst _BeforeNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.BeforeNodesUnionType.$Overlay');\nconst _MatchesSelectorRefNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.MatchesSelectorRefNodesUnionType.$Overlay');\nconst _PrependNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.PrependNodesUnionType.$Overlay');\nconst _ReplaceWithNodesUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.ReplaceWithNodesUnionType.$Overlay');\nconst _ScrollIntoViewTopType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollIntoViewTopType.$Overlay');\nconst _ScrollIntoViewTopUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollIntoViewTopUnionType.$Overlay');\nconst _ScrollToScrollToOptionsOrXType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollToScrollToOptionsOrXType.$Overlay');\nconst _ScrollToScrollToOptionsOrXUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.ScrollToScrollToOptionsOrXUnionType.$Overlay');\nconst _SetAttributeNSValueUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.SetAttributeNSValueUnionType.$Overlay');\nconst _SetAttributeValueUnionType_$Overlay \x3d goog.require('elemental2.dom.Element.SetAttributeValueUnionType.$Overlay');\nconst _Node_$Overlay \x3d goog.require('elemental2.dom.Node.$Overlay');\nconst _NodeList_$Overlay \x3d goog.require('elemental2.dom.NodeList.$Overlay');\nconst _Js \x3d goog.require('jsinterop.base.Js');\n\n\n// Re-exports the implementation.\nvar Element_$Overlay \x3d goog.require('elemental2.dom.Element.$Overlay$impl');\nexports \x3d Element_$Overlay;\n ");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLButtonElement$$Overlay.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLButtonElement$$Overlay.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('elemental2.dom.HTMLButtonElement.$Overlay$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\n\nclass $Overlay {\n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof HTMLButtonElement;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $Overlay.$clinit \x3d function() {};\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($Overlay, $Util.$makeClassName('HTMLButtonElement'));\n\n\nexports \x3d $Overlay; \n//# sourceMappingURL\x3dHTMLButtonElement$$Overlay.js.map");

//jsZipCache/a066cdb6a7bfe59dade819cdd73f53d9-elemental2-dom-1.0.0-SNAPSHOT.jar.js.zip!/elemental2/dom/HTMLButtonElement$$Overlay.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from elemental2.dom.HTMLButtonElement$$Overlay.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('elemental2.dom.HTMLButtonElement.$Overlay');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\n\n\n// Re-exports the implementation.\nvar $Overlay \x3d goog.require('elemental2.dom.HTMLButtonElement.$Overlay$impl');\nexports \x3d $Overlay;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashSet.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashSet.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('java.util.LinkedHashSet$impl');\n\n\nconst Cloneable \x3d goog.require('java.lang.Cloneable$impl');\nconst HashSet \x3d goog.require('java.util.HashSet$impl');\nconst Set \x3d goog.require('java.util.Set$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Iterable \x3d goog.forwardDeclare('java.lang.Iterable$impl');\nlet Collection \x3d goog.forwardDeclare('java.util.Collection$impl');\nlet LinkedHashMap \x3d goog.forwardDeclare('java.util.LinkedHashMap$impl');\nlet Spliterator \x3d goog.forwardDeclare('java.util.Spliterator$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet Stream \x3d goog.forwardDeclare('java.util.stream.Stream$impl');\n\n\n/**\n * @template C_E\n * @extends {HashSet\x3cC_E\x3e}\n * @implements {Set\x3cC_E\x3e}\n * @implements {Cloneable}\n  */\nclass LinkedHashSet extends HashSet {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashSet()'.\n   * @template C_E\n   * @return {!LinkedHashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__() {\n    LinkedHashSet.$clinit();\n    let $instance \x3d new LinkedHashSet();\n    $instance.$ctor__java_util_LinkedHashSet__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashSet()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashSet__() {\n    this.$ctor__java_util_HashSet__java_util_HashMap(/**@type {!LinkedHashMap\x3cC_E, *\x3e} */ (LinkedHashMap.$create__()));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashSet(Collection)'.\n   * @template C_E\n   * @param {Collection\x3c?\x3e} c\n   * @return {!LinkedHashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__java_util_Collection(c) {\n    LinkedHashSet.$clinit();\n    let $instance \x3d new LinkedHashSet();\n    $instance.$ctor__java_util_LinkedHashSet__java_util_Collection(c);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashSet(Collection)'.\n   * @param {Collection\x3c?\x3e} c\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashSet__java_util_Collection(c) {\n    this.$ctor__java_util_HashSet__java_util_HashMap(/**@type {!LinkedHashMap\x3cC_E, *\x3e} */ (LinkedHashMap.$create__()));\n    this.addAll(c);\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashSet(int)'.\n   * @template C_E\n   * @param {number} ignored\n   * @return {!LinkedHashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__int(ignored) {\n    LinkedHashSet.$clinit();\n    let $instance \x3d new LinkedHashSet();\n    $instance.$ctor__java_util_LinkedHashSet__int(ignored);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashSet(int)'.\n   * @param {number} ignored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashSet__int(ignored) {\n    this.$ctor__java_util_HashSet__java_util_HashMap(/**@type {!LinkedHashMap\x3cC_E, *\x3e} */ (LinkedHashMap.$create__int(ignored)));\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'LinkedHashSet(int, float)'.\n   * @template C_E\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {!LinkedHashSet\x3cC_E\x3e}\n   * @public\n   */\n  static $create__int__float(ignored, alsoIgnored) {\n    LinkedHashSet.$clinit();\n    let $instance \x3d new LinkedHashSet();\n    $instance.$ctor__java_util_LinkedHashSet__int__float(ignored, alsoIgnored);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'LinkedHashSet(int, float)'.\n   * @param {number} ignored\n   * @param {number} alsoIgnored\n   * @return {void}\n   * @public\n   */\n  $ctor__java_util_LinkedHashSet__int__float(ignored, alsoIgnored) {\n    this.$ctor__java_util_HashSet__java_util_HashMap(/**@type {!LinkedHashMap\x3cC_E, *\x3e} */ (LinkedHashMap.$create__int__float(ignored, alsoIgnored)));\n  }\n  \n  /**\n   * @override\n   * @return {*}\n   * @public\n   */\n  m_clone__() {\n    return /**@type {!LinkedHashSet\x3cC_E\x3e} */ (LinkedHashSet.$create__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Spliterator\x3cC_E\x3e}\n   * @public\n   */\n  m_spliterator__() {\n    return /**@type {Spliterator\x3cC_E\x3e} */ (Set.m_spliterator__$default__java_util_Set(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_parallelStream__() {\n    return /**@type {Stream\x3cC_E\x3e} */ (Collection.m_parallelStream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Predicate\x3c?\x3e} arg0\n   * @return {boolean}\n   * @public\n   */\n  m_removeIf__java_util_function_Predicate(arg0) {\n    return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate(this, arg0);\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @return {Stream\x3cC_E\x3e}\n   * @public\n   */\n  m_stream__() {\n    return /**@type {Stream\x3cC_E\x3e} */ (Collection.m_stream__$default__java_util_Collection(this));\n  }\n  \n  /**\n   * Default method forwarding stub.\n   * @override\n   * @param {Consumer\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_forEach__java_util_function_Consumer(arg0) {\n    Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer(this, arg0);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof LinkedHashSet;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, LinkedHashSet);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    LinkedHashSet.$clinit \x3d function() {};\n    Iterable \x3d goog.module.get('java.lang.Iterable$impl');\n    Collection \x3d goog.module.get('java.util.Collection$impl');\n    LinkedHashMap \x3d goog.module.get('java.util.LinkedHashMap$impl');\n    HashSet.$clinit();\n    Set.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(LinkedHashSet, $Util.$makeClassName('java.util.LinkedHashSet'));\n\n\nSet.$markImplementor(LinkedHashSet);\nCloneable.$markImplementor(LinkedHashSet);\n\n\nexports \x3d LinkedHashSet; \n//# sourceMappingURL\x3dLinkedHashSet.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/dependency/jre.js.zip!/java/util/LinkedHashSet.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from java.util.LinkedHashSet.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('java.util.LinkedHashSet');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _Cloneable \x3d goog.require('java.lang.Cloneable');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _Set \x3d goog.require('java.util.Set');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Iterable \x3d goog.require('java.lang.Iterable');\nconst _Collection \x3d goog.require('java.util.Collection');\nconst _LinkedHashMap \x3d goog.require('java.util.LinkedHashMap');\nconst _Spliterator \x3d goog.require('java.util.Spliterator');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _Stream \x3d goog.require('java.util.stream.Stream');\n\n\n// Re-exports the implementation.\nvar LinkedHashSet \x3d goog.require('java.util.LinkedHashSet$impl');\nexports \x3d LinkedHashSet;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HasHandlers.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HasHandlers.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.HasHandlers$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet Event \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event$impl');\nlet $LambdaAdaptor \x3d goog.forwardDeclare('org.gwtproject.event.shared.HasHandlers.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass HasHandlers {\n  /**\n   * @abstract\n   * @param {Event\x3c?\x3e} event\n   * @return {void}\n   * @public\n   */\n  m_fireEvent__org_gwtproject_event_shared_Event(event) {\n  }\n  \n  /**\n   * @param {?function(Event\x3c?\x3e):void} fn\n   * @return {HasHandlers}\n   * @public\n   */\n  static $adapt(fn) {\n    HasHandlers.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__org_gwtproject_event_shared_HasHandlers \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__org_gwtproject_event_shared_HasHandlers;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__org_gwtproject_event_shared_HasHandlers;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    HasHandlers.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('org.gwtproject.event.shared.HasHandlers.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(HasHandlers, $Util.$makeClassName('org.gwtproject.event.shared.HasHandlers'));\n\n\nHasHandlers.$markImplementor(/** @type {Function} */ (HasHandlers));\n\n\nexports \x3d HasHandlers; \n//# sourceMappingURL\x3dHasHandlers.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HasHandlers$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HasHandlers$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.HasHandlers.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst HasHandlers \x3d goog.require('org.gwtproject.event.shared.HasHandlers$impl');\n\nlet Event \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event$impl');\n\n\n/**\n * @implements {HasHandlers}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(Event\x3c?\x3e):void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function(Event\x3c?\x3e):void} */\n    this.f_$$fn__org_gwtproject_event_shared_HasHandlers_$LambdaAdaptor;\n    this.$ctor__org_gwtproject_event_shared_HasHandlers_$LambdaAdaptor__org_gwtproject_event_shared_HasHandlers_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function(Event\x3c?\x3e):void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_HasHandlers_$LambdaAdaptor__org_gwtproject_event_shared_HasHandlers_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__org_gwtproject_event_shared_HasHandlers_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @param {Event\x3c?\x3e} arg0\n   * @return {void}\n   * @public\n   */\n  m_fireEvent__org_gwtproject_event_shared_Event(arg0) {\n    {\n      let $function \x3d this.f_$$fn__org_gwtproject_event_shared_HasHandlers_$LambdaAdaptor;\n      $function(arg0);\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('org.gwtproject.event.shared.HasHandlers$$LambdaAdaptor'));\n\n\nHasHandlers.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dHasHandlers$$LambdaAdaptor.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HasHandlers$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HasHandlers$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.HasHandlers.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _HasHandlers \x3d goog.require('org.gwtproject.event.shared.HasHandlers');\nconst _Event \x3d goog.require('org.gwtproject.event.shared.Event');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('org.gwtproject.event.shared.HasHandlers.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/HasHandlers.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.HasHandlers.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.HasHandlers');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Event \x3d goog.require('org.gwtproject.event.shared.Event');\nconst _$LambdaAdaptor \x3d goog.require('org.gwtproject.event.shared.HasHandlers.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar HasHandlers \x3d goog.require('org.gwtproject.event.shared.HasHandlers$impl');\nexports \x3d HasHandlers;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/EventBus.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.EventBus.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.EventBus$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst HasHandlers \x3d goog.require('org.gwtproject.event.shared.HasHandlers$impl');\n\nlet Event \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event$impl');\nlet Type \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event.Type$impl');\nlet HandlerRegistration \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration$impl');\n\n\n/**\n * @abstract\n * @implements {HasHandlers}\n  */\nclass EventBus extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Initialization from constructor 'EventBus()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_EventBus__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @template M_H\n   * @param {Event\x3cM_H\x3e} event\n   * @param {M_H} handler\n   * @return {void}\n   * @public\n   */\n  static m_dispatchEvent__org_gwtproject_event_shared_Event__java_lang_Object(event, handler) {\n    EventBus.$clinit();\n    event.m_dispatch__java_lang_Object(handler);\n  }\n  \n  /**\n   * @param {Event\x3c?\x3e} event\n   * @param {*} source\n   * @return {void}\n   * @public\n   */\n  static m_setSourceOfEvent__org_gwtproject_event_shared_Event__java_lang_Object(event, source) {\n    EventBus.$clinit();\n    event.m_setSource__java_lang_Object(source);\n  }\n  \n  /**\n   * @abstract\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {M_H} handler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_addHandler__org_gwtproject_event_shared_Event_Type__java_lang_Object(type, handler) {\n  }\n  \n  /**\n   * @abstract\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_addHandlerToSource__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object(type, source, handler) {\n  }\n  \n  /**\n   * @abstract\n   * @override\n   * @param {Event\x3c?\x3e} event\n   * @return {void}\n   * @public\n   */\n  m_fireEvent__org_gwtproject_event_shared_Event(event) {\n  }\n  \n  /**\n   * @abstract\n   * @param {Event\x3c?\x3e} event\n   * @param {*} source\n   * @return {void}\n   * @public\n   */\n  m_fireEventFromSource__org_gwtproject_event_shared_Event__java_lang_Object(event, source) {\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof EventBus;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, EventBus);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    EventBus.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(EventBus, $Util.$makeClassName('org.gwtproject.event.shared.EventBus'));\n\n\nHasHandlers.$markImplementor(EventBus);\n\n\nexports \x3d EventBus; \n//# sourceMappingURL\x3dEventBus.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/EventBus.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.EventBus.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.EventBus');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _HasHandlers \x3d goog.require('org.gwtproject.event.shared.HasHandlers');\nconst _Event \x3d goog.require('org.gwtproject.event.shared.Event');\nconst _Type \x3d goog.require('org.gwtproject.event.shared.Event.Type');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\n\n\n// Re-exports the implementation.\nvar EventBus \x3d goog.require('org.gwtproject.event.shared.EventBus$impl');\nexports \x3d EventBus;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/SimpleEventBus$Command.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.SimpleEventBus$Command.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.SimpleEventBus.Command$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet $LambdaAdaptor \x3d goog.forwardDeclare('org.gwtproject.event.shared.SimpleEventBus.Command.$LambdaAdaptor$impl');\n\n\n/**\n * @interface\n */\nclass Command {\n  /**\n   * @abstract\n   * @return {void}\n   * @public\n   */\n  m_execute__() {\n  }\n  \n  /**\n   * @param {?function():void} fn\n   * @return {Command}\n   * @public\n   */\n  static $adapt(fn) {\n    Command.$clinit();\n    return new $LambdaAdaptor(fn);\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @public\n   */\n  static $markImplementor(classConstructor) {\n    /**\n     * @public {boolean}\n     */\n    classConstructor.prototype.$implements__org_gwtproject_event_shared_SimpleEventBus_Command \x3d true;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance !\x3d null \x26\x26 !!instance.$implements__org_gwtproject_event_shared_SimpleEventBus_Command;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return classConstructor !\x3d null \x26\x26 !!classConstructor.prototype.$implements__org_gwtproject_event_shared_SimpleEventBus_Command;\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    Command.$clinit \x3d function() {};\n    $LambdaAdaptor \x3d goog.module.get('org.gwtproject.event.shared.SimpleEventBus.Command.$LambdaAdaptor$impl');\n  }\n  \n  \n};\n\n$Util.$setClassMetadataForInterface(Command, $Util.$makeClassName('org.gwtproject.event.shared.SimpleEventBus$Command'));\n\n\nCommand.$markImplementor(/** @type {Function} */ (Command));\n\n\nexports \x3d Command; \n//# sourceMappingURL\x3dSimpleEventBus$Command.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/SimpleEventBus$Command$$LambdaAdaptor.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.SimpleEventBus$Command$$LambdaAdaptor.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.SimpleEventBus.Command.$LambdaAdaptor$impl');\n\n\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst Command \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus.Command$impl');\n\n\n/**\n * @implements {Command}\n  */\nclass $LambdaAdaptor extends j_l_Object {\n  /**\n   * JsConstructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @public\n   */\n  constructor(fn) {\n    $LambdaAdaptor.$clinit();\n    super();\n    /** @public {?function():void} */\n    this.f_$$fn__org_gwtproject_event_shared_SimpleEventBus_Command_$LambdaAdaptor;\n    this.$ctor__org_gwtproject_event_shared_SimpleEventBus_Command_$LambdaAdaptor__org_gwtproject_event_shared_SimpleEventBus_Command_$JsFunction(fn);\n  }\n  \n  /**\n   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.\n   * @param {?function():void} fn\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_SimpleEventBus_Command_$LambdaAdaptor__org_gwtproject_event_shared_SimpleEventBus_Command_$JsFunction(fn) {\n    this.$ctor__java_lang_Object__();\n    this.f_$$fn__org_gwtproject_event_shared_SimpleEventBus_Command_$LambdaAdaptor \x3d fn;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_execute__() {\n    {\n      let $function \x3d this.f_$$fn__org_gwtproject_event_shared_SimpleEventBus_Command_$LambdaAdaptor;\n      $function();\n    }\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof $LambdaAdaptor;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    $LambdaAdaptor.$clinit \x3d function() {};\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata($LambdaAdaptor, $Util.$makeClassName('org.gwtproject.event.shared.SimpleEventBus$Command$$LambdaAdaptor'));\n\n\nCommand.$markImplementor($LambdaAdaptor);\n\n\nexports \x3d $LambdaAdaptor; \n//# sourceMappingURL\x3dSimpleEventBus$Command$$LambdaAdaptor.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/SimpleEventBus$Command$$LambdaAdaptor.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.SimpleEventBus$Command$$LambdaAdaptor.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.SimpleEventBus.Command.$LambdaAdaptor');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _Command \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus.Command');\n\n\n// Re-exports the implementation.\nvar $LambdaAdaptor \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus.Command.$LambdaAdaptor$impl');\nexports \x3d $LambdaAdaptor;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/SimpleEventBus$Command.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.SimpleEventBus$Command.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.SimpleEventBus.Command');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _$LambdaAdaptor \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus.Command.$LambdaAdaptor');\n\n\n// Re-exports the implementation.\nvar Command \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus.Command$impl');\nexports \x3d Command;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/UmbrellaException.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.UmbrellaException.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.UmbrellaException$impl');\n\n\nconst RuntimeException \x3d goog.require('java.lang.RuntimeException$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet StringBuilder \x3d goog.forwardDeclare('java.lang.StringBuilder$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet Set \x3d goog.forwardDeclare('java.util.Set$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\nclass UmbrellaException extends RuntimeException {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {Set\x3cThrowable\x3e} */\n    this.f_causes__org_gwtproject_event_shared_UmbrellaException_;\n  }\n  \n  /**\n   * @param {Set\x3cThrowable\x3e} causes\n   * @return {Throwable}\n   * @public\n   */\n  static m_makeCause__java_util_Set(causes) {\n    UmbrellaException.$clinit();\n    return causes.isEmpty() ? null : /**@type {Throwable} */ ($Casts.$to(causes.m_iterator__().m_next__(), Throwable));\n  }\n  \n  /**\n   * @param {Set\x3cThrowable\x3e} causes\n   * @return {?string}\n   * @public\n   */\n  static m_makeMessage__java_util_Set(causes) {\n    UmbrellaException.$clinit();\n    let count \x3d causes.size();\n    if (count \x3d\x3d 0) {\n      return null;\n    }\n    let b \x3d StringBuilder.$create__java_lang_String(count \x3d\x3d 1 ? UmbrellaException.f_ONE__org_gwtproject_event_shared_UmbrellaException : count + j_l_String.m_valueOf__java_lang_Object(UmbrellaException.f_MULTIPLE__org_gwtproject_event_shared_UmbrellaException));\n    let first \x3d true;\n    for (let $iterator \x3d causes.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let t \x3d /**@type {Throwable} */ ($Casts.$to($iterator.m_next__(), Throwable));\n      if (first) {\n        first \x3d false;\n      } else {\n        b.m_append__java_lang_String(\"; \");\n      }\n      b.m_append__java_lang_String(t.m_getMessage__());\n    }\n    return b.toString();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UmbrellaException(Set)'.\n   * @param {Set\x3cThrowable\x3e} causes\n   * @return {!UmbrellaException}\n   * @public\n   */\n  static $create__java_util_Set(causes) {\n    UmbrellaException.$clinit();\n    let $instance \x3d new UmbrellaException();\n    $instance.$ctor__org_gwtproject_event_shared_UmbrellaException__java_util_Set(causes);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UmbrellaException(Set)'.\n   * @param {Set\x3cThrowable\x3e} causes\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_UmbrellaException__java_util_Set(causes) {\n    this.$ctor__java_lang_RuntimeException__java_lang_String__java_lang_Throwable(UmbrellaException.m_makeMessage__java_util_Set(causes), UmbrellaException.m_makeCause__java_util_Set(causes));\n    this.f_causes__org_gwtproject_event_shared_UmbrellaException_ \x3d causes;\n    let i \x3d 0;\n    for (let $iterator \x3d causes.m_iterator__(); $iterator.m_hasNext__(); ) {\n      let cause \x3d /**@type {Throwable} */ ($Casts.$to($iterator.m_next__(), Throwable));\n      if (i++ \x3d\x3d 0) {\n        continue;\n      }\n      this.m_addSuppressed__java_lang_Throwable(cause);\n    }\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'UmbrellaException()'.\n   * @return {!UmbrellaException}\n   * @public\n   */\n  static $create__() {\n    UmbrellaException.$clinit();\n    let $instance \x3d new UmbrellaException();\n    $instance.$ctor__org_gwtproject_event_shared_UmbrellaException__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'UmbrellaException()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_UmbrellaException__() {\n    this.$ctor__java_lang_RuntimeException__java_lang_String(UmbrellaException.f_MULTIPLE__org_gwtproject_event_shared_UmbrellaException);\n    this.f_causes__org_gwtproject_event_shared_UmbrellaException_ \x3d /**@type {Set\x3cThrowable\x3e} */ (Collections.m_emptySet__());\n  }\n  \n  /**\n   * @return {Set\x3cThrowable\x3e}\n   * @public\n   */\n  m_getCauses__() {\n    return this.f_causes__org_gwtproject_event_shared_UmbrellaException_;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof UmbrellaException;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, UmbrellaException);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    UmbrellaException.$clinit \x3d function() {};\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    StringBuilder \x3d goog.module.get('java.lang.StringBuilder$impl');\n    Throwable \x3d goog.module.get('java.lang.Throwable$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    RuntimeException.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(UmbrellaException, $Util.$makeClassName('org.gwtproject.event.shared.UmbrellaException'));\n\n\n/** @public {?string} @const */\nUmbrellaException.f_MULTIPLE__org_gwtproject_event_shared_UmbrellaException \x3d \" exceptions caught: \";\n\n\n/** @public {?string} @const */\nUmbrellaException.f_ONE__org_gwtproject_event_shared_UmbrellaException \x3d \"Exception caught: \";\n\n\n\n\nexports \x3d UmbrellaException; \n//# sourceMappingURL\x3dUmbrellaException.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/UmbrellaException.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.UmbrellaException.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.UmbrellaException');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _RuntimeException \x3d goog.require('java.lang.RuntimeException');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _StringBuilder \x3d goog.require('java.lang.StringBuilder');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _Set \x3d goog.require('java.util.Set');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar UmbrellaException \x3d goog.require('org.gwtproject.event.shared.UmbrellaException$impl');\nexports \x3d UmbrellaException;\n ");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/SimpleEventBus.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.SimpleEventBus.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('org.gwtproject.event.shared.SimpleEventBus$impl');\n\n\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\nconst EventBus \x3d goog.require('org.gwtproject.event.shared.EventBus$impl');\n\nlet NullPointerException \x3d goog.forwardDeclare('java.lang.NullPointerException$impl');\nlet Throwable \x3d goog.forwardDeclare('java.lang.Throwable$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet Collections \x3d goog.forwardDeclare('java.util.Collections$impl');\nlet HashMap \x3d goog.forwardDeclare('java.util.HashMap$impl');\nlet HashSet \x3d goog.forwardDeclare('java.util.HashSet$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet Event \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event$impl');\nlet Type \x3d goog.forwardDeclare('org.gwtproject.event.shared.Event.Type$impl');\nlet HandlerRegistration \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration$impl');\nlet Command \x3d goog.forwardDeclare('org.gwtproject.event.shared.SimpleEventBus.Command$impl');\nlet UmbrellaException \x3d goog.forwardDeclare('org.gwtproject.event.shared.UmbrellaException$impl');\nlet $Asserts \x3d goog.forwardDeclare('vmbootstrap.Asserts$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Exceptions \x3d goog.forwardDeclare('vmbootstrap.Exceptions$impl');\n\n\nclass SimpleEventBus extends EventBus {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {number} */\n    this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_ \x3d 0;\n    /** @public {List\x3cCommand\x3e} */\n    this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_;\n    /** @public {Map\x3cType\x3c?\x3e, Map\x3c*, List\x3c?\x3e\x3e\x3e} */\n    this.f_map__org_gwtproject_event_shared_SimpleEventBus_;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'SimpleEventBus()'.\n   * @return {!SimpleEventBus}\n   * @public\n   */\n  static $create__() {\n    SimpleEventBus.$clinit();\n    let $instance \x3d new SimpleEventBus();\n    $instance.$ctor__org_gwtproject_event_shared_SimpleEventBus__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'SimpleEventBus()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__org_gwtproject_event_shared_SimpleEventBus__() {\n    this.$ctor__org_gwtproject_event_shared_EventBus__();\n    this.$init__org_gwtproject_event_shared_SimpleEventBus();\n  }\n  \n  /**\n   * @override\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {M_H} handler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_addHandler__org_gwtproject_event_shared_Event_Type__java_lang_Object(type, handler) {\n    return this.m_doAdd__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, null, handler);\n  }\n  \n  /**\n   * @override\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_addHandlerToSource__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object(type, source, handler) {\n    if ($Equality.$same(source, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(\"Cannot add a handler with a null source\"));\n    }\n    return this.m_doAdd__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n  }\n  \n  /**\n   * @override\n   * @param {Event\x3c?\x3e} event\n   * @return {void}\n   * @public\n   */\n  m_fireEvent__org_gwtproject_event_shared_Event(event) {\n    this.m_doFire__org_gwtproject_event_shared_Event__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(event, null);\n  }\n  \n  /**\n   * @override\n   * @param {Event\x3c?\x3e} event\n   * @param {*} source\n   * @return {void}\n   * @public\n   */\n  m_fireEventFromSource__org_gwtproject_event_shared_Event__java_lang_Object(event, source) {\n    if ($Equality.$same(source, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(\"Cannot fire from a null source\"));\n    }\n    this.m_doFire__org_gwtproject_event_shared_Event__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(event, source);\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {void}\n   * @public\n   */\n  m_doRemove__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler) {\n    if (this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_ \x3e 0) {\n      this.m_enqueueRemove__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    } else {\n      this.m_doRemoveNow__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    }\n  }\n  \n  /**\n   * @param {Command} command\n   * @return {void}\n   * @public\n   */\n  m_defer__org_gwtproject_event_shared_SimpleEventBus_Command_$p_org_gwtproject_event_shared_SimpleEventBus(command) {\n    if ($Equality.$same(this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_, null)) {\n      this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_ \x3d /**@type {!ArrayList\x3cCommand\x3e} */ (ArrayList.$create__());\n    }\n    this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_.add(command);\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_doAdd__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler) {\n    if ($Equality.$same(type, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(\"Cannot add a handler with a null type\"));\n    }\n    if ($Equality.$same(handler, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(\"Cannot add a null handler\"));\n    }\n    if (this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_ \x3e 0) {\n      this.m_enqueueAdd__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    } else {\n      this.m_doAddNow__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    }\n    return HandlerRegistration.$adapt((() \x3d\x3e{\n      this.m_doRemove__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    }));\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {void}\n   * @public\n   */\n  m_doAddNow__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler) {\n    let l \x3d /**@type {List\x3c*\x3e} */ (this.m_ensureHandlerList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source));\n    l.add(handler);\n  }\n  \n  /**\n   * @template M_H\n   * @param {Event\x3cM_H\x3e} event\n   * @param {*} source\n   * @return {void}\n   * @public\n   */\n  m_doFire__org_gwtproject_event_shared_Event__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(event, source) {\n    if ($Equality.$same(event, null)) {\n      throw $Exceptions.toJs(NullPointerException.$create__java_lang_String(\"Cannot fire null event\"));\n    }\n    try {\n      this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_++;\n      if (!$Equality.$same(source, null)) {\n        EventBus.m_setSourceOfEvent__org_gwtproject_event_shared_Event__java_lang_Object(event, source);\n      }\n      let handlers \x3d /**@type {List\x3c*\x3e} */ (this.m_getDispatchList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(event.m_getAssociatedType__(), source));\n      let causes \x3d null;\n      for (let $iterator \x3d handlers.m_iterator__(); $iterator.m_hasNext__(); ) {\n        let handler \x3d $iterator.m_next__();\n        try {\n          EventBus.m_dispatchEvent__org_gwtproject_event_shared_Event__java_lang_Object(event, handler);\n        } catch (__$exc) {\n          __$exc \x3d $Exceptions.toJava(__$exc);\n          if (Throwable.$isInstance(__$exc)) {\n            let e \x3d /**@type {Throwable} */ (__$exc);\n            if ($Equality.$same(causes, null)) {\n              causes \x3d /**@type {!HashSet\x3cThrowable\x3e} */ (HashSet.$create__());\n            }\n            causes.add(e);\n          } else {\n            throw $Exceptions.toJs(__$exc);\n          }\n        }\n      }\n      if (!$Equality.$same(causes, null)) {\n        throw $Exceptions.toJs(UmbrellaException.$create__java_util_Set(causes));\n      }\n    } finally {\n      this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_--;\n      if (this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_ \x3d\x3d 0) {\n        this.m_handleQueuedAddsAndRemoves___$p_org_gwtproject_event_shared_SimpleEventBus();\n      }\n    }\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {void}\n   * @public\n   */\n  m_doRemoveNow__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler) {\n    let l \x3d /**@type {List\x3c*\x3e} */ (this.m_getHandlerList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source));\n    let removed \x3d l.remove(handler);\n    if (removed \x26\x26 l.isEmpty()) {\n      this.m_prune__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source);\n    }\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {void}\n   * @public\n   */\n  m_enqueueAdd__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler) {\n    this.m_defer__org_gwtproject_event_shared_SimpleEventBus_Command_$p_org_gwtproject_event_shared_SimpleEventBus(Command.$adapt((() \x3d\x3e{\n      this.m_doAddNow__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    })));\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @param {M_H} handler\n   * @return {void}\n   * @public\n   */\n  m_enqueueRemove__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler) {\n    this.m_defer__org_gwtproject_event_shared_SimpleEventBus_Command_$p_org_gwtproject_event_shared_SimpleEventBus(Command.$adapt((() \x3d\x3e{\n      this.m_doRemoveNow__org_gwtproject_event_shared_Event_Type__java_lang_Object__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source, handler);\n    })));\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @return {List\x3cM_H\x3e}\n   * @public\n   */\n  m_ensureHandlerList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source) {\n    let sourceMap \x3d /**@type {Map\x3c*, List\x3c?\x3e\x3e} */ ($Casts.$to(this.f_map__org_gwtproject_event_shared_SimpleEventBus_.m_computeIfAbsent__java_lang_Object__java_util_function_Function(type, j_u_function_Function.$adapt(((/** Type\x3c*\x3e */ k) \x3d\x3e{\n      return /**@type {!HashMap\x3c*, List\x3c?\x3e\x3e} */ (HashMap.$create__());\n    }))), Map));\n    let handlers \x3d /**@type {List\x3c*\x3e} */ ($Casts.$to(sourceMap.get(source), List));\n    if ($Equality.$same(handlers, null)) {\n      handlers \x3d /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__());\n      sourceMap.put(source, handlers);\n    }\n    return handlers;\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @return {List\x3cM_H\x3e}\n   * @public\n   */\n  m_getDispatchList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source) {\n    let directHandlers \x3d /**@type {List\x3c*\x3e} */ (this.m_getHandlerList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source));\n    if ($Equality.$same(source, null)) {\n      return directHandlers;\n    }\n    let globalHandlers \x3d /**@type {List\x3c*\x3e} */ (this.m_getHandlerList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, null));\n    let rtn \x3d /**@type {!ArrayList\x3c*\x3e} */ (ArrayList.$create__java_util_Collection(directHandlers));\n    rtn.addAll(globalHandlers);\n    return rtn;\n  }\n  \n  /**\n   * @template M_H\n   * @param {Type\x3cM_H\x3e} type\n   * @param {*} source\n   * @return {List\x3cM_H\x3e}\n   * @public\n   */\n  m_getHandlerList__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source) {\n    let sourceMap \x3d /**@type {Map\x3c*, List\x3c?\x3e\x3e} */ ($Casts.$to(this.f_map__org_gwtproject_event_shared_SimpleEventBus_.get(type), Map));\n    if ($Equality.$same(sourceMap, null)) {\n      return /**@type {List\x3c*\x3e} */ (Collections.m_emptyList__());\n    }\n    let handlers \x3d /**@type {List\x3c*\x3e} */ ($Casts.$to(sourceMap.get(source), List));\n    if ($Equality.$same(handlers, null)) {\n      return /**@type {List\x3c*\x3e} */ (Collections.m_emptyList__());\n    }\n    return handlers;\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_handleQueuedAddsAndRemoves___$p_org_gwtproject_event_shared_SimpleEventBus() {\n    if (!$Equality.$same(this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_, null)) {\n      try {\n        for (let $iterator \x3d this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_.m_iterator__(); $iterator.m_hasNext__(); ) {\n          let c \x3d /**@type {Command} */ ($Casts.$to($iterator.m_next__(), Command));\n          c.m_execute__();\n        }\n      } finally {\n        this.f_deferredDeltas__org_gwtproject_event_shared_SimpleEventBus_ \x3d null;\n      }\n    }\n  }\n  \n  /**\n   * @param {Type\x3c?\x3e} type\n   * @param {*} source\n   * @return {void}\n   * @public\n   */\n  m_prune__org_gwtproject_event_shared_Event_Type__java_lang_Object_$p_org_gwtproject_event_shared_SimpleEventBus(type, source) {\n    let sourceMap \x3d /**@type {Map\x3c*, List\x3c?\x3e\x3e} */ ($Casts.$to(this.f_map__org_gwtproject_event_shared_SimpleEventBus_.get(type), Map));\n    let pruned \x3d /**@type {List\x3c*\x3e} */ ($Casts.$to(sourceMap.remove(source), List));\n    $Asserts.$assertWithMessage(!$Equality.$same(pruned, null), \"Can't prune what wasn't there\");\n    $Asserts.$assertWithMessage(pruned.isEmpty(), \"Pruned unempty list!\");\n    if (sourceMap.isEmpty()) {\n      this.f_map__org_gwtproject_event_shared_SimpleEventBus_.remove(type);\n    }\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__org_gwtproject_event_shared_SimpleEventBus() {\n    this.f_firingDepth__org_gwtproject_event_shared_SimpleEventBus_ \x3d 0;\n    this.f_map__org_gwtproject_event_shared_SimpleEventBus_ \x3d /**@type {!HashMap\x3cType\x3c?\x3e, Map\x3c*, List\x3c?\x3e\x3e\x3e} */ (HashMap.$create__());\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof SimpleEventBus;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, SimpleEventBus);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    SimpleEventBus.$clinit \x3d function() {};\n    NullPointerException \x3d goog.module.get('java.lang.NullPointerException$impl');\n    Throwable \x3d goog.module.get('java.lang.Throwable$impl');\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    Collections \x3d goog.module.get('java.util.Collections$impl');\n    HashMap \x3d goog.module.get('java.util.HashMap$impl');\n    HashSet \x3d goog.module.get('java.util.HashSet$impl');\n    List \x3d goog.module.get('java.util.List$impl');\n    Map \x3d goog.module.get('java.util.Map$impl');\n    j_u_function_Function \x3d goog.module.get('java.util.function.Function$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    HandlerRegistration \x3d goog.module.get('org.gwtproject.event.shared.HandlerRegistration$impl');\n    Command \x3d goog.module.get('org.gwtproject.event.shared.SimpleEventBus.Command$impl');\n    UmbrellaException \x3d goog.module.get('org.gwtproject.event.shared.UmbrellaException$impl');\n    $Asserts \x3d goog.module.get('vmbootstrap.Asserts$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Exceptions \x3d goog.module.get('vmbootstrap.Exceptions$impl');\n    EventBus.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(SimpleEventBus, $Util.$makeClassName('org.gwtproject.event.shared.SimpleEventBus'));\n\n\n\n\nexports \x3d SimpleEventBus; \n//# sourceMappingURL\x3dSimpleEventBus.js.map");

//jsZipCache/f76c37384b054fedafe53317e81545f0-gwt-event-HEAD-SNAPSHOT.jar.js.zip!/org/gwtproject/event/shared/SimpleEventBus.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from org.gwtproject.event.shared.SimpleEventBus.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('org.gwtproject.event.shared.SimpleEventBus');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _EventBus \x3d goog.require('org.gwtproject.event.shared.EventBus');\nconst _NullPointerException \x3d goog.require('java.lang.NullPointerException');\nconst _Throwable \x3d goog.require('java.lang.Throwable');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _Collections \x3d goog.require('java.util.Collections');\nconst _HashMap \x3d goog.require('java.util.HashMap');\nconst _HashSet \x3d goog.require('java.util.HashSet');\nconst _List \x3d goog.require('java.util.List');\nconst _Map \x3d goog.require('java.util.Map');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _Event \x3d goog.require('org.gwtproject.event.shared.Event');\nconst _Type \x3d goog.require('org.gwtproject.event.shared.Event.Type');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\nconst _Command \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus.Command');\nconst _UmbrellaException \x3d goog.require('org.gwtproject.event.shared.UmbrellaException');\nconst _$Asserts \x3d goog.require('vmbootstrap.Asserts');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Exceptions \x3d goog.require('vmbootstrap.Exceptions');\n\n\n// Re-exports the implementation.\nvar SimpleEventBus \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus$impl');\nexports \x3d SimpleEventBus;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\n\n\nconst HasSelectionHandlers \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet SelectionEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\nlet SelectionHandler \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\nlet StyleInjector \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.StyleInjector$impl');\nlet $1 \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent.$1$impl');\nlet $2 \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent.$2$impl');\nlet $3 \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent.$3$impl');\nlet $LambdaAdaptor$3 \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent.$LambdaAdaptor$3$impl');\nlet DrawMode \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent.DrawMode$impl');\nlet DragTracker \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.DragTracker$impl');\nlet Point \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Point$impl');\nlet Rect \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Rect$impl');\nlet CanvasRenderingContext2D_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\nlet FillStyleUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.FillStyleUnionType.$Overlay$impl');\nlet StrokeStyleUnionType_$Overlay \x3d goog.forwardDeclare('elemental2.dom.CanvasRenderingContext2D.StrokeStyleUnionType.$Overlay$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.$Overlay$impl');\nlet Element_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Element.$Overlay$impl');\nlet Event_$Overlay \x3d goog.forwardDeclare('elemental2.dom.Event.$Overlay$impl');\nlet HTMLButtonElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLButtonElement.$Overlay$impl');\nlet HTMLCanvasElement_$Overlay \x3d goog.forwardDeclare('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\nlet MouseEvent_$Overlay \x3d goog.forwardDeclare('elemental2.dom.MouseEvent.$Overlay$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet ArrayList \x3d goog.forwardDeclare('java.util.ArrayList$impl');\nlet LinkedHashMap \x3d goog.forwardDeclare('java.util.LinkedHashMap$impl');\nlet LinkedHashSet \x3d goog.forwardDeclare('java.util.LinkedHashSet$impl');\nlet List \x3d goog.forwardDeclare('java.util.List$impl');\nlet Map \x3d goog.forwardDeclare('java.util.Map$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet Consumer \x3d goog.forwardDeclare('java.util.function.Consumer$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet Predicate \x3d goog.forwardDeclare('java.util.function.Predicate$impl');\nlet JsArrayLike_$Overlay \x3d goog.forwardDeclare('jsinterop.base.JsArrayLike.$Overlay$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet EventBus \x3d goog.forwardDeclare('org.gwtproject.event.shared.EventBus$impl');\nlet HandlerRegistration \x3d goog.forwardDeclare('org.gwtproject.event.shared.HandlerRegistration$impl');\nlet SimpleEventBus \x3d goog.forwardDeclare('org.gwtproject.event.shared.SimpleEventBus$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\nlet $Primitives \x3d goog.forwardDeclare('vmbootstrap.Primitives$impl');\n\n\n/**\n * @template C_B, C_L\n * @implements {HasSelectionHandlers\x3cC_B\x3e}\n  */\nclass ConnectedComponent extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    /** @public {EventBus} */\n    this.f_handlerManager__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {Element} */\n    this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {HTMLButtonElement} */\n    this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {HTMLButtonElement} */\n    this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {HTMLButtonElement} */\n    this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {Element} */\n    this.f_canvasWrapper__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {HTMLCanvasElement} */\n    this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {DrawMode} */\n    this.f_drawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {Map\x3c?string, C_B\x3e} */\n    this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {j_u_function_Function\x3cC_B, ?string\x3e} */\n    this.f_boxIdFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {j_u_function_Function\x3cC_B, Rect\x3e} */\n    this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {j_u_function_Function\x3cRect, C_B\x3e} */\n    this.f_boxCreator__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {j_u_function_Function\x3cC_B, ?string\x3e} */\n    this.f_boxTextFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {BiConsumer\x3cC_B, Rect\x3e} */\n    this.f_boxPositionUpdater__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {LinkedHashSet\x3cC_L\x3e} */\n    this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {j_u_function_Function\x3cC_L, ?string\x3e} */\n    this.f_startFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {j_u_function_Function\x3cC_L, ?string\x3e} */\n    this.f_endFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {BiFunction\x3cC_B, C_B, C_L\x3e} */\n    this.f_lineCreator__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {DragTracker} */\n    this.f_dragTracker__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {C_B} */\n    this.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {Point} */\n    this.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n    /** @public {boolean} */\n    this.f_frameScheduled__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d false;\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'ConnectedComponent(Function, Function, Function, Function, BiConsumer, Function, Function, BiFunction)'.\n   * @template C_B, C_L\n   * @param {j_u_function_Function\x3cC_B, ?string\x3e} boxIdFunct\n   * @param {j_u_function_Function\x3cC_B, Rect\x3e} boxPosFunct\n   * @param {j_u_function_Function\x3cRect, C_B\x3e} boxCreator\n   * @param {j_u_function_Function\x3cC_B, ?string\x3e} boxTextFunct\n   * @param {BiConsumer\x3cC_B, Rect\x3e} boxPositionUpdater\n   * @param {j_u_function_Function\x3cC_L, ?string\x3e} startFunct\n   * @param {j_u_function_Function\x3cC_L, ?string\x3e} endFunct\n   * @param {BiFunction\x3cC_B, C_B, C_L\x3e} lineCreator\n   * @return {!ConnectedComponent\x3cC_B, C_L\x3e}\n   * @public\n   */\n  static $create__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_BiConsumer__java_util_function_Function__java_util_function_Function__java_util_function_BiFunction(boxIdFunct, boxPosFunct, boxCreator, boxTextFunct, boxPositionUpdater, startFunct, endFunct, lineCreator) {\n    ConnectedComponent.$clinit();\n    let $instance \x3d new ConnectedComponent();\n    $instance.$ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_BiConsumer__java_util_function_Function__java_util_function_Function__java_util_function_BiFunction(boxIdFunct, boxPosFunct, boxCreator, boxTextFunct, boxPositionUpdater, startFunct, endFunct, lineCreator);\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'ConnectedComponent(Function, Function, Function, Function, BiConsumer, Function, Function, BiFunction)'.\n   * @param {j_u_function_Function\x3cC_B, ?string\x3e} boxIdFunct\n   * @param {j_u_function_Function\x3cC_B, Rect\x3e} boxPosFunct\n   * @param {j_u_function_Function\x3cRect, C_B\x3e} boxCreator\n   * @param {j_u_function_Function\x3cC_B, ?string\x3e} boxTextFunct\n   * @param {BiConsumer\x3cC_B, Rect\x3e} boxPositionUpdater\n   * @param {j_u_function_Function\x3cC_L, ?string\x3e} startFunct\n   * @param {j_u_function_Function\x3cC_L, ?string\x3e} endFunct\n   * @param {BiFunction\x3cC_B, C_B, C_L\x3e} lineCreator\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_lib_ConnectedComponent__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_BiConsumer__java_util_function_Function__java_util_function_Function__java_util_function_BiFunction(boxIdFunct, boxPosFunct, boxCreator, boxTextFunct, boxPositionUpdater, startFunct, endFunct, lineCreator) {\n    this.$ctor__java_lang_Object__();\n    this.$init__com_vertispan_draw_connected_client_lib_ConnectedComponent();\n    this.f_boxIdFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d boxIdFunct;\n    this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d boxPosFunct;\n    this.f_boxCreator__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d boxCreator;\n    this.f_boxTextFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d boxTextFunct;\n    this.f_boxPositionUpdater__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d boxPositionUpdater;\n    this.f_startFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d startFunct;\n    this.f_endFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d endFunct;\n    this.f_lineCreator__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d lineCreator;\n    this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d $Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"div\");\n    this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_.className \x3d \"boxes-and-lines\";\n    let buttonBar \x3d $Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"div\");\n    buttonBar.classList.add(\"button-bar\");\n    this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d /**@type {HTMLButtonElement} */ ($Casts.$to($Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"button\"), HTMLButtonElement_$Overlay));\n    this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.onclick \x3d ((/** Event */ arg0) \x3d\x3e{\n      return this.m_drawBox__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(arg0);\n    });\n    this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.innerHTML \x3d \"Draw Box\";\n    this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.className \x3d \"button\";\n    this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d /**@type {HTMLButtonElement} */ ($Casts.$to($Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"button\"), HTMLButtonElement_$Overlay));\n    this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.onclick \x3d ((/** Event */ arg0$1$) \x3d\x3e{\n      return this.m_drawLine__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(arg0$1$);\n    });\n    this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.innerHTML \x3d \"Draw Line\";\n    this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.className \x3d \"button\";\n    this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d /**@type {HTMLButtonElement} */ ($Casts.$to($Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"button\"), HTMLButtonElement_$Overlay));\n    this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.onclick \x3d ((/** Event */ arg0$2$) \x3d\x3e{\n      return this.m_move__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(arg0$2$);\n    });\n    this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.innerHTML \x3d \"Move\";\n    this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.className \x3d \"button\";\n    this.f_canvasWrapper__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d $Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"div\");\n    this.f_canvasWrapper__com_vertispan_draw_connected_client_lib_ConnectedComponent_.className \x3d \"canvas-wrapper\";\n    this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d /**@type {HTMLCanvasElement} */ ($Casts.$to($Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.createElement(\"canvas\"), HTMLCanvasElement_$Overlay));\n    this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.onmousedown \x3d ((/** Event */ arg0$3$) \x3d\x3e{\n      return this.m_canvasMouseDown__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(arg0$3$);\n    });\n    buttonBar.appendChild(this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_);\n    buttonBar.appendChild(this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_);\n    buttonBar.appendChild(this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_);\n    this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_.appendChild(buttonBar);\n    this.f_canvasWrapper__com_vertispan_draw_connected_client_lib_ConnectedComponent_.appendChild(this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_);\n    this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_.appendChild(this.f_canvasWrapper__com_vertispan_draw_connected_client_lib_ConnectedComponent_);\n    this.m_setDrawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(DrawMode.f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    StyleInjector.m_inject__java_lang_String(\"html,body{width:100%;height:100%;margin:0;}\\n\" + \"body { display: flex; }\\n\" + \"\\n\" + \"\\n\" + \".button { background-color: white; }\\n\" + \"button.button-on { background-color:gray; }\\n\" + \"\\n\" + \".boxes-and-lines { display: flex; flex-flow: row nowrap; align-items: stretch; flex: 1 1 auto; }\\n\" + \"\\n\" + \".button-bar { flex: 0 1 auto; }\\n\" + \".button-bar button {display:block}\\n\" + \"\\n\" + \".canvas-wrapper { flex: 1 1 auto; overflow: hidden; }\");\n    window.window.addEventListener(\"resize\", new $LambdaAdaptor$3(((/** Event */ event) \x3d\x3e{\n      this.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n    })));\n  }\n  \n  /**\n   * @return {Element}\n   * @public\n   */\n  m_getElement__() {\n    return this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_;\n  }\n  \n  /**\n   * @override\n   * @param {SelectionHandler\x3cC_B\x3e} selectionHandler\n   * @return {HandlerRegistration}\n   * @public\n   */\n  m_addSelectionHandler__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler(selectionHandler) {\n    return this.f_handlerManager__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_addHandler__org_gwtproject_event_shared_Event_Type__java_lang_Object(SelectionEvent.m_getType__(), selectionHandler);\n  }\n  \n  /**\n   * @override\n   * @param {SelectionEvent\x3cC_B\x3e} gwtEvent\n   * @return {void}\n   * @public\n   */\n  m_fireEvent__com_vertispan_draw_connected_client_blank_SelectionEvent(gwtEvent) {\n    this.f_handlerManager__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_fireEvent__org_gwtproject_event_shared_Event(gwtEvent);\n  }\n  \n  /**\n   * @param {DrawMode} drawMode\n   * @return {void}\n   * @public\n   */\n  m_setDrawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(drawMode) {\n    if (!$Equality.$same(this.f_drawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_, drawMode)) {\n      let buttons \x3d this.f_root__com_vertispan_draw_connected_client_lib_ConnectedComponent_.querySelectorAll(\"button.button\");\n      for (let i \x3d 0; i \x3c JsArrayLike_$Overlay.m_getLength__jsinterop_base_JsArrayLike(buttons); i++) {\n        /**@type {Element} */ ($Casts.$to(JsArrayLike_$Overlay.m_getAt__jsinterop_base_JsArrayLike__int(buttons, i), Element_$Overlay)).classList.remove(\"button-on\");\n      }\n      switch (drawMode.ordinal()) {\n        case DrawMode.$ordinal$f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode: \n          this.f_moveTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.classList.add(\"button-on\");\n          break;\n        case DrawMode.$ordinal$f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode: \n          this.f_drawBoxTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.classList.add(\"button-on\");\n          break;\n        case DrawMode.$ordinal$f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode: \n          this.f_drawLineTool__com_vertispan_draw_connected_client_lib_ConnectedComponent_.classList.add(\"button-on\");\n          break;\n      }\n      this.f_drawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d drawMode;\n    }\n  }\n  \n  /**\n   * @param {Event} event\n   * @return {?void}\n   * @public\n   */\n  m_drawBox__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event) {\n    this.m_setDrawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(DrawMode.f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    return null;\n  }\n  \n  /**\n   * @param {Event} event\n   * @return {?void}\n   * @public\n   */\n  m_drawLine__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event) {\n    this.m_setDrawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(DrawMode.f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    return null;\n  }\n  \n  /**\n   * @param {Event} event\n   * @return {?void}\n   * @public\n   */\n  m_move__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event) {\n    this.m_setDrawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode(DrawMode.f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode);\n    return null;\n  }\n  \n  /**\n   * @param {Event} event\n   * @return {?void}\n   * @public\n   */\n  m_canvasMouseDown__elemental2_dom_Event_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event) {\n    if ($Equality.$same(this.f_drawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_, DrawMode.f_DRAW_BOX__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode)) {\n      this.f_dragTracker__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_start__elemental2_dom_Event__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling(event, /**@type {!$1\x3cC_B, C_L\x3e} */ ($1.$create__com_vertispan_draw_connected_client_lib_ConnectedComponent(this)));\n      return null;\n    } else if ($Equality.$same(this.f_drawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_, DrawMode.f_DRAW_LINE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode)) {\n      this.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d this.m_boxAtPoint__com_vertispan_draw_connected_client_lib_Point_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(this.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(/**@type {MouseEvent} */ ($Casts.$to(event, MouseEvent_$Overlay))));\n      this.f_dragTracker__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_start__elemental2_dom_Event__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling(event, /**@type {!$2\x3cC_B, C_L\x3e} */ ($2.$create__com_vertispan_draw_connected_client_lib_ConnectedComponent(this)));\n    } else if ($Equality.$same(this.f_drawMode__com_vertispan_draw_connected_client_lib_ConnectedComponent_, DrawMode.f_MOVE__com_vertispan_draw_connected_client_lib_ConnectedComponent_DrawMode)) {\n      let mouseStartPosition \x3d this.m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(/**@type {MouseEvent} */ ($Casts.$to(event, MouseEvent_$Overlay)));\n      let box \x3d this.m_boxAtPoint__com_vertispan_draw_connected_client_lib_Point_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(mouseStartPosition);\n      let start \x3d $Equality.$same(box, null) ? null : /**@type {Rect} */ ($Casts.$to(this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), Rect));\n      this.f_dragTracker__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_start__elemental2_dom_Event__com_vertispan_draw_connected_client_lib_DragTracker_DragHandling(event, /**@type {!$3\x3cC_B, C_L\x3e} */ ($3.$create__com_vertispan_draw_connected_client_lib_ConnectedComponent__com_vertispan_draw_connected_client_lib_Rect__com_vertispan_draw_connected_client_lib_Point__java_lang_Object(this, start, mouseStartPosition, box)));\n    }\n    return null;\n  }\n  \n  /**\n   * @param {Point} point\n   * @return {C_B}\n   * @public\n   */\n  m_boxAtPoint__com_vertispan_draw_connected_client_lib_Point_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(point) {\n    return this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.values().m_stream__().m_filter__java_util_function_Predicate(Predicate.$adapt(((/** * */ box) \x3d\x3e{\n      return /**@type {Rect} */ ($Casts.$to(this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), Rect)).m_contains__com_vertispan_draw_connected_client_lib_Point(point);\n    }))).m_findFirst__().m_orElse__java_lang_Object(null);\n  }\n  \n  /**\n   * @param {MouseEvent} event\n   * @return {Point}\n   * @public\n   */\n  m_pointFromMouseEvent__elemental2_dom_MouseEvent_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(event) {\n    return Point.$create__double__double(event.pageX - this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.offsetLeft, event.pageY - this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.offsetTop);\n  }\n  \n  /**\n   * @param {C_B} box\n   * @return {void}\n   * @public\n   */\n  m_editBox__java_lang_Object_$p_com_vertispan_draw_connected_client_lib_ConnectedComponent(box) {\n    SelectionEvent.m_fire__com_vertispan_draw_connected_client_blank_SelectionEvent_HasSelectionHandlers__java_lang_Object(this, box);\n  }\n  \n  /**\n   * @param {C_L} line\n   * @return {void}\n   * @public\n   */\n  m_addLine__java_lang_Object(line) {\n    this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_.add(line);\n    this.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @param {C_L} line\n   * @return {void}\n   * @public\n   */\n  m_removeLine__java_lang_Object(line) {\n    this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_.remove(line);\n    this.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @param {C_B} box\n   * @return {void}\n   * @public\n   */\n  m_addBox__java_lang_Object(box) {\n    let id \x3d /**@type {?string} */ ($Casts.$to(this.f_boxIdFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), j_l_String));\n    this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.put(id, box);\n    this.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @param {C_B} box\n   * @return {void}\n   * @public\n   */\n  m_removeBox__java_lang_Object(box) {\n    let id \x3d /**@type {?string} */ ($Casts.$to(this.f_boxIdFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), j_l_String));\n    this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.remove(id);\n    this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_removeIf__java_util_function_Predicate(Predicate.$adapt(((/** * */ line) \x3d\x3e{\n      return j_l_String.m_equals__java_lang_String__java_lang_Object(/**@type {?string} */ ($Casts.$to(this.f_startFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(line), j_l_String)), id) || j_l_String.m_equals__java_lang_String__java_lang_Object(/**@type {?string} */ ($Casts.$to(this.f_endFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(line), j_l_String)), id);\n    })));\n    this.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @param {C_B} box\n   * @return {void}\n   * @public\n   */\n  m_updateBox__java_lang_Object(box) {\n    let id \x3d /**@type {?string} */ ($Casts.$to(this.f_boxIdFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), j_l_String));\n    this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.put(id, box);\n    this.m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n  }\n  \n  /**\n   * @return {List\x3cC_B\x3e}\n   * @public\n   */\n  m_getBoxes__() {\n    return /**@type {!ArrayList\x3cC_B\x3e} */ (ArrayList.$create__java_util_Collection(this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.values()));\n  }\n  \n  /**\n   * @return {List\x3cC_L\x3e}\n   * @public\n   */\n  m_getLines__() {\n    return /**@type {!ArrayList\x3cC_L\x3e} */ (ArrayList.$create__java_util_Collection(this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_));\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_scheduleFrame___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent() {\n    if (this.f_frameScheduled__com_vertispan_draw_connected_client_lib_ConnectedComponent_) {\n      return;\n    }\n    this.f_frameScheduled__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d true;\n    window.requestAnimationFrame(((/** number */ timestamp) \x3d\x3e{\n      this.f_frameScheduled__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d false;\n      this.m_draw___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent();\n    }));\n  }\n  \n  /**\n   * @return {void}\n   * @public\n   */\n  m_draw___$p_com_vertispan_draw_connected_client_lib_ConnectedComponent() {\n    let context \x3d /**@type {CanvasRenderingContext2D} */ ($Casts.$to($Casts.$to(this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.getContext(\"2d\"), j_l_Object), CanvasRenderingContext2D_$Overlay));\n    let size \x3d this.f_canvasWrapper__com_vertispan_draw_connected_client_lib_ConnectedComponent_.getBoundingClientRect();\n    if (size.height !\x3d this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.height || size.width !\x3d this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.width) {\n      this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.height \x3d $Primitives.$narrowDoubleToInt((size.height - 10));\n      this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.width \x3d $Primitives.$narrowDoubleToInt(size.width);\n    }\n    context.clearRect(0, 0, this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.width, this.f_canvas__com_vertispan_draw_connected_client_lib_ConnectedComponent_.height);\n    context.fillStyle \x3d FillStyleUnionType_$Overlay.m_of__java_lang_Object(\"#ffffff\");\n    context.strokeStyle \x3d StrokeStyleUnionType_$Overlay.m_of__java_lang_Object(\"#000000\");\n    context.font \x3d \"14px sans-serif\";\n    this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_forEach__java_util_function_Consumer(Consumer.$adapt(((/** * */ line) \x3d\x3e{\n      let start \x3d this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.get(this.f_startFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(line));\n      let startPoint \x3d /**@type {Rect} */ ($Casts.$to(this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(start), Rect)).m_center__();\n      let end \x3d this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.get(this.f_endFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(line));\n      let endPoint \x3d /**@type {Rect} */ ($Casts.$to(this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(end), Rect)).m_center__();\n      context.beginPath();\n      context.moveTo(startPoint.m_getX__(), startPoint.m_getY__());\n      context.lineTo(endPoint.m_getX__(), endPoint.m_getY__());\n      context.stroke();\n    })));\n    if (!$Equality.$same(this.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_, null) \x26\x26 !$Equality.$same(this.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_, null)) {\n      let startPoint$1$ \x3d /**@type {Rect} */ ($Casts.$to(this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(this.f_startingBoxForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_), Rect)).m_center__();\n      context.beginPath();\n      context.moveTo(startPoint$1$.m_getX__(), startPoint$1$.m_getY__());\n      context.lineTo(this.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_getX__(), this.f_currentEndForNewLine__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_getY__());\n      context.stroke();\n    }\n    this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_.values().m_forEach__java_util_function_Consumer(Consumer.$adapt(((/** * */ box) \x3d\x3e{\n      let position \x3d /**@type {Rect} */ ($Casts.$to(this.f_boxPosFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), Rect));\n      context.fillRect(position.m_getX__(), position.m_getY__(), position.m_getW__(), position.m_getH__());\n      context.strokeRect(position.m_getX__(), position.m_getY__(), position.m_getW__(), position.m_getH__());\n      let padding \x3d 10;\n      let fontHeight \x3d 14;\n      let lines \x3d j_l_String.m_split__java_lang_String__java_lang_String(/**@type {?string} */ ($Casts.$to(this.f_boxTextFunct__com_vertispan_draw_connected_client_lib_ConnectedComponent_.m_apply__java_lang_Object(box), j_l_String)), \"\\n\");\n      context.fillStyle \x3d FillStyleUnionType_$Overlay.m_of__java_lang_Object(\"#000000\");\n      for (let lineNo \x3d 0; lineNo \x3c lines.length; lineNo++) {\n        context.fillText(lines[lineNo], padding + position.m_getX__(), fontHeight + padding + position.m_getY__() + fontHeight * lineNo);\n      }\n      context.fillStyle \x3d FillStyleUnionType_$Overlay.m_of__java_lang_Object(\"#ffffff\");\n    })));\n  }\n  \n  /**\n   * @return {void}\n   * @private\n   */\n  $init__com_vertispan_draw_connected_client_lib_ConnectedComponent() {\n    this.f_handlerManager__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d SimpleEventBus.$create__();\n    this.f_boxes__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d /**@type {!LinkedHashMap\x3c?string, C_B\x3e} */ (LinkedHashMap.$create__());\n    this.f_lines__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d /**@type {!LinkedHashSet\x3cC_L\x3e} */ (LinkedHashSet.$create__());\n    this.f_dragTracker__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d DragTracker.$create__();\n    this.f_frameScheduled__com_vertispan_draw_connected_client_lib_ConnectedComponent_ \x3d false;\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof ConnectedComponent;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, ConnectedComponent);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    ConnectedComponent.$clinit \x3d function() {};\n    SelectionEvent \x3d goog.module.get('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\n    StyleInjector \x3d goog.module.get('com.vertispan.draw.connected.client.blank.StyleInjector$impl');\n    $1 \x3d goog.module.get('com.vertispan.draw.connected.client.lib.ConnectedComponent.$1$impl');\n    $2 \x3d goog.module.get('com.vertispan.draw.connected.client.lib.ConnectedComponent.$2$impl');\n    $3 \x3d goog.module.get('com.vertispan.draw.connected.client.lib.ConnectedComponent.$3$impl');\n    $LambdaAdaptor$3 \x3d goog.module.get('com.vertispan.draw.connected.client.lib.ConnectedComponent.$LambdaAdaptor$3$impl');\n    DrawMode \x3d goog.module.get('com.vertispan.draw.connected.client.lib.ConnectedComponent.DrawMode$impl');\n    DragTracker \x3d goog.module.get('com.vertispan.draw.connected.client.lib.DragTracker$impl');\n    Point \x3d goog.module.get('com.vertispan.draw.connected.client.lib.Point$impl');\n    Rect \x3d goog.module.get('com.vertispan.draw.connected.client.lib.Rect$impl');\n    CanvasRenderingContext2D_$Overlay \x3d goog.module.get('elemental2.dom.CanvasRenderingContext2D.$Overlay$impl');\n    FillStyleUnionType_$Overlay \x3d goog.module.get('elemental2.dom.CanvasRenderingContext2D.FillStyleUnionType.$Overlay$impl');\n    StrokeStyleUnionType_$Overlay \x3d goog.module.get('elemental2.dom.CanvasRenderingContext2D.StrokeStyleUnionType.$Overlay$impl');\n    $Overlay \x3d goog.module.get('elemental2.dom.DomGlobal.$Overlay$impl');\n    Element_$Overlay \x3d goog.module.get('elemental2.dom.Element.$Overlay$impl');\n    HTMLButtonElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLButtonElement.$Overlay$impl');\n    HTMLCanvasElement_$Overlay \x3d goog.module.get('elemental2.dom.HTMLCanvasElement.$Overlay$impl');\n    MouseEvent_$Overlay \x3d goog.module.get('elemental2.dom.MouseEvent.$Overlay$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    ArrayList \x3d goog.module.get('java.util.ArrayList$impl');\n    LinkedHashMap \x3d goog.module.get('java.util.LinkedHashMap$impl');\n    LinkedHashSet \x3d goog.module.get('java.util.LinkedHashSet$impl');\n    Consumer \x3d goog.module.get('java.util.function.Consumer$impl');\n    Predicate \x3d goog.module.get('java.util.function.Predicate$impl');\n    JsArrayLike_$Overlay \x3d goog.module.get('jsinterop.base.JsArrayLike.$Overlay$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    SimpleEventBus \x3d goog.module.get('org.gwtproject.event.shared.SimpleEventBus$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    $Primitives \x3d goog.module.get('vmbootstrap.Primitives$impl');\n    j_l_Object.$clinit();\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(ConnectedComponent, $Util.$makeClassName('com.vertispan.draw.connected.client.lib.ConnectedComponent'));\n\n\nHasSelectionHandlers.$markImplementor(ConnectedComponent);\n\n\nexports \x3d ConnectedComponent; \n//# sourceMappingURL\x3dConnectedComponent.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/lib/ConnectedComponent.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.lib.ConnectedComponent.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.lib.ConnectedComponent');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _HasSelectionHandlers \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.HasSelectionHandlers');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _SelectionEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent');\nconst _SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler');\nconst _StyleInjector \x3d goog.require('com.vertispan.draw.connected.client.blank.StyleInjector');\nconst _$1 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$1');\nconst _$2 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$2');\nconst _$3 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$3');\nconst _$LambdaAdaptor$3 \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.$LambdaAdaptor$3');\nconst _DrawMode \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent.DrawMode');\nconst _DragTracker \x3d goog.require('com.vertispan.draw.connected.client.lib.DragTracker');\nconst _Point \x3d goog.require('com.vertispan.draw.connected.client.lib.Point');\nconst _Rect \x3d goog.require('com.vertispan.draw.connected.client.lib.Rect');\nconst _CanvasRenderingContext2D_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.$Overlay');\nconst _FillStyleUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.FillStyleUnionType.$Overlay');\nconst _StrokeStyleUnionType_$Overlay \x3d goog.require('elemental2.dom.CanvasRenderingContext2D.StrokeStyleUnionType.$Overlay');\nconst _$Overlay \x3d goog.require('elemental2.dom.DomGlobal.$Overlay');\nconst _Element_$Overlay \x3d goog.require('elemental2.dom.Element.$Overlay');\nconst _Event_$Overlay \x3d goog.require('elemental2.dom.Event.$Overlay');\nconst _HTMLButtonElement_$Overlay \x3d goog.require('elemental2.dom.HTMLButtonElement.$Overlay');\nconst _HTMLCanvasElement_$Overlay \x3d goog.require('elemental2.dom.HTMLCanvasElement.$Overlay');\nconst _MouseEvent_$Overlay \x3d goog.require('elemental2.dom.MouseEvent.$Overlay');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _ArrayList \x3d goog.require('java.util.ArrayList');\nconst _LinkedHashMap \x3d goog.require('java.util.LinkedHashMap');\nconst _LinkedHashSet \x3d goog.require('java.util.LinkedHashSet');\nconst _List \x3d goog.require('java.util.List');\nconst _Map \x3d goog.require('java.util.Map');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _Consumer \x3d goog.require('java.util.function.Consumer');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _Predicate \x3d goog.require('java.util.function.Predicate');\nconst _JsArrayLike_$Overlay \x3d goog.require('jsinterop.base.JsArrayLike.$Overlay');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _EventBus \x3d goog.require('org.gwtproject.event.shared.EventBus');\nconst _HandlerRegistration \x3d goog.require('org.gwtproject.event.shared.HandlerRegistration');\nconst _SimpleEventBus \x3d goog.require('org.gwtproject.event.shared.SimpleEventBus');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\nconst _$Primitives \x3d goog.require('vmbootstrap.Primitives');\n\n\n// Re-exports the implementation.\nvar ConnectedComponent \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\nexports \x3d ConnectedComponent;\n ");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/FlowChartEntryPoint.impl.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.FlowChartEntryPoint.\n *\n * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}\n */\ngoog.module('com.vertispan.draw.connected.client.FlowChartEntryPoint$impl');\n\n\nconst EntryPoint \x3d goog.require('com.google.gwt.core.client.EntryPoint$impl');\nconst j_l_Object \x3d goog.require('java.lang.Object$impl');\nconst $Util \x3d goog.require('nativebootstrap.Util$impl');\n\nlet DateTimeFormat \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.DateTimeFormat$impl');\nlet PredefinedFormat \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat$impl');\nlet SelectionEvent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent$impl');\nlet SelectionHandler \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\nlet IsParentRelationship \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.data.IsParentRelationship$impl');\nlet Person \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.data.Person$impl');\nlet ConnectedComponent \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\nlet Point \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Point$impl');\nlet Rect \x3d goog.forwardDeclare('com.vertispan.draw.connected.client.lib.Rect$impl');\nlet $Overlay \x3d goog.forwardDeclare('elemental2.dom.DomGlobal.$Overlay$impl');\nlet j_l_String \x3d goog.forwardDeclare('java.lang.String$impl');\nlet Date \x3d goog.forwardDeclare('java.util.Date$impl');\nlet BiConsumer \x3d goog.forwardDeclare('java.util.function.BiConsumer$impl');\nlet BiFunction \x3d goog.forwardDeclare('java.util.function.BiFunction$impl');\nlet j_u_function_Function \x3d goog.forwardDeclare('java.util.function.Function$impl');\nlet $Equality \x3d goog.forwardDeclare('nativebootstrap.Equality$impl');\nlet $Casts \x3d goog.forwardDeclare('vmbootstrap.Casts$impl');\n\n\n/**\n * @implements {EntryPoint}\n  */\nclass FlowChartEntryPoint extends j_l_Object {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n  }\n  \n  /**\n   * Factory method corresponding to constructor 'FlowChartEntryPoint()'.\n   * @return {!FlowChartEntryPoint}\n   * @public\n   */\n  static $create__() {\n    FlowChartEntryPoint.$clinit();\n    let $instance \x3d new FlowChartEntryPoint();\n    $instance.$ctor__com_vertispan_draw_connected_client_FlowChartEntryPoint__();\n    return $instance;\n  }\n  \n  /**\n   * Initialization from constructor 'FlowChartEntryPoint()'.\n   * @return {void}\n   * @public\n   */\n  $ctor__com_vertispan_draw_connected_client_FlowChartEntryPoint__() {\n    this.$ctor__java_lang_Object__();\n  }\n  \n  /**\n   * @return {?string}\n   * @public\n   */\n  static m_nextId___$p_com_vertispan_draw_connected_client_FlowChartEntryPoint() {\n    FlowChartEntryPoint.$clinit();\n    return \"\" + (++FlowChartEntryPoint.$f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_);\n  }\n  \n  /**\n   * @override\n   * @return {void}\n   * @public\n   */\n  m_onModuleLoad__() {\n    let boxesAndLines \x3d /**@type {!ConnectedComponent\x3cPerson, IsParentRelationship\x3e} */ (ConnectedComponent.$create__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_Function__java_util_function_BiConsumer__java_util_function_Function__java_util_function_Function__java_util_function_BiFunction(j_u_function_Function.$adapt(((/** Person */ arg0) \x3d\x3e{\n      return arg0.m_getId__();\n    })), j_u_function_Function.$adapt(((/** Person */ person) \x3d\x3e{\n      return Rect.$create__double__double__double__double(person.m_getPos__().m_getX__(), person.m_getPos__().m_getY__(), 200, 150);\n    })), j_u_function_Function.$adapt(((/** Rect */ rect) \x3d\x3e{\n      let person$1$ \x3d Person.$create__();\n      person$1$.m_setId__java_lang_String(FlowChartEntryPoint.m_nextId___$p_com_vertispan_draw_connected_client_FlowChartEntryPoint());\n      person$1$.m_setPos__com_vertispan_draw_connected_client_lib_Point(rect.m_center__());\n      return person$1$;\n    })), j_u_function_Function.$adapt(((/** Person */ person$2$) \x3d\x3e{\n      return j_l_String.m_valueOf__java_lang_Object(person$2$.m_getName__()) + \"\\n\\n\" + j_l_String.m_valueOf__java_lang_Object(FlowChartEntryPoint.$f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_.m_format__java_util_Date(person$2$.m_getBirthday__())) + \" \\n   in \" + j_l_String.m_valueOf__java_lang_Object(person$2$.m_getBirthplace__());\n    })), BiConsumer.$adapt(((/** Person */ person$3$, /** Rect */ rect$1$) \x3d\x3e{\n      person$3$.m_setPos__com_vertispan_draw_connected_client_lib_Point(rect$1$.m_getTopLeft__());\n    })), j_u_function_Function.$adapt(((/** IsParentRelationship */ arg0$1$) \x3d\x3e{\n      return arg0$1$.m_getChildId__();\n    })), j_u_function_Function.$adapt(((/** IsParentRelationship */ arg0$2$) \x3d\x3e{\n      return arg0$2$.m_getParentId__();\n    })), BiFunction.$adapt(((/** Person */ p1, /** Person */ p2) \x3d\x3e{\n      return IsParentRelationship.$create__java_lang_String__java_lang_String(p1.m_getId__(), p2.m_getId__());\n    }))));\n    boxesAndLines.m_addSelectionHandler__com_vertispan_draw_connected_client_blank_SelectionEvent_SelectionHandler(SelectionHandler.$adapt(((/** SelectionEvent\x3cPerson\x3e */ event) \x3d\x3e{\n      let person$4$ \x3d /**@type {Person} */ ($Casts.$to(event.m_getSelectedItem__(), Person));\n      if ($Equality.$same(person$4$.m_getBirthday__(), null)) {\n        person$4$.m_setBirthday__java_util_Date(Date.$create__());\n      }\n      let newName \x3d window.prompt(\"change name?\", person$4$.m_getName__());\n      person$4$.m_setName__java_lang_String(newName);\n      boxesAndLines.m_updateBox__java_lang_Object(person$4$);\n    })));\n    let colin \x3d Person.$create__();\n    colin.m_setId__java_lang_String(FlowChartEntryPoint.m_nextId___$p_com_vertispan_draw_connected_client_FlowChartEntryPoint());\n    colin.m_setBirthday__java_util_Date(Date.$create__int__int__int(85, 3, 26));\n    colin.m_setName__java_lang_String(\"Colin\");\n    colin.m_setBirthplace__java_lang_String(\"Annapolis, MD\");\n    colin.m_setSex__java_lang_String(\"M\");\n    colin.m_setPos__com_vertispan_draw_connected_client_lib_Point(Point.$create__double__double(10, 10));\n    boxesAndLines.m_addBox__java_lang_Object(colin);\n    let karen \x3d Person.$create__();\n    karen.m_setId__java_lang_String(FlowChartEntryPoint.m_nextId___$p_com_vertispan_draw_connected_client_FlowChartEntryPoint());\n    karen.m_setBirthday__java_util_Date(Date.$create__int__int__int(84, 4, 13));\n    karen.m_setName__java_lang_String(\"Karen\");\n    karen.m_setBirthplace__java_lang_String(\"Pontiac, MI\");\n    karen.m_setSex__java_lang_String(\"F\");\n    karen.m_setPos__com_vertispan_draw_connected_client_lib_Point(Point.$create__double__double(300, 10));\n    boxesAndLines.m_addBox__java_lang_Object(karen);\n    let abigail \x3d Person.$create__();\n    abigail.m_setId__java_lang_String(FlowChartEntryPoint.m_nextId___$p_com_vertispan_draw_connected_client_FlowChartEntryPoint());\n    abigail.m_setBirthday__java_util_Date(Date.$create__int__int__int(116, 8, 24));\n    abigail.m_setBirthplace__java_lang_String(\"Maple Grove, MN\");\n    abigail.m_setName__java_lang_String(\"Abigail\");\n    abigail.m_setSex__java_lang_String(\"F\");\n    abigail.m_setPos__com_vertispan_draw_connected_client_lib_Point(Point.$create__double__double(150, 200));\n    boxesAndLines.m_addBox__java_lang_Object(abigail);\n    boxesAndLines.m_addLine__java_lang_Object(IsParentRelationship.$create__java_lang_String__java_lang_String(abigail.m_getId__(), colin.m_getId__()));\n    boxesAndLines.m_addLine__java_lang_Object(IsParentRelationship.$create__java_lang_String__java_lang_String(abigail.m_getId__(), karen.m_getId__()));\n    $Overlay.f_document__elemental2_dom_DomGlobal_$Overlay.body.appendChild(boxesAndLines.m_getElement__());\n  }\n  \n  /**\n   * @return {number}\n   * @public\n   */\n  static get f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_() {\n    return (FlowChartEntryPoint.$clinit(), FlowChartEntryPoint.$f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_);\n  }\n  \n  /**\n   * @param {number} value\n   * @return {void}\n   * @public\n   */\n  static set f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_(value) {\n    (FlowChartEntryPoint.$clinit(), FlowChartEntryPoint.$f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_ \x3d value);\n  }\n  \n  /**\n   * @return {DateTimeFormat}\n   * @public\n   */\n  static get f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_() {\n    return (FlowChartEntryPoint.$clinit(), FlowChartEntryPoint.$f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_);\n  }\n  \n  /**\n   * @param {DateTimeFormat} value\n   * @return {void}\n   * @public\n   */\n  static set f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_(value) {\n    (FlowChartEntryPoint.$clinit(), FlowChartEntryPoint.$f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_ \x3d value);\n  }\n  \n  /**\n   * @param {?} instance\n   * @return {boolean}\n   * @public\n   */\n  static $isInstance(instance) {\n    return instance instanceof FlowChartEntryPoint;\n  }\n  \n  /**\n   * @param {Function} classConstructor\n   * @return {boolean}\n   * @public\n   */\n  static $isAssignableFrom(classConstructor) {\n    return $Util.$canCastClass(classConstructor, FlowChartEntryPoint);\n  }\n  \n  /**\n   * @public\n   */\n  static $clinit() {\n    FlowChartEntryPoint.$clinit \x3d function() {};\n    DateTimeFormat \x3d goog.module.get('com.vertispan.draw.connected.client.blank.DateTimeFormat$impl');\n    PredefinedFormat \x3d goog.module.get('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat$impl');\n    SelectionHandler \x3d goog.module.get('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler$impl');\n    IsParentRelationship \x3d goog.module.get('com.vertispan.draw.connected.client.data.IsParentRelationship$impl');\n    Person \x3d goog.module.get('com.vertispan.draw.connected.client.data.Person$impl');\n    ConnectedComponent \x3d goog.module.get('com.vertispan.draw.connected.client.lib.ConnectedComponent$impl');\n    Point \x3d goog.module.get('com.vertispan.draw.connected.client.lib.Point$impl');\n    Rect \x3d goog.module.get('com.vertispan.draw.connected.client.lib.Rect$impl');\n    $Overlay \x3d goog.module.get('elemental2.dom.DomGlobal.$Overlay$impl');\n    j_l_String \x3d goog.module.get('java.lang.String$impl');\n    Date \x3d goog.module.get('java.util.Date$impl');\n    BiConsumer \x3d goog.module.get('java.util.function.BiConsumer$impl');\n    BiFunction \x3d goog.module.get('java.util.function.BiFunction$impl');\n    j_u_function_Function \x3d goog.module.get('java.util.function.Function$impl');\n    $Equality \x3d goog.module.get('nativebootstrap.Equality$impl');\n    $Casts \x3d goog.module.get('vmbootstrap.Casts$impl');\n    j_l_Object.$clinit();\n    FlowChartEntryPoint.$f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_ \x3d 0;\n    FlowChartEntryPoint.$f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_ \x3d DateTimeFormat.m_getFormat__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat(PredefinedFormat.f_DATE_SHORT__com_vertispan_draw_connected_client_blank_DateTimeFormat_PredefinedFormat);\n  }\n  \n  \n};\n\n$Util.$setClassMetadata(FlowChartEntryPoint, $Util.$makeClassName('com.vertispan.draw.connected.client.FlowChartEntryPoint'));\n\n\n/** @private {number} */\nFlowChartEntryPoint.$f_nextId__com_vertispan_draw_connected_client_FlowChartEntryPoint_ \x3d 0;\n\n\n/** @private {DateTimeFormat} */\nFlowChartEntryPoint.$f_format__com_vertispan_draw_connected_client_FlowChartEntryPoint_;\n\n\nEntryPoint.$markImplementor(FlowChartEntryPoint);\n\n\n/* NATIVE.JS EPILOG */\n\nconst com_vertispan_draw_connected_client_FlowChartEntryPoint \x3d FlowChartEntryPoint;\n\n/*\n * #%L
 * Connected\n *
 * %%
 * Copyright (C) 2017 Vertispan\n *
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%\n */\n\n// Defer this command, since this will be folded into the FlowChartEntryPoint js impl,\n// and if it runs right away, will not have its dependencies resolved yet (at least while\n// running in BUNDLE).\nsetTimeout(function(){\n  // Call the java \"constructor\" method, `new` will only work if it is a @JsType, or maybe\n  // once optimized. Without this, in BUNDLE mode, `new` doesn't include the clinit, so\n  // static imports haven't been resolved yet.\n  var ep \x3d FlowChartEntryPoint.$create__();\n  // Invoke onModuleLoad to start the app.\n  ep.m_onModuleLoad__()\n}, 0);\n\n\n\nexports \x3d FlowChartEntryPoint; \n//# sourceMappingURL\x3dFlowChartEntryPoint.js.map");

///home/gcardosi/Developing/git/J2CL/NILOC/connected/target/js-sources/com/vertispan/draw/connected/client/FlowChartEntryPoint.java.js
goog.loadModule("'use strict'"+"/**\n * @fileoverview transpiled from com.vertispan.draw.connected.client.FlowChartEntryPoint.\n *\n * @suppress {extraRequire, lateProvide, unusedLocalVariables}\n */\ngoog.module('com.vertispan.draw.connected.client.FlowChartEntryPoint');\n\n\n// Imports headers for both eager and lazy dependencies to ensure that\n// all files are included in the dependency tree.\nconst _EntryPoint \x3d goog.require('com.google.gwt.core.client.EntryPoint');\nconst _j_l_Object \x3d goog.require('java.lang.Object');\nconst _$Util \x3d goog.require('nativebootstrap.Util');\nconst _DateTimeFormat \x3d goog.require('com.vertispan.draw.connected.client.blank.DateTimeFormat');\nconst _PredefinedFormat \x3d goog.require('com.vertispan.draw.connected.client.blank.DateTimeFormat.PredefinedFormat');\nconst _SelectionEvent \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent');\nconst _SelectionHandler \x3d goog.require('com.vertispan.draw.connected.client.blank.SelectionEvent.SelectionHandler');\nconst _IsParentRelationship \x3d goog.require('com.vertispan.draw.connected.client.data.IsParentRelationship');\nconst _Person \x3d goog.require('com.vertispan.draw.connected.client.data.Person');\nconst _ConnectedComponent \x3d goog.require('com.vertispan.draw.connected.client.lib.ConnectedComponent');\nconst _Point \x3d goog.require('com.vertispan.draw.connected.client.lib.Point');\nconst _Rect \x3d goog.require('com.vertispan.draw.connected.client.lib.Rect');\nconst _$Overlay \x3d goog.require('elemental2.dom.DomGlobal.$Overlay');\nconst _j_l_String \x3d goog.require('java.lang.String');\nconst _Date \x3d goog.require('java.util.Date');\nconst _BiConsumer \x3d goog.require('java.util.function.BiConsumer');\nconst _BiFunction \x3d goog.require('java.util.function.BiFunction');\nconst _j_u_function_Function \x3d goog.require('java.util.function.Function');\nconst _$Equality \x3d goog.require('nativebootstrap.Equality');\nconst _$Casts \x3d goog.require('vmbootstrap.Casts');\n\n\n// Re-exports the implementation.\nvar FlowChartEntryPoint \x3d goog.require('com.vertispan.draw.connected.client.FlowChartEntryPoint$impl');\nexports \x3d FlowChartEntryPoint;\n ");

